
99.ELEVATOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d49c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800d640  0800d640  0001d640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dce4  0800dce4  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dce4  0800dce4  0001dce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dcec  0800dcec  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcec  0800dcec  0001dcec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcf0  0800dcf0  0001dcf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0800dcf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005000  2000022c  0800df20  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000522c  0800df20  0002522c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bd59  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059d2  00000000  00000000  0004bfb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc0  00000000  00000000  00051988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b00  00000000  00000000  00053648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001adc9  00000000  00000000  00055148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e91  00000000  00000000  0006ff11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dbdb  00000000  00000000  00092da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013097d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000890c  00000000  00000000  001309d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000022c 	.word	0x2000022c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d624 	.word	0x0800d624

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000230 	.word	0x20000230
 80001dc:	0800d624 	.word	0x0800d624

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <get_button>:
		HAL_GPIO_TogglePin( GPIOA, GPIO_PIN_5 );
	}
}

int get_button( GPIO_TypeDef *GPIO, int GPIO_Pin, int button_num)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE};
	// 	지역 변수에 static을 쓰면 전역 변수처럼 함수를 빠져 나갔다 다시 들어 와도 값을 유지 한다.
	int currtn_state;

	currtn_state = HAL_GPIO_ReadPin(GPIO, GPIO_Pin);   // 버튼을 읽는다.
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f003 fb4a 	bl	800455c <HAL_GPIO_ReadPin>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	617b      	str	r3, [r7, #20]
	if (currtn_state == BUTTON_PRESS && button_status[button_num] == BUTTON_RELEASE)  // 버튼이 처음 눌려진 noise high
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10f      	bne.n	8000ef2 <get_button+0x42>
 8000ed2:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <get_button+0x74>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d109      	bne.n	8000ef2 <get_button+0x42>
	{
		HAL_Delay(60);   // noise가 지나가기를 기다린다.
 8000ede:	203c      	movs	r0, #60	; 0x3c
 8000ee0:	f002 fd2c 	bl	800393c <HAL_Delay>
		button_status[button_num] = BUTTON_PRESS;   // noise가 지나간 상태의 High 상태
 8000ee4:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <get_button+0x74>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
		return BUTTON_RELEASE;   // 아직은 완전히 눌렸다 떼어진 상태가 아니다.
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e013      	b.n	8000f1a <get_button+0x6a>
	}
	else if (currtn_state== BUTTON_RELEASE && button_status[button_num] == BUTTON_PRESS)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d10f      	bne.n	8000f18 <get_button+0x68>
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <get_button+0x74>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d109      	bne.n	8000f18 <get_button+0x68>
	{
		HAL_Delay(60);
 8000f04:	203c      	movs	r0, #60	; 0x3c
 8000f06:	f002 fd19 	bl	800393c <HAL_Delay>
		button_status[button_num] = BUTTON_RELEASE;   // 다음 버튼 체크를 위해서 초기화
 8000f0a:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <get_button+0x74>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4413      	add	r3, r2
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
		return BUTTON_PRESS;   // 완전히 1번 눌렸다 떼어진 상태로 인정
 8000f14:	2300      	movs	r3, #0
 8000f16:	e000      	b.n	8000f1a <get_button+0x6a>
	}

	return BUTTON_RELEASE;   // 버튼이 open상태
 8000f18:	2301      	movs	r3, #1
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000000 	.word	0x20000000

08000f28 <noTone>:
};

 unsigned int duration[] = {1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2};

void noTone()
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
     htim3.Instance->CCR1=0;
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <noTone+0x18>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2200      	movs	r2, #0
 8000f32:	635a      	str	r2, [r3, #52]	; 0x34
     HAL_Delay(50);
 8000f34:	2032      	movs	r0, #50	; 0x32
 8000f36:	f002 fd01 	bl	800393c <HAL_Delay>
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20004d18 	.word	0x20004d18

08000f44 <set_buzzer>:

void set_buzzer(int frequency)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	int divide_freq = 1600000; // 4KHZ 부저 주파수를 내기 위해 기본 클럭을 분주해서 얻은 주파수
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <set_buzzer+0x4c>)
 8000f4e:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_AUTORELOAD(&htim3, divide_freq / frequency); // PWM
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	fb92 f2f3 	sdiv	r2, r2, r3
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <set_buzzer+0x50>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <set_buzzer+0x50>)
 8000f6a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, divide_freq / frequency / 2);  // Duty를 50%로 설정 한다.
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f74:	0fda      	lsrs	r2, r3, #31
 8000f76:	4413      	add	r3, r2
 8000f78:	105b      	asrs	r3, r3, #1
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <set_buzzer+0x50>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	00186a00 	.word	0x00186a00
 8000f94:	20004d18 	.word	0x20004d18

08000f98 <beep>:
//    beep_recursive(repeat);
//    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
//}

void beep(int repeat)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <beep+0x50>)
 8000fa4:	f004 fd18 	bl	80059d8 <HAL_TIM_PWM_Start>

    for (int i=0; i < repeat; i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	e00f      	b.n	8000fce <beep+0x36>
    {
    	set_buzzer(2000);   // 2KHZ
 8000fae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fb2:	f7ff ffc7 	bl	8000f44 <set_buzzer>
    	osDelay(500);
 8000fb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fba:	f006 fd11 	bl	80079e0 <osDelay>
    	// beep stop
    	noTone();
 8000fbe:	f7ff ffb3 	bl	8000f28 <noTone>
       	osDelay(200);
 8000fc2:	20c8      	movs	r0, #200	; 0xc8
 8000fc4:	f006 fd0c 	bl	80079e0 <osDelay>
    for (int i=0; i < repeat; i++)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	dbeb      	blt.n	8000fae <beep+0x16>
    }
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <beep+0x50>)
 8000fda:	f004 fdad 	bl	8005b38 <HAL_TIM_PWM_Stop>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20004d18 	.word	0x20004d18

08000fec <dotmatrix_main_test>:
};

uint8_t col[4]={0,0,0,0};

void dotmatrix_main_test()
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
   uint8_t temp;
   static int i = 0;
   col[1] = start[i];
 8000ff2:	4b4b      	ldr	r3, [pc, #300]	; (8001120 <dotmatrix_main_test+0x134>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a4b      	ldr	r2, [pc, #300]	; (8001124 <dotmatrix_main_test+0x138>)
 8000ff8:	5cd2      	ldrb	r2, [r2, r3]
 8000ffa:	4b4b      	ldr	r3, [pc, #300]	; (8001128 <dotmatrix_main_test+0x13c>)
 8000ffc:	705a      	strb	r2, [r3, #1]

  col[0] = ~(1 << i);  // 00000001  --> 11111110
 8000ffe:	4b48      	ldr	r3, [pc, #288]	; (8001120 <dotmatrix_main_test+0x134>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2201      	movs	r2, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4b46      	ldr	r3, [pc, #280]	; (8001128 <dotmatrix_main_test+0x13c>)
 8001010:	701a      	strb	r2, [r3, #0]
  if (dot_number == 1)
 8001012:	4b46      	ldr	r3, [pc, #280]	; (800112c <dotmatrix_main_test+0x140>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b01      	cmp	r3, #1
 800101a:	d106      	bne.n	800102a <dotmatrix_main_test+0x3e>
    col[1] = one[i];
 800101c:	4b40      	ldr	r3, [pc, #256]	; (8001120 <dotmatrix_main_test+0x134>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a43      	ldr	r2, [pc, #268]	; (8001130 <dotmatrix_main_test+0x144>)
 8001022:	5cd2      	ldrb	r2, [r2, r3]
 8001024:	4b40      	ldr	r3, [pc, #256]	; (8001128 <dotmatrix_main_test+0x13c>)
 8001026:	705a      	strb	r2, [r3, #1]
 8001028:	e022      	b.n	8001070 <dotmatrix_main_test+0x84>
  else if(dot_number == 2)
 800102a:	4b40      	ldr	r3, [pc, #256]	; (800112c <dotmatrix_main_test+0x140>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d106      	bne.n	8001042 <dotmatrix_main_test+0x56>
    col[1] = two[i];
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <dotmatrix_main_test+0x134>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a3e      	ldr	r2, [pc, #248]	; (8001134 <dotmatrix_main_test+0x148>)
 800103a:	5cd2      	ldrb	r2, [r2, r3]
 800103c:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <dotmatrix_main_test+0x13c>)
 800103e:	705a      	strb	r2, [r3, #1]
 8001040:	e016      	b.n	8001070 <dotmatrix_main_test+0x84>
  else if(dot_number == 3)
 8001042:	4b3a      	ldr	r3, [pc, #232]	; (800112c <dotmatrix_main_test+0x140>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b03      	cmp	r3, #3
 800104a:	d106      	bne.n	800105a <dotmatrix_main_test+0x6e>
    col[1] = three[i];
 800104c:	4b34      	ldr	r3, [pc, #208]	; (8001120 <dotmatrix_main_test+0x134>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a39      	ldr	r2, [pc, #228]	; (8001138 <dotmatrix_main_test+0x14c>)
 8001052:	5cd2      	ldrb	r2, [r2, r3]
 8001054:	4b34      	ldr	r3, [pc, #208]	; (8001128 <dotmatrix_main_test+0x13c>)
 8001056:	705a      	strb	r2, [r3, #1]
 8001058:	e00a      	b.n	8001070 <dotmatrix_main_test+0x84>
  else if(dot_number == 4)
 800105a:	4b34      	ldr	r3, [pc, #208]	; (800112c <dotmatrix_main_test+0x140>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b04      	cmp	r3, #4
 8001062:	d105      	bne.n	8001070 <dotmatrix_main_test+0x84>
      col[1] = four[i];
 8001064:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <dotmatrix_main_test+0x134>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a34      	ldr	r2, [pc, #208]	; (800113c <dotmatrix_main_test+0x150>)
 800106a:	5cd2      	ldrb	r2, [r2, r3]
 800106c:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <dotmatrix_main_test+0x13c>)
 800106e:	705a      	strb	r2, [r3, #1]
    // HAL_SPI_Transmit(&hspi2, col, 2, 1);
  for (int j = 0; j < 2; j++)
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	e031      	b.n	80010da <dotmatrix_main_test+0xee>
  {
     for (int k = 0; k < 8; k++)
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	e028      	b.n	80010ce <dotmatrix_main_test+0xe2>
     {
        temp = col[j];
 800107c:	4a2a      	ldr	r2, [pc, #168]	; (8001128 <dotmatrix_main_test+0x13c>)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4413      	add	r3, r2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	71fb      	strb	r3, [r7, #7]
        if (temp & (1 << k))
 8001086:	79fa      	ldrb	r2, [r7, #7]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	fa42 f303 	asr.w	r3, r2, r3
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d006      	beq.n	80010a4 <dotmatrix_main_test+0xb8>
        {
           HAL_GPIO_WritePin(GPIOB, SER_74HC595_Pin, 1);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109c:	4828      	ldr	r0, [pc, #160]	; (8001140 <dotmatrix_main_test+0x154>)
 800109e:	f003 fa75 	bl	800458c <HAL_GPIO_WritePin>
 80010a2:	e005      	b.n	80010b0 <dotmatrix_main_test+0xc4>
        }
        else
        {
           HAL_GPIO_WritePin(GPIOB, SER_74HC595_Pin, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010aa:	4825      	ldr	r0, [pc, #148]	; (8001140 <dotmatrix_main_test+0x154>)
 80010ac:	f003 fa6e 	bl	800458c <HAL_GPIO_WritePin>
        }
        HAL_GPIO_WritePin(GPIOB, CLK_74HC595_Pin, 1); // clk을 상승에서
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b6:	4822      	ldr	r0, [pc, #136]	; (8001140 <dotmatrix_main_test+0x154>)
 80010b8:	f003 fa68 	bl	800458c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, CLK_74HC595_Pin, 0); //       하강으로
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c2:	481f      	ldr	r0, [pc, #124]	; (8001140 <dotmatrix_main_test+0x154>)
 80010c4:	f003 fa62 	bl	800458c <HAL_GPIO_WritePin>
     for (int k = 0; k < 8; k++)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	3301      	adds	r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	2b07      	cmp	r3, #7
 80010d2:	ddd3      	ble.n	800107c <dotmatrix_main_test+0x90>
  for (int j = 0; j < 2; j++)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	ddca      	ble.n	8001076 <dotmatrix_main_test+0x8a>
     }
  }
  GPIOB->ODR &= ~GPIO_PIN_13;   // latch핀을 pull-down
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <dotmatrix_main_test+0x154>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	4a16      	ldr	r2, [pc, #88]	; (8001140 <dotmatrix_main_test+0x154>)
 80010e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80010ea:	6153      	str	r3, [r2, #20]
  GPIOB->ODR |= GPIO_PIN_13;   // latch핀을 pull-up
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <dotmatrix_main_test+0x154>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	4a13      	ldr	r2, [pc, #76]	; (8001140 <dotmatrix_main_test+0x154>)
 80010f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010f6:	6153      	str	r3, [r2, #20]

  i++;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <dotmatrix_main_test+0x134>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <dotmatrix_main_test+0x134>)
 8001100:	6013      	str	r3, [r2, #0]
  i %= 8; // 다음 진행할 step  for(i = 0; i < 8; i++)
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <dotmatrix_main_test+0x134>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	425a      	negs	r2, r3
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	f002 0207 	and.w	r2, r2, #7
 8001110:	bf58      	it	pl
 8001112:	4253      	negpl	r3, r2
 8001114:	4a02      	ldr	r2, [pc, #8]	; (8001120 <dotmatrix_main_test+0x134>)
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000250 	.word	0x20000250
 8001124:	20000008 	.word	0x20000008
 8001128:	2000024c 	.word	0x2000024c
 800112c:	20000248 	.word	0x20000248
 8001130:	20000018 	.word	0x20000018
 8001134:	20000020 	.word	0x20000020
 8001138:	20000028 	.word	0x20000028
 800113c:	20000030 	.word	0x20000030
 8001140:	40020400 	.word	0x40020400

08001144 <dotmatrix_main_test2>:

void dotmatrix_main_test2()
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
   uint8_t temp;
   static int i = 0;
   col[1] = select[i];
 800114a:	4b4b      	ldr	r3, [pc, #300]	; (8001278 <dotmatrix_main_test2+0x134>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a4b      	ldr	r2, [pc, #300]	; (800127c <dotmatrix_main_test2+0x138>)
 8001150:	5cd2      	ldrb	r2, [r2, r3]
 8001152:	4b4b      	ldr	r3, [pc, #300]	; (8001280 <dotmatrix_main_test2+0x13c>)
 8001154:	705a      	strb	r2, [r3, #1]

  col[0] = ~(1 << i);  // 00000001  --> 11111110
 8001156:	4b48      	ldr	r3, [pc, #288]	; (8001278 <dotmatrix_main_test2+0x134>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2201      	movs	r2, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b46      	ldr	r3, [pc, #280]	; (8001280 <dotmatrix_main_test2+0x13c>)
 8001168:	701a      	strb	r2, [r3, #0]
  if (dot_number == 1)
 800116a:	4b46      	ldr	r3, [pc, #280]	; (8001284 <dotmatrix_main_test2+0x140>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b01      	cmp	r3, #1
 8001172:	d106      	bne.n	8001182 <dotmatrix_main_test2+0x3e>
    col[1] = one[i];
 8001174:	4b40      	ldr	r3, [pc, #256]	; (8001278 <dotmatrix_main_test2+0x134>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a43      	ldr	r2, [pc, #268]	; (8001288 <dotmatrix_main_test2+0x144>)
 800117a:	5cd2      	ldrb	r2, [r2, r3]
 800117c:	4b40      	ldr	r3, [pc, #256]	; (8001280 <dotmatrix_main_test2+0x13c>)
 800117e:	705a      	strb	r2, [r3, #1]
 8001180:	e022      	b.n	80011c8 <dotmatrix_main_test2+0x84>
  else if(dot_number == 2)
 8001182:	4b40      	ldr	r3, [pc, #256]	; (8001284 <dotmatrix_main_test2+0x140>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d106      	bne.n	800119a <dotmatrix_main_test2+0x56>
    col[1] = two[i];
 800118c:	4b3a      	ldr	r3, [pc, #232]	; (8001278 <dotmatrix_main_test2+0x134>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a3e      	ldr	r2, [pc, #248]	; (800128c <dotmatrix_main_test2+0x148>)
 8001192:	5cd2      	ldrb	r2, [r2, r3]
 8001194:	4b3a      	ldr	r3, [pc, #232]	; (8001280 <dotmatrix_main_test2+0x13c>)
 8001196:	705a      	strb	r2, [r3, #1]
 8001198:	e016      	b.n	80011c8 <dotmatrix_main_test2+0x84>
  else if(dot_number == 3)
 800119a:	4b3a      	ldr	r3, [pc, #232]	; (8001284 <dotmatrix_main_test2+0x140>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d106      	bne.n	80011b2 <dotmatrix_main_test2+0x6e>
    col[1] = three[i];
 80011a4:	4b34      	ldr	r3, [pc, #208]	; (8001278 <dotmatrix_main_test2+0x134>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a39      	ldr	r2, [pc, #228]	; (8001290 <dotmatrix_main_test2+0x14c>)
 80011aa:	5cd2      	ldrb	r2, [r2, r3]
 80011ac:	4b34      	ldr	r3, [pc, #208]	; (8001280 <dotmatrix_main_test2+0x13c>)
 80011ae:	705a      	strb	r2, [r3, #1]
 80011b0:	e00a      	b.n	80011c8 <dotmatrix_main_test2+0x84>
  else if(dot_number == 4)
 80011b2:	4b34      	ldr	r3, [pc, #208]	; (8001284 <dotmatrix_main_test2+0x140>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d105      	bne.n	80011c8 <dotmatrix_main_test2+0x84>
      col[1] = four[i];
 80011bc:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <dotmatrix_main_test2+0x134>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a34      	ldr	r2, [pc, #208]	; (8001294 <dotmatrix_main_test2+0x150>)
 80011c2:	5cd2      	ldrb	r2, [r2, r3]
 80011c4:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <dotmatrix_main_test2+0x13c>)
 80011c6:	705a      	strb	r2, [r3, #1]
    // HAL_SPI_Transmit(&hspi2, col, 2, 1);
  for (int j = 0; j < 2; j++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	e031      	b.n	8001232 <dotmatrix_main_test2+0xee>
  {
     for (int k = 0; k < 8; k++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	e028      	b.n	8001226 <dotmatrix_main_test2+0xe2>
     {
        temp = col[j];
 80011d4:	4a2a      	ldr	r2, [pc, #168]	; (8001280 <dotmatrix_main_test2+0x13c>)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	71fb      	strb	r3, [r7, #7]
        if (temp & (1 << k))
 80011de:	79fa      	ldrb	r2, [r7, #7]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	fa42 f303 	asr.w	r3, r2, r3
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d006      	beq.n	80011fc <dotmatrix_main_test2+0xb8>
        {
           HAL_GPIO_WritePin(GPIOB, SER_74HC595_Pin, 1);
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f4:	4828      	ldr	r0, [pc, #160]	; (8001298 <dotmatrix_main_test2+0x154>)
 80011f6:	f003 f9c9 	bl	800458c <HAL_GPIO_WritePin>
 80011fa:	e005      	b.n	8001208 <dotmatrix_main_test2+0xc4>
        }
        else
        {
           HAL_GPIO_WritePin(GPIOB, SER_74HC595_Pin, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001202:	4825      	ldr	r0, [pc, #148]	; (8001298 <dotmatrix_main_test2+0x154>)
 8001204:	f003 f9c2 	bl	800458c <HAL_GPIO_WritePin>
        }
        HAL_GPIO_WritePin(GPIOB, CLK_74HC595_Pin, 1); // clk을 상승에서
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800120e:	4822      	ldr	r0, [pc, #136]	; (8001298 <dotmatrix_main_test2+0x154>)
 8001210:	f003 f9bc 	bl	800458c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, CLK_74HC595_Pin, 0); //       하강으로
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800121a:	481f      	ldr	r0, [pc, #124]	; (8001298 <dotmatrix_main_test2+0x154>)
 800121c:	f003 f9b6 	bl	800458c <HAL_GPIO_WritePin>
     for (int k = 0; k < 8; k++)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	3301      	adds	r3, #1
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	2b07      	cmp	r3, #7
 800122a:	ddd3      	ble.n	80011d4 <dotmatrix_main_test2+0x90>
  for (int j = 0; j < 2; j++)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	3301      	adds	r3, #1
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2b01      	cmp	r3, #1
 8001236:	ddca      	ble.n	80011ce <dotmatrix_main_test2+0x8a>
     }
  }
  GPIOB->ODR &= ~GPIO_PIN_13;   // latch핀을 pull-down
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <dotmatrix_main_test2+0x154>)
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	4a16      	ldr	r2, [pc, #88]	; (8001298 <dotmatrix_main_test2+0x154>)
 800123e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001242:	6153      	str	r3, [r2, #20]
  GPIOB->ODR |= GPIO_PIN_13;   // latch핀을 pull-up
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <dotmatrix_main_test2+0x154>)
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	4a13      	ldr	r2, [pc, #76]	; (8001298 <dotmatrix_main_test2+0x154>)
 800124a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800124e:	6153      	str	r3, [r2, #20]

  i++;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <dotmatrix_main_test2+0x134>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <dotmatrix_main_test2+0x134>)
 8001258:	6013      	str	r3, [r2, #0]
  i %= 8; // 다음 진행할 step  for(i = 0; i < 8; i++)
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <dotmatrix_main_test2+0x134>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	425a      	negs	r2, r3
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	f002 0207 	and.w	r2, r2, #7
 8001268:	bf58      	it	pl
 800126a:	4253      	negpl	r3, r2
 800126c:	4a02      	ldr	r2, [pc, #8]	; (8001278 <dotmatrix_main_test2+0x134>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000254 	.word	0x20000254
 800127c:	20000010 	.word	0x20000010
 8001280:	2000024c 	.word	0x2000024c
 8001284:	20000248 	.word	0x20000248
 8001288:	20000018 	.word	0x20000018
 800128c:	20000020 	.word	0x20000020
 8001290:	20000028 	.word	0x20000028
 8001294:	20000030 	.word	0x20000030
 8001298:	40020400 	.word	0x40020400

0800129c <ds1302_main>:
#include <stdlib.h>

t_ds1302 ds1302;

void ds1302_main(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08e      	sub	sp, #56	; 0x38
 80012a0:	af02      	add	r7, sp, #8
	init_date_time();
 80012a2:	f000 fa17 	bl	80016d4 <init_date_time>
	char line1[20], line2[20];
	flash_set_time();
 80012a6:	f000 fb2f 	bl	8001908 <flash_set_time>
	init_gpio_ds1302();
 80012aa:	f000 f9fb 	bl	80016a4 <init_gpio_ds1302>
	init_ds1302();
 80012ae:	f000 f929 	bl	8001504 <init_ds1302>
	i2c_lcd_init();
 80012b2:	f000 fd5d 	bl	8001d70 <i2c_lcd_init>
	int TIM11_sec_counter=0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	//non os
	for(;;)
	{
		read_time_ds1302();
 80012ba:	f000 f849 	bl	8001350 <read_time_ds1302>
		read_date_ds1302();
 80012be:	f000 f863 	bl	8001388 <read_date_ds1302>
		pc_command_processing();
 80012c2:	f002 fa09 	bl	80036d8 <pc_command_processing>
		if(TIM11_1ms_counter > 1000)
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <ds1302_main+0xa4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012ce:	ddf4      	ble.n	80012ba <ds1302_main+0x1e>
		{
			TIM11_1ms_counter = 0;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <ds1302_main+0xa4>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
			// flash_main();
			sprintf(line1,"Date: %4d-%02d-%02d",ds1302.year+2000,ds1302.month,ds1302.date);
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <ds1302_main+0xa8>)
 80012d8:	79db      	ldrb	r3, [r3, #7]
 80012da:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <ds1302_main+0xa8>)
 80012e0:	795b      	ldrb	r3, [r3, #5]
 80012e2:	4619      	mov	r1, r3
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <ds1302_main+0xa8>)
 80012e6:	791b      	ldrb	r3, [r3, #4]
 80012e8:	f107 0018 	add.w	r0, r7, #24
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	460b      	mov	r3, r1
 80012f0:	4915      	ldr	r1, [pc, #84]	; (8001348 <ds1302_main+0xac>)
 80012f2:	f00a f82d 	bl	800b350 <siprintf>
			sprintf(line2,"Time: %2d:%02d:%02d",ds1302.hours,ds1302.minutes,ds1302.seconds);
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <ds1302_main+0xa8>)
 80012f8:	78db      	ldrb	r3, [r3, #3]
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <ds1302_main+0xa8>)
 80012fe:	789b      	ldrb	r3, [r3, #2]
 8001300:	4619      	mov	r1, r3
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <ds1302_main+0xa8>)
 8001304:	785b      	ldrb	r3, [r3, #1]
 8001306:	1d38      	adds	r0, r7, #4
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	460b      	mov	r3, r1
 800130c:	490f      	ldr	r1, [pc, #60]	; (800134c <ds1302_main+0xb0>)
 800130e:	f00a f81f 	bl	800b350 <siprintf>
			move_cursor(0,0);
 8001312:	2100      	movs	r1, #0
 8001314:	2000      	movs	r0, #0
 8001316:	f000 fd59 	bl	8001dcc <move_cursor>
			lcd_string(line1);
 800131a:	f107 0318 	add.w	r3, r7, #24
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fd3f 	bl	8001da2 <lcd_string>
			move_cursor(1,0);
 8001324:	2100      	movs	r1, #0
 8001326:	2001      	movs	r0, #1
 8001328:	f000 fd50 	bl	8001dcc <move_cursor>
			lcd_string(line2);
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fd37 	bl	8001da2 <lcd_string>

			osDelay(1000);
 8001334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001338:	f006 fb52 	bl	80079e0 <osDelay>
		read_time_ds1302();
 800133c:	e7bd      	b.n	80012ba <ds1302_main+0x1e>
 800133e:	bf00      	nop
 8001340:	20000270 	.word	0x20000270
 8001344:	20004c64 	.word	0x20004c64
 8001348:	0800d640 	.word	0x0800d640
 800134c:	0800d654 	.word	0x0800d654

08001350 <read_time_ds1302>:
		}
	}
}

void read_time_ds1302(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	ds1302.seconds = read_ds1302(ADDR_SECONDS);
 8001354:	2080      	movs	r0, #128	; 0x80
 8001356:	f000 f839 	bl	80013cc <read_ds1302>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <read_time_ds1302+0x34>)
 8001360:	705a      	strb	r2, [r3, #1]
	ds1302.minutes = read_ds1302(ADDR_MINUTES);
 8001362:	2082      	movs	r0, #130	; 0x82
 8001364:	f000 f832 	bl	80013cc <read_ds1302>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <read_time_ds1302+0x34>)
 800136e:	709a      	strb	r2, [r3, #2]
	ds1302.hours = read_ds1302(ADDR_HOURS);
 8001370:	2084      	movs	r0, #132	; 0x84
 8001372:	f000 f82b 	bl	80013cc <read_ds1302>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b02      	ldr	r3, [pc, #8]	; (8001384 <read_time_ds1302+0x34>)
 800137c:	70da      	strb	r2, [r3, #3]
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20004c64 	.word	0x20004c64

08001388 <read_date_ds1302>:

void read_date_ds1302(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	ds1302.date = read_ds1302(ADDR_DATE);
 800138c:	2086      	movs	r0, #134	; 0x86
 800138e:	f000 f81d 	bl	80013cc <read_ds1302>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <read_date_ds1302+0x40>)
 8001398:	711a      	strb	r2, [r3, #4]
	ds1302.month = read_ds1302(ADDR_MONTH);
 800139a:	2088      	movs	r0, #136	; 0x88
 800139c:	f000 f816 	bl	80013cc <read_ds1302>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <read_date_ds1302+0x40>)
 80013a6:	715a      	strb	r2, [r3, #5]
	ds1302.dayofweek = read_ds1302(ADDR_DAYOFWEEK);
 80013a8:	208a      	movs	r0, #138	; 0x8a
 80013aa:	f000 f80f 	bl	80013cc <read_ds1302>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <read_date_ds1302+0x40>)
 80013b4:	719a      	strb	r2, [r3, #6]
	ds1302.year = read_ds1302(ADDR_YEAR);
 80013b6:	208c      	movs	r0, #140	; 0x8c
 80013b8:	f000 f808 	bl	80013cc <read_ds1302>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	4b01      	ldr	r3, [pc, #4]	; (80013c8 <read_date_ds1302+0x40>)
 80013c2:	71da      	strb	r2, [r3, #7]
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20004c64 	.word	0x20004c64

080013cc <read_ds1302>:

uint8_t read_ds1302(uint8_t addr)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
	unsigned char data8bits = 0;	// 1bits 씩 넘어온 것을 담을 그릇 (변수)
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
	// 1. CE high
	HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 1);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013e0:	480e      	ldr	r0, [pc, #56]	; (800141c <read_ds1302+0x50>)
 80013e2:	f003 f8d3 	bl	800458c <HAL_GPIO_WritePin>
	// 2. send addr
	tx_ds1302(addr + 1);			// read addr
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	3301      	adds	r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 f8df 	bl	80015b0 <tx_ds1302>
	// 3. read data
	rx_ds1302(&data8bits);
 80013f2:	f107 030f 	add.w	r3, r7, #15
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f852 	bl	80014a0 <rx_ds1302>
	// 4. CE low
	HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <read_ds1302+0x50>)
 8001404:	f003 f8c2 	bl	800458c <HAL_GPIO_WritePin>
	// 5. return bcd to dec
	return bcd2dec(data8bits);
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f82c 	bl	8001468 <bcd2dec>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40020000 	.word	0x40020000

08001420 <dec2bcd>:
// =====================
//        25

//dec -> bcd
uint8_t dec2bcd(uint8_t dec)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;

	high = (dec / 10) << 4;
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <dec2bcd+0x44>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	08db      	lsrs	r3, r3, #3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	73fb      	strb	r3, [r7, #15]
	low = dec % 10;
 800143a:	79fa      	ldrb	r2, [r7, #7]
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <dec2bcd+0x44>)
 800143e:	fba3 1302 	umull	r1, r3, r3, r2
 8001442:	08d9      	lsrs	r1, r3, #3
 8001444:	460b      	mov	r3, r1
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	73bb      	strb	r3, [r7, #14]

	return (high + low);
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	7bbb      	ldrb	r3, [r7, #14]
 8001454:	4413      	add	r3, r2
 8001456:	b2db      	uxtb	r3, r3
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	cccccccd 	.word	0xcccccccd

08001468 <bcd2dec>:

//bcd -> dec
uint8_t bcd2dec(uint8_t bcd)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;

	low = bcd & 0x0f;
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 030f 	and.w	r3, r3, #15
 8001478:	73fb      	strb	r3, [r7, #15]
	high = (bcd >> 4) * 10;			// 0010 0101 >> 4 = 0000 0100 * 10
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	091b      	lsrs	r3, r3, #4
 800147e:	b2db      	uxtb	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	0092      	lsls	r2, r2, #2
 8001484:	4413      	add	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	73bb      	strb	r3, [r7, #14]

	return (high + low);
 800148a:	7bba      	ldrb	r2, [r7, #14]
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	4413      	add	r3, r2
 8001490:	b2db      	uxtb	r3, r3
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <rx_ds1302>:

void rx_ds1302(unsigned char *pdata)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	// IO 포트를 입력 모드로 전환
	input_dataline_ds1302();
 80014a8:	f000 f8ce 	bl	8001648 <input_dataline_ds1302>
	uint8_t temp = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]
	// DS1302로부터 들어온 bit 를 LSB부터 bit를 받아서 temp 변수에 저장
	for(int i = 0; i < 8 ; i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	e019      	b.n	80014ea <rx_ds1302+0x4a>
	{
		if(HAL_GPIO_ReadPin(GPIOA, IO_DS1302_Pin))
 80014b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ba:	4811      	ldr	r0, [pc, #68]	; (8001500 <rx_ds1302+0x60>)
 80014bc:	f003 f84e 	bl	800455c <HAL_GPIO_ReadPin>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d009      	beq.n	80014da <rx_ds1302+0x3a>
			{
				temp |= 1 << i;
 80014c6:	2201      	movs	r2, #1
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	b25a      	sxtb	r2, r3
 80014d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	73fb      	strb	r3, [r7, #15]
			}
		if (i != 7)
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b07      	cmp	r3, #7
 80014de:	d001      	beq.n	80014e4 <rx_ds1302+0x44>
			{
			clock_ds1302();
 80014e0:	f000 f8ce 	bl	8001680 <clock_ds1302>
	for(int i = 0; i < 8 ; i++)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	2b07      	cmp	r3, #7
 80014ee:	dde2      	ble.n	80014b6 <rx_ds1302+0x16>
			}
	}
	*pdata = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	701a      	strb	r2, [r3, #0]
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40020000 	.word	0x40020000

08001504 <init_ds1302>:

void init_ds1302(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	write_ds1302(ADDR_SECONDS, ds1302.seconds);
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <init_ds1302+0x5c>)
 800150a:	785b      	ldrb	r3, [r3, #1]
 800150c:	4619      	mov	r1, r3
 800150e:	2080      	movs	r0, #128	; 0x80
 8001510:	f000 f828 	bl	8001564 <write_ds1302>
	write_ds1302(ADDR_MINUTES, ds1302.minutes);
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <init_ds1302+0x5c>)
 8001516:	789b      	ldrb	r3, [r3, #2]
 8001518:	4619      	mov	r1, r3
 800151a:	2082      	movs	r0, #130	; 0x82
 800151c:	f000 f822 	bl	8001564 <write_ds1302>
	write_ds1302(ADDR_HOURS, ds1302.hours);
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <init_ds1302+0x5c>)
 8001522:	78db      	ldrb	r3, [r3, #3]
 8001524:	4619      	mov	r1, r3
 8001526:	2084      	movs	r0, #132	; 0x84
 8001528:	f000 f81c 	bl	8001564 <write_ds1302>
	write_ds1302(ADDR_DATE, ds1302.date);
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <init_ds1302+0x5c>)
 800152e:	791b      	ldrb	r3, [r3, #4]
 8001530:	4619      	mov	r1, r3
 8001532:	2086      	movs	r0, #134	; 0x86
 8001534:	f000 f816 	bl	8001564 <write_ds1302>
	write_ds1302(ADDR_MONTH, ds1302.month);
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <init_ds1302+0x5c>)
 800153a:	795b      	ldrb	r3, [r3, #5]
 800153c:	4619      	mov	r1, r3
 800153e:	2088      	movs	r0, #136	; 0x88
 8001540:	f000 f810 	bl	8001564 <write_ds1302>
	write_ds1302(ADDR_DAYOFWEEK, ds1302.dayofweek);
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <init_ds1302+0x5c>)
 8001546:	799b      	ldrb	r3, [r3, #6]
 8001548:	4619      	mov	r1, r3
 800154a:	208a      	movs	r0, #138	; 0x8a
 800154c:	f000 f80a 	bl	8001564 <write_ds1302>
	write_ds1302(ADDR_YEAR, ds1302.year);
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <init_ds1302+0x5c>)
 8001552:	79db      	ldrb	r3, [r3, #7]
 8001554:	4619      	mov	r1, r3
 8001556:	208c      	movs	r0, #140	; 0x8c
 8001558:	f000 f804 	bl	8001564 <write_ds1302>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20004c64 	.word	0x20004c64

08001564 <write_ds1302>:

void write_ds1302(uint8_t addr, uint8_t data)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	460a      	mov	r2, r1
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	4613      	mov	r3, r2
 8001572:	71bb      	strb	r3, [r7, #6]
	// 1. CE low --> high
	HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 1);
 8001574:	2201      	movs	r2, #1
 8001576:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800157a:	480c      	ldr	r0, [pc, #48]	; (80015ac <write_ds1302+0x48>)
 800157c:	f003 f806 	bl	800458c <HAL_GPIO_WritePin>
	// 2. addr 전송
	tx_ds1302(addr);
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f814 	bl	80015b0 <tx_ds1302>
	// 3. data 전송
	tx_ds1302(dec2bcd(data));
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff48 	bl	8001420 <dec2bcd>
 8001590:	4603      	mov	r3, r0
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f80c 	bl	80015b0 <tx_ds1302>
	// 4. CE high --> low
	HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800159e:	4803      	ldr	r0, [pc, #12]	; (80015ac <write_ds1302+0x48>)
 80015a0:	f002 fff4 	bl	800458c <HAL_GPIO_WritePin>

}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40020000 	.word	0x40020000

080015b0 <tx_ds1302>:

void tx_ds1302(uint8_t addr)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
	output_dataline_ds1302();
 80015ba:	f000 f827 	bl	800160c <output_dataline_ds1302>

	//     1000 0000 실제값 (B7를 전송)
	//     1000 0000 &
	//     1000 0000 -> HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 1);

	for (int i = 0; i < 8 ; i++)
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	e019      	b.n	80015f8 <tx_ds1302+0x48>
	{
		if (addr & (1 << i))
 80015c4:	79fa      	ldrb	r2, [r7, #7]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	fa42 f303 	asr.w	r3, r2, r3
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <tx_ds1302+0x32>
		{
			HAL_GPIO_WritePin(GPIOA, IO_DS1302_Pin, 1);
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015da:	480b      	ldr	r0, [pc, #44]	; (8001608 <tx_ds1302+0x58>)
 80015dc:	f002 ffd6 	bl	800458c <HAL_GPIO_WritePin>
 80015e0:	e005      	b.n	80015ee <tx_ds1302+0x3e>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, IO_DS1302_Pin, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015e8:	4807      	ldr	r0, [pc, #28]	; (8001608 <tx_ds1302+0x58>)
 80015ea:	f002 ffcf 	bl	800458c <HAL_GPIO_WritePin>
		}
		clock_ds1302();
 80015ee:	f000 f847 	bl	8001680 <clock_ds1302>
	for (int i = 0; i < 8 ; i++)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3301      	adds	r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2b07      	cmp	r3, #7
 80015fc:	dde2      	ble.n	80015c4 <tx_ds1302+0x14>
	}
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40020000 	.word	0x40020000

0800160c <output_dataline_ds1302>:

void output_dataline_ds1302(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_init = { 0, };
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
	GPIO_init.Pin = IO_DS1302_Pin;
 8001620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001624:	607b      	str	r3, [r7, #4]
	GPIO_init.Mode = GPIO_MODE_OUTPUT_PP;	// output mode on
 8001626:	2301      	movs	r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
	GPIO_init.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
	GPIO_init.Speed = GPIO_SPEED_FREQ_HIGH; // LOW : 2M  HIGH : 25 ~ 100MHz
 800162e:	2302      	movs	r3, #2
 8001630:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_init);
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	4619      	mov	r1, r3
 8001636:	4803      	ldr	r0, [pc, #12]	; (8001644 <output_dataline_ds1302+0x38>)
 8001638:	f002 fe0c 	bl	8004254 <HAL_GPIO_Init>
}
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40020000 	.word	0x40020000

08001648 <input_dataline_ds1302>:

void input_dataline_ds1302(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_init = { 0, };
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
	GPIO_init.Pin = IO_DS1302_Pin;
 800165c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001660:	607b      	str	r3, [r7, #4]
	GPIO_init.Mode = GPIO_MODE_INPUT;		// input mode on
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
	GPIO_init.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_init);
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4619      	mov	r1, r3
 800166e:	4803      	ldr	r0, [pc, #12]	; (800167c <input_dataline_ds1302+0x34>)
 8001670:	f002 fdf0 	bl	8004254 <HAL_GPIO_Init>
}
 8001674:	bf00      	nop
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40020000 	.word	0x40020000

08001680 <clock_ds1302>:

void clock_ds1302(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CLK_DS1302_Pin, 1);
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <clock_ds1302+0x20>)
 800168c:	f002 ff7e 	bl	800458c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, CLK_DS1302_Pin, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001696:	4802      	ldr	r0, [pc, #8]	; (80016a0 <clock_ds1302+0x20>)
 8001698:	f002 ff78 	bl	800458c <HAL_GPIO_WritePin>
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40020000 	.word	0x40020000

080016a4 <init_gpio_ds1302>:

void init_gpio_ds1302(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	// ALL LOW
	HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ae:	4808      	ldr	r0, [pc, #32]	; (80016d0 <init_gpio_ds1302+0x2c>)
 80016b0:	f002 ff6c 	bl	800458c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IO_DS1302_Pin, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <init_gpio_ds1302+0x2c>)
 80016bc:	f002 ff66 	bl	800458c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, CLK_DS1302_Pin, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c6:	4802      	ldr	r0, [pc, #8]	; (80016d0 <init_gpio_ds1302+0x2c>)
 80016c8:	f002 ff60 	bl	800458c <HAL_GPIO_WritePin>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40020000 	.word	0x40020000

080016d4 <init_date_time>:

void init_date_time(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
	ds1302.magic=0x55555555;  // 사용자가 임의로 설정
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <init_date_time+0x40>)
 80016da:	2255      	movs	r2, #85	; 0x55
 80016dc:	701a      	strb	r2, [r3, #0]
	ds1302.year = 25;
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <init_date_time+0x40>)
 80016e0:	2219      	movs	r2, #25
 80016e2:	71da      	strb	r2, [r3, #7]
	ds1302.month = 4;
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <init_date_time+0x40>)
 80016e6:	2204      	movs	r2, #4
 80016e8:	715a      	strb	r2, [r3, #5]
	ds1302.date = 10;
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <init_date_time+0x40>)
 80016ec:	220a      	movs	r2, #10
 80016ee:	711a      	strb	r2, [r3, #4]
	ds1302.dayofweek = 5;		// 목
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <init_date_time+0x40>)
 80016f2:	2205      	movs	r2, #5
 80016f4:	719a      	strb	r2, [r3, #6]
	ds1302.hours = 18;
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <init_date_time+0x40>)
 80016f8:	2212      	movs	r2, #18
 80016fa:	70da      	strb	r2, [r3, #3]
	ds1302.minutes = 11;
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <init_date_time+0x40>)
 80016fe:	220b      	movs	r2, #11
 8001700:	709a      	strb	r2, [r3, #2]
	ds1302.seconds = 00;
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <init_date_time+0x40>)
 8001704:	2200      	movs	r2, #0
 8001706:	705a      	strb	r2, [r3, #1]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20004c64 	.word	0x20004c64

08001718 <set_rtc>:

// setrtc250331120500
//       YYMMDDHHmmSS
//  date_time에는 241008154500 의 주소
void set_rtc(char *date_time)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
    char yy[4], mm[4], dd[4];   // date
    char hh[4], min[4], ss[4];  // time

    strncpy(yy, date_time, 2);
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	2202      	movs	r2, #2
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4618      	mov	r0, r3
 800172a:	f009 fe86 	bl	800b43a <strncpy>
    strncpy(mm, date_time+2, 2);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	1c99      	adds	r1, r3, #2
 8001732:	f107 0318 	add.w	r3, r7, #24
 8001736:	2202      	movs	r2, #2
 8001738:	4618      	mov	r0, r3
 800173a:	f009 fe7e 	bl	800b43a <strncpy>
    strncpy(dd, date_time+4, 2);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	1d19      	adds	r1, r3, #4
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	2202      	movs	r2, #2
 8001748:	4618      	mov	r0, r3
 800174a:	f009 fe76 	bl	800b43a <strncpy>

    strncpy(hh, date_time+6, 2);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	1d99      	adds	r1, r3, #6
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	2202      	movs	r2, #2
 8001758:	4618      	mov	r0, r3
 800175a:	f009 fe6e 	bl	800b43a <strncpy>
    strncpy(min, date_time+8, 2);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f103 0108 	add.w	r1, r3, #8
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2202      	movs	r2, #2
 800176a:	4618      	mov	r0, r3
 800176c:	f009 fe65 	bl	800b43a <strncpy>
    strncpy(ss, date_time+10, 2);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f103 010a 	add.w	r1, r3, #10
 8001776:	f107 0308 	add.w	r3, r7, #8
 800177a:	2202      	movs	r2, #2
 800177c:	4618      	mov	r0, r3
 800177e:	f009 fe5c 	bl	800b43a <strncpy>

    // 1. ascii --> int --> 2 bcd --> 3 RTC에 적용
    ds1302.year = atoi(yy);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4618      	mov	r0, r3
 8001788:	f008 fed8 	bl	800a53c <atoi>
 800178c:	4603      	mov	r3, r0
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <set_rtc+0xe4>)
 8001792:	71da      	strb	r2, [r3, #7]
    ds1302.month = atoi(mm);
 8001794:	f107 0318 	add.w	r3, r7, #24
 8001798:	4618      	mov	r0, r3
 800179a:	f008 fecf 	bl	800a53c <atoi>
 800179e:	4603      	mov	r3, r0
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <set_rtc+0xe4>)
 80017a4:	715a      	strb	r2, [r3, #5]
    ds1302.date = atoi(dd);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4618      	mov	r0, r3
 80017ac:	f008 fec6 	bl	800a53c <atoi>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <set_rtc+0xe4>)
 80017b6:	711a      	strb	r2, [r3, #4]

    ds1302.hours = atoi(hh);
 80017b8:	f107 0310 	add.w	r3, r7, #16
 80017bc:	4618      	mov	r0, r3
 80017be:	f008 febd 	bl	800a53c <atoi>
 80017c2:	4603      	mov	r3, r0
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <set_rtc+0xe4>)
 80017c8:	70da      	strb	r2, [r3, #3]
    ds1302.minutes = atoi(min);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4618      	mov	r0, r3
 80017d0:	f008 feb4 	bl	800a53c <atoi>
 80017d4:	4603      	mov	r3, r0
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <set_rtc+0xe4>)
 80017da:	709a      	strb	r2, [r3, #2]
    ds1302.seconds = atoi(ss);
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	4618      	mov	r0, r3
 80017e2:	f008 feab 	bl	800a53c <atoi>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <set_rtc+0xe4>)
 80017ec:	705a      	strb	r2, [r3, #1]

    init_ds1302();
 80017ee:	f7ff fe89 	bl	8001504 <init_ds1302>
}
 80017f2:	bf00      	nop
 80017f4:	3720      	adds	r7, #32
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20004c64 	.word	0x20004c64

08001800 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	3b01      	subs	r3, #1
 800180e:	2b0f      	cmp	r3, #15
 8001810:	d86d      	bhi.n	80018ee <HAL_GPIO_EXTI_Callback+0xee>
 8001812:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <HAL_GPIO_EXTI_Callback+0x18>)
 8001814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001818:	08001859 	.word	0x08001859
 800181c:	0800187b 	.word	0x0800187b
 8001820:	080018ef 	.word	0x080018ef
 8001824:	0800189d 	.word	0x0800189d
 8001828:	080018ef 	.word	0x080018ef
 800182c:	080018ef 	.word	0x080018ef
 8001830:	080018ef 	.word	0x080018ef
 8001834:	080018ef 	.word	0x080018ef
 8001838:	080018ef 	.word	0x080018ef
 800183c:	080018ef 	.word	0x080018ef
 8001840:	080018ef 	.word	0x080018ef
 8001844:	080018ef 	.word	0x080018ef
 8001848:	080018ef 	.word	0x080018ef
 800184c:	080018ef 	.word	0x080018ef
 8001850:	080018ef 	.word	0x080018ef
 8001854:	080018bf 	.word	0x080018bf
	{
	case GPIO_PIN_0:
		pin_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001858:	2101      	movs	r1, #1
 800185a:	4827      	ldr	r0, [pc, #156]	; (80018f8 <HAL_GPIO_EXTI_Callback+0xf8>)
 800185c:	f002 fe7e 	bl	800455c <HAL_GPIO_ReadPin>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_GPIO_EXTI_Callback+0xfc>)
 8001866:	701a      	strb	r2, [r3, #0]
			if (pin_state)
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <HAL_GPIO_EXTI_Callback+0xfc>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d036      	beq.n	80018e0 <HAL_GPIO_EXTI_Callback+0xe0>
			{
				current_state = FLOOR_4TH;
 8001872:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_GPIO_EXTI_Callback+0x100>)
 8001874:	2204      	movs	r2, #4
 8001876:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001878:	e032      	b.n	80018e0 <HAL_GPIO_EXTI_Callback+0xe0>
	case GPIO_PIN_1:
		pin_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 800187a:	2102      	movs	r1, #2
 800187c:	4821      	ldr	r0, [pc, #132]	; (8001904 <HAL_GPIO_EXTI_Callback+0x104>)
 800187e:	f002 fe6d 	bl	800455c <HAL_GPIO_ReadPin>
 8001882:	4603      	mov	r3, r0
 8001884:	461a      	mov	r2, r3
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_GPIO_EXTI_Callback+0xfc>)
 8001888:	701a      	strb	r2, [r3, #0]
			if(pin_state)
 800188a:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <HAL_GPIO_EXTI_Callback+0xfc>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d027      	beq.n	80018e4 <HAL_GPIO_EXTI_Callback+0xe4>
			{
				current_state = FLOOR_3RD;
 8001894:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <HAL_GPIO_EXTI_Callback+0x100>)
 8001896:	2203      	movs	r2, #3
 8001898:	701a      	strb	r2, [r3, #0]
			}
		break;
 800189a:	e023      	b.n	80018e4 <HAL_GPIO_EXTI_Callback+0xe4>
	case GPIO_PIN_2:
		pin_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 800189c:	2104      	movs	r1, #4
 800189e:	4819      	ldr	r0, [pc, #100]	; (8001904 <HAL_GPIO_EXTI_Callback+0x104>)
 80018a0:	f002 fe5c 	bl	800455c <HAL_GPIO_ReadPin>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_GPIO_EXTI_Callback+0xfc>)
 80018aa:	701a      	strb	r2, [r3, #0]
			if(pin_state)
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <HAL_GPIO_EXTI_Callback+0xfc>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d018      	beq.n	80018e8 <HAL_GPIO_EXTI_Callback+0xe8>
			{
				current_state = FLOOR_2ND;
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_GPIO_EXTI_Callback+0x100>)
 80018b8:	2202      	movs	r2, #2
 80018ba:	701a      	strb	r2, [r3, #0]
			}
		break;
 80018bc:	e014      	b.n	80018e8 <HAL_GPIO_EXTI_Callback+0xe8>
	case GPIO_PIN_4:
		pin_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80018be:	2110      	movs	r1, #16
 80018c0:	480d      	ldr	r0, [pc, #52]	; (80018f8 <HAL_GPIO_EXTI_Callback+0xf8>)
 80018c2:	f002 fe4b 	bl	800455c <HAL_GPIO_ReadPin>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <HAL_GPIO_EXTI_Callback+0xfc>)
 80018cc:	701a      	strb	r2, [r3, #0]
			if (pin_state)
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_GPIO_EXTI_Callback+0xfc>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d009      	beq.n	80018ec <HAL_GPIO_EXTI_Callback+0xec>
			{
				current_state = FLOOR_1ST;
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_GPIO_EXTI_Callback+0x100>)
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
			}
		break;
 80018de:	e005      	b.n	80018ec <HAL_GPIO_EXTI_Callback+0xec>
		break;
 80018e0:	bf00      	nop
 80018e2:	e004      	b.n	80018ee <HAL_GPIO_EXTI_Callback+0xee>
		break;
 80018e4:	bf00      	nop
 80018e6:	e002      	b.n	80018ee <HAL_GPIO_EXTI_Callback+0xee>
		break;
 80018e8:	bf00      	nop
 80018ea:	e000      	b.n	80018ee <HAL_GPIO_EXTI_Callback+0xee>
		break;
 80018ec:	bf00      	nop
	}
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40020000 	.word	0x40020000
 80018fc:	20000258 	.word	0x20000258
 8001900:	20004c6e 	.word	0x20004c6e
 8001904:	40020400 	.word	0x40020400

08001908 <flash_set_time>:
	flash_erase();

	flash_write((uint32_t *) &set_time, sizeof(set_time));
}
void flash_set_time(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
#if 1
	       t_ds1302 *read_set_time;

			flash_read_value = *(__IO uint32_t *) USER_DATA_ADDRESS;
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <flash_set_time+0x94>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <flash_set_time+0x98>)
 8001912:	6013      	str	r3, [r2, #0]

			if (flash_read_value == FLASH_INIT_STATUS)  // 초기에 아무런 데이터도 존재 하지 않을 경우
 8001914:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <flash_set_time+0x98>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191c:	d10b      	bne.n	8001936 <flash_set_time+0x2e>
			{
				flash_erase();
 800191e:	f000 f8bf 	bl	8001aa0 <flash_erase>
				printf("flash EMPTY !!!!\n");
 8001922:	4820      	ldr	r0, [pc, #128]	; (80019a4 <flash_set_time+0x9c>)
 8001924:	f009 fc92 	bl	800b24c <puts>
				init_date_time();
 8001928:	f7ff fed4 	bl	80016d4 <init_date_time>
				flash_write((uint32_t *) &ds1302, sizeof(ds1302));
 800192c:	210a      	movs	r1, #10
 800192e:	481e      	ldr	r0, [pc, #120]	; (80019a8 <flash_set_time+0xa0>)
 8001930:	f000 f84a 	bl	80019c8 <flash_write>
			printf("Hours: %02d\n", set_time.Hours);
			printf("Minutes: %02d\n", set_time.Minutes);
			printf("Seconds: %02d\n", set_time.Seconds);
		}
#endif
}
 8001934:	e02f      	b.n	8001996 <flash_set_time+0x8e>
				flash_read((uint32_t *)&ds1302, sizeof(ds1302));
 8001936:	210a      	movs	r1, #10
 8001938:	481b      	ldr	r0, [pc, #108]	; (80019a8 <flash_set_time+0xa0>)
 800193a:	f000 f889 	bl	8001a50 <flash_read>
				init_ds1302();
 800193e:	f7ff fde1 	bl	8001504 <init_ds1302>
				printf("magic: %08x\n", ds1302.magic);
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <flash_set_time+0xa0>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	4619      	mov	r1, r3
 8001948:	4818      	ldr	r0, [pc, #96]	; (80019ac <flash_set_time+0xa4>)
 800194a:	f009 fbf9 	bl	800b140 <iprintf>
				printf("year: %02d\n", ds1302.year);
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <flash_set_time+0xa0>)
 8001950:	79db      	ldrb	r3, [r3, #7]
 8001952:	4619      	mov	r1, r3
 8001954:	4816      	ldr	r0, [pc, #88]	; (80019b0 <flash_set_time+0xa8>)
 8001956:	f009 fbf3 	bl	800b140 <iprintf>
				printf("month: %02d\n", ds1302.month);
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <flash_set_time+0xa0>)
 800195c:	795b      	ldrb	r3, [r3, #5]
 800195e:	4619      	mov	r1, r3
 8001960:	4814      	ldr	r0, [pc, #80]	; (80019b4 <flash_set_time+0xac>)
 8001962:	f009 fbed 	bl	800b140 <iprintf>
				printf("date: %02d\n", ds1302.date);
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <flash_set_time+0xa0>)
 8001968:	791b      	ldrb	r3, [r3, #4]
 800196a:	4619      	mov	r1, r3
 800196c:	4812      	ldr	r0, [pc, #72]	; (80019b8 <flash_set_time+0xb0>)
 800196e:	f009 fbe7 	bl	800b140 <iprintf>
				printf("Hours: %02d\n", ds1302.hours);
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <flash_set_time+0xa0>)
 8001974:	78db      	ldrb	r3, [r3, #3]
 8001976:	4619      	mov	r1, r3
 8001978:	4810      	ldr	r0, [pc, #64]	; (80019bc <flash_set_time+0xb4>)
 800197a:	f009 fbe1 	bl	800b140 <iprintf>
				printf("Minutes: %02d\n", ds1302.minutes);
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <flash_set_time+0xa0>)
 8001980:	789b      	ldrb	r3, [r3, #2]
 8001982:	4619      	mov	r1, r3
 8001984:	480e      	ldr	r0, [pc, #56]	; (80019c0 <flash_set_time+0xb8>)
 8001986:	f009 fbdb 	bl	800b140 <iprintf>
				printf("Seconds: %02d\n", ds1302.seconds);
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <flash_set_time+0xa0>)
 800198c:	785b      	ldrb	r3, [r3, #1]
 800198e:	4619      	mov	r1, r3
 8001990:	480c      	ldr	r0, [pc, #48]	; (80019c4 <flash_set_time+0xbc>)
 8001992:	f009 fbd5 	bl	800b140 <iprintf>
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	08060000 	.word	0x08060000
 80019a0:	2000025c 	.word	0x2000025c
 80019a4:	0800d668 	.word	0x0800d668
 80019a8:	20004c64 	.word	0x20004c64
 80019ac:	0800d69c 	.word	0x0800d69c
 80019b0:	0800d6d4 	.word	0x0800d6d4
 80019b4:	0800d6e0 	.word	0x0800d6e0
 80019b8:	0800d6f0 	.word	0x0800d6f0
 80019bc:	0800d6fc 	.word	0x0800d6fc
 80019c0:	0800d70c 	.word	0x0800d70c
 80019c4:	0800d71c 	.word	0x0800d71c

080019c8 <flash_write>:
HAL_StatusTypeDef flash_write (uint32_t *data32, int size)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
	uint32_t *mem32 = data32;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	617b      	str	r3, [r7, #20]

	// mem32 = data32;

  /* Unlock to control */
  HAL_FLASH_Unlock();
 80019d6:	f002 f99d 	bl	8003d14 <HAL_FLASH_Unlock>

  uint32_t Address = FLASH_USER_START_ADDR;
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <flash_write+0x7c>)
 80019dc:	613b      	str	r3, [r7, #16]

  printf("size: %d\n", size);
 80019de:	6839      	ldr	r1, [r7, #0]
 80019e0:	4819      	ldr	r0, [pc, #100]	; (8001a48 <flash_write+0x80>)
 80019e2:	f009 fbad 	bl	800b140 <iprintf>

  /* Writing data to flash memory */
  for (int i=0; i < size; )
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	e020      	b.n	8001a2e <flash_write+0x66>
  {
	  if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, *mem32) == HAL_OK)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	6939      	ldr	r1, [r7, #16]
 80019f8:	2002      	movs	r0, #2
 80019fa:	f002 f937 	bl	8003c6c <HAL_FLASH_Program>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10f      	bne.n	8001a24 <flash_write+0x5c>
	  {
		  printf("mem32: %0x\n", *mem32);
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4810      	ldr	r0, [pc, #64]	; (8001a4c <flash_write+0x84>)
 8001a0c:	f009 fb98 	bl	800b140 <iprintf>
		  mem32++;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3304      	adds	r3, #4
 8001a14:	617b      	str	r3, [r7, #20]
		  Address = Address + 4;
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	613b      	str	r3, [r7, #16]
		  i += 4;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	e004      	b.n	8001a2e <flash_write+0x66>
	  }
	  else
	  {
		  uint32_t errorcode = HAL_FLASH_GetError();
 8001a24:	f002 f9a8 	bl	8003d78 <HAL_FLASH_GetError>
 8001a28:	60b8      	str	r0, [r7, #8]
		  return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e006      	b.n	8001a3c <flash_write+0x74>
  for (int i=0; i < size; )
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dbda      	blt.n	80019ec <flash_write+0x24>
	  }
  }
  /* Lock flash control register */
  HAL_FLASH_Lock();
 8001a36:	f002 f98f 	bl	8003d58 <HAL_FLASH_Lock>

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	08060000 	.word	0x08060000
 8001a48:	0800d72c 	.word	0x0800d72c
 8001a4c:	0800d738 	.word	0x0800d738

08001a50 <flash_read>:

HAL_StatusTypeDef flash_read(uint32_t *addr32, int size)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b087      	sub	sp, #28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t *data32 = addr32;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	617b      	str	r3, [r7, #20]
  uint32_t address = FLASH_USER_START_ADDR;
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <flash_read+0x4c>)
 8001a60:	613b      	str	r3, [r7, #16]
  uint32_t end_address = FLASH_USER_START_ADDR + size;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001a68:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
 8001a6c:	60fb      	str	r3, [r7, #12]

  while(address < end_address)
 8001a6e:	e009      	b.n	8001a84 <flash_read+0x34>
  {
    *data32 = *(uint32_t*) address;
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	601a      	str	r2, [r3, #0]
    data32++;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	617b      	str	r3, [r7, #20]
    address = address + 4;
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	3304      	adds	r3, #4
 8001a82:	613b      	str	r3, [r7, #16]
  while(address < end_address)
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d3f1      	bcc.n	8001a70 <flash_read+0x20>
  }

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0

}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	371c      	adds	r7, #28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	08060000 	.word	0x08060000

08001aa0 <flash_erase>:


HAL_StatusTypeDef flash_erase()
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
	uint32_t SectorError = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]

	/* Unlock to control */
	HAL_FLASH_Unlock();
 8001aaa:	f002 f933 	bl	8003d14 <HAL_FLASH_Unlock>

	/* Calculate sector index */
	uint32_t UserSector = 7;     // sector 번호
 8001aae:	2307      	movs	r3, #7
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t NbOfSectors = 1;    // sector 수
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	623b      	str	r3, [r7, #32]

	/* Erase sectors */
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001aba:	2302      	movs	r3, #2
 8001abc:	617b      	str	r3, [r7, #20]
	EraseInitStruct.Sector = UserSector;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbSectors = NbOfSectors;
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	613b      	str	r3, [r7, #16]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8001ac6:	f107 0218 	add.w	r2, r7, #24
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 fa9e 	bl	8004010 <HAL_FLASHEx_Erase>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <flash_erase+0x44>
	{
		uint32_t errorcode = HAL_FLASH_GetError();
 8001ada:	f002 f94d 	bl	8003d78 <HAL_FLASH_GetError>
 8001ade:	61f8      	str	r0, [r7, #28]
		return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e002      	b.n	8001aea <flash_erase+0x4a>
	}

	/* Lock flash control register */
	HAL_FLASH_Lock();
 8001ae4:	f002 f938 	bl	8003d58 <HAL_FLASH_Lock>

	return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3728      	adds	r7, #40	; 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <send_1byte74hc595_fnd>:
      ~0xff,
      ~0x90, //0b10010000
      ~0xc0
};
void send_1byte74hc595_fnd(uint8_t data)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
   for (int i = 0; i <8; i++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	e023      	b.n	8001b4c <send_1byte74hc595_fnd+0x58>
   {
   if(data & (1 << i))
 8001b04:	79fa      	ldrb	r2, [r7, #7]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	fa42 f303 	asr.w	r3, r2, r3
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <send_1byte74hc595_fnd+0x2e>
   HAL_GPIO_WritePin(FND_DATA_GPIO_Port, FND_DATA_Pin, 1); // 데이터 값 입력
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b1a:	4810      	ldr	r0, [pc, #64]	; (8001b5c <send_1byte74hc595_fnd+0x68>)
 8001b1c:	f002 fd36 	bl	800458c <HAL_GPIO_WritePin>
 8001b20:	e005      	b.n	8001b2e <send_1byte74hc595_fnd+0x3a>
   else
   HAL_GPIO_WritePin(FND_DATA_GPIO_Port, FND_DATA_Pin, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b28:	480c      	ldr	r0, [pc, #48]	; (8001b5c <send_1byte74hc595_fnd+0x68>)
 8001b2a:	f002 fd2f 	bl	800458c <HAL_GPIO_WritePin>

   HAL_GPIO_WritePin(FND_CLK_GPIO_Port, FND_CLK_Pin, 1);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b34:	4809      	ldr	r0, [pc, #36]	; (8001b5c <send_1byte74hc595_fnd+0x68>)
 8001b36:	f002 fd29 	bl	800458c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(FND_CLK_GPIO_Port, FND_CLK_Pin, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b40:	4806      	ldr	r0, [pc, #24]	; (8001b5c <send_1byte74hc595_fnd+0x68>)
 8001b42:	f002 fd23 	bl	800458c <HAL_GPIO_WritePin>
   for (int i = 0; i <8; i++)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b07      	cmp	r3, #7
 8001b50:	ddd8      	ble.n	8001b04 <send_1byte74hc595_fnd+0x10>
   }
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40020800 	.word	0x40020800

08001b60 <fnd_display>:


uint8_t fnd_data[4]={0,0,0,0};

void fnd_display(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
      uint8_t temp;

      static int i = 0;
      fnd_data[0] = ~(1 << (i+4));      // 자릿수 선택
 8001b66:	4b48      	ldr	r3, [pc, #288]	; (8001c88 <fnd_display+0x128>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <fnd_display+0x12c>)
 8001b7a:	701a      	strb	r2, [r3, #0]

   //ds1302.minutes
   //ds1302.hours
      if(stepmotor_state == IDLE)
 8001b7c:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <fnd_display+0x130>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d126      	bne.n	8001bd4 <fnd_display+0x74>
      {
         switch(i)
 8001b86:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <fnd_display+0x128>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d84a      	bhi.n	8001c24 <fnd_display+0xc4>
 8001b8e:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <fnd_display+0x34>)
 8001b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b94:	08001ba5 	.word	0x08001ba5
 8001b98:	08001bb1 	.word	0x08001bb1
 8001b9c:	08001bbd 	.word	0x08001bbd
 8001ba0:	08001bc9 	.word	0x08001bc9
         {
        case 0:
         fnd_data[1] = stop[0];
 8001ba4:	4b3b      	ldr	r3, [pc, #236]	; (8001c94 <fnd_display+0x134>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <fnd_display+0x12c>)
 8001bac:	705a      	strb	r2, [r3, #1]
         break;
 8001bae:	e039      	b.n	8001c24 <fnd_display+0xc4>
        case 1:
         fnd_data[1] = stop[1];
 8001bb0:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <fnd_display+0x134>)
 8001bb2:	885b      	ldrh	r3, [r3, #2]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <fnd_display+0x12c>)
 8001bb8:	705a      	strb	r2, [r3, #1]
         break;
 8001bba:	e033      	b.n	8001c24 <fnd_display+0xc4>
        case 2 :
         fnd_data[1] = stop[2];
 8001bbc:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <fnd_display+0x134>)
 8001bbe:	889b      	ldrh	r3, [r3, #4]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <fnd_display+0x12c>)
 8001bc4:	705a      	strb	r2, [r3, #1]
         break;
 8001bc6:	e02d      	b.n	8001c24 <fnd_display+0xc4>
        case 3:
         fnd_data[1] = stop[3];
 8001bc8:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <fnd_display+0x134>)
 8001bca:	88db      	ldrh	r3, [r3, #6]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <fnd_display+0x12c>)
 8001bd0:	705a      	strb	r2, [r3, #1]
         break;
 8001bd2:	e027      	b.n	8001c24 <fnd_display+0xc4>
        }
      }
      else
         switch(i)
 8001bd4:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <fnd_display+0x128>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d823      	bhi.n	8001c24 <fnd_display+0xc4>
 8001bdc:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <fnd_display+0x84>)
 8001bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be2:	bf00      	nop
 8001be4:	08001bf5 	.word	0x08001bf5
 8001be8:	08001c01 	.word	0x08001c01
 8001bec:	08001c0d 	.word	0x08001c0d
 8001bf0:	08001c19 	.word	0x08001c19
        {
        case 0:
         fnd_data[1] = go[0];
 8001bf4:	4b28      	ldr	r3, [pc, #160]	; (8001c98 <fnd_display+0x138>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <fnd_display+0x12c>)
 8001bfc:	705a      	strb	r2, [r3, #1]
         break;
 8001bfe:	e011      	b.n	8001c24 <fnd_display+0xc4>
        case 1:
         fnd_data[1] = go[1];
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <fnd_display+0x138>)
 8001c02:	885b      	ldrh	r3, [r3, #2]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <fnd_display+0x12c>)
 8001c08:	705a      	strb	r2, [r3, #1]
         break;
 8001c0a:	e00b      	b.n	8001c24 <fnd_display+0xc4>
        case 2 :
         fnd_data[1] = go[2];
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <fnd_display+0x138>)
 8001c0e:	889b      	ldrh	r3, [r3, #4]
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <fnd_display+0x12c>)
 8001c14:	705a      	strb	r2, [r3, #1]
         break;
 8001c16:	e005      	b.n	8001c24 <fnd_display+0xc4>
        case 3:
         fnd_data[1] = go[3];
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <fnd_display+0x138>)
 8001c1a:	88db      	ldrh	r3, [r3, #6]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <fnd_display+0x12c>)
 8001c20:	705a      	strb	r2, [r3, #1]
         break;
 8001c22:	bf00      	nop
        }

      for(int j = 0; j<2; j++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	e00b      	b.n	8001c42 <fnd_display+0xe2>
      {
         temp = fnd_data[j]; // 보낼 데이터 (1바이트)
 8001c2a:	4a18      	ldr	r2, [pc, #96]	; (8001c8c <fnd_display+0x12c>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	70fb      	strb	r3, [r7, #3]
         send_1byte74hc595_fnd(temp);
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff5c 	bl	8001af4 <send_1byte74hc595_fnd>
      for(int j = 0; j<2; j++)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	ddf0      	ble.n	8001c2a <fnd_display+0xca>
      }
   i++;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <fnd_display+0x128>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <fnd_display+0x128>)
 8001c50:	6013      	str	r3, [r2, #0]
   i %=4;
 8001c52:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <fnd_display+0x128>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	425a      	negs	r2, r3
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	f002 0203 	and.w	r2, r2, #3
 8001c60:	bf58      	it	pl
 8001c62:	4253      	negpl	r3, r2
 8001c64:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <fnd_display+0x128>)
 8001c66:	6013      	str	r3, [r2, #0]
   GPIOC->ODR &= ~FND_LATCH_Pin;   // latch핀을 pull-down
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <fnd_display+0x13c>)
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <fnd_display+0x13c>)
 8001c6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c72:	6153      	str	r3, [r2, #20]
   GPIOC->ODR |= FND_LATCH_Pin;   // latch핀을 pull-up // Latch로 데이터 과정
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <fnd_display+0x13c>)
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <fnd_display+0x13c>)
 8001c7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c7e:	6153      	str	r3, [r2, #20]
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000264 	.word	0x20000264
 8001c8c:	20000260 	.word	0x20000260
 8001c90:	20000274 	.word	0x20000274
 8001c94:	20000038 	.word	0x20000038
 8001c98:	20000040 	.word	0x20000040
 8001c9c:	40020800 	.word	0x40020800

08001ca0 <lcd_command>:
#endif
}

// ========================= LCD 명령어 전송 함수 =========================

void lcd_command(uint8_t command){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
	// 고위 nibble (상위 4bit) / 저위 nibble (하위 4bit) 분리
	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];

	high_nibble = command & 0xf0;
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	f023 030f 	bic.w	r3, r3, #15
 8001cb0:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	73bb      	strb	r3, [r7, #14]

	// en=1 -> en=0 으로 변화시 falling edge를 만들어야 LCD가 latch 함
	// rs=0 (명령어), rw=0 (쓰기), backlight=1

	i2c_buffer[0] = high_nibble | 0x04 | 0x08; // en=1
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	f043 030c 	orr.w	r3, r3, #12
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; // en=0
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	f043 0308 	orr.w	r3, r3, #8
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; // en=1
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	f043 030c 	orr.w	r3, r3, #12
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; // en=0
 8001cd6:	7bbb      	ldrb	r3, [r7, #14]
 8001cd8:	f043 0308 	orr.w	r3, r3, #8
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	72fb      	strb	r3, [r7, #11]

	// I2C 로 전송
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS, i2c_buffer, 4, 100)!=HAL_OK){
 8001ce0:	bf00      	nop
 8001ce2:	f107 0208 	add.w	r2, r7, #8
 8001ce6:	2364      	movs	r3, #100	; 0x64
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2304      	movs	r3, #4
 8001cec:	214e      	movs	r1, #78	; 0x4e
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <lcd_command+0x64>)
 8001cf0:	f002 fdc2 	bl	8004878 <HAL_I2C_Master_Transmit>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f3      	bne.n	8001ce2 <lcd_command+0x42>
		// 필요하면 재시도 딜레이
	}
	return;
 8001cfa:	bf00      	nop
}
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20004c74 	.word	0x20004c74

08001d08 <lcd_data>:

// ========================= LCD 데이터(문자) 전송 함수 =========================

void lcd_data(uint8_t data){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];

	high_nibble = data & 0xf0;
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f023 030f 	bic.w	r3, r3, #15
 8001d18:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	73bb      	strb	r3, [r7, #14]

	// rs=1 (데이터 모드), rw=0 (쓰기)
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; // en=1
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	f043 030d 	orr.w	r3, r3, #13
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; // en=0
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	f043 0309 	orr.w	r3, r3, #9
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; // en=1
 8001d34:	7bbb      	ldrb	r3, [r7, #14]
 8001d36:	f043 030d 	orr.w	r3, r3, #13
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; // en=0
 8001d3e:	7bbb      	ldrb	r3, [r7, #14]
 8001d40:	f043 0309 	orr.w	r3, r3, #9
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS, i2c_buffer, 4, 100)!=HAL_OK){
 8001d48:	bf00      	nop
 8001d4a:	f107 0208 	add.w	r2, r7, #8
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2304      	movs	r3, #4
 8001d54:	214e      	movs	r1, #78	; 0x4e
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <lcd_data+0x64>)
 8001d58:	f002 fd8e 	bl	8004878 <HAL_I2C_Master_Transmit>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f3      	bne.n	8001d4a <lcd_data+0x42>
		// 필요하면 재시도 딜레이
	}
	return;
 8001d62:	bf00      	nop
}
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20004c74 	.word	0x20004c74

08001d70 <i2c_lcd_init>:

// ========================= LCD 초기화 =========================

void i2c_lcd_init(void){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	lcd_command(0x33); // 초기화 과정 (데이터시트 참고)
 8001d74:	2033      	movs	r0, #51	; 0x33
 8001d76:	f7ff ff93 	bl	8001ca0 <lcd_command>
	lcd_command(0x32); // 4-bit 모드 설정
 8001d7a:	2032      	movs	r0, #50	; 0x32
 8001d7c:	f7ff ff90 	bl	8001ca0 <lcd_command>
	lcd_command(0x28); // Function set: 4-bit, 2-line, 5x8 dots
 8001d80:	2028      	movs	r0, #40	; 0x28
 8001d82:	f7ff ff8d 	bl	8001ca0 <lcd_command>
	lcd_command(DISPLAY_ON); // 화면 ON, 커서 OFF, 블링크 OFF (i2c_lcd.h 에 정의되어야 함)
 8001d86:	200c      	movs	r0, #12
 8001d88:	f7ff ff8a 	bl	8001ca0 <lcd_command>
	lcd_command(0x06); // Entry Mode: Increment cursor
 8001d8c:	2006      	movs	r0, #6
 8001d8e:	f7ff ff87 	bl	8001ca0 <lcd_command>
	lcd_command(CLEAR_DISPLAY); // 화면 클리어
 8001d92:	2001      	movs	r0, #1
 8001d94:	f7ff ff84 	bl	8001ca0 <lcd_command>
	HAL_Delay(2); // LCD는 클리어 후 대기 필요
 8001d98:	2002      	movs	r0, #2
 8001d9a:	f001 fdcf 	bl	800393c <HAL_Delay>
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <lcd_string>:

// ========================= 문자열 출력 =========================

void lcd_string(uint8_t *str){
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
	// 문자열 끝(null 문자)까지 반복
	while(*str) lcd_data(*str++);
 8001daa:	e006      	b.n	8001dba <lcd_string+0x18>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ffa7 	bl	8001d08 <lcd_data>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f4      	bne.n	8001dac <lcd_string+0xa>
}
 8001dc2:	bf00      	nop
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <move_cursor>:

// ========================= 커서 이동 =========================

void move_cursor(uint8_t row, uint8_t column){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	460a      	mov	r2, r1
 8001dd6:	71fb      	strb	r3, [r7, #7]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	71bb      	strb	r3, [r7, #6]
	// 커서 이동 명령어
	// 1st line : 0x80 | column
	// 2nd line : 0x80 | 0x40 | column
	lcd_command(0x80 | row<<6 | column);
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	019b      	lsls	r3, r3, #6
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	79bb      	ldrb	r3, [r7, #6]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff56 	bl	8001ca0 <lcd_command>
	return;
 8001df4:	bf00      	nop
}
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <led_all_on>:
#include "led.h"
#include "extern.h"

void led_all_on(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	//	HAL_GPIO_WritePin(GPIOB, 0Xff, 1);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, 1);
 8001e00:	2201      	movs	r2, #1
 8001e02:	2178      	movs	r1, #120	; 0x78
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <led_all_on+0x14>)
 8001e06:	f002 fbc1 	bl	800458c <HAL_GPIO_WritePin>
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40020400 	.word	0x40020400

08001e14 <led_one_on>:

void led_one_on(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	2140      	movs	r1, #64	; 0x40
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <led_one_on+0x14>)
 8001e1e:	f002 fbb5 	bl	800458c <HAL_GPIO_WritePin>
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40020400 	.word	0x40020400

08001e2c <led_two_on>:

void led_two_on(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, 1);
 8001e30:	2201      	movs	r2, #1
 8001e32:	2160      	movs	r1, #96	; 0x60
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <led_two_on+0x14>)
 8001e36:	f002 fba9 	bl	800458c <HAL_GPIO_WritePin>
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40020400 	.word	0x40020400

08001e44 <led_three_on>:

void led_three_on(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, 1);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	2170      	movs	r1, #112	; 0x70
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <led_three_on+0x14>)
 8001e4e:	f002 fb9d 	bl	800458c <HAL_GPIO_WritePin>
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40020400 	.word	0x40020400

08001e5c <led_all_off>:

void led_all_off(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2178      	movs	r1, #120	; 0x78
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <led_all_off+0x14>)
 8001e66:	f002 fb91 	bl	800458c <HAL_GPIO_WritePin>
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40020400 	.word	0x40020400

08001e74 <shift_left_ledon>:

void shift_left_ledon(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
//	}
//	led_all_off();
//	HAL_Delay(100);

#if 1
	char GPIO_number[8] = {GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6};
 8001e7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ee4 <shift_left_ledon+0x70>)
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e82:	6018      	str	r0, [r3, #0]
 8001e84:	3304      	adds	r3, #4
 8001e86:	7019      	strb	r1, [r3, #0]
 8001e88:	f107 0309 	add.w	r3, r7, #9
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	801a      	strh	r2, [r3, #0]
 8001e90:	709a      	strb	r2, [r3, #2]
	for(int count = 0; count < 5; count++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	e019      	b.n	8001ecc <shift_left_ledon+0x58>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_number[count], 1);
 8001e98:	1d3a      	adds	r2, r7, #4
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4810      	ldr	r0, [pc, #64]	; (8001ee8 <shift_left_ledon+0x74>)
 8001ea8:	f002 fb70 	bl	800458c <HAL_GPIO_WritePin>
				osDelay(100);
 8001eac:	2064      	movs	r0, #100	; 0x64
 8001eae:	f005 fd97 	bl	80079e0 <osDelay>
				HAL_GPIO_WritePin(GPIOB, GPIO_number[count], 0);
 8001eb2:	1d3a      	adds	r2, r7, #4
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4809      	ldr	r0, [pc, #36]	; (8001ee8 <shift_left_ledon+0x74>)
 8001ec2:	f002 fb63 	bl	800458c <HAL_GPIO_WritePin>
	for(int count = 0; count < 5; count++)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	dde2      	ble.n	8001e98 <shift_left_ledon+0x24>
			}
			led_all_off();
 8001ed2:	f7ff ffc3 	bl	8001e5c <led_all_off>
			osDelay(100);
 8001ed6:	2064      	movs	r0, #100	; 0x64
 8001ed8:	f005 fd82 	bl	80079e0 <osDelay>
#endif
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	0800d744 	.word	0x0800d744
 8001ee8:	40020400 	.word	0x40020400

08001eec <shift_right_ledon>:

void shift_right_ledon(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
//		HAL_Delay(100);
//	}
//	led_all_off();
//	HAL_Delay(100);
#if 1
	char GPIO_number[8] = {GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6};
 8001ef2:	4a1a      	ldr	r2, [pc, #104]	; (8001f5c <shift_right_ledon+0x70>)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001efa:	6018      	str	r0, [r3, #0]
 8001efc:	3304      	adds	r3, #4
 8001efe:	7019      	strb	r1, [r3, #0]
 8001f00:	f107 0309 	add.w	r3, r7, #9
 8001f04:	2200      	movs	r2, #0
 8001f06:	801a      	strh	r2, [r3, #0]
 8001f08:	709a      	strb	r2, [r3, #2]
		for(int count = 7; count >= 0; count--)
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	e019      	b.n	8001f44 <shift_right_ledon+0x58>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_number[count], 1);
 8001f10:	1d3a      	adds	r2, r7, #4
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4413      	add	r3, r2
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4810      	ldr	r0, [pc, #64]	; (8001f60 <shift_right_ledon+0x74>)
 8001f20:	f002 fb34 	bl	800458c <HAL_GPIO_WritePin>
			osDelay(100);
 8001f24:	2064      	movs	r0, #100	; 0x64
 8001f26:	f005 fd5b 	bl	80079e0 <osDelay>
			HAL_GPIO_WritePin(GPIOB, GPIO_number[count], 0);
 8001f2a:	1d3a      	adds	r2, r7, #4
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2200      	movs	r2, #0
 8001f36:	4619      	mov	r1, r3
 8001f38:	4809      	ldr	r0, [pc, #36]	; (8001f60 <shift_right_ledon+0x74>)
 8001f3a:	f002 fb27 	bl	800458c <HAL_GPIO_WritePin>
		for(int count = 7; count >= 0; count--)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	dae2      	bge.n	8001f10 <shift_right_ledon+0x24>
		}
		led_all_off();
 8001f4a:	f7ff ff87 	bl	8001e5c <led_all_off>
		osDelay(100);
 8001f4e:	2064      	movs	r0, #100	; 0x64
 8001f50:	f005 fd46 	bl	80079e0 <osDelay>
#endif
}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	0800d744 	.word	0x0800d744
 8001f60:	40020400 	.word	0x40020400

08001f64 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001f6c:	1d39      	adds	r1, r7, #4
 8001f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f72:	2201      	movs	r2, #1
 8001f74:	4803      	ldr	r0, [pc, #12]	; (8001f84 <__io_putchar+0x20>)
 8001f76:	f004 fc98 	bl	80068aa <HAL_UART_Transmit>

  return ch;
 8001f7a:	687b      	ldr	r3, [r7, #4]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20004dfc 	.word	0x20004dfc

08001f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f8c:	f001 fc94 	bl	80038b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f90:	f000 f876 	bl	8002080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f94:	f000 fa74 	bl	8002480 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001f98:	f000 fa48 	bl	800242c <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8001f9c:	f000 fa22 	bl	80023e4 <MX_TIM11_Init>
  MX_TIM2_Init();
 8001fa0:	f000 f904 	bl	80021ac <MX_TIM2_Init>
  MX_I2C1_Init();
 8001fa4:	f000 f8d4 	bl	8002150 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001fa8:	f000 f94c 	bl	8002244 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001fac:	f000 f9c0 	bl	8002330 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  //  i2c_lcd_init();

  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	491e      	ldr	r1, [pc, #120]	; (800202c <main+0xa4>)
 8001fb4:	481e      	ldr	r0, [pc, #120]	; (8002030 <main+0xa8>)
 8001fb6:	f004 fd0a 	bl	80069ce <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001fba:	481e      	ldr	r0, [pc, #120]	; (8002034 <main+0xac>)
 8001fbc:	f003 fc5a 	bl	8005874 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);	// for make delay_us
 8001fc0:	481d      	ldr	r0, [pc, #116]	; (8002038 <main+0xb0>)
 8001fc2:	f003 fc57 	bl	8005874 <HAL_TIM_Base_Start_IT>
  // led_main();
  // dht11_main();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001fc6:	f005 fc2f 	bl	8007828 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8001fca:	481c      	ldr	r0, [pc, #112]	; (800203c <main+0xb4>)
 8001fcc:	f005 fd23 	bl	8007a16 <osMutexNew>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4a1b      	ldr	r2, [pc, #108]	; (8002040 <main+0xb8>)
 8001fd4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001fd6:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <main+0xbc>)
 8001fd8:	2100      	movs	r1, #0
 8001fda:	481b      	ldr	r0, [pc, #108]	; (8002048 <main+0xc0>)
 8001fdc:	f005 fc6e 	bl	80078bc <osThreadNew>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	; (800204c <main+0xc4>)
 8001fe4:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001fe6:	4a1a      	ldr	r2, [pc, #104]	; (8002050 <main+0xc8>)
 8001fe8:	2100      	movs	r1, #0
 8001fea:	481a      	ldr	r0, [pc, #104]	; (8002054 <main+0xcc>)
 8001fec:	f005 fc66 	bl	80078bc <osThreadNew>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4a19      	ldr	r2, [pc, #100]	; (8002058 <main+0xd0>)
 8001ff4:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8001ff6:	4a19      	ldr	r2, [pc, #100]	; (800205c <main+0xd4>)
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4819      	ldr	r0, [pc, #100]	; (8002060 <main+0xd8>)
 8001ffc:	f005 fc5e 	bl	80078bc <osThreadNew>
 8002000:	4603      	mov	r3, r0
 8002002:	4a18      	ldr	r2, [pc, #96]	; (8002064 <main+0xdc>)
 8002004:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8002006:	4a18      	ldr	r2, [pc, #96]	; (8002068 <main+0xe0>)
 8002008:	2100      	movs	r1, #0
 800200a:	4818      	ldr	r0, [pc, #96]	; (800206c <main+0xe4>)
 800200c:	f005 fc56 	bl	80078bc <osThreadNew>
 8002010:	4603      	mov	r3, r0
 8002012:	4a17      	ldr	r2, [pc, #92]	; (8002070 <main+0xe8>)
 8002014:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 8002016:	4a17      	ldr	r2, [pc, #92]	; (8002074 <main+0xec>)
 8002018:	2100      	movs	r1, #0
 800201a:	4817      	ldr	r0, [pc, #92]	; (8002078 <main+0xf0>)
 800201c:	f005 fc4e 	bl	80078bc <osThreadNew>
 8002020:	4603      	mov	r3, r0
 8002022:	4a16      	ldr	r2, [pc, #88]	; (800207c <main+0xf4>)
 8002024:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002026:	f005 fc23 	bl	8007870 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800202a:	e7fe      	b.n	800202a <main+0xa2>
 800202c:	20004dac 	.word	0x20004dac
 8002030:	20004dfc 	.word	0x20004dfc
 8002034:	20004d60 	.word	0x20004d60
 8002038:	20004db4 	.word	0x20004db4
 800203c:	0800d8d4 	.word	0x0800d8d4
 8002040:	20004e40 	.word	0x20004e40
 8002044:	0800d820 	.word	0x0800d820
 8002048:	08002645 	.word	0x08002645
 800204c:	20004c70 	.word	0x20004c70
 8002050:	0800d844 	.word	0x0800d844
 8002054:	08002659 	.word	0x08002659
 8002058:	20004da8 	.word	0x20004da8
 800205c:	0800d868 	.word	0x0800d868
 8002060:	0800266d 	.word	0x0800266d
 8002064:	20004db0 	.word	0x20004db0
 8002068:	0800d88c 	.word	0x0800d88c
 800206c:	08002681 	.word	0x08002681
 8002070:	20004d14 	.word	0x20004d14
 8002074:	0800d8b0 	.word	0x0800d8b0
 8002078:	080026b5 	.word	0x080026b5
 800207c:	20004d10 	.word	0x20004d10

08002080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b094      	sub	sp, #80	; 0x50
 8002084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002086:	f107 0320 	add.w	r3, r7, #32
 800208a:	2230      	movs	r2, #48	; 0x30
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f008 fb89 	bl	800a7a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <SystemClock_Config+0xc8>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	4a26      	ldr	r2, [pc, #152]	; (8002148 <SystemClock_Config+0xc8>)
 80020ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b2:	6413      	str	r3, [r2, #64]	; 0x40
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <SystemClock_Config+0xc8>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020c0:	2300      	movs	r3, #0
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	4b21      	ldr	r3, [pc, #132]	; (800214c <SystemClock_Config+0xcc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a20      	ldr	r2, [pc, #128]	; (800214c <SystemClock_Config+0xcc>)
 80020ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b1e      	ldr	r3, [pc, #120]	; (800214c <SystemClock_Config+0xcc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020dc:	2302      	movs	r3, #2
 80020de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020e0:	2301      	movs	r3, #1
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020e4:	2310      	movs	r3, #16
 80020e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020e8:	2302      	movs	r3, #2
 80020ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020ec:	2300      	movs	r3, #0
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020f0:	2308      	movs	r3, #8
 80020f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80020f4:	2354      	movs	r3, #84	; 0x54
 80020f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020f8:	2302      	movs	r3, #2
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020fc:	2304      	movs	r3, #4
 80020fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002100:	f107 0320 	add.w	r3, r7, #32
 8002104:	4618      	mov	r0, r3
 8002106:	f002 febf 	bl	8004e88 <HAL_RCC_OscConfig>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002110:	f000 fb08 	bl	8002724 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002114:	230f      	movs	r3, #15
 8002116:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002118:	2302      	movs	r3, #2
 800211a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	2102      	movs	r1, #2
 8002130:	4618      	mov	r0, r3
 8002132:	f003 f921 	bl	8005378 <HAL_RCC_ClockConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800213c:	f000 faf2 	bl	8002724 <Error_Handler>
  }
}
 8002140:	bf00      	nop
 8002142:	3750      	adds	r7, #80	; 0x50
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40023800 	.word	0x40023800
 800214c:	40007000 	.word	0x40007000

08002150 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <MX_I2C1_Init+0x50>)
 8002156:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <MX_I2C1_Init+0x54>)
 8002158:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <MX_I2C1_Init+0x50>)
 800215c:	4a12      	ldr	r2, [pc, #72]	; (80021a8 <MX_I2C1_Init+0x58>)
 800215e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <MX_I2C1_Init+0x50>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <MX_I2C1_Init+0x50>)
 8002168:	2200      	movs	r2, #0
 800216a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <MX_I2C1_Init+0x50>)
 800216e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002172:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002174:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <MX_I2C1_Init+0x50>)
 8002176:	2200      	movs	r2, #0
 8002178:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <MX_I2C1_Init+0x50>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <MX_I2C1_Init+0x50>)
 8002182:	2200      	movs	r2, #0
 8002184:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <MX_I2C1_Init+0x50>)
 8002188:	2200      	movs	r2, #0
 800218a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800218c:	4804      	ldr	r0, [pc, #16]	; (80021a0 <MX_I2C1_Init+0x50>)
 800218e:	f002 fa2f 	bl	80045f0 <HAL_I2C_Init>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002198:	f000 fac4 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20004c74 	.word	0x20004c74
 80021a4:	40005400 	.word	0x40005400
 80021a8:	000186a0 	.word	0x000186a0

080021ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c0:	463b      	mov	r3, r7
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021c8:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <MX_TIM2_Init+0x94>)
 80021ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <MX_TIM2_Init+0x94>)
 80021d2:	2253      	movs	r2, #83	; 0x53
 80021d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d6:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <MX_TIM2_Init+0x94>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80021dc:	4b18      	ldr	r3, [pc, #96]	; (8002240 <MX_TIM2_Init+0x94>)
 80021de:	f04f 32ff 	mov.w	r2, #4294967295
 80021e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e4:	4b16      	ldr	r3, [pc, #88]	; (8002240 <MX_TIM2_Init+0x94>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <MX_TIM2_Init+0x94>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021f0:	4813      	ldr	r0, [pc, #76]	; (8002240 <MX_TIM2_Init+0x94>)
 80021f2:	f003 faef 	bl	80057d4 <HAL_TIM_Base_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80021fc:	f000 fa92 	bl	8002724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002204:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002206:	f107 0308 	add.w	r3, r7, #8
 800220a:	4619      	mov	r1, r3
 800220c:	480c      	ldr	r0, [pc, #48]	; (8002240 <MX_TIM2_Init+0x94>)
 800220e:	f003 fec1 	bl	8005f94 <HAL_TIM_ConfigClockSource>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002218:	f000 fa84 	bl	8002724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002224:	463b      	mov	r3, r7
 8002226:	4619      	mov	r1, r3
 8002228:	4805      	ldr	r0, [pc, #20]	; (8002240 <MX_TIM2_Init+0x94>)
 800222a:	f004 fa6f 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002234:	f000 fa76 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20004db4 	.word	0x20004db4

08002244 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08e      	sub	sp, #56	; 0x38
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002258:	f107 0320 	add.w	r3, r7, #32
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
 8002270:	615a      	str	r2, [r3, #20]
 8002272:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002274:	4b2c      	ldr	r3, [pc, #176]	; (8002328 <MX_TIM3_Init+0xe4>)
 8002276:	4a2d      	ldr	r2, [pc, #180]	; (800232c <MX_TIM3_Init+0xe8>)
 8002278:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 52.5-1;
 800227a:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <MX_TIM3_Init+0xe4>)
 800227c:	2233      	movs	r2, #51	; 0x33
 800227e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002280:	4b29      	ldr	r3, [pc, #164]	; (8002328 <MX_TIM3_Init+0xe4>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400-1;
 8002286:	4b28      	ldr	r3, [pc, #160]	; (8002328 <MX_TIM3_Init+0xe4>)
 8002288:	f240 128f 	movw	r2, #399	; 0x18f
 800228c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <MX_TIM3_Init+0xe4>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002294:	4b24      	ldr	r3, [pc, #144]	; (8002328 <MX_TIM3_Init+0xe4>)
 8002296:	2200      	movs	r2, #0
 8002298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800229a:	4823      	ldr	r0, [pc, #140]	; (8002328 <MX_TIM3_Init+0xe4>)
 800229c:	f003 fa9a 	bl	80057d4 <HAL_TIM_Base_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80022a6:	f000 fa3d 	bl	8002724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022b4:	4619      	mov	r1, r3
 80022b6:	481c      	ldr	r0, [pc, #112]	; (8002328 <MX_TIM3_Init+0xe4>)
 80022b8:	f003 fe6c 	bl	8005f94 <HAL_TIM_ConfigClockSource>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80022c2:	f000 fa2f 	bl	8002724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022c6:	4818      	ldr	r0, [pc, #96]	; (8002328 <MX_TIM3_Init+0xe4>)
 80022c8:	f003 fb36 	bl	8005938 <HAL_TIM_PWM_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80022d2:	f000 fa27 	bl	8002724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022de:	f107 0320 	add.w	r3, r7, #32
 80022e2:	4619      	mov	r1, r3
 80022e4:	4810      	ldr	r0, [pc, #64]	; (8002328 <MX_TIM3_Init+0xe4>)
 80022e6:	f004 fa11 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80022f0:	f000 fa18 	bl	8002724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022f4:	2360      	movs	r3, #96	; 0x60
 80022f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 80022f8:	23c7      	movs	r3, #199	; 0xc7
 80022fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	2200      	movs	r2, #0
 8002308:	4619      	mov	r1, r3
 800230a:	4807      	ldr	r0, [pc, #28]	; (8002328 <MX_TIM3_Init+0xe4>)
 800230c:	f003 fd80 	bl	8005e10 <HAL_TIM_PWM_ConfigChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002316:	f000 fa05 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800231a:	4803      	ldr	r0, [pc, #12]	; (8002328 <MX_TIM3_Init+0xe4>)
 800231c:	f000 ff12 	bl	8003144 <HAL_TIM_MspPostInit>

}
 8002320:	bf00      	nop
 8002322:	3738      	adds	r7, #56	; 0x38
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20004d18 	.word	0x20004d18
 800232c:	40000400 	.word	0x40000400

08002330 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002336:	f107 0320 	add.w	r3, r7, #32
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
 800234c:	611a      	str	r2, [r3, #16]
 800234e:	615a      	str	r2, [r3, #20]
 8002350:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002352:	4b22      	ldr	r3, [pc, #136]	; (80023dc <MX_TIM5_Init+0xac>)
 8002354:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <MX_TIM5_Init+0xb0>)
 8002356:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1680-1;
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <MX_TIM5_Init+0xac>)
 800235a:	f240 628f 	movw	r2, #1679	; 0x68f
 800235e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002360:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <MX_TIM5_Init+0xac>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <MX_TIM5_Init+0xac>)
 8002368:	f240 32e7 	movw	r2, #999	; 0x3e7
 800236c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236e:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <MX_TIM5_Init+0xac>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002374:	4b19      	ldr	r3, [pc, #100]	; (80023dc <MX_TIM5_Init+0xac>)
 8002376:	2200      	movs	r2, #0
 8002378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800237a:	4818      	ldr	r0, [pc, #96]	; (80023dc <MX_TIM5_Init+0xac>)
 800237c:	f003 fadc 	bl	8005938 <HAL_TIM_PWM_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002386:	f000 f9cd 	bl	8002724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800238e:	2300      	movs	r3, #0
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002392:	f107 0320 	add.w	r3, r7, #32
 8002396:	4619      	mov	r1, r3
 8002398:	4810      	ldr	r0, [pc, #64]	; (80023dc <MX_TIM5_Init+0xac>)
 800239a:	f004 f9b7 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80023a4:	f000 f9be 	bl	8002724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a8:	2360      	movs	r3, #96	; 0x60
 80023aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	2204      	movs	r2, #4
 80023bc:	4619      	mov	r1, r3
 80023be:	4807      	ldr	r0, [pc, #28]	; (80023dc <MX_TIM5_Init+0xac>)
 80023c0:	f003 fd26 	bl	8005e10 <HAL_TIM_PWM_ConfigChannel>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80023ca:	f000 f9ab 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80023ce:	4803      	ldr	r0, [pc, #12]	; (80023dc <MX_TIM5_Init+0xac>)
 80023d0:	f000 feb8 	bl	8003144 <HAL_TIM_MspPostInit>

}
 80023d4:	bf00      	nop
 80023d6:	3728      	adds	r7, #40	; 0x28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20004cc8 	.word	0x20004cc8
 80023e0:	40000c00 	.word	0x40000c00

080023e4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <MX_TIM11_Init+0x40>)
 80023ea:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <MX_TIM11_Init+0x44>)
 80023ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <MX_TIM11_Init+0x40>)
 80023f0:	2253      	movs	r2, #83	; 0x53
 80023f2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <MX_TIM11_Init+0x40>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <MX_TIM11_Init+0x40>)
 80023fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002400:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <MX_TIM11_Init+0x40>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <MX_TIM11_Init+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <MX_TIM11_Init+0x40>)
 8002410:	f003 f9e0 	bl	80057d4 <HAL_TIM_Base_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800241a:	f000 f983 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20004d60 	.word	0x20004d60
 8002428:	40014800 	.word	0x40014800

0800242c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002432:	4a12      	ldr	r2, [pc, #72]	; (800247c <MX_USART2_UART_Init+0x50>)
 8002434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002438:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800243c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002452:	220c      	movs	r2, #12
 8002454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002462:	4805      	ldr	r0, [pc, #20]	; (8002478 <MX_USART2_UART_Init+0x4c>)
 8002464:	f004 f9d4 	bl	8006810 <HAL_UART_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800246e:	f000 f959 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20004dfc 	.word	0x20004dfc
 800247c:	40004400 	.word	0x40004400

08002480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002486:	f107 0314 	add.w	r3, r7, #20
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	4b66      	ldr	r3, [pc, #408]	; (8002634 <MX_GPIO_Init+0x1b4>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a65      	ldr	r2, [pc, #404]	; (8002634 <MX_GPIO_Init+0x1b4>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b63      	ldr	r3, [pc, #396]	; (8002634 <MX_GPIO_Init+0x1b4>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	4b5f      	ldr	r3, [pc, #380]	; (8002634 <MX_GPIO_Init+0x1b4>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a5e      	ldr	r2, [pc, #376]	; (8002634 <MX_GPIO_Init+0x1b4>)
 80024bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b5c      	ldr	r3, [pc, #368]	; (8002634 <MX_GPIO_Init+0x1b4>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	4b58      	ldr	r3, [pc, #352]	; (8002634 <MX_GPIO_Init+0x1b4>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a57      	ldr	r2, [pc, #348]	; (8002634 <MX_GPIO_Init+0x1b4>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b55      	ldr	r3, [pc, #340]	; (8002634 <MX_GPIO_Init+0x1b4>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	4b51      	ldr	r3, [pc, #324]	; (8002634 <MX_GPIO_Init+0x1b4>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a50      	ldr	r2, [pc, #320]	; (8002634 <MX_GPIO_Init+0x1b4>)
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b4e      	ldr	r3, [pc, #312]	; (8002634 <MX_GPIO_Init+0x1b4>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	607b      	str	r3, [r7, #4]
 8002504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CE_DS1302_Pin|IO_DS1302_Pin|CLK_DS1302_Pin, GPIO_PIN_RESET);
 8002506:	2200      	movs	r2, #0
 8002508:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 800250c:	484a      	ldr	r0, [pc, #296]	; (8002638 <MX_GPIO_Init+0x1b8>)
 800250e:	f002 f83d 	bl	800458c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_74HC595_Pin|LATCH_74HC595_Pin|SER_74HC595_Pin|LED3_Pin
 8002512:	2200      	movs	r2, #0
 8002514:	f24a 4178 	movw	r1, #42104	; 0xa478
 8002518:	4848      	ldr	r0, [pc, #288]	; (800263c <MX_GPIO_Init+0x1bc>)
 800251a:	f002 f837 	bl	800458c <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 800251e:	2200      	movs	r2, #0
 8002520:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8002524:	4846      	ldr	r0, [pc, #280]	; (8002640 <MX_GPIO_Init+0x1c0>)
 8002526:	f002 f831 	bl	800458c <HAL_GPIO_WritePin>
                          |FND_CLK_Pin|FND_LATCH_Pin|FND_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800252a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800252e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002530:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800253a:	f107 0314 	add.w	r3, r7, #20
 800253e:	4619      	mov	r1, r3
 8002540:	483f      	ldr	r0, [pc, #252]	; (8002640 <MX_GPIO_Init+0x1c0>)
 8002542:	f001 fe87 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8002546:	230f      	movs	r3, #15
 8002548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002552:	f107 0314 	add.w	r3, r7, #20
 8002556:	4619      	mov	r1, r3
 8002558:	4839      	ldr	r0, [pc, #228]	; (8002640 <MX_GPIO_Init+0x1c0>)
 800255a:	f001 fe7b 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800255e:	2311      	movs	r3, #17
 8002560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002562:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4619      	mov	r1, r3
 8002572:	4831      	ldr	r0, [pc, #196]	; (8002638 <MX_GPIO_Init+0x1b8>)
 8002574:	f001 fe6e 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin CE_DS1302_Pin IO_DS1302_Pin CLK_DS1302_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CE_DS1302_Pin|IO_DS1302_Pin|CLK_DS1302_Pin;
 8002578:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 800257c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257e:	2301      	movs	r3, #1
 8002580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4619      	mov	r1, r3
 8002590:	4829      	ldr	r0, [pc, #164]	; (8002638 <MX_GPIO_Init+0x1b8>)
 8002592:	f001 fe5f 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002596:	2306      	movs	r3, #6
 8002598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800259a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800259e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4619      	mov	r1, r3
 80025aa:	4824      	ldr	r0, [pc, #144]	; (800263c <MX_GPIO_Init+0x1bc>)
 80025ac:	f001 fe52 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_74HC595_Pin LATCH_74HC595_Pin SER_74HC595_Pin LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin */
  GPIO_InitStruct.Pin = CLK_74HC595_Pin|LATCH_74HC595_Pin|SER_74HC595_Pin|LED3_Pin
 80025b0:	f24a 4378 	movw	r3, #42104	; 0xa478
 80025b4:	617b      	str	r3, [r7, #20]
                          |LED4_Pin|LED5_Pin|LED6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b6:	2301      	movs	r3, #1
 80025b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	4619      	mov	r1, r3
 80025c8:	481c      	ldr	r0, [pc, #112]	; (800263c <MX_GPIO_Init+0x1bc>)
 80025ca:	f001 fe43 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           FND_CLK_Pin FND_LATCH_Pin FND_DATA_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 80025ce:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 80025d2:	617b      	str	r3, [r7, #20]
                          |FND_CLK_Pin|FND_LATCH_Pin|FND_DATA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d4:	2301      	movs	r3, #1
 80025d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025dc:	2300      	movs	r3, #0
 80025de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4619      	mov	r1, r3
 80025e6:	4816      	ldr	r0, [pc, #88]	; (8002640 <MX_GPIO_Init+0x1c0>)
 80025e8:	f001 fe34 	bl	8004254 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80025ec:	2200      	movs	r2, #0
 80025ee:	2105      	movs	r1, #5
 80025f0:	2006      	movs	r0, #6
 80025f2:	f001 fa7f 	bl	8003af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80025f6:	2006      	movs	r0, #6
 80025f8:	f001 fa98 	bl	8003b2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80025fc:	2200      	movs	r2, #0
 80025fe:	2105      	movs	r1, #5
 8002600:	2007      	movs	r0, #7
 8002602:	f001 fa77 	bl	8003af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002606:	2007      	movs	r0, #7
 8002608:	f001 fa90 	bl	8003b2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800260c:	2200      	movs	r2, #0
 800260e:	2105      	movs	r1, #5
 8002610:	2008      	movs	r0, #8
 8002612:	f001 fa6f 	bl	8003af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002616:	2008      	movs	r0, #8
 8002618:	f001 fa88 	bl	8003b2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800261c:	2200      	movs	r2, #0
 800261e:	2105      	movs	r1, #5
 8002620:	200a      	movs	r0, #10
 8002622:	f001 fa67 	bl	8003af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002626:	200a      	movs	r0, #10
 8002628:	f001 fa80 	bl	8003b2c <HAL_NVIC_EnableIRQ>

}
 800262c:	bf00      	nop
 800262e:	3728      	adds	r7, #40	; 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800
 8002638:	40020000 	.word	0x40020000
 800263c:	40020400 	.word	0x40020400
 8002640:	40020800 	.word	0x40020800

08002644 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  ds1302_main();
 800264c:	f7fe fe26 	bl	800129c <ds1302_main>
	  osDelay(50); //
 8002650:	2032      	movs	r0, #50	; 0x32
 8002652:	f005 f9c5 	bl	80079e0 <osDelay>
	  ds1302_main();
 8002656:	e7f9      	b.n	800264c <StartDefaultTask+0x8>

08002658 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  dotmatrix_main_test();
 8002660:	f7fe fcc4 	bl	8000fec <dotmatrix_main_test>
	  osDelay(1);
 8002664:	2001      	movs	r0, #1
 8002666:	f005 f9bb 	bl	80079e0 <osDelay>
	  dotmatrix_main_test();
 800266a:	e7f9      	b.n	8002660 <StartTask02+0x8>

0800266c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	stepmotor_main();
 8002674:	f000 f86c 	bl	8002750 <stepmotor_main>
    osDelay(1);
 8002678:	2001      	movs	r0, #1
 800267a:	f005 f9b1 	bl	80079e0 <osDelay>
	stepmotor_main();
 800267e:	e7f9      	b.n	8002674 <StartTask03+0x8>

08002680 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  if(stepmotor_state == FORWARD)
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <StartTask04+0x30>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d102      	bne.n	8002698 <StartTask04+0x18>
	  {
		  shift_right_ledon();
 8002692:	f7ff fc2b 	bl	8001eec <shift_right_ledon>
 8002696:	e006      	b.n	80026a6 <StartTask04+0x26>
	  }
	  else if(stepmotor_state ==  BACKWARD)
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <StartTask04+0x30>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d101      	bne.n	80026a6 <StartTask04+0x26>
	  {
		  shift_left_ledon();
 80026a2:	f7ff fbe7 	bl	8001e74 <shift_left_ledon>
	  }

	  osDelay(1);
 80026a6:	2001      	movs	r0, #1
 80026a8:	f005 f99a 	bl	80079e0 <osDelay>
	  if(stepmotor_state == FORWARD)
 80026ac:	e7ec      	b.n	8002688 <StartTask04+0x8>
 80026ae:	bf00      	nop
 80026b0:	20000274 	.word	0x20000274

080026b4 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	fnd_display();
 80026bc:	f7ff fa50 	bl	8001b60 <fnd_display>
    osDelay(1);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f005 f98d 	bl	80079e0 <osDelay>
	fnd_display();
 80026c6:	e7f9      	b.n	80026bc <StartTask05+0x8>

080026c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0e      	ldr	r2, [pc, #56]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026da:	f001 f90f 	bl	80038fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM11) {
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d10e      	bne.n	8002706 <HAL_TIM_PeriodElapsedCallback+0x3e>
	  TIM11_1ms_counter++;
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80026f0:	6013      	str	r3, [r2, #0]
	  line0_timer++;
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3301      	adds	r3, #1
 80026f8:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80026fa:	6013      	str	r3, [r2, #0]
	  line1_timer++;
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3301      	adds	r3, #1
 8002702:	4a07      	ldr	r2, [pc, #28]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002704:	6013      	str	r3, [r2, #0]
    }
  /* USER CODE END Callback 1 */
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40014400 	.word	0x40014400
 8002714:	40014800 	.word	0x40014800
 8002718:	20000270 	.word	0x20000270
 800271c:	20000268 	.word	0x20000268
 8002720:	2000026c 	.word	0x2000026c

08002724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002728:	b672      	cpsid	i
}
 800272a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800272c:	e7fe      	b.n	800272c <Error_Handler+0x8>

0800272e <set_rpm>:
 * set_rpm 함수:
 * - 1분(60,000,000µs)을 1바퀴 회전에 필요한 스텝 수(4096)와 rpm으로 나누어
 *   각 스텝 사이의 딜레이를 결정한다.
 */
void set_rpm(int rpm) // rpm : 1~13
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
   delay_us(60000000 / 4096 / rpm);  // 계산된 시간(마이크로초) 만큼 지연
 8002736:	f643 1238 	movw	r2, #14648	; 0x3938
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002740:	4618      	mov	r0, r3
 8002742:	f000 ff39 	bl	80035b8 <delay_us>
   // 참고: 13rpm의 경우 약 1126µs 정도의 딜레이가 발생하도록 계산됨.
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <stepmotor_main>:
 *   선택될 때마다 LED 및 dotmatrix에 현재 선택된 층 정보를 표시한다.
 * - 이동 상태(FORWARD, BACKWARD)에서는 현재 위치(current_state)가 목표 층(floor_state)에 도달하면
 *   beep()를 발생시키고, 선택 목록의 다음 층으로 이동을 진행한다.
 */
void stepmotor_main(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0
   switch(stepmotor_state)
 8002756:	4ba7      	ldr	r3, [pc, #668]	; (80029f4 <stepmotor_main+0x2a4>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	f000 829d 	beq.w	8002c9c <stepmotor_main+0x54c>
 8002762:	2b02      	cmp	r3, #2
 8002764:	f300 82ee 	bgt.w	8002d44 <stepmotor_main+0x5f4>
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <stepmotor_main+0x24>
 800276c:	2b01      	cmp	r3, #1
 800276e:	f000 8235 	beq.w	8002bdc <stepmotor_main+0x48c>
            stepmotor_state = IDLE;
         }
      }
      break;
   }
}
 8002772:	e2e7      	b.n	8002d44 <stepmotor_main+0x5f4>
      if (get_button(GPIOC, GPIO_PIN_13, BTN4) == BUTTON_PRESS)
 8002774:	2204      	movs	r2, #4
 8002776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800277a:	489f      	ldr	r0, [pc, #636]	; (80029f8 <stepmotor_main+0x2a8>)
 800277c:	f7fe fb98 	bl	8000eb0 <get_button>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d132      	bne.n	80027ec <stepmotor_main+0x9c>
         if(floor_selection_mode == 0)
 8002786:	4b9d      	ldr	r3, [pc, #628]	; (80029fc <stepmotor_main+0x2ac>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <stepmotor_main+0x54>
            floor_selection_mode = 1;     // 선택 모드 활성화
 8002790:	4b9a      	ldr	r3, [pc, #616]	; (80029fc <stepmotor_main+0x2ac>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
            floor_count = 0;              // 이전에 선택된 층 목록 초기화
 8002796:	4b9a      	ldr	r3, [pc, #616]	; (8002a00 <stepmotor_main+0x2b0>)
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
            floor_index = 0;              // 목표 인덱스 초기화
 800279c:	4b99      	ldr	r3, [pc, #612]	; (8002a04 <stepmotor_main+0x2b4>)
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
 80027a2:	e023      	b.n	80027ec <stepmotor_main+0x9c>
            floor_selection_mode = 0;     // 선택 모드 종료
 80027a4:	4b95      	ldr	r3, [pc, #596]	; (80029fc <stepmotor_main+0x2ac>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
            if(floor_count > 0)
 80027aa:	4b95      	ldr	r3, [pc, #596]	; (8002a00 <stepmotor_main+0x2b0>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01b      	beq.n	80027ec <stepmotor_main+0x9c>
               floor_state = selected_floors[0];  // 목표 층을 첫번째 선택으로 설정
 80027b4:	4b94      	ldr	r3, [pc, #592]	; (8002a08 <stepmotor_main+0x2b8>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4b94      	ldr	r3, [pc, #592]	; (8002a0c <stepmotor_main+0x2bc>)
 80027bc:	701a      	strb	r2, [r3, #0]
               if(current_state < floor_state)
 80027be:	4b94      	ldr	r3, [pc, #592]	; (8002a10 <stepmotor_main+0x2c0>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	4b91      	ldr	r3, [pc, #580]	; (8002a0c <stepmotor_main+0x2bc>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d203      	bcs.n	80027d6 <stepmotor_main+0x86>
                  stepmotor_state = FORWARD;
 80027ce:	4b89      	ldr	r3, [pc, #548]	; (80029f4 <stepmotor_main+0x2a4>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
 80027d4:	e00a      	b.n	80027ec <stepmotor_main+0x9c>
               else if(current_state > floor_state)
 80027d6:	4b8e      	ldr	r3, [pc, #568]	; (8002a10 <stepmotor_main+0x2c0>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	4b8b      	ldr	r3, [pc, #556]	; (8002a0c <stepmotor_main+0x2bc>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d902      	bls.n	80027ec <stepmotor_main+0x9c>
                  stepmotor_state = BACKWARD;
 80027e6:	4b83      	ldr	r3, [pc, #524]	; (80029f4 <stepmotor_main+0x2a4>)
 80027e8:	2202      	movs	r2, #2
 80027ea:	701a      	strb	r2, [r3, #0]
      if(floor_selection_mode == 1)
 80027ec:	4b83      	ldr	r3, [pc, #524]	; (80029fc <stepmotor_main+0x2ac>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	f040 82a1 	bne.w	8002d3a <stepmotor_main+0x5ea>
         dotmatrix_main_test2();  // 선택 모드임을 dotmatrix에 표시
 80027f8:	f7fe fca4 	bl	8001144 <dotmatrix_main_test2>
         if(get_button(GPIOC, GPIO_PIN_0, BTN0) == BUTTON_PRESS)
 80027fc:	2200      	movs	r2, #0
 80027fe:	2101      	movs	r1, #1
 8002800:	487d      	ldr	r0, [pc, #500]	; (80029f8 <stepmotor_main+0x2a8>)
 8002802:	f7fe fb55 	bl	8000eb0 <get_button>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d16e      	bne.n	80028ea <stepmotor_main+0x19a>
             int found = 0;  // 1층이 이미 선택되었는지 여부를 검사하는 플래그
 800280c:	2300      	movs	r3, #0
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
             for (int i = 0; i < floor_count; i++)
 8002810:	2300      	movs	r3, #0
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
 8002814:	e02a      	b.n	800286c <stepmotor_main+0x11c>
                  if (selected_floors[i] == 1)
 8002816:	4a7c      	ldr	r2, [pc, #496]	; (8002a08 <stepmotor_main+0x2b8>)
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	4413      	add	r3, r2
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d120      	bne.n	8002866 <stepmotor_main+0x116>
                     found = 1; // 1층이 이미 배열에 존재함
 8002824:	2301      	movs	r3, #1
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
                     for (int j = i; j < floor_count - 1; j++)
 8002828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
 800282c:	e00c      	b.n	8002848 <stepmotor_main+0xf8>
                         selected_floors[j] = selected_floors[j + 1];
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	3301      	adds	r3, #1
 8002832:	4a75      	ldr	r2, [pc, #468]	; (8002a08 <stepmotor_main+0x2b8>)
 8002834:	5cd3      	ldrb	r3, [r2, r3]
 8002836:	b2d9      	uxtb	r1, r3
 8002838:	4a73      	ldr	r2, [pc, #460]	; (8002a08 <stepmotor_main+0x2b8>)
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	4413      	add	r3, r2
 800283e:	460a      	mov	r2, r1
 8002840:	701a      	strb	r2, [r3, #0]
                     for (int j = i; j < floor_count - 1; j++)
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	3301      	adds	r3, #1
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
 8002848:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <stepmotor_main+0x2b0>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	3b01      	subs	r3, #1
 8002850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002852:	429a      	cmp	r2, r3
 8002854:	dbeb      	blt.n	800282e <stepmotor_main+0xde>
                     floor_count--;  // 선택된 층의 수 1 감소
 8002856:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <stepmotor_main+0x2b0>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b2da      	uxtb	r2, r3
 8002860:	4b67      	ldr	r3, [pc, #412]	; (8002a00 <stepmotor_main+0x2b0>)
 8002862:	701a      	strb	r2, [r3, #0]
                     break;
 8002864:	e009      	b.n	800287a <stepmotor_main+0x12a>
             for (int i = 0; i < floor_count; i++)
 8002866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002868:	3301      	adds	r3, #1
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
 800286c:	4b64      	ldr	r3, [pc, #400]	; (8002a00 <stepmotor_main+0x2b0>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002876:	4293      	cmp	r3, r2
 8002878:	dbcd      	blt.n	8002816 <stepmotor_main+0xc6>
             if (!found)  // 1층이 선택되지 않은 상태면
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10f      	bne.n	80028a0 <stepmotor_main+0x150>
                  if (floor_count < MAX_FLOORS)
 8002880:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <stepmotor_main+0x2b0>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b04      	cmp	r3, #4
 8002888:	d80a      	bhi.n	80028a0 <stepmotor_main+0x150>
                     selected_floors[floor_count++] = 1;  // 1층 추가
 800288a:	4b5d      	ldr	r3, [pc, #372]	; (8002a00 <stepmotor_main+0x2b0>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	b2d1      	uxtb	r1, r2
 8002894:	4a5a      	ldr	r2, [pc, #360]	; (8002a00 <stepmotor_main+0x2b0>)
 8002896:	7011      	strb	r1, [r2, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4b5b      	ldr	r3, [pc, #364]	; (8002a08 <stepmotor_main+0x2b8>)
 800289c:	2101      	movs	r1, #1
 800289e:	5499      	strb	r1, [r3, r2]
             led_all_off();  // 모든 LED 끔
 80028a0:	f7ff fadc 	bl	8001e5c <led_all_off>
             if (floor_count > 0 && selected_floors[floor_count - 1] == 1)
 80028a4:	4b56      	ldr	r3, [pc, #344]	; (8002a00 <stepmotor_main+0x2b0>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <stepmotor_main+0x174>
 80028ae:	4b54      	ldr	r3, [pc, #336]	; (8002a00 <stepmotor_main+0x2b0>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	4a54      	ldr	r2, [pc, #336]	; (8002a08 <stepmotor_main+0x2b8>)
 80028b8:	5cd3      	ldrb	r3, [r2, r3]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <stepmotor_main+0x174>
                  led_one_on();
 80028c0:	f7ff faa8 	bl	8001e14 <led_one_on>
             dot_number = (floor_count > 0 ? selected_floors[floor_count - 1] : 0);
 80028c4:	4b4e      	ldr	r3, [pc, #312]	; (8002a00 <stepmotor_main+0x2b0>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <stepmotor_main+0x18e>
 80028ce:	4b4c      	ldr	r3, [pc, #304]	; (8002a00 <stepmotor_main+0x2b0>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	4a4c      	ldr	r2, [pc, #304]	; (8002a08 <stepmotor_main+0x2b8>)
 80028d8:	5cd3      	ldrb	r3, [r2, r3]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	e000      	b.n	80028e0 <stepmotor_main+0x190>
 80028de:	2300      	movs	r3, #0
 80028e0:	4a4c      	ldr	r2, [pc, #304]	; (8002a14 <stepmotor_main+0x2c4>)
 80028e2:	7013      	strb	r3, [r2, #0]
             dotmatrix_main_test();  // dotmatrix에 현재 선택된 층 출력
 80028e4:	f7fe fb82 	bl	8000fec <dotmatrix_main_test>
      break;
 80028e8:	e227      	b.n	8002d3a <stepmotor_main+0x5ea>
         else if(get_button(GPIOC, GPIO_PIN_1, BTN1) == BUTTON_PRESS)
 80028ea:	2201      	movs	r2, #1
 80028ec:	2102      	movs	r1, #2
 80028ee:	4842      	ldr	r0, [pc, #264]	; (80029f8 <stepmotor_main+0x2a8>)
 80028f0:	f7fe fade 	bl	8000eb0 <get_button>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d16e      	bne.n	80029d8 <stepmotor_main+0x288>
             int found = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
             for (int i = 0; i < floor_count; i++)
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	e02a      	b.n	800295a <stepmotor_main+0x20a>
                  if (selected_floors[i] == 2)
 8002904:	4a40      	ldr	r2, [pc, #256]	; (8002a08 <stepmotor_main+0x2b8>)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	4413      	add	r3, r2
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d120      	bne.n	8002954 <stepmotor_main+0x204>
                     found = 1;
 8002912:	2301      	movs	r3, #1
 8002914:	623b      	str	r3, [r7, #32]
                     for (int j = i; j < floor_count - 1; j++)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	61bb      	str	r3, [r7, #24]
 800291a:	e00c      	b.n	8002936 <stepmotor_main+0x1e6>
                         selected_floors[j] = selected_floors[j + 1];
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	3301      	adds	r3, #1
 8002920:	4a39      	ldr	r2, [pc, #228]	; (8002a08 <stepmotor_main+0x2b8>)
 8002922:	5cd3      	ldrb	r3, [r2, r3]
 8002924:	b2d9      	uxtb	r1, r3
 8002926:	4a38      	ldr	r2, [pc, #224]	; (8002a08 <stepmotor_main+0x2b8>)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	4413      	add	r3, r2
 800292c:	460a      	mov	r2, r1
 800292e:	701a      	strb	r2, [r3, #0]
                     for (int j = i; j < floor_count - 1; j++)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	3301      	adds	r3, #1
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <stepmotor_main+0x2b0>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	429a      	cmp	r2, r3
 8002942:	dbeb      	blt.n	800291c <stepmotor_main+0x1cc>
                     floor_count--;
 8002944:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <stepmotor_main+0x2b0>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <stepmotor_main+0x2b0>)
 8002950:	701a      	strb	r2, [r3, #0]
                     break;
 8002952:	e009      	b.n	8002968 <stepmotor_main+0x218>
             for (int i = 0; i < floor_count; i++)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	3301      	adds	r3, #1
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	4b29      	ldr	r3, [pc, #164]	; (8002a00 <stepmotor_main+0x2b0>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	4293      	cmp	r3, r2
 8002966:	dbcd      	blt.n	8002904 <stepmotor_main+0x1b4>
             if (!found)
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10f      	bne.n	800298e <stepmotor_main+0x23e>
                  if (floor_count < MAX_FLOORS)
 800296e:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <stepmotor_main+0x2b0>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b04      	cmp	r3, #4
 8002976:	d80a      	bhi.n	800298e <stepmotor_main+0x23e>
                     selected_floors[floor_count++] = 2;  // 2층 추가
 8002978:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <stepmotor_main+0x2b0>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	b2d1      	uxtb	r1, r2
 8002982:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <stepmotor_main+0x2b0>)
 8002984:	7011      	strb	r1, [r2, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <stepmotor_main+0x2b8>)
 800298a:	2102      	movs	r1, #2
 800298c:	5499      	strb	r1, [r3, r2]
             led_all_off();
 800298e:	f7ff fa65 	bl	8001e5c <led_all_off>
             if (floor_count > 0 && selected_floors[floor_count - 1] == 2)
 8002992:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <stepmotor_main+0x2b0>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <stepmotor_main+0x262>
 800299c:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <stepmotor_main+0x2b0>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <stepmotor_main+0x2b8>)
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d101      	bne.n	80029b2 <stepmotor_main+0x262>
                  led_two_on();
 80029ae:	f7ff fa3d 	bl	8001e2c <led_two_on>
             dot_number = (floor_count > 0 ? selected_floors[floor_count - 1] : 0);
 80029b2:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <stepmotor_main+0x2b0>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <stepmotor_main+0x27c>
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <stepmotor_main+0x2b0>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	4a10      	ldr	r2, [pc, #64]	; (8002a08 <stepmotor_main+0x2b8>)
 80029c6:	5cd3      	ldrb	r3, [r2, r3]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	e000      	b.n	80029ce <stepmotor_main+0x27e>
 80029cc:	2300      	movs	r3, #0
 80029ce:	4a11      	ldr	r2, [pc, #68]	; (8002a14 <stepmotor_main+0x2c4>)
 80029d0:	7013      	strb	r3, [r2, #0]
             dotmatrix_main_test();
 80029d2:	f7fe fb0b 	bl	8000fec <dotmatrix_main_test>
      break;
 80029d6:	e1b0      	b.n	8002d3a <stepmotor_main+0x5ea>
         else if(get_button(GPIOC, GPIO_PIN_2, BTN2) == BUTTON_PRESS)
 80029d8:	2202      	movs	r2, #2
 80029da:	2104      	movs	r1, #4
 80029dc:	4806      	ldr	r0, [pc, #24]	; (80029f8 <stepmotor_main+0x2a8>)
 80029de:	f7fe fa67 	bl	8000eb0 <get_button>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f040 8081 	bne.w	8002aec <stepmotor_main+0x39c>
             int found = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
             for (int i = 0; i < floor_count; i++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	e03c      	b.n	8002a6e <stepmotor_main+0x31e>
 80029f4:	20000274 	.word	0x20000274
 80029f8:	40020800 	.word	0x40020800
 80029fc:	20000048 	.word	0x20000048
 8002a00:	2000027d 	.word	0x2000027d
 8002a04:	2000027e 	.word	0x2000027e
 8002a08:	20000278 	.word	0x20000278
 8002a0c:	20000275 	.word	0x20000275
 8002a10:	20004c6e 	.word	0x20004c6e
 8002a14:	20000248 	.word	0x20000248
                  if (selected_floors[i] == 3)
 8002a18:	4a98      	ldr	r2, [pc, #608]	; (8002c7c <stepmotor_main+0x52c>)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d120      	bne.n	8002a68 <stepmotor_main+0x318>
                     found = 1;
 8002a26:	2301      	movs	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
                     for (int j = i; j < floor_count - 1; j++)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e00c      	b.n	8002a4a <stepmotor_main+0x2fa>
                         selected_floors[j] = selected_floors[j + 1];
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	3301      	adds	r3, #1
 8002a34:	4a91      	ldr	r2, [pc, #580]	; (8002c7c <stepmotor_main+0x52c>)
 8002a36:	5cd3      	ldrb	r3, [r2, r3]
 8002a38:	b2d9      	uxtb	r1, r3
 8002a3a:	4a90      	ldr	r2, [pc, #576]	; (8002c7c <stepmotor_main+0x52c>)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4413      	add	r3, r2
 8002a40:	460a      	mov	r2, r1
 8002a42:	701a      	strb	r2, [r3, #0]
                     for (int j = i; j < floor_count - 1; j++)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	3301      	adds	r3, #1
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b8d      	ldr	r3, [pc, #564]	; (8002c80 <stepmotor_main+0x530>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	dbeb      	blt.n	8002a30 <stepmotor_main+0x2e0>
                     floor_count--;
 8002a58:	4b89      	ldr	r3, [pc, #548]	; (8002c80 <stepmotor_main+0x530>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4b87      	ldr	r3, [pc, #540]	; (8002c80 <stepmotor_main+0x530>)
 8002a64:	701a      	strb	r2, [r3, #0]
                     break;
 8002a66:	e009      	b.n	8002a7c <stepmotor_main+0x32c>
             for (int i = 0; i < floor_count; i++)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	4b84      	ldr	r3, [pc, #528]	; (8002c80 <stepmotor_main+0x530>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	dbcd      	blt.n	8002a18 <stepmotor_main+0x2c8>
             if (!found)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <stepmotor_main+0x352>
                  if (floor_count < MAX_FLOORS)
 8002a82:	4b7f      	ldr	r3, [pc, #508]	; (8002c80 <stepmotor_main+0x530>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d80a      	bhi.n	8002aa2 <stepmotor_main+0x352>
                     selected_floors[floor_count++] = 3;  // 3층 추가
 8002a8c:	4b7c      	ldr	r3, [pc, #496]	; (8002c80 <stepmotor_main+0x530>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	b2d1      	uxtb	r1, r2
 8002a96:	4a7a      	ldr	r2, [pc, #488]	; (8002c80 <stepmotor_main+0x530>)
 8002a98:	7011      	strb	r1, [r2, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b77      	ldr	r3, [pc, #476]	; (8002c7c <stepmotor_main+0x52c>)
 8002a9e:	2103      	movs	r1, #3
 8002aa0:	5499      	strb	r1, [r3, r2]
             led_all_off();
 8002aa2:	f7ff f9db 	bl	8001e5c <led_all_off>
             if (floor_count > 0 && selected_floors[floor_count - 1] == 3)
 8002aa6:	4b76      	ldr	r3, [pc, #472]	; (8002c80 <stepmotor_main+0x530>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <stepmotor_main+0x376>
 8002ab0:	4b73      	ldr	r3, [pc, #460]	; (8002c80 <stepmotor_main+0x530>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	4a70      	ldr	r2, [pc, #448]	; (8002c7c <stepmotor_main+0x52c>)
 8002aba:	5cd3      	ldrb	r3, [r2, r3]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d101      	bne.n	8002ac6 <stepmotor_main+0x376>
                  led_three_on();
 8002ac2:	f7ff f9bf 	bl	8001e44 <led_three_on>
             dot_number = (floor_count > 0 ? selected_floors[floor_count - 1] : 0);
 8002ac6:	4b6e      	ldr	r3, [pc, #440]	; (8002c80 <stepmotor_main+0x530>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d007      	beq.n	8002ae0 <stepmotor_main+0x390>
 8002ad0:	4b6b      	ldr	r3, [pc, #428]	; (8002c80 <stepmotor_main+0x530>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	4a68      	ldr	r2, [pc, #416]	; (8002c7c <stepmotor_main+0x52c>)
 8002ada:	5cd3      	ldrb	r3, [r2, r3]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e000      	b.n	8002ae2 <stepmotor_main+0x392>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	4a68      	ldr	r2, [pc, #416]	; (8002c84 <stepmotor_main+0x534>)
 8002ae4:	7013      	strb	r3, [r2, #0]
             dotmatrix_main_test();
 8002ae6:	f7fe fa81 	bl	8000fec <dotmatrix_main_test>
      break;
 8002aea:	e126      	b.n	8002d3a <stepmotor_main+0x5ea>
         else if(get_button(GPIOC, GPIO_PIN_3, BTN3) == BUTTON_PRESS)
 8002aec:	2203      	movs	r2, #3
 8002aee:	2108      	movs	r1, #8
 8002af0:	4865      	ldr	r0, [pc, #404]	; (8002c88 <stepmotor_main+0x538>)
 8002af2:	f7fe f9dd 	bl	8000eb0 <get_button>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f040 811e 	bne.w	8002d3a <stepmotor_main+0x5ea>
             int found = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
             for (int i = 0; i < floor_count; i++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	e02a      	b.n	8002b5e <stepmotor_main+0x40e>
                  if (selected_floors[i] == 4)
 8002b08:	4a5c      	ldr	r2, [pc, #368]	; (8002c7c <stepmotor_main+0x52c>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d120      	bne.n	8002b58 <stepmotor_main+0x408>
                     found = 1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	60bb      	str	r3, [r7, #8]
                     for (int j = i; j < floor_count - 1; j++)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	e00c      	b.n	8002b3a <stepmotor_main+0x3ea>
                         selected_floors[j] = selected_floors[j + 1];
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	3301      	adds	r3, #1
 8002b24:	4a55      	ldr	r2, [pc, #340]	; (8002c7c <stepmotor_main+0x52c>)
 8002b26:	5cd3      	ldrb	r3, [r2, r3]
 8002b28:	b2d9      	uxtb	r1, r3
 8002b2a:	4a54      	ldr	r2, [pc, #336]	; (8002c7c <stepmotor_main+0x52c>)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4413      	add	r3, r2
 8002b30:	460a      	mov	r2, r1
 8002b32:	701a      	strb	r2, [r3, #0]
                     for (int j = i; j < floor_count - 1; j++)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	3301      	adds	r3, #1
 8002b38:	603b      	str	r3, [r7, #0]
 8002b3a:	4b51      	ldr	r3, [pc, #324]	; (8002c80 <stepmotor_main+0x530>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	dbeb      	blt.n	8002b20 <stepmotor_main+0x3d0>
                     floor_count--;
 8002b48:	4b4d      	ldr	r3, [pc, #308]	; (8002c80 <stepmotor_main+0x530>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4b4b      	ldr	r3, [pc, #300]	; (8002c80 <stepmotor_main+0x530>)
 8002b54:	701a      	strb	r2, [r3, #0]
                     break;
 8002b56:	e009      	b.n	8002b6c <stepmotor_main+0x41c>
             for (int i = 0; i < floor_count; i++)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	4b48      	ldr	r3, [pc, #288]	; (8002c80 <stepmotor_main+0x530>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	dbcd      	blt.n	8002b08 <stepmotor_main+0x3b8>
             if (!found)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10f      	bne.n	8002b92 <stepmotor_main+0x442>
                  if (floor_count < MAX_FLOORS)
 8002b72:	4b43      	ldr	r3, [pc, #268]	; (8002c80 <stepmotor_main+0x530>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d80a      	bhi.n	8002b92 <stepmotor_main+0x442>
                     selected_floors[floor_count++] = 4;  // 4층 추가
 8002b7c:	4b40      	ldr	r3, [pc, #256]	; (8002c80 <stepmotor_main+0x530>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	b2d1      	uxtb	r1, r2
 8002b86:	4a3e      	ldr	r2, [pc, #248]	; (8002c80 <stepmotor_main+0x530>)
 8002b88:	7011      	strb	r1, [r2, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4b3b      	ldr	r3, [pc, #236]	; (8002c7c <stepmotor_main+0x52c>)
 8002b8e:	2104      	movs	r1, #4
 8002b90:	5499      	strb	r1, [r3, r2]
             led_all_off();
 8002b92:	f7ff f963 	bl	8001e5c <led_all_off>
             if (floor_count > 0 && selected_floors[floor_count - 1] == 4)
 8002b96:	4b3a      	ldr	r3, [pc, #232]	; (8002c80 <stepmotor_main+0x530>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <stepmotor_main+0x466>
 8002ba0:	4b37      	ldr	r3, [pc, #220]	; (8002c80 <stepmotor_main+0x530>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	4a34      	ldr	r2, [pc, #208]	; (8002c7c <stepmotor_main+0x52c>)
 8002baa:	5cd3      	ldrb	r3, [r2, r3]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d101      	bne.n	8002bb6 <stepmotor_main+0x466>
                  led_all_on();  // 4층 선택 시 전체 LED 켜기
 8002bb2:	f7ff f923 	bl	8001dfc <led_all_on>
             dot_number = (floor_count > 0 ? selected_floors[floor_count - 1] : 0);
 8002bb6:	4b32      	ldr	r3, [pc, #200]	; (8002c80 <stepmotor_main+0x530>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <stepmotor_main+0x480>
 8002bc0:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <stepmotor_main+0x530>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	4a2c      	ldr	r2, [pc, #176]	; (8002c7c <stepmotor_main+0x52c>)
 8002bca:	5cd3      	ldrb	r3, [r2, r3]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e000      	b.n	8002bd2 <stepmotor_main+0x482>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	4a2c      	ldr	r2, [pc, #176]	; (8002c84 <stepmotor_main+0x534>)
 8002bd4:	7013      	strb	r3, [r2, #0]
             dotmatrix_main_test();
 8002bd6:	f7fe fa09 	bl	8000fec <dotmatrix_main_test>
      break;
 8002bda:	e0ae      	b.n	8002d3a <stepmotor_main+0x5ea>
      stepmotor_drive(FORWARD);         // 한 스텝 전진
 8002bdc:	2001      	movs	r0, #1
 8002bde:	f000 f8c3 	bl	8002d68 <stepmotor_drive>
      set_rpm(13);                      // 13rpm 기준 스텝 간 딜레이 설정
 8002be2:	200d      	movs	r0, #13
 8002be4:	f7ff fda3 	bl	800272e <set_rpm>
      dot_number = current_state;       // 현재 도달한 층을 dot_number로 설정하여 dotmatrix 표시
 8002be8:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <stepmotor_main+0x53c>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <stepmotor_main+0x534>)
 8002bf0:	701a      	strb	r2, [r3, #0]
      dotmatrix_main_test();
 8002bf2:	f7fe f9fb 	bl	8000fec <dotmatrix_main_test>
      if(current_state == floor_state)
 8002bf6:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <stepmotor_main+0x53c>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <stepmotor_main+0x540>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	429a      	cmp	r2, r3
 8002c04:	f040 809b 	bne.w	8002d3e <stepmotor_main+0x5ee>
         beep(3);                     // 도착 알림 음 발생
 8002c08:	2003      	movs	r0, #3
 8002c0a:	f7fe f9c5 	bl	8000f98 <beep>
         osDelay(10);                 // 짧은 딜레이 후
 8002c0e:	200a      	movs	r0, #10
 8002c10:	f004 fee6 	bl	80079e0 <osDelay>
         floor_index++;               // 다음 선택된 층으로 이동하기 위해 인덱스 증가
 8002c14:	4b1f      	ldr	r3, [pc, #124]	; (8002c94 <stepmotor_main+0x544>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <stepmotor_main+0x544>)
 8002c20:	701a      	strb	r2, [r3, #0]
         if(floor_index < floor_count)
 8002c22:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <stepmotor_main+0x544>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <stepmotor_main+0x530>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d220      	bcs.n	8002c74 <stepmotor_main+0x524>
            floor_state = selected_floors[floor_index];
 8002c32:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <stepmotor_main+0x544>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <stepmotor_main+0x52c>)
 8002c3c:	5c9b      	ldrb	r3, [r3, r2]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <stepmotor_main+0x540>)
 8002c42:	701a      	strb	r2, [r3, #0]
            if(current_state < floor_state)
 8002c44:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <stepmotor_main+0x53c>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <stepmotor_main+0x540>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d203      	bcs.n	8002c5c <stepmotor_main+0x50c>
               stepmotor_state = FORWARD;
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <stepmotor_main+0x548>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]
      break;
 8002c5a:	e070      	b.n	8002d3e <stepmotor_main+0x5ee>
            else if(current_state > floor_state)
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <stepmotor_main+0x53c>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <stepmotor_main+0x540>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d968      	bls.n	8002d3e <stepmotor_main+0x5ee>
               stepmotor_state = BACKWARD;
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <stepmotor_main+0x548>)
 8002c6e:	2202      	movs	r2, #2
 8002c70:	701a      	strb	r2, [r3, #0]
      break;
 8002c72:	e064      	b.n	8002d3e <stepmotor_main+0x5ee>
            stepmotor_state = IDLE;
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <stepmotor_main+0x548>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
      break;
 8002c7a:	e060      	b.n	8002d3e <stepmotor_main+0x5ee>
 8002c7c:	20000278 	.word	0x20000278
 8002c80:	2000027d 	.word	0x2000027d
 8002c84:	20000248 	.word	0x20000248
 8002c88:	40020800 	.word	0x40020800
 8002c8c:	20004c6e 	.word	0x20004c6e
 8002c90:	20000275 	.word	0x20000275
 8002c94:	2000027e 	.word	0x2000027e
 8002c98:	20000274 	.word	0x20000274
      stepmotor_drive(BACKWARD);        // 한 스텝 후진
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	f000 f863 	bl	8002d68 <stepmotor_drive>
      set_rpm(13);                      // 스텝 간 딜레이 설정
 8002ca2:	200d      	movs	r0, #13
 8002ca4:	f7ff fd43 	bl	800272e <set_rpm>
      dot_number = current_state;       // dotmatrix 출력을 위해 현재 층 할당
 8002ca8:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <stepmotor_main+0x5fc>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	4b28      	ldr	r3, [pc, #160]	; (8002d50 <stepmotor_main+0x600>)
 8002cb0:	701a      	strb	r2, [r3, #0]
      dotmatrix_main_test();
 8002cb2:	f7fe f99b 	bl	8000fec <dotmatrix_main_test>
      if(current_state == floor_state)
 8002cb6:	4b25      	ldr	r3, [pc, #148]	; (8002d4c <stepmotor_main+0x5fc>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	4b25      	ldr	r3, [pc, #148]	; (8002d54 <stepmotor_main+0x604>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d13d      	bne.n	8002d42 <stepmotor_main+0x5f2>
         beep(3);                     // 목표 도달 시 알림 음 발생
 8002cc6:	2003      	movs	r0, #3
 8002cc8:	f7fe f966 	bl	8000f98 <beep>
         osDelay(10);
 8002ccc:	200a      	movs	r0, #10
 8002cce:	f004 fe87 	bl	80079e0 <osDelay>
         floor_index++;               // 다음 선택된 층으로 이동하기 위해 인덱스 증가
 8002cd2:	4b21      	ldr	r3, [pc, #132]	; (8002d58 <stepmotor_main+0x608>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <stepmotor_main+0x608>)
 8002cde:	701a      	strb	r2, [r3, #0]
         if(floor_index < floor_count)
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <stepmotor_main+0x608>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <stepmotor_main+0x60c>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d220      	bcs.n	8002d32 <stepmotor_main+0x5e2>
            floor_state = selected_floors[floor_index];
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <stepmotor_main+0x608>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <stepmotor_main+0x610>)
 8002cfa:	5c9b      	ldrb	r3, [r3, r2]
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <stepmotor_main+0x604>)
 8002d00:	701a      	strb	r2, [r3, #0]
            if(current_state < floor_state)
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <stepmotor_main+0x5fc>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <stepmotor_main+0x604>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d203      	bcs.n	8002d1a <stepmotor_main+0x5ca>
               stepmotor_state = FORWARD;
 8002d12:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <stepmotor_main+0x614>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
      break;
 8002d18:	e013      	b.n	8002d42 <stepmotor_main+0x5f2>
            else if(current_state > floor_state)
 8002d1a:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <stepmotor_main+0x5fc>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <stepmotor_main+0x604>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d90b      	bls.n	8002d42 <stepmotor_main+0x5f2>
               stepmotor_state = BACKWARD;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <stepmotor_main+0x614>)
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	701a      	strb	r2, [r3, #0]
      break;
 8002d30:	e007      	b.n	8002d42 <stepmotor_main+0x5f2>
            stepmotor_state = IDLE;
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <stepmotor_main+0x614>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
      break;
 8002d38:	e003      	b.n	8002d42 <stepmotor_main+0x5f2>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e002      	b.n	8002d44 <stepmotor_main+0x5f4>
      break;
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <stepmotor_main+0x5f4>
      break;
 8002d42:	bf00      	nop
}
 8002d44:	bf00      	nop
 8002d46:	3730      	adds	r7, #48	; 0x30
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20004c6e 	.word	0x20004c6e
 8002d50:	20000248 	.word	0x20000248
 8002d54:	20000275 	.word	0x20000275
 8002d58:	2000027e 	.word	0x2000027e
 8002d5c:	2000027d 	.word	0x2000027d
 8002d60:	20000278 	.word	0x20000278
 8002d64:	20000274 	.word	0x20000274

08002d68 <stepmotor_drive>:
 * - 모터의 한 스텝 진행을 위해 8단계 시퀀스에 따라
 *   GPIOC의 IN1 ~ IN4 핀에 출력 값을 보낸다.
 * - direction 인자가 FORWARD이면 한 단계 증가, BACKWARD이면 감소시키며, 0부터 7까지 순환하도록 한다.
 */
int stepmotor_drive(int direction)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
   static int step = 0;  // 현재 스텝 값을 저장하는 정적 변수 (범위: 0~7)
   switch(step)
 8002d70:	4b7a      	ldr	r3, [pc, #488]	; (8002f5c <stepmotor_drive+0x1f4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b07      	cmp	r3, #7
 8002d76:	f200 80cb 	bhi.w	8002f10 <stepmotor_drive+0x1a8>
 8002d7a:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <stepmotor_drive+0x18>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002da1 	.word	0x08002da1
 8002d84:	08002dcf 	.word	0x08002dcf
 8002d88:	08002dfd 	.word	0x08002dfd
 8002d8c:	08002e2b 	.word	0x08002e2b
 8002d90:	08002e59 	.word	0x08002e59
 8002d94:	08002e87 	.word	0x08002e87
 8002d98:	08002eb5 	.word	0x08002eb5
 8002d9c:	08002ee3 	.word	0x08002ee3
   {
   case 0:
      HAL_GPIO_WritePin(GPIOC, IN1_Pin, 1);  // 단계 0: IN1 활성, 나머지 비활성
 8002da0:	2201      	movs	r2, #1
 8002da2:	2140      	movs	r1, #64	; 0x40
 8002da4:	486e      	ldr	r0, [pc, #440]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002da6:	f001 fbf1 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN2_Pin, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	486c      	ldr	r0, [pc, #432]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002db0:	f001 fbec 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN3_Pin, 0);
 8002db4:	2200      	movs	r2, #0
 8002db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dba:	4869      	ldr	r0, [pc, #420]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002dbc:	f001 fbe6 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN4_Pin, 0);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dc6:	4866      	ldr	r0, [pc, #408]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002dc8:	f001 fbe0 	bl	800458c <HAL_GPIO_WritePin>
      break;
 8002dcc:	e0a0      	b.n	8002f10 <stepmotor_drive+0x1a8>
   case 1:
      HAL_GPIO_WritePin(GPIOC, IN1_Pin, 1);  // 단계 1: IN1과 IN2 활성, IN3, IN4 비활성
 8002dce:	2201      	movs	r2, #1
 8002dd0:	2140      	movs	r1, #64	; 0x40
 8002dd2:	4863      	ldr	r0, [pc, #396]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002dd4:	f001 fbda 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN2_Pin, 1);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	2180      	movs	r1, #128	; 0x80
 8002ddc:	4860      	ldr	r0, [pc, #384]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002dde:	f001 fbd5 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN3_Pin, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002de8:	485d      	ldr	r0, [pc, #372]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002dea:	f001 fbcf 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN4_Pin, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002df4:	485a      	ldr	r0, [pc, #360]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002df6:	f001 fbc9 	bl	800458c <HAL_GPIO_WritePin>
      break;
 8002dfa:	e089      	b.n	8002f10 <stepmotor_drive+0x1a8>
   case 2:
      HAL_GPIO_WritePin(GPIOC, IN1_Pin, 0);  // 단계 2: IN2 활성, 나머지 비활성
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2140      	movs	r1, #64	; 0x40
 8002e00:	4857      	ldr	r0, [pc, #348]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002e02:	f001 fbc3 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN2_Pin, 1);
 8002e06:	2201      	movs	r2, #1
 8002e08:	2180      	movs	r1, #128	; 0x80
 8002e0a:	4855      	ldr	r0, [pc, #340]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002e0c:	f001 fbbe 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN3_Pin, 0);
 8002e10:	2200      	movs	r2, #0
 8002e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e16:	4852      	ldr	r0, [pc, #328]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002e18:	f001 fbb8 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN4_Pin, 0);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e22:	484f      	ldr	r0, [pc, #316]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002e24:	f001 fbb2 	bl	800458c <HAL_GPIO_WritePin>
      break;
 8002e28:	e072      	b.n	8002f10 <stepmotor_drive+0x1a8>
   case 3:
      HAL_GPIO_WritePin(GPIOC, IN1_Pin, 0);  // 단계 3: IN2와 IN3 활성, IN1, IN4 비활성
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2140      	movs	r1, #64	; 0x40
 8002e2e:	484c      	ldr	r0, [pc, #304]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002e30:	f001 fbac 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN2_Pin, 1);
 8002e34:	2201      	movs	r2, #1
 8002e36:	2180      	movs	r1, #128	; 0x80
 8002e38:	4849      	ldr	r0, [pc, #292]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002e3a:	f001 fba7 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN3_Pin, 1);
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e44:	4846      	ldr	r0, [pc, #280]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002e46:	f001 fba1 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN4_Pin, 0);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e50:	4843      	ldr	r0, [pc, #268]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002e52:	f001 fb9b 	bl	800458c <HAL_GPIO_WritePin>
      break;
 8002e56:	e05b      	b.n	8002f10 <stepmotor_drive+0x1a8>
   case 4:
      HAL_GPIO_WritePin(GPIOC, IN1_Pin, 0);  // 단계 4: IN3 활성, 다른 핀은 비활성
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2140      	movs	r1, #64	; 0x40
 8002e5c:	4840      	ldr	r0, [pc, #256]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002e5e:	f001 fb95 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN2_Pin, 0);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2180      	movs	r1, #128	; 0x80
 8002e66:	483e      	ldr	r0, [pc, #248]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002e68:	f001 fb90 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN3_Pin, 1);
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e72:	483b      	ldr	r0, [pc, #236]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002e74:	f001 fb8a 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN4_Pin, 0);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e7e:	4838      	ldr	r0, [pc, #224]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002e80:	f001 fb84 	bl	800458c <HAL_GPIO_WritePin>
      break;
 8002e84:	e044      	b.n	8002f10 <stepmotor_drive+0x1a8>
   case 5:
      HAL_GPIO_WritePin(GPIOC, IN1_Pin, 0);  // 단계 5: IN3와 IN4 활성, IN1, IN2 비활성
 8002e86:	2200      	movs	r2, #0
 8002e88:	2140      	movs	r1, #64	; 0x40
 8002e8a:	4835      	ldr	r0, [pc, #212]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002e8c:	f001 fb7e 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN2_Pin, 0);
 8002e90:	2200      	movs	r2, #0
 8002e92:	2180      	movs	r1, #128	; 0x80
 8002e94:	4832      	ldr	r0, [pc, #200]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002e96:	f001 fb79 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN3_Pin, 1);
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ea0:	482f      	ldr	r0, [pc, #188]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002ea2:	f001 fb73 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN4_Pin, 1);
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eac:	482c      	ldr	r0, [pc, #176]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002eae:	f001 fb6d 	bl	800458c <HAL_GPIO_WritePin>
      break;
 8002eb2:	e02d      	b.n	8002f10 <stepmotor_drive+0x1a8>
   case 6:
      HAL_GPIO_WritePin(GPIOC, IN1_Pin, 0);  // 단계 6: IN4 활성, 나머지 비활성
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2140      	movs	r1, #64	; 0x40
 8002eb8:	4829      	ldr	r0, [pc, #164]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002eba:	f001 fb67 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN2_Pin, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2180      	movs	r1, #128	; 0x80
 8002ec2:	4827      	ldr	r0, [pc, #156]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002ec4:	f001 fb62 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN3_Pin, 0);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ece:	4824      	ldr	r0, [pc, #144]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002ed0:	f001 fb5c 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN4_Pin, 1);
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eda:	4821      	ldr	r0, [pc, #132]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002edc:	f001 fb56 	bl	800458c <HAL_GPIO_WritePin>
      break;
 8002ee0:	e016      	b.n	8002f10 <stepmotor_drive+0x1a8>
   case 7:
      HAL_GPIO_WritePin(GPIOC, IN1_Pin, 1);  // 단계 7: IN1과 IN4 활성, IN2와 IN3 비활성
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	2140      	movs	r1, #64	; 0x40
 8002ee6:	481e      	ldr	r0, [pc, #120]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002ee8:	f001 fb50 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN2_Pin, 0);
 8002eec:	2200      	movs	r2, #0
 8002eee:	2180      	movs	r1, #128	; 0x80
 8002ef0:	481b      	ldr	r0, [pc, #108]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002ef2:	f001 fb4b 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN3_Pin, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002efc:	4818      	ldr	r0, [pc, #96]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002efe:	f001 fb45 	bl	800458c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, IN4_Pin, 1);
 8002f02:	2201      	movs	r2, #1
 8002f04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f08:	4815      	ldr	r0, [pc, #84]	; (8002f60 <stepmotor_drive+0x1f8>)
 8002f0a:	f001 fb3f 	bl	800458c <HAL_GPIO_WritePin>
      break;
 8002f0e:	bf00      	nop
   }

   // 업데이트: direction이 FORWARD면 스텝 증가, BACKWARD면 감소
   if(direction == FORWARD)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d110      	bne.n	8002f38 <stepmotor_drive+0x1d0>
   {
      step++;           // FORWARD이면 step 값을 1 증가
 8002f16:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <stepmotor_drive+0x1f4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	4a0f      	ldr	r2, [pc, #60]	; (8002f5c <stepmotor_drive+0x1f4>)
 8002f1e:	6013      	str	r3, [r2, #0]
      step %= 8;        // 8 이상이 되면 0~7 사이로 순환
 8002f20:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <stepmotor_drive+0x1f4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	425a      	negs	r2, r3
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	f002 0207 	and.w	r2, r2, #7
 8002f2e:	bf58      	it	pl
 8002f30:	4253      	negpl	r3, r2
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <stepmotor_drive+0x1f4>)
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e00b      	b.n	8002f50 <stepmotor_drive+0x1e8>
   }
   else  // BACKWARD
   {
      step--;           // BACKWARD이면 step 값을 1 감소
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <stepmotor_drive+0x1f4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <stepmotor_drive+0x1f4>)
 8002f40:	6013      	str	r3, [r2, #0]
      if(step < 0)
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <stepmotor_drive+0x1f4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	da02      	bge.n	8002f50 <stepmotor_drive+0x1e8>
         step = 7;      // 음수가 되면 7로 순환시킴
 8002f4a:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <stepmotor_drive+0x1f4>)
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	601a      	str	r2, [r3, #0]
   }
   return step;          // 업데이트된 스텝 값을 반환
 8002f50:	4b02      	ldr	r3, [pc, #8]	; (8002f5c <stepmotor_drive+0x1f4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000280 	.word	0x20000280
 8002f60:	40020800 	.word	0x40020800

08002f64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <HAL_MspInit+0x54>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	4a11      	ldr	r2, [pc, #68]	; (8002fb8 <HAL_MspInit+0x54>)
 8002f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f78:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7a:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <HAL_MspInit+0x54>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_MspInit+0x54>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <HAL_MspInit+0x54>)
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f94:	6413      	str	r3, [r2, #64]	; 0x40
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <HAL_MspInit+0x54>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	210f      	movs	r1, #15
 8002fa6:	f06f 0001 	mvn.w	r0, #1
 8002faa:	f000 fda3 	bl	8003af4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800

08002fbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a19      	ldr	r2, [pc, #100]	; (8003040 <HAL_I2C_MspInit+0x84>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d12c      	bne.n	8003038 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	4b18      	ldr	r3, [pc, #96]	; (8003044 <HAL_I2C_MspInit+0x88>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a17      	ldr	r2, [pc, #92]	; (8003044 <HAL_I2C_MspInit+0x88>)
 8002fe8:	f043 0302 	orr.w	r3, r3, #2
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	4b15      	ldr	r3, [pc, #84]	; (8003044 <HAL_I2C_MspInit+0x88>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ffa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003000:	2312      	movs	r3, #18
 8003002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003008:	2303      	movs	r3, #3
 800300a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800300c:	2304      	movs	r3, #4
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	4619      	mov	r1, r3
 8003016:	480c      	ldr	r0, [pc, #48]	; (8003048 <HAL_I2C_MspInit+0x8c>)
 8003018:	f001 f91c 	bl	8004254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_I2C_MspInit+0x88>)
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	4a07      	ldr	r2, [pc, #28]	; (8003044 <HAL_I2C_MspInit+0x88>)
 8003026:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800302a:	6413      	str	r3, [r2, #64]	; 0x40
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_I2C_MspInit+0x88>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003038:	bf00      	nop
 800303a:	3728      	adds	r7, #40	; 0x28
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40005400 	.word	0x40005400
 8003044:	40023800 	.word	0x40023800
 8003048:	40020400 	.word	0x40020400

0800304c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305c:	d10e      	bne.n	800307c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_TIM_Base_MspInit+0xa8>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a23      	ldr	r2, [pc, #140]	; (80030f4 <HAL_TIM_Base_MspInit+0xa8>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
 800306e:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <HAL_TIM_Base_MspInit+0xa8>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800307a:	e036      	b.n	80030ea <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <HAL_TIM_Base_MspInit+0xac>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d116      	bne.n	80030b4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_TIM_Base_MspInit+0xa8>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_TIM_Base_MspInit+0xa8>)
 8003090:	f043 0302 	orr.w	r3, r3, #2
 8003094:	6413      	str	r3, [r2, #64]	; 0x40
 8003096:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <HAL_TIM_Base_MspInit+0xa8>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2105      	movs	r1, #5
 80030a6:	201d      	movs	r0, #29
 80030a8:	f000 fd24 	bl	8003af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030ac:	201d      	movs	r0, #29
 80030ae:	f000 fd3d 	bl	8003b2c <HAL_NVIC_EnableIRQ>
}
 80030b2:	e01a      	b.n	80030ea <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a10      	ldr	r2, [pc, #64]	; (80030fc <HAL_TIM_Base_MspInit+0xb0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d115      	bne.n	80030ea <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <HAL_TIM_Base_MspInit+0xa8>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	4a0b      	ldr	r2, [pc, #44]	; (80030f4 <HAL_TIM_Base_MspInit+0xa8>)
 80030c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030cc:	6453      	str	r3, [r2, #68]	; 0x44
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_TIM_Base_MspInit+0xa8>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80030da:	2200      	movs	r2, #0
 80030dc:	2105      	movs	r1, #5
 80030de:	201a      	movs	r0, #26
 80030e0:	f000 fd08 	bl	8003af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80030e4:	201a      	movs	r0, #26
 80030e6:	f000 fd21 	bl	8003b2c <HAL_NVIC_EnableIRQ>
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40014800 	.word	0x40014800

08003100 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0b      	ldr	r2, [pc, #44]	; (800313c <HAL_TIM_PWM_MspInit+0x3c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d10d      	bne.n	800312e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_TIM_PWM_MspInit+0x40>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_TIM_PWM_MspInit+0x40>)
 800311c:	f043 0308 	orr.w	r3, r3, #8
 8003120:	6413      	str	r3, [r2, #64]	; 0x40
 8003122:	4b07      	ldr	r3, [pc, #28]	; (8003140 <HAL_TIM_PWM_MspInit+0x40>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40000c00 	.word	0x40000c00
 8003140:	40023800 	.word	0x40023800

08003144 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08a      	sub	sp, #40	; 0x28
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a24      	ldr	r2, [pc, #144]	; (80031f4 <HAL_TIM_MspPostInit+0xb0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d11e      	bne.n	80031a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <HAL_TIM_MspPostInit+0xb4>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4a22      	ldr	r2, [pc, #136]	; (80031f8 <HAL_TIM_MspPostInit+0xb4>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6313      	str	r3, [r2, #48]	; 0x30
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <HAL_TIM_MspPostInit+0xb4>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8003182:	2340      	movs	r3, #64	; 0x40
 8003184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003186:	2302      	movs	r3, #2
 8003188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318e:	2300      	movs	r3, #0
 8003190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003192:	2302      	movs	r3, #2
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003196:	f107 0314 	add.w	r3, r7, #20
 800319a:	4619      	mov	r1, r3
 800319c:	4817      	ldr	r0, [pc, #92]	; (80031fc <HAL_TIM_MspPostInit+0xb8>)
 800319e:	f001 f859 	bl	8004254 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80031a2:	e022      	b.n	80031ea <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a15      	ldr	r2, [pc, #84]	; (8003200 <HAL_TIM_MspPostInit+0xbc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d11d      	bne.n	80031ea <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_TIM_MspPostInit+0xb4>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <HAL_TIM_MspPostInit+0xb4>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <HAL_TIM_MspPostInit+0xb4>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_Pin;
 80031ca:	2302      	movs	r3, #2
 80031cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ce:	2302      	movs	r3, #2
 80031d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d6:	2300      	movs	r3, #0
 80031d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031da:	2302      	movs	r3, #2
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80031de:	f107 0314 	add.w	r3, r7, #20
 80031e2:	4619      	mov	r1, r3
 80031e4:	4805      	ldr	r0, [pc, #20]	; (80031fc <HAL_TIM_MspPostInit+0xb8>)
 80031e6:	f001 f835 	bl	8004254 <HAL_GPIO_Init>
}
 80031ea:	bf00      	nop
 80031ec:	3728      	adds	r7, #40	; 0x28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40020000 	.word	0x40020000
 8003200:	40000c00 	.word	0x40000c00

08003204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <HAL_UART_MspInit+0x94>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d133      	bne.n	800328e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	4b1c      	ldr	r3, [pc, #112]	; (800329c <HAL_UART_MspInit+0x98>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	4a1b      	ldr	r2, [pc, #108]	; (800329c <HAL_UART_MspInit+0x98>)
 8003230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003234:	6413      	str	r3, [r2, #64]	; 0x40
 8003236:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_UART_MspInit+0x98>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	4b15      	ldr	r3, [pc, #84]	; (800329c <HAL_UART_MspInit+0x98>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a14      	ldr	r2, [pc, #80]	; (800329c <HAL_UART_MspInit+0x98>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <HAL_UART_MspInit+0x98>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800325e:	230c      	movs	r3, #12
 8003260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326a:	2303      	movs	r3, #3
 800326c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800326e:	2307      	movs	r3, #7
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003272:	f107 0314 	add.w	r3, r7, #20
 8003276:	4619      	mov	r1, r3
 8003278:	4809      	ldr	r0, [pc, #36]	; (80032a0 <HAL_UART_MspInit+0x9c>)
 800327a:	f000 ffeb 	bl	8004254 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800327e:	2200      	movs	r2, #0
 8003280:	2105      	movs	r1, #5
 8003282:	2026      	movs	r0, #38	; 0x26
 8003284:	f000 fc36 	bl	8003af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003288:	2026      	movs	r0, #38	; 0x26
 800328a:	f000 fc4f 	bl	8003b2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800328e:	bf00      	nop
 8003290:	3728      	adds	r7, #40	; 0x28
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40004400 	.word	0x40004400
 800329c:	40023800 	.word	0x40023800
 80032a0:	40020000 	.word	0x40020000

080032a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08c      	sub	sp, #48	; 0x30
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80032b4:	2200      	movs	r2, #0
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	2019      	movs	r0, #25
 80032ba:	f000 fc1b 	bl	8003af4 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80032be:	2019      	movs	r0, #25
 80032c0:	f000 fc34 	bl	8003b2c <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <HAL_InitTick+0xa0>)
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <HAL_InitTick+0xa0>)
 80032ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d2:	6453      	str	r3, [r2, #68]	; 0x44
 80032d4:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <HAL_InitTick+0xa0>)
 80032d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032e0:	f107 0210 	add.w	r2, r7, #16
 80032e4:	f107 0314 	add.w	r3, r7, #20
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f002 fa40 	bl	8005770 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80032f0:	f002 fa2a 	bl	8005748 <HAL_RCC_GetPCLK2Freq>
 80032f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	4a13      	ldr	r2, [pc, #76]	; (8003348 <HAL_InitTick+0xa4>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	0c9b      	lsrs	r3, r3, #18
 8003300:	3b01      	subs	r3, #1
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <HAL_InitTick+0xa8>)
 8003306:	4a12      	ldr	r2, [pc, #72]	; (8003350 <HAL_InitTick+0xac>)
 8003308:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <HAL_InitTick+0xa8>)
 800330c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003310:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8003312:	4a0e      	ldr	r2, [pc, #56]	; (800334c <HAL_InitTick+0xa8>)
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <HAL_InitTick+0xa8>)
 800331a:	2200      	movs	r2, #0
 800331c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800331e:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_InitTick+0xa8>)
 8003320:	2200      	movs	r2, #0
 8003322:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8003324:	4809      	ldr	r0, [pc, #36]	; (800334c <HAL_InitTick+0xa8>)
 8003326:	f002 fa55 	bl	80057d4 <HAL_TIM_Base_Init>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d104      	bne.n	800333a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8003330:	4806      	ldr	r0, [pc, #24]	; (800334c <HAL_InitTick+0xa8>)
 8003332:	f002 fa9f 	bl	8005874 <HAL_TIM_Base_Start_IT>
 8003336:	4603      	mov	r3, r0
 8003338:	e000      	b.n	800333c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
}
 800333c:	4618      	mov	r0, r3
 800333e:	3730      	adds	r7, #48	; 0x30
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	431bde83 	.word	0x431bde83
 800334c:	20004e44 	.word	0x20004e44
 8003350:	40014400 	.word	0x40014400

08003354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003358:	e7fe      	b.n	8003358 <NMI_Handler+0x4>

0800335a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800335e:	e7fe      	b.n	800335e <HardFault_Handler+0x4>

08003360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003364:	e7fe      	b.n	8003364 <MemManage_Handler+0x4>

08003366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800336a:	e7fe      	b.n	800336a <BusFault_Handler+0x4>

0800336c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003370:	e7fe      	b.n	8003370 <UsageFault_Handler+0x4>

08003372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003384:	2001      	movs	r0, #1
 8003386:	f001 f91b 	bl	80045c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}

0800338e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003392:	2002      	movs	r0, #2
 8003394:	f001 f914 	bl	80045c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003398:	bf00      	nop
 800339a:	bd80      	pop	{r7, pc}

0800339c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80033a0:	2004      	movs	r0, #4
 80033a2:	f001 f90d 	bl	80045c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}

080033aa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80033ae:	2010      	movs	r0, #16
 80033b0:	f001 f906 	bl	80045c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80033b4:	bf00      	nop
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80033bc:	4802      	ldr	r0, [pc, #8]	; (80033c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80033be:	f002 fc1f 	bl	8005c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20004e44 	.word	0x20004e44

080033cc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80033d0:	4802      	ldr	r0, [pc, #8]	; (80033dc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80033d2:	f002 fc15 	bl	8005c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20004d60 	.word	0x20004d60

080033e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033e4:	4802      	ldr	r0, [pc, #8]	; (80033f0 <TIM3_IRQHandler+0x10>)
 80033e6:	f002 fc0b 	bl	8005c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20004d18 	.word	0x20004d18

080033f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033f8:	4802      	ldr	r0, [pc, #8]	; (8003404 <USART2_IRQHandler+0x10>)
 80033fa:	f003 fb19 	bl	8006a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20004dfc 	.word	0x20004dfc

08003408 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
	return 1;
 800340c:	2301      	movs	r3, #1
}
 800340e:	4618      	mov	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <_kill>:

int _kill(int pid, int sig)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003422:	f007 f88f 	bl	800a544 <__errno>
 8003426:	4603      	mov	r3, r0
 8003428:	2216      	movs	r2, #22
 800342a:	601a      	str	r2, [r3, #0]
	return -1;
 800342c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <_exit>:

void _exit (int status)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003440:	f04f 31ff 	mov.w	r1, #4294967295
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff ffe7 	bl	8003418 <_kill>
	while (1) {}		/* Make sure we hang here */
 800344a:	e7fe      	b.n	800344a <_exit+0x12>

0800344c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	e00a      	b.n	8003474 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800345e:	f3af 8000 	nop.w
 8003462:	4601      	mov	r1, r0
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	60ba      	str	r2, [r7, #8]
 800346a:	b2ca      	uxtb	r2, r1
 800346c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	3301      	adds	r3, #1
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	dbf0      	blt.n	800345e <_read+0x12>
	}

return len;
 800347c:	687b      	ldr	r3, [r7, #4]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b086      	sub	sp, #24
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	e009      	b.n	80034ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	60ba      	str	r2, [r7, #8]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fe fd5f 	bl	8001f64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	3301      	adds	r3, #1
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	dbf1      	blt.n	8003498 <_write+0x12>
	}
	return len;
 80034b4:	687b      	ldr	r3, [r7, #4]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <_close>:

int _close(int file)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
	return -1;
 80034c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034e6:	605a      	str	r2, [r3, #4]
	return 0;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <_isatty>:

int _isatty(int file)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
	return 1;
 80034fe:	2301      	movs	r3, #1
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
	return 0;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003530:	4a14      	ldr	r2, [pc, #80]	; (8003584 <_sbrk+0x5c>)
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <_sbrk+0x60>)
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <_sbrk+0x64>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003544:	4b11      	ldr	r3, [pc, #68]	; (800358c <_sbrk+0x64>)
 8003546:	4a12      	ldr	r2, [pc, #72]	; (8003590 <_sbrk+0x68>)
 8003548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <_sbrk+0x64>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	429a      	cmp	r2, r3
 8003556:	d207      	bcs.n	8003568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003558:	f006 fff4 	bl	800a544 <__errno>
 800355c:	4603      	mov	r3, r0
 800355e:	220c      	movs	r2, #12
 8003560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003562:	f04f 33ff 	mov.w	r3, #4294967295
 8003566:	e009      	b.n	800357c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003568:	4b08      	ldr	r3, [pc, #32]	; (800358c <_sbrk+0x64>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800356e:	4b07      	ldr	r3, [pc, #28]	; (800358c <_sbrk+0x64>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	4a05      	ldr	r2, [pc, #20]	; (800358c <_sbrk+0x64>)
 8003578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800357a:	68fb      	ldr	r3, [r7, #12]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20020000 	.word	0x20020000
 8003588:	00000400 	.word	0x00000400
 800358c:	20000284 	.word	0x20000284
 8003590:	20005230 	.word	0x20005230

08003594 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <SystemInit+0x20>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <SystemInit+0x20>)
 80035a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <delay_us>:
//delay_us(10)
// 1MHz의 주파수가 TIM2에 공급
// t=1/F 1/1000000Hz ==> 0.000001sec(1us) 1개의 펄스 소요 시간
// 1us * 1000 ==> 1ms
void delay_us(int us)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
	// 1. timer 2번의 counter reset
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <delay_us+0x2c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2200      	movs	r2, #0
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24
	// 2. 사용자가 지정한 시간만큼 wait
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 80035c8:	bf00      	nop
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <delay_us+0x2c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d3f9      	bcc.n	80035ca <delay_us+0x12>
			;	// no operation
}
 80035d6:	bf00      	nop
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	20004db4 	.word	0x20004db4

080035e8 <HAL_UART_RxCpltCallback>:
  * 예) comportmaster로 부터 1char를 수신하면 HAL_UART_RxCpltCallback으로 진입
  * 	9600bps인 경우 RxCpltCallback를 수행 후 1ms이내에는 빠져 나가야 한다.
  * 	115200bps 						   86us
   */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	volatile static int i = 0;	// buffer의 index


	if (huart == &huart2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a22      	ldr	r2, [pc, #136]	; (800367c <HAL_UART_RxCpltCallback+0x94>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d13d      	bne.n	8003674 <HAL_UART_RxCpltCallback+0x8c>
	{
		if(rx_data == '\n')
 80035f8:	4b21      	ldr	r3, [pc, #132]	; (8003680 <HAL_UART_RxCpltCallback+0x98>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b0a      	cmp	r3, #10
 80035fe:	d122      	bne.n	8003646 <HAL_UART_RxCpltCallback+0x5e>
		{
			rx_buff[rear++][i] = 0; // 문장의 끝은 항상 0
 8003600:	4b20      	ldr	r3, [pc, #128]	; (8003684 <HAL_UART_RxCpltCallback+0x9c>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	1c53      	adds	r3, r2, #1
 8003606:	491f      	ldr	r1, [pc, #124]	; (8003684 <HAL_UART_RxCpltCallback+0x9c>)
 8003608:	600b      	str	r3, [r1, #0]
 800360a:	4b1f      	ldr	r3, [pc, #124]	; (8003688 <HAL_UART_RxCpltCallback+0xa0>)
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	481f      	ldr	r0, [pc, #124]	; (800368c <HAL_UART_RxCpltCallback+0xa4>)
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4403      	add	r3, r0
 800361a:	440b      	add	r3, r1
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
			rear %= COMMAND_NUMBER; // 원형큐
 8003620:	4b18      	ldr	r3, [pc, #96]	; (8003684 <HAL_UART_RxCpltCallback+0x9c>)
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <HAL_UART_RxCpltCallback+0xa8>)
 8003626:	fb83 2301 	smull	r2, r3, r3, r1
 800362a:	10da      	asrs	r2, r3, #3
 800362c:	17cb      	asrs	r3, r1, #31
 800362e:	1ad2      	subs	r2, r2, r3
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	1aca      	subs	r2, r1, r3
 800363a:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_UART_RxCpltCallback+0x9c>)
 800363c:	601a      	str	r2, [r3, #0]
			i = 0; // 새로오는건 버퍼에 새로우 채워야함 (다른 메시지니치!)
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_UART_RxCpltCallback+0xa0>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e011      	b.n	800366a <HAL_UART_RxCpltCallback+0x82>
			// 큐 full 여부 확인
		}
		else
		{
			// 그래야 버퍼에 넣기 (push)
			rx_buff[rear][i++] = rx_data;
 8003646:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <HAL_UART_RxCpltCallback+0x9c>)
 8003648:	6819      	ldr	r1, [r3, #0]
 800364a:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <HAL_UART_RxCpltCallback+0xa0>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	1c53      	adds	r3, r2, #1
 8003650:	480d      	ldr	r0, [pc, #52]	; (8003688 <HAL_UART_RxCpltCallback+0xa0>)
 8003652:	6003      	str	r3, [r0, #0]
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <HAL_UART_RxCpltCallback+0x98>)
 8003656:	781c      	ldrb	r4, [r3, #0]
 8003658:	480c      	ldr	r0, [pc, #48]	; (800368c <HAL_UART_RxCpltCallback+0xa4>)
 800365a:	460b      	mov	r3, r1
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4403      	add	r3, r0
 8003664:	4413      	add	r3, r2
 8003666:	4622      	mov	r2, r4
 8003668:	701a      	strb	r2, [r3, #0]
			// command length 확인
		}
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);	// 주의 : 반드시 집어 넣어야 다음 INT가 발생
 800366a:	2201      	movs	r2, #1
 800366c:	4904      	ldr	r1, [pc, #16]	; (8003680 <HAL_UART_RxCpltCallback+0x98>)
 800366e:	4803      	ldr	r0, [pc, #12]	; (800367c <HAL_UART_RxCpltCallback+0x94>)
 8003670:	f003 f9ad 	bl	80069ce <HAL_UART_Receive_IT>
	}
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	bd90      	pop	{r4, r7, pc}
 800367c:	20004dfc 	.word	0x20004dfc
 8003680:	20004dac 	.word	0x20004dac
 8003684:	20004e8c 	.word	0x20004e8c
 8003688:	20000288 	.word	0x20000288
 800368c:	20004e90 	.word	0x20004e90
 8003690:	66666667 	.word	0x66666667

08003694 <show_command>:

void show_command(void)
{
 8003694:	b590      	push	{r4, r7, lr}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0

	char *cmd[] =
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <show_command+0x40>)
 800369c:	1d3c      	adds	r4, r7, #4
 800369e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			"print_rtc",
			"printoff_rtc",
			"help"
	};

	for (int i = 0; i < 4; i++)
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	e00c      	b.n	80036c4 <show_command+0x30>
	{
		printf("%s\n", cmd[i]);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	f107 0218 	add.w	r2, r7, #24
 80036b2:	4413      	add	r3, r2
 80036b4:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f007 fdc7 	bl	800b24c <puts>
	for (int i = 0; i < 4; i++)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	3301      	adds	r3, #1
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	ddef      	ble.n	80036aa <show_command+0x16>
	}
}
 80036ca:	bf00      	nop
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd90      	pop	{r4, r7, pc}
 80036d4:	0800d7c8 	.word	0x0800d7c8

080036d8 <pc_command_processing>:

void pc_command_processing(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0

   if (front != rear) // rx_buff에 data가 존재
 80036dc:	4b55      	ldr	r3, [pc, #340]	; (8003834 <pc_command_processing+0x15c>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4b55      	ldr	r3, [pc, #340]	; (8003838 <pc_command_processing+0x160>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	f000 80a2 	beq.w	800382e <pc_command_processing+0x156>
   {
      printf("%s\n", rx_buff[front]);   // &rx_buff[front][0]
 80036ea:	4b52      	ldr	r3, [pc, #328]	; (8003834 <pc_command_processing+0x15c>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4a51      	ldr	r2, [pc, #324]	; (800383c <pc_command_processing+0x164>)
 80036f8:	4413      	add	r3, r2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f007 fda6 	bl	800b24c <puts>
      if (strncmp((const char *)rx_buff[front], (const char *)"led_all_on", strlen("led_all_on")) == 0)
 8003700:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <pc_command_processing+0x15c>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4a4b      	ldr	r2, [pc, #300]	; (800383c <pc_command_processing+0x164>)
 800370e:	4413      	add	r3, r2
 8003710:	220a      	movs	r2, #10
 8003712:	494b      	ldr	r1, [pc, #300]	; (8003840 <pc_command_processing+0x168>)
 8003714:	4618      	mov	r0, r3
 8003716:	f007 fe7e 	bl	800b416 <strncmp>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d072      	beq.n	8003806 <pc_command_processing+0x12e>
	   {
//    	  printf("find : led_all_on\n");
	   }
      else if (strncmp((const char *)rx_buff[front], (const char *)"led_all_off", strlen("led_all_off")) == 0)
 8003720:	4b44      	ldr	r3, [pc, #272]	; (8003834 <pc_command_processing+0x15c>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	4a43      	ldr	r2, [pc, #268]	; (800383c <pc_command_processing+0x164>)
 800372e:	4413      	add	r3, r2
 8003730:	220b      	movs	r2, #11
 8003732:	4944      	ldr	r1, [pc, #272]	; (8003844 <pc_command_processing+0x16c>)
 8003734:	4618      	mov	r0, r3
 8003736:	f007 fe6e 	bl	800b416 <strncmp>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d062      	beq.n	8003806 <pc_command_processing+0x12e>
	   {
//    	  printf("find : led_all_on\n");
	   }
      else if (strncmp((const char *)rx_buff[front], (const char *)"setrtc", strlen("setrtc")) == 0)
 8003740:	4b3c      	ldr	r3, [pc, #240]	; (8003834 <pc_command_processing+0x15c>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4a3b      	ldr	r2, [pc, #236]	; (800383c <pc_command_processing+0x164>)
 800374e:	4413      	add	r3, r2
 8003750:	2206      	movs	r2, #6
 8003752:	493d      	ldr	r1, [pc, #244]	; (8003848 <pc_command_processing+0x170>)
 8003754:	4618      	mov	r0, r3
 8003756:	f007 fe5e 	bl	800b416 <strncmp>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10c      	bne.n	800377a <pc_command_processing+0xa2>
	   {
		  set_rtc(&rx_buff[front][6]);
 8003760:	4b34      	ldr	r3, [pc, #208]	; (8003834 <pc_command_processing+0x15c>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	3306      	adds	r3, #6
 800376e:	4a33      	ldr	r2, [pc, #204]	; (800383c <pc_command_processing+0x164>)
 8003770:	4413      	add	r3, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f7fd ffd0 	bl	8001718 <set_rtc>
 8003778:	e045      	b.n	8003806 <pc_command_processing+0x12e>
	   }
      else if (strncmp((const char *)rx_buff[front], (const char *)"help", strlen("help")) == 0)
 800377a:	4b2e      	ldr	r3, [pc, #184]	; (8003834 <pc_command_processing+0x15c>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4a2d      	ldr	r2, [pc, #180]	; (800383c <pc_command_processing+0x164>)
 8003788:	4413      	add	r3, r2
 800378a:	2204      	movs	r2, #4
 800378c:	492f      	ldr	r1, [pc, #188]	; (800384c <pc_command_processing+0x174>)
 800378e:	4618      	mov	r0, r3
 8003790:	f007 fe41 	bl	800b416 <strncmp>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <pc_command_processing+0xc8>
	   {
    	  show_command();
 800379a:	f7ff ff7b 	bl	8003694 <show_command>
 800379e:	e032      	b.n	8003806 <pc_command_processing+0x12e>
	   }
      else if (strncmp((const char *)rx_buff[front], (const char *)"print_rtc", strlen("print_rtc")) == 0)
 80037a0:	4b24      	ldr	r3, [pc, #144]	; (8003834 <pc_command_processing+0x15c>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4a23      	ldr	r2, [pc, #140]	; (800383c <pc_command_processing+0x164>)
 80037ae:	4413      	add	r3, r2
 80037b0:	2209      	movs	r2, #9
 80037b2:	4927      	ldr	r1, [pc, #156]	; (8003850 <pc_command_processing+0x178>)
 80037b4:	4618      	mov	r0, r3
 80037b6:	f007 fe2e 	bl	800b416 <strncmp>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d109      	bne.n	80037d4 <pc_command_processing+0xfc>
	   {
		  o_prt.p_rtc = 1;
 80037c0:	4b24      	ldr	r3, [pc, #144]	; (8003854 <pc_command_processing+0x17c>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	701a      	strb	r2, [r3, #0]
		  printf("print_rtc: %d\n", o_prt.p_rtc);
 80037c6:	4b23      	ldr	r3, [pc, #140]	; (8003854 <pc_command_processing+0x17c>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	4619      	mov	r1, r3
 80037cc:	4822      	ldr	r0, [pc, #136]	; (8003858 <pc_command_processing+0x180>)
 80037ce:	f007 fcb7 	bl	800b140 <iprintf>
 80037d2:	e018      	b.n	8003806 <pc_command_processing+0x12e>
	   }
      else if (strncmp((const char *)rx_buff[front], (const char *)"printoff_rtc", strlen("printoff_rtc")) == 0)
 80037d4:	4b17      	ldr	r3, [pc, #92]	; (8003834 <pc_command_processing+0x15c>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4a16      	ldr	r2, [pc, #88]	; (800383c <pc_command_processing+0x164>)
 80037e2:	4413      	add	r3, r2
 80037e4:	220c      	movs	r2, #12
 80037e6:	491d      	ldr	r1, [pc, #116]	; (800385c <pc_command_processing+0x184>)
 80037e8:	4618      	mov	r0, r3
 80037ea:	f007 fe14 	bl	800b416 <strncmp>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d108      	bne.n	8003806 <pc_command_processing+0x12e>
	   {
		  o_prt.p_rtc = 0;
 80037f4:	4b17      	ldr	r3, [pc, #92]	; (8003854 <pc_command_processing+0x17c>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
		  printf("print_rtc: %d\n", o_prt.p_rtc);
 80037fa:	4b16      	ldr	r3, [pc, #88]	; (8003854 <pc_command_processing+0x17c>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	4619      	mov	r1, r3
 8003800:	4815      	ldr	r0, [pc, #84]	; (8003858 <pc_command_processing+0x180>)
 8003802:	f007 fc9d 	bl	800b140 <iprintf>
	   }




      front++;
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <pc_command_processing+0x15c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3301      	adds	r3, #1
 800380c:	4a09      	ldr	r2, [pc, #36]	; (8003834 <pc_command_processing+0x15c>)
 800380e:	6013      	str	r3, [r2, #0]
      front %= COMMAND_NUMBER;
 8003810:	4b08      	ldr	r3, [pc, #32]	; (8003834 <pc_command_processing+0x15c>)
 8003812:	6819      	ldr	r1, [r3, #0]
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <pc_command_processing+0x188>)
 8003816:	fb83 2301 	smull	r2, r3, r3, r1
 800381a:	10da      	asrs	r2, r3, #3
 800381c:	17cb      	asrs	r3, r1, #31
 800381e:	1ad2      	subs	r2, r2, r3
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	1aca      	subs	r2, r1, r3
 800382a:	4b02      	ldr	r3, [pc, #8]	; (8003834 <pc_command_processing+0x15c>)
 800382c:	601a      	str	r2, [r3, #0]
      // !!!! QUEUE full check하는 logic이 들어가야 한다. !!!!
   }
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	200051b0 	.word	0x200051b0
 8003838:	20004e8c 	.word	0x20004e8c
 800383c:	20004e90 	.word	0x20004e90
 8003840:	0800d7d8 	.word	0x0800d7d8
 8003844:	0800d7e4 	.word	0x0800d7e4
 8003848:	0800d7f0 	.word	0x0800d7f0
 800384c:	0800d7c0 	.word	0x0800d7c0
 8003850:	0800d7a4 	.word	0x0800d7a4
 8003854:	200051b4 	.word	0x200051b4
 8003858:	0800d7f8 	.word	0x0800d7f8
 800385c:	0800d7b0 	.word	0x0800d7b0
 8003860:	66666667 	.word	0x66666667

08003864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800389c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003868:	480d      	ldr	r0, [pc, #52]	; (80038a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800386a:	490e      	ldr	r1, [pc, #56]	; (80038a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800386c:	4a0e      	ldr	r2, [pc, #56]	; (80038a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800386e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003870:	e002      	b.n	8003878 <LoopCopyDataInit>

08003872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003876:	3304      	adds	r3, #4

08003878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800387a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800387c:	d3f9      	bcc.n	8003872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800387e:	4a0b      	ldr	r2, [pc, #44]	; (80038ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003880:	4c0b      	ldr	r4, [pc, #44]	; (80038b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003884:	e001      	b.n	800388a <LoopFillZerobss>

08003886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003888:	3204      	adds	r2, #4

0800388a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800388a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800388c:	d3fb      	bcc.n	8003886 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800388e:	f7ff fe81 	bl	8003594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003892:	f006 ff53 	bl	800a73c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003896:	f7fe fb77 	bl	8001f88 <main>
  bx  lr    
 800389a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800389c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038a4:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 80038a8:	0800dcf4 	.word	0x0800dcf4
  ldr r2, =_sbss
 80038ac:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 80038b0:	2000522c 	.word	0x2000522c

080038b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038b4:	e7fe      	b.n	80038b4 <ADC_IRQHandler>
	...

080038b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038bc:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <HAL_Init+0x40>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0d      	ldr	r2, [pc, #52]	; (80038f8 <HAL_Init+0x40>)
 80038c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_Init+0x40>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <HAL_Init+0x40>)
 80038ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038d4:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <HAL_Init+0x40>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a07      	ldr	r2, [pc, #28]	; (80038f8 <HAL_Init+0x40>)
 80038da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038e0:	2003      	movs	r0, #3
 80038e2:	f000 f8fc 	bl	8003ade <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038e6:	200f      	movs	r0, #15
 80038e8:	f7ff fcdc 	bl	80032a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038ec:	f7ff fb3a 	bl	8002f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40023c00 	.word	0x40023c00

080038fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <HAL_IncTick+0x20>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_IncTick+0x24>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4413      	add	r3, r2
 800390c:	4a04      	ldr	r2, [pc, #16]	; (8003920 <HAL_IncTick+0x24>)
 800390e:	6013      	str	r3, [r2, #0]
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000054 	.word	0x20000054
 8003920:	200051b8 	.word	0x200051b8

08003924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return uwTick;
 8003928:	4b03      	ldr	r3, [pc, #12]	; (8003938 <HAL_GetTick+0x14>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	200051b8 	.word	0x200051b8

0800393c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003944:	f7ff ffee 	bl	8003924 <HAL_GetTick>
 8003948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d005      	beq.n	8003962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <HAL_Delay+0x44>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003962:	bf00      	nop
 8003964:	f7ff ffde 	bl	8003924 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	429a      	cmp	r2, r3
 8003972:	d8f7      	bhi.n	8003964 <HAL_Delay+0x28>
  {
  }
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000054 	.word	0x20000054

08003984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039a0:	4013      	ands	r3, r2
 80039a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039b6:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <__NVIC_SetPriorityGrouping+0x44>)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	60d3      	str	r3, [r2, #12]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000ed00 	.word	0xe000ed00

080039cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039d0:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <__NVIC_GetPriorityGrouping+0x18>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	f003 0307 	and.w	r3, r3, #7
}
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	db0b      	blt.n	8003a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	f003 021f 	and.w	r2, r3, #31
 8003a00:	4907      	ldr	r1, [pc, #28]	; (8003a20 <__NVIC_EnableIRQ+0x38>)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2001      	movs	r0, #1
 8003a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	e000e100 	.word	0xe000e100

08003a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	6039      	str	r1, [r7, #0]
 8003a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	db0a      	blt.n	8003a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	490c      	ldr	r1, [pc, #48]	; (8003a70 <__NVIC_SetPriority+0x4c>)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	0112      	lsls	r2, r2, #4
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	440b      	add	r3, r1
 8003a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a4c:	e00a      	b.n	8003a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	4908      	ldr	r1, [pc, #32]	; (8003a74 <__NVIC_SetPriority+0x50>)
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	3b04      	subs	r3, #4
 8003a5c:	0112      	lsls	r2, r2, #4
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	440b      	add	r3, r1
 8003a62:	761a      	strb	r2, [r3, #24]
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	e000e100 	.word	0xe000e100
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b089      	sub	sp, #36	; 0x24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f1c3 0307 	rsb	r3, r3, #7
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	bf28      	it	cs
 8003a96:	2304      	movcs	r3, #4
 8003a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	2b06      	cmp	r3, #6
 8003aa0:	d902      	bls.n	8003aa8 <NVIC_EncodePriority+0x30>
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3b03      	subs	r3, #3
 8003aa6:	e000      	b.n	8003aaa <NVIC_EncodePriority+0x32>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aac:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43da      	mvns	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	401a      	ands	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aca:	43d9      	mvns	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad0:	4313      	orrs	r3, r2
         );
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3724      	adds	r7, #36	; 0x24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ff4c 	bl	8003984 <__NVIC_SetPriorityGrouping>
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b06:	f7ff ff61 	bl	80039cc <__NVIC_GetPriorityGrouping>
 8003b0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	6978      	ldr	r0, [r7, #20]
 8003b12:	f7ff ffb1 	bl	8003a78 <NVIC_EncodePriority>
 8003b16:	4602      	mov	r2, r0
 8003b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff ff80 	bl	8003a24 <__NVIC_SetPriority>
}
 8003b24:	bf00      	nop
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff ff54 	bl	80039e8 <__NVIC_EnableIRQ>
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b56:	f7ff fee5 	bl	8003924 <HAL_GetTick>
 8003b5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d008      	beq.n	8003b7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2280      	movs	r2, #128	; 0x80
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e052      	b.n	8003c20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0216 	bic.w	r2, r2, #22
 8003b88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d103      	bne.n	8003baa <HAL_DMA_Abort+0x62>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d007      	beq.n	8003bba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0208 	bic.w	r2, r2, #8
 8003bb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bca:	e013      	b.n	8003bf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bcc:	f7ff feaa 	bl	8003924 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b05      	cmp	r3, #5
 8003bd8:	d90c      	bls.n	8003bf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2203      	movs	r2, #3
 8003be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e015      	b.n	8003c20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e4      	bne.n	8003bcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c06:	223f      	movs	r2, #63	; 0x3f
 8003c08:	409a      	lsls	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d004      	beq.n	8003c46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2280      	movs	r2, #128	; 0x80
 8003c40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e00c      	b.n	8003c60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2205      	movs	r2, #5
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003c7e:	4b23      	ldr	r3, [pc, #140]	; (8003d0c <HAL_FLASH_Program+0xa0>)
 8003c80:	7e1b      	ldrb	r3, [r3, #24]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_FLASH_Program+0x1e>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e03b      	b.n	8003d02 <HAL_FLASH_Program+0x96>
 8003c8a:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <HAL_FLASH_Program+0xa0>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c94:	f000 f87c 	bl	8003d90 <FLASH_WaitForLastOperation>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d12b      	bne.n	8003cfa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d105      	bne.n	8003cb4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003ca8:	783b      	ldrb	r3, [r7, #0]
 8003caa:	4619      	mov	r1, r3
 8003cac:	68b8      	ldr	r0, [r7, #8]
 8003cae:	f000 f927 	bl	8003f00 <FLASH_Program_Byte>
 8003cb2:	e016      	b.n	8003ce2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d105      	bne.n	8003cc6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003cba:	883b      	ldrh	r3, [r7, #0]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	68b8      	ldr	r0, [r7, #8]
 8003cc0:	f000 f8fa 	bl	8003eb8 <FLASH_Program_HalfWord>
 8003cc4:	e00d      	b.n	8003ce2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d105      	bne.n	8003cd8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	68b8      	ldr	r0, [r7, #8]
 8003cd2:	f000 f8cf 	bl	8003e74 <FLASH_Program_Word>
 8003cd6:	e004      	b.n	8003ce2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cdc:	68b8      	ldr	r0, [r7, #8]
 8003cde:	f000 f897 	bl	8003e10 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ce2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ce6:	f000 f853 	bl	8003d90 <FLASH_WaitForLastOperation>
 8003cea:	4603      	mov	r3, r0
 8003cec:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003cee:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <HAL_FLASH_Program+0xa4>)
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	4a07      	ldr	r2, [pc, #28]	; (8003d10 <HAL_FLASH_Program+0xa4>)
 8003cf4:	f023 0301 	bic.w	r3, r3, #1
 8003cf8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003cfa:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <HAL_FLASH_Program+0xa0>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200051bc 	.word	0x200051bc
 8003d10:	40023c00 	.word	0x40023c00

08003d14 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_FLASH_Unlock+0x38>)
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	da0b      	bge.n	8003d3e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_FLASH_Unlock+0x38>)
 8003d28:	4a09      	ldr	r2, [pc, #36]	; (8003d50 <HAL_FLASH_Unlock+0x3c>)
 8003d2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003d2c:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <HAL_FLASH_Unlock+0x38>)
 8003d2e:	4a09      	ldr	r2, [pc, #36]	; (8003d54 <HAL_FLASH_Unlock+0x40>)
 8003d30:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_FLASH_Unlock+0x38>)
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	da01      	bge.n	8003d3e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	40023c00 	.word	0x40023c00
 8003d50:	45670123 	.word	0x45670123
 8003d54:	cdef89ab 	.word	0xcdef89ab

08003d58 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_FLASH_Lock+0x1c>)
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	4a04      	ldr	r2, [pc, #16]	; (8003d74 <HAL_FLASH_Lock+0x1c>)
 8003d62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d66:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40023c00 	.word	0x40023c00

08003d78 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <HAL_FLASH_GetError+0x14>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
}  
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	200051bc 	.word	0x200051bc

08003d90 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <FLASH_WaitForLastOperation+0x78>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003da2:	f7ff fdbf 	bl	8003924 <HAL_GetTick>
 8003da6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003da8:	e010      	b.n	8003dcc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db0:	d00c      	beq.n	8003dcc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <FLASH_WaitForLastOperation+0x38>
 8003db8:	f7ff fdb4 	bl	8003924 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d201      	bcs.n	8003dcc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e019      	b.n	8003e00 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <FLASH_WaitForLastOperation+0x7c>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e8      	bne.n	8003daa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <FLASH_WaitForLastOperation+0x7c>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003de4:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <FLASH_WaitForLastOperation+0x7c>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003dea:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <FLASH_WaitForLastOperation+0x7c>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003df6:	f000 f8a5 	bl	8003f44 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
  
}  
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	200051bc 	.word	0x200051bc
 8003e0c:	40023c00 	.word	0x40023c00

08003e10 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e1c:	4b14      	ldr	r3, [pc, #80]	; (8003e70 <FLASH_Program_DoubleWord+0x60>)
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	4a13      	ldr	r2, [pc, #76]	; (8003e70 <FLASH_Program_DoubleWord+0x60>)
 8003e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003e28:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <FLASH_Program_DoubleWord+0x60>)
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	4a10      	ldr	r2, [pc, #64]	; (8003e70 <FLASH_Program_DoubleWord+0x60>)
 8003e2e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003e32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e34:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <FLASH_Program_DoubleWord+0x60>)
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	4a0d      	ldr	r2, [pc, #52]	; (8003e70 <FLASH_Program_DoubleWord+0x60>)
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003e46:	f3bf 8f6f 	isb	sy
}
 8003e4a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003e4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	000a      	movs	r2, r1
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	68f9      	ldr	r1, [r7, #12]
 8003e5e:	3104      	adds	r1, #4
 8003e60:	4613      	mov	r3, r2
 8003e62:	600b      	str	r3, [r1, #0]
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40023c00 	.word	0x40023c00

08003e74 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e7e:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <FLASH_Program_Word+0x40>)
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	4a0c      	ldr	r2, [pc, #48]	; (8003eb4 <FLASH_Program_Word+0x40>)
 8003e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <FLASH_Program_Word+0x40>)
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <FLASH_Program_Word+0x40>)
 8003e90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e96:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <FLASH_Program_Word+0x40>)
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	4a06      	ldr	r2, [pc, #24]	; (8003eb4 <FLASH_Program_Word+0x40>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	601a      	str	r2, [r3, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	40023c00 	.word	0x40023c00

08003eb8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003ec4:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <FLASH_Program_HalfWord+0x44>)
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	4a0c      	ldr	r2, [pc, #48]	; (8003efc <FLASH_Program_HalfWord+0x44>)
 8003eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ece:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003ed0:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <FLASH_Program_HalfWord+0x44>)
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	4a09      	ldr	r2, [pc, #36]	; (8003efc <FLASH_Program_HalfWord+0x44>)
 8003ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003edc:	4b07      	ldr	r3, [pc, #28]	; (8003efc <FLASH_Program_HalfWord+0x44>)
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	4a06      	ldr	r2, [pc, #24]	; (8003efc <FLASH_Program_HalfWord+0x44>)
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	801a      	strh	r2, [r3, #0]
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40023c00 	.word	0x40023c00

08003f00 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <FLASH_Program_Byte+0x40>)
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	4a0b      	ldr	r2, [pc, #44]	; (8003f40 <FLASH_Program_Byte+0x40>)
 8003f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003f18:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <FLASH_Program_Byte+0x40>)
 8003f1a:	4a09      	ldr	r2, [pc, #36]	; (8003f40 <FLASH_Program_Byte+0x40>)
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <FLASH_Program_Byte+0x40>)
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	4a06      	ldr	r2, [pc, #24]	; (8003f40 <FLASH_Program_Byte+0x40>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	701a      	strb	r2, [r3, #0]
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40023c00 	.word	0x40023c00

08003f44 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003f48:	4b2f      	ldr	r3, [pc, #188]	; (8004008 <FLASH_SetErrorCode+0xc4>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003f54:	4b2d      	ldr	r3, [pc, #180]	; (800400c <FLASH_SetErrorCode+0xc8>)
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	f043 0310 	orr.w	r3, r3, #16
 8003f5c:	4a2b      	ldr	r2, [pc, #172]	; (800400c <FLASH_SetErrorCode+0xc8>)
 8003f5e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003f60:	4b29      	ldr	r3, [pc, #164]	; (8004008 <FLASH_SetErrorCode+0xc4>)
 8003f62:	2210      	movs	r2, #16
 8003f64:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003f66:	4b28      	ldr	r3, [pc, #160]	; (8004008 <FLASH_SetErrorCode+0xc4>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d008      	beq.n	8003f84 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003f72:	4b26      	ldr	r3, [pc, #152]	; (800400c <FLASH_SetErrorCode+0xc8>)
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f043 0308 	orr.w	r3, r3, #8
 8003f7a:	4a24      	ldr	r2, [pc, #144]	; (800400c <FLASH_SetErrorCode+0xc8>)
 8003f7c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003f7e:	4b22      	ldr	r3, [pc, #136]	; (8004008 <FLASH_SetErrorCode+0xc4>)
 8003f80:	2220      	movs	r2, #32
 8003f82:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003f84:	4b20      	ldr	r3, [pc, #128]	; (8004008 <FLASH_SetErrorCode+0xc4>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003f90:	4b1e      	ldr	r3, [pc, #120]	; (800400c <FLASH_SetErrorCode+0xc8>)
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f043 0304 	orr.w	r3, r3, #4
 8003f98:	4a1c      	ldr	r2, [pc, #112]	; (800400c <FLASH_SetErrorCode+0xc8>)
 8003f9a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003f9c:	4b1a      	ldr	r3, [pc, #104]	; (8004008 <FLASH_SetErrorCode+0xc4>)
 8003f9e:	2240      	movs	r2, #64	; 0x40
 8003fa0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003fa2:	4b19      	ldr	r3, [pc, #100]	; (8004008 <FLASH_SetErrorCode+0xc4>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d008      	beq.n	8003fc0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003fae:	4b17      	ldr	r3, [pc, #92]	; (800400c <FLASH_SetErrorCode+0xc8>)
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f043 0302 	orr.w	r3, r3, #2
 8003fb6:	4a15      	ldr	r2, [pc, #84]	; (800400c <FLASH_SetErrorCode+0xc8>)
 8003fb8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003fba:	4b13      	ldr	r3, [pc, #76]	; (8004008 <FLASH_SetErrorCode+0xc4>)
 8003fbc:	2280      	movs	r2, #128	; 0x80
 8003fbe:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003fc0:	4b11      	ldr	r3, [pc, #68]	; (8004008 <FLASH_SetErrorCode+0xc4>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	; (800400c <FLASH_SetErrorCode+0xc8>)
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	4a0d      	ldr	r2, [pc, #52]	; (800400c <FLASH_SetErrorCode+0xc8>)
 8003fd6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <FLASH_SetErrorCode+0xc4>)
 8003fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fde:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003fe0:	4b09      	ldr	r3, [pc, #36]	; (8004008 <FLASH_SetErrorCode+0xc4>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003fec:	4b07      	ldr	r3, [pc, #28]	; (800400c <FLASH_SetErrorCode+0xc8>)
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	f043 0320 	orr.w	r3, r3, #32
 8003ff4:	4a05      	ldr	r2, [pc, #20]	; (800400c <FLASH_SetErrorCode+0xc8>)
 8003ff6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003ff8:	4b03      	ldr	r3, [pc, #12]	; (8004008 <FLASH_SetErrorCode+0xc4>)
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	60da      	str	r2, [r3, #12]
  }
}
 8003ffe:	bf00      	nop
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	40023c00 	.word	0x40023c00
 800400c:	200051bc 	.word	0x200051bc

08004010 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004022:	4b31      	ldr	r3, [pc, #196]	; (80040e8 <HAL_FLASHEx_Erase+0xd8>)
 8004024:	7e1b      	ldrb	r3, [r3, #24]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_FLASHEx_Erase+0x1e>
 800402a:	2302      	movs	r3, #2
 800402c:	e058      	b.n	80040e0 <HAL_FLASHEx_Erase+0xd0>
 800402e:	4b2e      	ldr	r3, [pc, #184]	; (80040e8 <HAL_FLASHEx_Erase+0xd8>)
 8004030:	2201      	movs	r2, #1
 8004032:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004034:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004038:	f7ff feaa 	bl	8003d90 <FLASH_WaitForLastOperation>
 800403c:	4603      	mov	r3, r0
 800403e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d148      	bne.n	80040d8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	f04f 32ff 	mov.w	r2, #4294967295
 800404c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d115      	bne.n	8004082 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	b2da      	uxtb	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4619      	mov	r1, r3
 8004062:	4610      	mov	r0, r2
 8004064:	f000 f844 	bl	80040f0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004068:	f24c 3050 	movw	r0, #50000	; 0xc350
 800406c:	f7ff fe90 	bl	8003d90 <FLASH_WaitForLastOperation>
 8004070:	4603      	mov	r3, r0
 8004072:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004074:	4b1d      	ldr	r3, [pc, #116]	; (80040ec <HAL_FLASHEx_Erase+0xdc>)
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	4a1c      	ldr	r2, [pc, #112]	; (80040ec <HAL_FLASHEx_Erase+0xdc>)
 800407a:	f023 0304 	bic.w	r3, r3, #4
 800407e:	6113      	str	r3, [r2, #16]
 8004080:	e028      	b.n	80040d4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	e01c      	b.n	80040c4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	4619      	mov	r1, r3
 8004092:	68b8      	ldr	r0, [r7, #8]
 8004094:	f000 f850 	bl	8004138 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004098:	f24c 3050 	movw	r0, #50000	; 0xc350
 800409c:	f7ff fe78 	bl	8003d90 <FLASH_WaitForLastOperation>
 80040a0:	4603      	mov	r3, r0
 80040a2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <HAL_FLASHEx_Erase+0xdc>)
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	4a10      	ldr	r2, [pc, #64]	; (80040ec <HAL_FLASHEx_Erase+0xdc>)
 80040aa:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80040ae:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	601a      	str	r2, [r3, #0]
          break;
 80040bc:	e00a      	b.n	80040d4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	3301      	adds	r3, #1
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4413      	add	r3, r2
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d3da      	bcc.n	800408a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80040d4:	f000 f878 	bl	80041c8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80040d8:	4b03      	ldr	r3, [pc, #12]	; (80040e8 <HAL_FLASHEx_Erase+0xd8>)
 80040da:	2200      	movs	r2, #0
 80040dc:	761a      	strb	r2, [r3, #24]

  return status;
 80040de:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	200051bc 	.word	0x200051bc
 80040ec:	40023c00 	.word	0x40023c00

080040f0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	6039      	str	r1, [r7, #0]
 80040fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <FLASH_MassErase+0x44>)
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	4a0c      	ldr	r2, [pc, #48]	; (8004134 <FLASH_MassErase+0x44>)
 8004102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004106:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004108:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <FLASH_MassErase+0x44>)
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	4a09      	ldr	r2, [pc, #36]	; (8004134 <FLASH_MassErase+0x44>)
 800410e:	f043 0304 	orr.w	r3, r3, #4
 8004112:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004114:	4b07      	ldr	r3, [pc, #28]	; (8004134 <FLASH_MassErase+0x44>)
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	4313      	orrs	r3, r2
 800411e:	4a05      	ldr	r2, [pc, #20]	; (8004134 <FLASH_MassErase+0x44>)
 8004120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004124:	6113      	str	r3, [r2, #16]
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40023c00 	.word	0x40023c00

08004138 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d102      	bne.n	8004154 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	e010      	b.n	8004176 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d103      	bne.n	8004162 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800415a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	e009      	b.n	8004176 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d103      	bne.n	8004170 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	e002      	b.n	8004176 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004170:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004174:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004176:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <FLASH_Erase_Sector+0x8c>)
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	4a12      	ldr	r2, [pc, #72]	; (80041c4 <FLASH_Erase_Sector+0x8c>)
 800417c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004180:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004182:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <FLASH_Erase_Sector+0x8c>)
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	490f      	ldr	r1, [pc, #60]	; (80041c4 <FLASH_Erase_Sector+0x8c>)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800418e:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <FLASH_Erase_Sector+0x8c>)
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	4a0c      	ldr	r2, [pc, #48]	; (80041c4 <FLASH_Erase_Sector+0x8c>)
 8004194:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004198:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800419a:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <FLASH_Erase_Sector+0x8c>)
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4313      	orrs	r3, r2
 80041a4:	4a07      	ldr	r2, [pc, #28]	; (80041c4 <FLASH_Erase_Sector+0x8c>)
 80041a6:	f043 0302 	orr.w	r3, r3, #2
 80041aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <FLASH_Erase_Sector+0x8c>)
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <FLASH_Erase_Sector+0x8c>)
 80041b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b6:	6113      	str	r3, [r2, #16]
}
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	40023c00 	.word	0x40023c00

080041c8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80041cc:	4b20      	ldr	r3, [pc, #128]	; (8004250 <FLASH_FlushCaches+0x88>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d017      	beq.n	8004208 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80041d8:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <FLASH_FlushCaches+0x88>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <FLASH_FlushCaches+0x88>)
 80041de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041e2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80041e4:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <FLASH_FlushCaches+0x88>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a19      	ldr	r2, [pc, #100]	; (8004250 <FLASH_FlushCaches+0x88>)
 80041ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	4b17      	ldr	r3, [pc, #92]	; (8004250 <FLASH_FlushCaches+0x88>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a16      	ldr	r2, [pc, #88]	; (8004250 <FLASH_FlushCaches+0x88>)
 80041f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041fc:	4b14      	ldr	r3, [pc, #80]	; (8004250 <FLASH_FlushCaches+0x88>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a13      	ldr	r2, [pc, #76]	; (8004250 <FLASH_FlushCaches+0x88>)
 8004202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004206:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004208:	4b11      	ldr	r3, [pc, #68]	; (8004250 <FLASH_FlushCaches+0x88>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004210:	2b00      	cmp	r3, #0
 8004212:	d017      	beq.n	8004244 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004214:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <FLASH_FlushCaches+0x88>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a0d      	ldr	r2, [pc, #52]	; (8004250 <FLASH_FlushCaches+0x88>)
 800421a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800421e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <FLASH_FlushCaches+0x88>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <FLASH_FlushCaches+0x88>)
 8004226:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	4b08      	ldr	r3, [pc, #32]	; (8004250 <FLASH_FlushCaches+0x88>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a07      	ldr	r2, [pc, #28]	; (8004250 <FLASH_FlushCaches+0x88>)
 8004232:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004236:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <FLASH_FlushCaches+0x88>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a04      	ldr	r2, [pc, #16]	; (8004250 <FLASH_FlushCaches+0x88>)
 800423e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004242:	6013      	str	r3, [r2, #0]
  }
}
 8004244:	bf00      	nop
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40023c00 	.word	0x40023c00

08004254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004254:	b480      	push	{r7}
 8004256:	b089      	sub	sp, #36	; 0x24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004262:	2300      	movs	r3, #0
 8004264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004266:	2300      	movs	r3, #0
 8004268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	e159      	b.n	8004524 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004270:	2201      	movs	r2, #1
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4013      	ands	r3, r2
 8004282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	429a      	cmp	r2, r3
 800428a:	f040 8148 	bne.w	800451e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	2b01      	cmp	r3, #1
 8004298:	d005      	beq.n	80042a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d130      	bne.n	8004308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	2203      	movs	r2, #3
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4013      	ands	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042dc:	2201      	movs	r2, #1
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f003 0201 	and.w	r2, r3, #1
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	2b03      	cmp	r3, #3
 8004312:	d017      	beq.n	8004344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	2203      	movs	r2, #3
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d123      	bne.n	8004398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	08da      	lsrs	r2, r3, #3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3208      	adds	r2, #8
 8004358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800435c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	220f      	movs	r2, #15
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4013      	ands	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	691a      	ldr	r2, [r3, #16]
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	08da      	lsrs	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3208      	adds	r2, #8
 8004392:	69b9      	ldr	r1, [r7, #24]
 8004394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	2203      	movs	r2, #3
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 0203 	and.w	r2, r3, #3
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80a2 	beq.w	800451e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	4b57      	ldr	r3, [pc, #348]	; (800453c <HAL_GPIO_Init+0x2e8>)
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	4a56      	ldr	r2, [pc, #344]	; (800453c <HAL_GPIO_Init+0x2e8>)
 80043e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043e8:	6453      	str	r3, [r2, #68]	; 0x44
 80043ea:	4b54      	ldr	r3, [pc, #336]	; (800453c <HAL_GPIO_Init+0x2e8>)
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043f6:	4a52      	ldr	r2, [pc, #328]	; (8004540 <HAL_GPIO_Init+0x2ec>)
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	089b      	lsrs	r3, r3, #2
 80043fc:	3302      	adds	r3, #2
 80043fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	220f      	movs	r2, #15
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43db      	mvns	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4013      	ands	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a49      	ldr	r2, [pc, #292]	; (8004544 <HAL_GPIO_Init+0x2f0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d019      	beq.n	8004456 <HAL_GPIO_Init+0x202>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a48      	ldr	r2, [pc, #288]	; (8004548 <HAL_GPIO_Init+0x2f4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_GPIO_Init+0x1fe>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a47      	ldr	r2, [pc, #284]	; (800454c <HAL_GPIO_Init+0x2f8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00d      	beq.n	800444e <HAL_GPIO_Init+0x1fa>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a46      	ldr	r2, [pc, #280]	; (8004550 <HAL_GPIO_Init+0x2fc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d007      	beq.n	800444a <HAL_GPIO_Init+0x1f6>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a45      	ldr	r2, [pc, #276]	; (8004554 <HAL_GPIO_Init+0x300>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <HAL_GPIO_Init+0x1f2>
 8004442:	2304      	movs	r3, #4
 8004444:	e008      	b.n	8004458 <HAL_GPIO_Init+0x204>
 8004446:	2307      	movs	r3, #7
 8004448:	e006      	b.n	8004458 <HAL_GPIO_Init+0x204>
 800444a:	2303      	movs	r3, #3
 800444c:	e004      	b.n	8004458 <HAL_GPIO_Init+0x204>
 800444e:	2302      	movs	r3, #2
 8004450:	e002      	b.n	8004458 <HAL_GPIO_Init+0x204>
 8004452:	2301      	movs	r3, #1
 8004454:	e000      	b.n	8004458 <HAL_GPIO_Init+0x204>
 8004456:	2300      	movs	r3, #0
 8004458:	69fa      	ldr	r2, [r7, #28]
 800445a:	f002 0203 	and.w	r2, r2, #3
 800445e:	0092      	lsls	r2, r2, #2
 8004460:	4093      	lsls	r3, r2
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4313      	orrs	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004468:	4935      	ldr	r1, [pc, #212]	; (8004540 <HAL_GPIO_Init+0x2ec>)
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	089b      	lsrs	r3, r3, #2
 800446e:	3302      	adds	r3, #2
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004476:	4b38      	ldr	r3, [pc, #224]	; (8004558 <HAL_GPIO_Init+0x304>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	43db      	mvns	r3, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4013      	ands	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800449a:	4a2f      	ldr	r2, [pc, #188]	; (8004558 <HAL_GPIO_Init+0x304>)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80044a0:	4b2d      	ldr	r3, [pc, #180]	; (8004558 <HAL_GPIO_Init+0x304>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	43db      	mvns	r3, r3
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	4013      	ands	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044c4:	4a24      	ldr	r2, [pc, #144]	; (8004558 <HAL_GPIO_Init+0x304>)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044ca:	4b23      	ldr	r3, [pc, #140]	; (8004558 <HAL_GPIO_Init+0x304>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4013      	ands	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ee:	4a1a      	ldr	r2, [pc, #104]	; (8004558 <HAL_GPIO_Init+0x304>)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044f4:	4b18      	ldr	r3, [pc, #96]	; (8004558 <HAL_GPIO_Init+0x304>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004518:	4a0f      	ldr	r2, [pc, #60]	; (8004558 <HAL_GPIO_Init+0x304>)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	3301      	adds	r3, #1
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b0f      	cmp	r3, #15
 8004528:	f67f aea2 	bls.w	8004270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800452c:	bf00      	nop
 800452e:	bf00      	nop
 8004530:	3724      	adds	r7, #36	; 0x24
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40023800 	.word	0x40023800
 8004540:	40013800 	.word	0x40013800
 8004544:	40020000 	.word	0x40020000
 8004548:	40020400 	.word	0x40020400
 800454c:	40020800 	.word	0x40020800
 8004550:	40020c00 	.word	0x40020c00
 8004554:	40021000 	.word	0x40021000
 8004558:	40013c00 	.word	0x40013c00

0800455c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	887b      	ldrh	r3, [r7, #2]
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
 8004578:	e001      	b.n	800457e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800457a:	2300      	movs	r3, #0
 800457c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800457e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	807b      	strh	r3, [r7, #2]
 8004598:	4613      	mov	r3, r2
 800459a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800459c:	787b      	ldrb	r3, [r7, #1]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045a2:	887a      	ldrh	r2, [r7, #2]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045a8:	e003      	b.n	80045b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045aa:	887b      	ldrh	r3, [r7, #2]
 80045ac:	041a      	lsls	r2, r3, #16
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	619a      	str	r2, [r3, #24]
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d006      	beq.n	80045e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045d6:	4a05      	ldr	r2, [pc, #20]	; (80045ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045dc:	88fb      	ldrh	r3, [r7, #6]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fd f90e 	bl	8001800 <HAL_GPIO_EXTI_Callback>
  }
}
 80045e4:	bf00      	nop
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40013c00 	.word	0x40013c00

080045f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e12b      	b.n	800485a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fe fcd0 	bl	8002fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2224      	movs	r2, #36	; 0x24
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0201 	bic.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004654:	f001 f864 	bl	8005720 <HAL_RCC_GetPCLK1Freq>
 8004658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4a81      	ldr	r2, [pc, #516]	; (8004864 <HAL_I2C_Init+0x274>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d807      	bhi.n	8004674 <HAL_I2C_Init+0x84>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4a80      	ldr	r2, [pc, #512]	; (8004868 <HAL_I2C_Init+0x278>)
 8004668:	4293      	cmp	r3, r2
 800466a:	bf94      	ite	ls
 800466c:	2301      	movls	r3, #1
 800466e:	2300      	movhi	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e006      	b.n	8004682 <HAL_I2C_Init+0x92>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4a7d      	ldr	r2, [pc, #500]	; (800486c <HAL_I2C_Init+0x27c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	bf94      	ite	ls
 800467c:	2301      	movls	r3, #1
 800467e:	2300      	movhi	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e0e7      	b.n	800485a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4a78      	ldr	r2, [pc, #480]	; (8004870 <HAL_I2C_Init+0x280>)
 800468e:	fba2 2303 	umull	r2, r3, r2, r3
 8004692:	0c9b      	lsrs	r3, r3, #18
 8004694:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4a6a      	ldr	r2, [pc, #424]	; (8004864 <HAL_I2C_Init+0x274>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d802      	bhi.n	80046c4 <HAL_I2C_Init+0xd4>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	3301      	adds	r3, #1
 80046c2:	e009      	b.n	80046d8 <HAL_I2C_Init+0xe8>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046ca:	fb02 f303 	mul.w	r3, r2, r3
 80046ce:	4a69      	ldr	r2, [pc, #420]	; (8004874 <HAL_I2C_Init+0x284>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	099b      	lsrs	r3, r3, #6
 80046d6:	3301      	adds	r3, #1
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	430b      	orrs	r3, r1
 80046de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	495c      	ldr	r1, [pc, #368]	; (8004864 <HAL_I2C_Init+0x274>)
 80046f4:	428b      	cmp	r3, r1
 80046f6:	d819      	bhi.n	800472c <HAL_I2C_Init+0x13c>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	1e59      	subs	r1, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	fbb1 f3f3 	udiv	r3, r1, r3
 8004706:	1c59      	adds	r1, r3, #1
 8004708:	f640 73fc 	movw	r3, #4092	; 0xffc
 800470c:	400b      	ands	r3, r1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_I2C_Init+0x138>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1e59      	subs	r1, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004720:	3301      	adds	r3, #1
 8004722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004726:	e051      	b.n	80047cc <HAL_I2C_Init+0x1dc>
 8004728:	2304      	movs	r3, #4
 800472a:	e04f      	b.n	80047cc <HAL_I2C_Init+0x1dc>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d111      	bne.n	8004758 <HAL_I2C_Init+0x168>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	1e58      	subs	r0, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6859      	ldr	r1, [r3, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	440b      	add	r3, r1
 8004742:	fbb0 f3f3 	udiv	r3, r0, r3
 8004746:	3301      	adds	r3, #1
 8004748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800474c:	2b00      	cmp	r3, #0
 800474e:	bf0c      	ite	eq
 8004750:	2301      	moveq	r3, #1
 8004752:	2300      	movne	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e012      	b.n	800477e <HAL_I2C_Init+0x18e>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	1e58      	subs	r0, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6859      	ldr	r1, [r3, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	0099      	lsls	r1, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	fbb0 f3f3 	udiv	r3, r0, r3
 800476e:	3301      	adds	r3, #1
 8004770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_I2C_Init+0x196>
 8004782:	2301      	movs	r3, #1
 8004784:	e022      	b.n	80047cc <HAL_I2C_Init+0x1dc>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10e      	bne.n	80047ac <HAL_I2C_Init+0x1bc>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1e58      	subs	r0, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6859      	ldr	r1, [r3, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	440b      	add	r3, r1
 800479c:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a0:	3301      	adds	r3, #1
 80047a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047aa:	e00f      	b.n	80047cc <HAL_I2C_Init+0x1dc>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1e58      	subs	r0, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6859      	ldr	r1, [r3, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	0099      	lsls	r1, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	fbb0 f3f3 	udiv	r3, r0, r3
 80047c2:	3301      	adds	r3, #1
 80047c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	6809      	ldr	r1, [r1, #0]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69da      	ldr	r2, [r3, #28]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6911      	ldr	r1, [r2, #16]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	68d2      	ldr	r2, [r2, #12]
 8004806:	4311      	orrs	r1, r2
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	430b      	orrs	r3, r1
 800480e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	000186a0 	.word	0x000186a0
 8004868:	001e847f 	.word	0x001e847f
 800486c:	003d08ff 	.word	0x003d08ff
 8004870:	431bde83 	.word	0x431bde83
 8004874:	10624dd3 	.word	0x10624dd3

08004878 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	607a      	str	r2, [r7, #4]
 8004882:	461a      	mov	r2, r3
 8004884:	460b      	mov	r3, r1
 8004886:	817b      	strh	r3, [r7, #10]
 8004888:	4613      	mov	r3, r2
 800488a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800488c:	f7ff f84a 	bl	8003924 <HAL_GetTick>
 8004890:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b20      	cmp	r3, #32
 800489c:	f040 80e0 	bne.w	8004a60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	2319      	movs	r3, #25
 80048a6:	2201      	movs	r2, #1
 80048a8:	4970      	ldr	r1, [pc, #448]	; (8004a6c <HAL_I2C_Master_Transmit+0x1f4>)
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f964 	bl	8004b78 <I2C_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80048b6:	2302      	movs	r3, #2
 80048b8:	e0d3      	b.n	8004a62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <HAL_I2C_Master_Transmit+0x50>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e0cc      	b.n	8004a62 <HAL_I2C_Master_Transmit+0x1ea>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d007      	beq.n	80048ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 0201 	orr.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2221      	movs	r2, #33	; 0x21
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2210      	movs	r2, #16
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	893a      	ldrh	r2, [r7, #8]
 800491e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4a50      	ldr	r2, [pc, #320]	; (8004a70 <HAL_I2C_Master_Transmit+0x1f8>)
 800492e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004930:	8979      	ldrh	r1, [r7, #10]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	6a3a      	ldr	r2, [r7, #32]
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 f89c 	bl	8004a74 <I2C_MasterRequestWrite>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e08d      	b.n	8004a62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004946:	2300      	movs	r3, #0
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800495c:	e066      	b.n	8004a2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	6a39      	ldr	r1, [r7, #32]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f9de 	bl	8004d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00d      	beq.n	800498a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	2b04      	cmp	r3, #4
 8004974:	d107      	bne.n	8004986 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004984:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e06b      	b.n	8004a62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	781a      	ldrb	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d11b      	bne.n	8004a00 <HAL_I2C_Master_Transmit+0x188>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d017      	beq.n	8004a00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	781a      	ldrb	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	6a39      	ldr	r1, [r7, #32]
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f9ce 	bl	8004da6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00d      	beq.n	8004a2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d107      	bne.n	8004a28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e01a      	b.n	8004a62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d194      	bne.n	800495e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e000      	b.n	8004a62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a60:	2302      	movs	r3, #2
  }
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	00100002 	.word	0x00100002
 8004a70:	ffff0000 	.word	0xffff0000

08004a74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	607a      	str	r2, [r7, #4]
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	460b      	mov	r3, r1
 8004a82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d006      	beq.n	8004a9e <I2C_MasterRequestWrite+0x2a>
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d003      	beq.n	8004a9e <I2C_MasterRequestWrite+0x2a>
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a9c:	d108      	bne.n	8004ab0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	e00b      	b.n	8004ac8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab4:	2b12      	cmp	r3, #18
 8004ab6:	d107      	bne.n	8004ac8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f84f 	bl	8004b78 <I2C_WaitOnFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00d      	beq.n	8004afc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aee:	d103      	bne.n	8004af8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e035      	b.n	8004b68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b04:	d108      	bne.n	8004b18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b06:	897b      	ldrh	r3, [r7, #10]
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b14:	611a      	str	r2, [r3, #16]
 8004b16:	e01b      	b.n	8004b50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b18:	897b      	ldrh	r3, [r7, #10]
 8004b1a:	11db      	asrs	r3, r3, #7
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	f003 0306 	and.w	r3, r3, #6
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f063 030f 	orn	r3, r3, #15
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	490e      	ldr	r1, [pc, #56]	; (8004b70 <I2C_MasterRequestWrite+0xfc>)
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f875 	bl	8004c26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e010      	b.n	8004b68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b46:	897b      	ldrh	r3, [r7, #10]
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	4907      	ldr	r1, [pc, #28]	; (8004b74 <I2C_MasterRequestWrite+0x100>)
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f865 	bl	8004c26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	00010008 	.word	0x00010008
 8004b74:	00010002 	.word	0x00010002

08004b78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	4613      	mov	r3, r2
 8004b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b88:	e025      	b.n	8004bd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b90:	d021      	beq.n	8004bd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b92:	f7fe fec7 	bl	8003924 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d302      	bcc.n	8004ba8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d116      	bne.n	8004bd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	f043 0220 	orr.w	r2, r3, #32
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e023      	b.n	8004c1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	0c1b      	lsrs	r3, r3, #16
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d10d      	bne.n	8004bfc <I2C_WaitOnFlagUntilTimeout+0x84>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	43da      	mvns	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4013      	ands	r3, r2
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	bf0c      	ite	eq
 8004bf2:	2301      	moveq	r3, #1
 8004bf4:	2300      	movne	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	e00c      	b.n	8004c16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	43da      	mvns	r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4013      	ands	r3, r2
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bf0c      	ite	eq
 8004c0e:	2301      	moveq	r3, #1
 8004c10:	2300      	movne	r3, #0
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d0b6      	beq.n	8004b8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	607a      	str	r2, [r7, #4]
 8004c32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c34:	e051      	b.n	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c44:	d123      	bne.n	8004c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f043 0204 	orr.w	r2, r3, #4
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e046      	b.n	8004d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d021      	beq.n	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c96:	f7fe fe45 	bl	8003924 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d116      	bne.n	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f043 0220 	orr.w	r2, r3, #32
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e020      	b.n	8004d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	0c1b      	lsrs	r3, r3, #16
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d10c      	bne.n	8004cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	43da      	mvns	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bf14      	ite	ne
 8004cf6:	2301      	movne	r3, #1
 8004cf8:	2300      	moveq	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	e00b      	b.n	8004d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	43da      	mvns	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	bf14      	ite	ne
 8004d10:	2301      	movne	r3, #1
 8004d12:	2300      	moveq	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d18d      	bne.n	8004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d30:	e02d      	b.n	8004d8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 f878 	bl	8004e28 <I2C_IsAcknowledgeFailed>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e02d      	b.n	8004d9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d48:	d021      	beq.n	8004d8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4a:	f7fe fdeb 	bl	8003924 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d302      	bcc.n	8004d60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d116      	bne.n	8004d8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	f043 0220 	orr.w	r2, r3, #32
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e007      	b.n	8004d9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d98:	2b80      	cmp	r3, #128	; 0x80
 8004d9a:	d1ca      	bne.n	8004d32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004db2:	e02d      	b.n	8004e10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f837 	bl	8004e28 <I2C_IsAcknowledgeFailed>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e02d      	b.n	8004e20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d021      	beq.n	8004e10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dcc:	f7fe fdaa 	bl	8003924 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d302      	bcc.n	8004de2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d116      	bne.n	8004e10 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	f043 0220 	orr.w	r2, r3, #32
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e007      	b.n	8004e20 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d1ca      	bne.n	8004db4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3e:	d11b      	bne.n	8004e78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	f043 0204 	orr.w	r2, r3, #4
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e000      	b.n	8004e7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e264      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d075      	beq.n	8004f92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ea6:	4ba3      	ldr	r3, [pc, #652]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d00c      	beq.n	8004ecc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eb2:	4ba0      	ldr	r3, [pc, #640]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d112      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ebe:	4b9d      	ldr	r3, [pc, #628]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eca:	d10b      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ecc:	4b99      	ldr	r3, [pc, #612]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d05b      	beq.n	8004f90 <HAL_RCC_OscConfig+0x108>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d157      	bne.n	8004f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e23f      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eec:	d106      	bne.n	8004efc <HAL_RCC_OscConfig+0x74>
 8004eee:	4b91      	ldr	r3, [pc, #580]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a90      	ldr	r2, [pc, #576]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	e01d      	b.n	8004f38 <HAL_RCC_OscConfig+0xb0>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f04:	d10c      	bne.n	8004f20 <HAL_RCC_OscConfig+0x98>
 8004f06:	4b8b      	ldr	r3, [pc, #556]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a8a      	ldr	r2, [pc, #552]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	4b88      	ldr	r3, [pc, #544]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a87      	ldr	r2, [pc, #540]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	e00b      	b.n	8004f38 <HAL_RCC_OscConfig+0xb0>
 8004f20:	4b84      	ldr	r3, [pc, #528]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a83      	ldr	r2, [pc, #524]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	4b81      	ldr	r3, [pc, #516]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a80      	ldr	r2, [pc, #512]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d013      	beq.n	8004f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f40:	f7fe fcf0 	bl	8003924 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f48:	f7fe fcec 	bl	8003924 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	; 0x64
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e204      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5a:	4b76      	ldr	r3, [pc, #472]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0xc0>
 8004f66:	e014      	b.n	8004f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f68:	f7fe fcdc 	bl	8003924 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f70:	f7fe fcd8 	bl	8003924 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b64      	cmp	r3, #100	; 0x64
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e1f0      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f82:	4b6c      	ldr	r3, [pc, #432]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f0      	bne.n	8004f70 <HAL_RCC_OscConfig+0xe8>
 8004f8e:	e000      	b.n	8004f92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d063      	beq.n	8005066 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f9e:	4b65      	ldr	r3, [pc, #404]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004faa:	4b62      	ldr	r3, [pc, #392]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d11c      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fb6:	4b5f      	ldr	r3, [pc, #380]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d116      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc2:	4b5c      	ldr	r3, [pc, #368]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_RCC_OscConfig+0x152>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d001      	beq.n	8004fda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e1c4      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fda:	4b56      	ldr	r3, [pc, #344]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4952      	ldr	r1, [pc, #328]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fee:	e03a      	b.n	8005066 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d020      	beq.n	800503a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff8:	4b4f      	ldr	r3, [pc, #316]	; (8005138 <HAL_RCC_OscConfig+0x2b0>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffe:	f7fe fc91 	bl	8003924 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005006:	f7fe fc8d 	bl	8003924 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e1a5      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005018:	4b46      	ldr	r3, [pc, #280]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005024:	4b43      	ldr	r3, [pc, #268]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4940      	ldr	r1, [pc, #256]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8005034:	4313      	orrs	r3, r2
 8005036:	600b      	str	r3, [r1, #0]
 8005038:	e015      	b.n	8005066 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800503a:	4b3f      	ldr	r3, [pc, #252]	; (8005138 <HAL_RCC_OscConfig+0x2b0>)
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fe fc70 	bl	8003924 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005048:	f7fe fc6c 	bl	8003924 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e184      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800505a:	4b36      	ldr	r3, [pc, #216]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d030      	beq.n	80050d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d016      	beq.n	80050a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800507a:	4b30      	ldr	r3, [pc, #192]	; (800513c <HAL_RCC_OscConfig+0x2b4>)
 800507c:	2201      	movs	r2, #1
 800507e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005080:	f7fe fc50 	bl	8003924 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005088:	f7fe fc4c 	bl	8003924 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e164      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800509a:	4b26      	ldr	r3, [pc, #152]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 800509c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x200>
 80050a6:	e015      	b.n	80050d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a8:	4b24      	ldr	r3, [pc, #144]	; (800513c <HAL_RCC_OscConfig+0x2b4>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ae:	f7fe fc39 	bl	8003924 <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b4:	e008      	b.n	80050c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050b6:	f7fe fc35 	bl	8003924 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e14d      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c8:	4b1a      	ldr	r3, [pc, #104]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 80050ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f0      	bne.n	80050b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 80a0 	beq.w	8005222 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050e2:	2300      	movs	r3, #0
 80050e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050e6:	4b13      	ldr	r3, [pc, #76]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10f      	bne.n	8005112 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f2:	2300      	movs	r3, #0
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	4b0f      	ldr	r3, [pc, #60]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	4a0e      	ldr	r2, [pc, #56]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 80050fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005100:	6413      	str	r3, [r2, #64]	; 0x40
 8005102:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <HAL_RCC_OscConfig+0x2ac>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800510e:	2301      	movs	r3, #1
 8005110:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005112:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <HAL_RCC_OscConfig+0x2b8>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d121      	bne.n	8005162 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800511e:	4b08      	ldr	r3, [pc, #32]	; (8005140 <HAL_RCC_OscConfig+0x2b8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a07      	ldr	r2, [pc, #28]	; (8005140 <HAL_RCC_OscConfig+0x2b8>)
 8005124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800512a:	f7fe fbfb 	bl	8003924 <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005130:	e011      	b.n	8005156 <HAL_RCC_OscConfig+0x2ce>
 8005132:	bf00      	nop
 8005134:	40023800 	.word	0x40023800
 8005138:	42470000 	.word	0x42470000
 800513c:	42470e80 	.word	0x42470e80
 8005140:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005144:	f7fe fbee 	bl	8003924 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e106      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005156:	4b85      	ldr	r3, [pc, #532]	; (800536c <HAL_RCC_OscConfig+0x4e4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d106      	bne.n	8005178 <HAL_RCC_OscConfig+0x2f0>
 800516a:	4b81      	ldr	r3, [pc, #516]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	4a80      	ldr	r2, [pc, #512]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	6713      	str	r3, [r2, #112]	; 0x70
 8005176:	e01c      	b.n	80051b2 <HAL_RCC_OscConfig+0x32a>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b05      	cmp	r3, #5
 800517e:	d10c      	bne.n	800519a <HAL_RCC_OscConfig+0x312>
 8005180:	4b7b      	ldr	r3, [pc, #492]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 8005182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005184:	4a7a      	ldr	r2, [pc, #488]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 8005186:	f043 0304 	orr.w	r3, r3, #4
 800518a:	6713      	str	r3, [r2, #112]	; 0x70
 800518c:	4b78      	ldr	r3, [pc, #480]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 800518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005190:	4a77      	ldr	r2, [pc, #476]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 8005192:	f043 0301 	orr.w	r3, r3, #1
 8005196:	6713      	str	r3, [r2, #112]	; 0x70
 8005198:	e00b      	b.n	80051b2 <HAL_RCC_OscConfig+0x32a>
 800519a:	4b75      	ldr	r3, [pc, #468]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 800519c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519e:	4a74      	ldr	r2, [pc, #464]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 80051a0:	f023 0301 	bic.w	r3, r3, #1
 80051a4:	6713      	str	r3, [r2, #112]	; 0x70
 80051a6:	4b72      	ldr	r3, [pc, #456]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051aa:	4a71      	ldr	r2, [pc, #452]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 80051ac:	f023 0304 	bic.w	r3, r3, #4
 80051b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d015      	beq.n	80051e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ba:	f7fe fbb3 	bl	8003924 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c0:	e00a      	b.n	80051d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c2:	f7fe fbaf 	bl	8003924 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e0c5      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d8:	4b65      	ldr	r3, [pc, #404]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 80051da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0ee      	beq.n	80051c2 <HAL_RCC_OscConfig+0x33a>
 80051e4:	e014      	b.n	8005210 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e6:	f7fe fb9d 	bl	8003924 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ec:	e00a      	b.n	8005204 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ee:	f7fe fb99 	bl	8003924 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e0af      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005204:	4b5a      	ldr	r3, [pc, #360]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 8005206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1ee      	bne.n	80051ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005210:	7dfb      	ldrb	r3, [r7, #23]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d105      	bne.n	8005222 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005216:	4b56      	ldr	r3, [pc, #344]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	4a55      	ldr	r2, [pc, #340]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 800521c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005220:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 809b 	beq.w	8005362 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800522c:	4b50      	ldr	r3, [pc, #320]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 030c 	and.w	r3, r3, #12
 8005234:	2b08      	cmp	r3, #8
 8005236:	d05c      	beq.n	80052f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	2b02      	cmp	r3, #2
 800523e:	d141      	bne.n	80052c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005240:	4b4c      	ldr	r3, [pc, #304]	; (8005374 <HAL_RCC_OscConfig+0x4ec>)
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005246:	f7fe fb6d 	bl	8003924 <HAL_GetTick>
 800524a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800524e:	f7fe fb69 	bl	8003924 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e081      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005260:	4b43      	ldr	r3, [pc, #268]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f0      	bne.n	800524e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	69da      	ldr	r2, [r3, #28]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	019b      	lsls	r3, r3, #6
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005282:	085b      	lsrs	r3, r3, #1
 8005284:	3b01      	subs	r3, #1
 8005286:	041b      	lsls	r3, r3, #16
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	061b      	lsls	r3, r3, #24
 8005290:	4937      	ldr	r1, [pc, #220]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 8005292:	4313      	orrs	r3, r2
 8005294:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005296:	4b37      	ldr	r3, [pc, #220]	; (8005374 <HAL_RCC_OscConfig+0x4ec>)
 8005298:	2201      	movs	r2, #1
 800529a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529c:	f7fe fb42 	bl	8003924 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a4:	f7fe fb3e 	bl	8003924 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e056      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b6:	4b2e      	ldr	r3, [pc, #184]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0f0      	beq.n	80052a4 <HAL_RCC_OscConfig+0x41c>
 80052c2:	e04e      	b.n	8005362 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c4:	4b2b      	ldr	r3, [pc, #172]	; (8005374 <HAL_RCC_OscConfig+0x4ec>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ca:	f7fe fb2b 	bl	8003924 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d2:	f7fe fb27 	bl	8003924 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e03f      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e4:	4b22      	ldr	r3, [pc, #136]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1f0      	bne.n	80052d2 <HAL_RCC_OscConfig+0x44a>
 80052f0:	e037      	b.n	8005362 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e032      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052fe:	4b1c      	ldr	r3, [pc, #112]	; (8005370 <HAL_RCC_OscConfig+0x4e8>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d028      	beq.n	800535e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005316:	429a      	cmp	r2, r3
 8005318:	d121      	bne.n	800535e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d11a      	bne.n	800535e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800532e:	4013      	ands	r3, r2
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005334:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005336:	4293      	cmp	r3, r2
 8005338:	d111      	bne.n	800535e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	085b      	lsrs	r3, r3, #1
 8005346:	3b01      	subs	r3, #1
 8005348:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800534a:	429a      	cmp	r2, r3
 800534c:	d107      	bne.n	800535e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800535a:	429a      	cmp	r2, r3
 800535c:	d001      	beq.n	8005362 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40007000 	.word	0x40007000
 8005370:	40023800 	.word	0x40023800
 8005374:	42470060 	.word	0x42470060

08005378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0cc      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800538c:	4b68      	ldr	r3, [pc, #416]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d90c      	bls.n	80053b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539a:	4b65      	ldr	r3, [pc, #404]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b63      	ldr	r3, [pc, #396]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0b8      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d020      	beq.n	8005402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d005      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053cc:	4b59      	ldr	r3, [pc, #356]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	4a58      	ldr	r2, [pc, #352]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053e4:	4b53      	ldr	r3, [pc, #332]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4a52      	ldr	r2, [pc, #328]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f0:	4b50      	ldr	r3, [pc, #320]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	494d      	ldr	r1, [pc, #308]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d044      	beq.n	8005498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d107      	bne.n	8005426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005416:	4b47      	ldr	r3, [pc, #284]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d119      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e07f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d003      	beq.n	8005436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005432:	2b03      	cmp	r3, #3
 8005434:	d107      	bne.n	8005446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005436:	4b3f      	ldr	r3, [pc, #252]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e06f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005446:	4b3b      	ldr	r3, [pc, #236]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e067      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005456:	4b37      	ldr	r3, [pc, #220]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f023 0203 	bic.w	r2, r3, #3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4934      	ldr	r1, [pc, #208]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005464:	4313      	orrs	r3, r2
 8005466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005468:	f7fe fa5c 	bl	8003924 <HAL_GetTick>
 800546c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546e:	e00a      	b.n	8005486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005470:	f7fe fa58 	bl	8003924 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f241 3288 	movw	r2, #5000	; 0x1388
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e04f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005486:	4b2b      	ldr	r3, [pc, #172]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 020c 	and.w	r2, r3, #12
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	429a      	cmp	r2, r3
 8005496:	d1eb      	bne.n	8005470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005498:	4b25      	ldr	r3, [pc, #148]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d20c      	bcs.n	80054c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a6:	4b22      	ldr	r3, [pc, #136]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ae:	4b20      	ldr	r3, [pc, #128]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e032      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d008      	beq.n	80054de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054cc:	4b19      	ldr	r3, [pc, #100]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	4916      	ldr	r1, [pc, #88]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d009      	beq.n	80054fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ea:	4b12      	ldr	r3, [pc, #72]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	490e      	ldr	r1, [pc, #56]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054fe:	f000 f821 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 8005502:	4602      	mov	r2, r0
 8005504:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	490a      	ldr	r1, [pc, #40]	; (8005538 <HAL_RCC_ClockConfig+0x1c0>)
 8005510:	5ccb      	ldrb	r3, [r1, r3]
 8005512:	fa22 f303 	lsr.w	r3, r2, r3
 8005516:	4a09      	ldr	r2, [pc, #36]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 8005518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800551a:	4b09      	ldr	r3, [pc, #36]	; (8005540 <HAL_RCC_ClockConfig+0x1c8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f7fd fec0 	bl	80032a4 <HAL_InitTick>

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	40023c00 	.word	0x40023c00
 8005534:	40023800 	.word	0x40023800
 8005538:	0800d8e4 	.word	0x0800d8e4
 800553c:	2000004c 	.word	0x2000004c
 8005540:	20000050 	.word	0x20000050

08005544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005544:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	607b      	str	r3, [r7, #4]
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	2300      	movs	r3, #0
 8005556:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800555c:	4b67      	ldr	r3, [pc, #412]	; (80056fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 030c 	and.w	r3, r3, #12
 8005564:	2b08      	cmp	r3, #8
 8005566:	d00d      	beq.n	8005584 <HAL_RCC_GetSysClockFreq+0x40>
 8005568:	2b08      	cmp	r3, #8
 800556a:	f200 80bd 	bhi.w	80056e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <HAL_RCC_GetSysClockFreq+0x34>
 8005572:	2b04      	cmp	r3, #4
 8005574:	d003      	beq.n	800557e <HAL_RCC_GetSysClockFreq+0x3a>
 8005576:	e0b7      	b.n	80056e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005578:	4b61      	ldr	r3, [pc, #388]	; (8005700 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800557a:	60bb      	str	r3, [r7, #8]
       break;
 800557c:	e0b7      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800557e:	4b61      	ldr	r3, [pc, #388]	; (8005704 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005580:	60bb      	str	r3, [r7, #8]
      break;
 8005582:	e0b4      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005584:	4b5d      	ldr	r3, [pc, #372]	; (80056fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800558c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800558e:	4b5b      	ldr	r3, [pc, #364]	; (80056fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d04d      	beq.n	8005636 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800559a:	4b58      	ldr	r3, [pc, #352]	; (80056fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	099b      	lsrs	r3, r3, #6
 80055a0:	461a      	mov	r2, r3
 80055a2:	f04f 0300 	mov.w	r3, #0
 80055a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055aa:	f04f 0100 	mov.w	r1, #0
 80055ae:	ea02 0800 	and.w	r8, r2, r0
 80055b2:	ea03 0901 	and.w	r9, r3, r1
 80055b6:	4640      	mov	r0, r8
 80055b8:	4649      	mov	r1, r9
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	014b      	lsls	r3, r1, #5
 80055c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055c8:	0142      	lsls	r2, r0, #5
 80055ca:	4610      	mov	r0, r2
 80055cc:	4619      	mov	r1, r3
 80055ce:	ebb0 0008 	subs.w	r0, r0, r8
 80055d2:	eb61 0109 	sbc.w	r1, r1, r9
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	018b      	lsls	r3, r1, #6
 80055e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055e4:	0182      	lsls	r2, r0, #6
 80055e6:	1a12      	subs	r2, r2, r0
 80055e8:	eb63 0301 	sbc.w	r3, r3, r1
 80055ec:	f04f 0000 	mov.w	r0, #0
 80055f0:	f04f 0100 	mov.w	r1, #0
 80055f4:	00d9      	lsls	r1, r3, #3
 80055f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055fa:	00d0      	lsls	r0, r2, #3
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	eb12 0208 	adds.w	r2, r2, r8
 8005604:	eb43 0309 	adc.w	r3, r3, r9
 8005608:	f04f 0000 	mov.w	r0, #0
 800560c:	f04f 0100 	mov.w	r1, #0
 8005610:	0259      	lsls	r1, r3, #9
 8005612:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005616:	0250      	lsls	r0, r2, #9
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4610      	mov	r0, r2
 800561e:	4619      	mov	r1, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	461a      	mov	r2, r3
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	f7fb fac6 	bl	8000bb8 <__aeabi_uldivmod>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4613      	mov	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	e04a      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005636:	4b31      	ldr	r3, [pc, #196]	; (80056fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	099b      	lsrs	r3, r3, #6
 800563c:	461a      	mov	r2, r3
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005646:	f04f 0100 	mov.w	r1, #0
 800564a:	ea02 0400 	and.w	r4, r2, r0
 800564e:	ea03 0501 	and.w	r5, r3, r1
 8005652:	4620      	mov	r0, r4
 8005654:	4629      	mov	r1, r5
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	014b      	lsls	r3, r1, #5
 8005660:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005664:	0142      	lsls	r2, r0, #5
 8005666:	4610      	mov	r0, r2
 8005668:	4619      	mov	r1, r3
 800566a:	1b00      	subs	r0, r0, r4
 800566c:	eb61 0105 	sbc.w	r1, r1, r5
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	018b      	lsls	r3, r1, #6
 800567a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800567e:	0182      	lsls	r2, r0, #6
 8005680:	1a12      	subs	r2, r2, r0
 8005682:	eb63 0301 	sbc.w	r3, r3, r1
 8005686:	f04f 0000 	mov.w	r0, #0
 800568a:	f04f 0100 	mov.w	r1, #0
 800568e:	00d9      	lsls	r1, r3, #3
 8005690:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005694:	00d0      	lsls	r0, r2, #3
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	1912      	adds	r2, r2, r4
 800569c:	eb45 0303 	adc.w	r3, r5, r3
 80056a0:	f04f 0000 	mov.w	r0, #0
 80056a4:	f04f 0100 	mov.w	r1, #0
 80056a8:	0299      	lsls	r1, r3, #10
 80056aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80056ae:	0290      	lsls	r0, r2, #10
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4610      	mov	r0, r2
 80056b6:	4619      	mov	r1, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	461a      	mov	r2, r3
 80056bc:	f04f 0300 	mov.w	r3, #0
 80056c0:	f7fb fa7a 	bl	8000bb8 <__aeabi_uldivmod>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4613      	mov	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056cc:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	0c1b      	lsrs	r3, r3, #16
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	3301      	adds	r3, #1
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e4:	60bb      	str	r3, [r7, #8]
      break;
 80056e6:	e002      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056e8:	4b05      	ldr	r3, [pc, #20]	; (8005700 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80056ea:	60bb      	str	r3, [r7, #8]
      break;
 80056ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ee:	68bb      	ldr	r3, [r7, #8]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80056fa:	bf00      	nop
 80056fc:	40023800 	.word	0x40023800
 8005700:	00f42400 	.word	0x00f42400
 8005704:	007a1200 	.word	0x007a1200

08005708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800570c:	4b03      	ldr	r3, [pc, #12]	; (800571c <HAL_RCC_GetHCLKFreq+0x14>)
 800570e:	681b      	ldr	r3, [r3, #0]
}
 8005710:	4618      	mov	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	2000004c 	.word	0x2000004c

08005720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005724:	f7ff fff0 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8005728:	4602      	mov	r2, r0
 800572a:	4b05      	ldr	r3, [pc, #20]	; (8005740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	0a9b      	lsrs	r3, r3, #10
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	4903      	ldr	r1, [pc, #12]	; (8005744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005736:	5ccb      	ldrb	r3, [r1, r3]
 8005738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800573c:	4618      	mov	r0, r3
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40023800 	.word	0x40023800
 8005744:	0800d8f4 	.word	0x0800d8f4

08005748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800574c:	f7ff ffdc 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8005750:	4602      	mov	r2, r0
 8005752:	4b05      	ldr	r3, [pc, #20]	; (8005768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	0b5b      	lsrs	r3, r3, #13
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	4903      	ldr	r1, [pc, #12]	; (800576c <HAL_RCC_GetPCLK2Freq+0x24>)
 800575e:	5ccb      	ldrb	r3, [r1, r3]
 8005760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005764:	4618      	mov	r0, r3
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40023800 	.word	0x40023800
 800576c:	0800d8f4 	.word	0x0800d8f4

08005770 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	220f      	movs	r2, #15
 800577e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005780:	4b12      	ldr	r3, [pc, #72]	; (80057cc <HAL_RCC_GetClockConfig+0x5c>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 0203 	and.w	r2, r3, #3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800578c:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <HAL_RCC_GetClockConfig+0x5c>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005798:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <HAL_RCC_GetClockConfig+0x5c>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80057a4:	4b09      	ldr	r3, [pc, #36]	; (80057cc <HAL_RCC_GetClockConfig+0x5c>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	08db      	lsrs	r3, r3, #3
 80057aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057b2:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <HAL_RCC_GetClockConfig+0x60>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0207 	and.w	r2, r3, #7
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	601a      	str	r2, [r3, #0]
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40023800 	.word	0x40023800
 80057d0:	40023c00 	.word	0x40023c00

080057d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e041      	b.n	800586a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7fd fc26 	bl	800304c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3304      	adds	r3, #4
 8005810:	4619      	mov	r1, r3
 8005812:	4610      	mov	r0, r2
 8005814:	f000 fcae 	bl	8006174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b01      	cmp	r3, #1
 8005886:	d001      	beq.n	800588c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e044      	b.n	8005916 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0201 	orr.w	r2, r2, #1
 80058a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a1e      	ldr	r2, [pc, #120]	; (8005924 <HAL_TIM_Base_Start_IT+0xb0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d018      	beq.n	80058e0 <HAL_TIM_Base_Start_IT+0x6c>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b6:	d013      	beq.n	80058e0 <HAL_TIM_Base_Start_IT+0x6c>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a1a      	ldr	r2, [pc, #104]	; (8005928 <HAL_TIM_Base_Start_IT+0xb4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00e      	beq.n	80058e0 <HAL_TIM_Base_Start_IT+0x6c>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a19      	ldr	r2, [pc, #100]	; (800592c <HAL_TIM_Base_Start_IT+0xb8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d009      	beq.n	80058e0 <HAL_TIM_Base_Start_IT+0x6c>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a17      	ldr	r2, [pc, #92]	; (8005930 <HAL_TIM_Base_Start_IT+0xbc>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_TIM_Base_Start_IT+0x6c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a16      	ldr	r2, [pc, #88]	; (8005934 <HAL_TIM_Base_Start_IT+0xc0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d111      	bne.n	8005904 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b06      	cmp	r3, #6
 80058f0:	d010      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0201 	orr.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005902:	e007      	b.n	8005914 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0201 	orr.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40010000 	.word	0x40010000
 8005928:	40000400 	.word	0x40000400
 800592c:	40000800 	.word	0x40000800
 8005930:	40000c00 	.word	0x40000c00
 8005934:	40014000 	.word	0x40014000

08005938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e041      	b.n	80059ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fd fbce 	bl	8003100 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3304      	adds	r3, #4
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f000 fbfc 	bl	8006174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d109      	bne.n	80059fc <HAL_TIM_PWM_Start+0x24>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	e022      	b.n	8005a42 <HAL_TIM_PWM_Start+0x6a>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d109      	bne.n	8005a16 <HAL_TIM_PWM_Start+0x3e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	bf14      	ite	ne
 8005a0e:	2301      	movne	r3, #1
 8005a10:	2300      	moveq	r3, #0
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	e015      	b.n	8005a42 <HAL_TIM_PWM_Start+0x6a>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d109      	bne.n	8005a30 <HAL_TIM_PWM_Start+0x58>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	bf14      	ite	ne
 8005a28:	2301      	movne	r3, #1
 8005a2a:	2300      	moveq	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	e008      	b.n	8005a42 <HAL_TIM_PWM_Start+0x6a>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	bf14      	ite	ne
 8005a3c:	2301      	movne	r3, #1
 8005a3e:	2300      	moveq	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e068      	b.n	8005b1c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d104      	bne.n	8005a5a <HAL_TIM_PWM_Start+0x82>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a58:	e013      	b.n	8005a82 <HAL_TIM_PWM_Start+0xaa>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d104      	bne.n	8005a6a <HAL_TIM_PWM_Start+0x92>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a68:	e00b      	b.n	8005a82 <HAL_TIM_PWM_Start+0xaa>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d104      	bne.n	8005a7a <HAL_TIM_PWM_Start+0xa2>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a78:	e003      	b.n	8005a82 <HAL_TIM_PWM_Start+0xaa>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2201      	movs	r2, #1
 8005a88:	6839      	ldr	r1, [r7, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fe18 	bl	80066c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a23      	ldr	r2, [pc, #140]	; (8005b24 <HAL_TIM_PWM_Start+0x14c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d107      	bne.n	8005aaa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aa8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1d      	ldr	r2, [pc, #116]	; (8005b24 <HAL_TIM_PWM_Start+0x14c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d018      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x10e>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005abc:	d013      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x10e>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a19      	ldr	r2, [pc, #100]	; (8005b28 <HAL_TIM_PWM_Start+0x150>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00e      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x10e>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a17      	ldr	r2, [pc, #92]	; (8005b2c <HAL_TIM_PWM_Start+0x154>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d009      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x10e>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a16      	ldr	r2, [pc, #88]	; (8005b30 <HAL_TIM_PWM_Start+0x158>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d004      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x10e>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a14      	ldr	r2, [pc, #80]	; (8005b34 <HAL_TIM_PWM_Start+0x15c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d111      	bne.n	8005b0a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b06      	cmp	r3, #6
 8005af6:	d010      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0201 	orr.w	r2, r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b08:	e007      	b.n	8005b1a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0201 	orr.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40000400 	.word	0x40000400
 8005b2c:	40000800 	.word	0x40000800
 8005b30:	40000c00 	.word	0x40000c00
 8005b34:	40014000 	.word	0x40014000

08005b38 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2200      	movs	r2, #0
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fdb8 	bl	80066c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a29      	ldr	r2, [pc, #164]	; (8005bfc <HAL_TIM_PWM_Stop+0xc4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d117      	bne.n	8005b8a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6a1a      	ldr	r2, [r3, #32]
 8005b60:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b64:	4013      	ands	r3, r2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10f      	bne.n	8005b8a <HAL_TIM_PWM_Stop+0x52>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6a1a      	ldr	r2, [r3, #32]
 8005b70:	f240 4344 	movw	r3, #1092	; 0x444
 8005b74:	4013      	ands	r3, r2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d107      	bne.n	8005b8a <HAL_TIM_PWM_Stop+0x52>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6a1a      	ldr	r2, [r3, #32]
 8005b90:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b94:	4013      	ands	r3, r2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10f      	bne.n	8005bba <HAL_TIM_PWM_Stop+0x82>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6a1a      	ldr	r2, [r3, #32]
 8005ba0:	f240 4344 	movw	r3, #1092	; 0x444
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d107      	bne.n	8005bba <HAL_TIM_PWM_Stop+0x82>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0201 	bic.w	r2, r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d104      	bne.n	8005bca <HAL_TIM_PWM_Stop+0x92>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc8:	e013      	b.n	8005bf2 <HAL_TIM_PWM_Stop+0xba>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d104      	bne.n	8005bda <HAL_TIM_PWM_Stop+0xa2>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd8:	e00b      	b.n	8005bf2 <HAL_TIM_PWM_Stop+0xba>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d104      	bne.n	8005bea <HAL_TIM_PWM_Stop+0xb2>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005be8:	e003      	b.n	8005bf2 <HAL_TIM_PWM_Stop+0xba>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40010000 	.word	0x40010000

08005c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d122      	bne.n	8005c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d11b      	bne.n	8005c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f06f 0202 	mvn.w	r2, #2
 8005c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fa77 	bl	8006136 <HAL_TIM_IC_CaptureCallback>
 8005c48:	e005      	b.n	8005c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fa69 	bl	8006122 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fa7a 	bl	800614a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d122      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d11b      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f06f 0204 	mvn.w	r2, #4
 8005c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fa4d 	bl	8006136 <HAL_TIM_IC_CaptureCallback>
 8005c9c:	e005      	b.n	8005caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fa3f 	bl	8006122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fa50 	bl	800614a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0308 	and.w	r3, r3, #8
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d122      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d11b      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0208 	mvn.w	r2, #8
 8005cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2204      	movs	r2, #4
 8005cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fa23 	bl	8006136 <HAL_TIM_IC_CaptureCallback>
 8005cf0:	e005      	b.n	8005cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fa15 	bl	8006122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fa26 	bl	800614a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f003 0310 	and.w	r3, r3, #16
 8005d0e:	2b10      	cmp	r3, #16
 8005d10:	d122      	bne.n	8005d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b10      	cmp	r3, #16
 8005d1e:	d11b      	bne.n	8005d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f06f 0210 	mvn.w	r2, #16
 8005d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2208      	movs	r2, #8
 8005d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f9f9 	bl	8006136 <HAL_TIM_IC_CaptureCallback>
 8005d44:	e005      	b.n	8005d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f9eb 	bl	8006122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f9fc 	bl	800614a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d10e      	bne.n	8005d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d107      	bne.n	8005d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f06f 0201 	mvn.w	r2, #1
 8005d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fc fca2 	bl	80026c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8e:	2b80      	cmp	r3, #128	; 0x80
 8005d90:	d10e      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9c:	2b80      	cmp	r3, #128	; 0x80
 8005d9e:	d107      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fd26 	bl	80067fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dba:	2b40      	cmp	r3, #64	; 0x40
 8005dbc:	d10e      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	d107      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f9c1 	bl	800615e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d10e      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d107      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0220 	mvn.w	r2, #32
 8005e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fcf0 	bl	80067e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e0ae      	b.n	8005f8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b0c      	cmp	r3, #12
 8005e3a:	f200 809f 	bhi.w	8005f7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e3e:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e44:	08005e79 	.word	0x08005e79
 8005e48:	08005f7d 	.word	0x08005f7d
 8005e4c:	08005f7d 	.word	0x08005f7d
 8005e50:	08005f7d 	.word	0x08005f7d
 8005e54:	08005eb9 	.word	0x08005eb9
 8005e58:	08005f7d 	.word	0x08005f7d
 8005e5c:	08005f7d 	.word	0x08005f7d
 8005e60:	08005f7d 	.word	0x08005f7d
 8005e64:	08005efb 	.word	0x08005efb
 8005e68:	08005f7d 	.word	0x08005f7d
 8005e6c:	08005f7d 	.word	0x08005f7d
 8005e70:	08005f7d 	.word	0x08005f7d
 8005e74:	08005f3b 	.word	0x08005f3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 f9f8 	bl	8006274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699a      	ldr	r2, [r3, #24]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0208 	orr.w	r2, r2, #8
 8005e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699a      	ldr	r2, [r3, #24]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0204 	bic.w	r2, r2, #4
 8005ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6999      	ldr	r1, [r3, #24]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	619a      	str	r2, [r3, #24]
      break;
 8005eb6:	e064      	b.n	8005f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fa3e 	bl	8006340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6999      	ldr	r1, [r3, #24]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	021a      	lsls	r2, r3, #8
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	619a      	str	r2, [r3, #24]
      break;
 8005ef8:	e043      	b.n	8005f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68b9      	ldr	r1, [r7, #8]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 fa89 	bl	8006418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69da      	ldr	r2, [r3, #28]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0208 	orr.w	r2, r2, #8
 8005f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69da      	ldr	r2, [r3, #28]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0204 	bic.w	r2, r2, #4
 8005f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69d9      	ldr	r1, [r3, #28]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	61da      	str	r2, [r3, #28]
      break;
 8005f38:	e023      	b.n	8005f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68b9      	ldr	r1, [r7, #8]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fad3 	bl	80064ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69da      	ldr	r2, [r3, #28]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69da      	ldr	r2, [r3, #28]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69d9      	ldr	r1, [r3, #28]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	021a      	lsls	r2, r3, #8
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	61da      	str	r2, [r3, #28]
      break;
 8005f7a:	e002      	b.n	8005f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e0b4      	b.n	800611a <HAL_TIM_ConfigClockSource+0x186>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe8:	d03e      	beq.n	8006068 <HAL_TIM_ConfigClockSource+0xd4>
 8005fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fee:	f200 8087 	bhi.w	8006100 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff6:	f000 8086 	beq.w	8006106 <HAL_TIM_ConfigClockSource+0x172>
 8005ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ffe:	d87f      	bhi.n	8006100 <HAL_TIM_ConfigClockSource+0x16c>
 8006000:	2b70      	cmp	r3, #112	; 0x70
 8006002:	d01a      	beq.n	800603a <HAL_TIM_ConfigClockSource+0xa6>
 8006004:	2b70      	cmp	r3, #112	; 0x70
 8006006:	d87b      	bhi.n	8006100 <HAL_TIM_ConfigClockSource+0x16c>
 8006008:	2b60      	cmp	r3, #96	; 0x60
 800600a:	d050      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x11a>
 800600c:	2b60      	cmp	r3, #96	; 0x60
 800600e:	d877      	bhi.n	8006100 <HAL_TIM_ConfigClockSource+0x16c>
 8006010:	2b50      	cmp	r3, #80	; 0x50
 8006012:	d03c      	beq.n	800608e <HAL_TIM_ConfigClockSource+0xfa>
 8006014:	2b50      	cmp	r3, #80	; 0x50
 8006016:	d873      	bhi.n	8006100 <HAL_TIM_ConfigClockSource+0x16c>
 8006018:	2b40      	cmp	r3, #64	; 0x40
 800601a:	d058      	beq.n	80060ce <HAL_TIM_ConfigClockSource+0x13a>
 800601c:	2b40      	cmp	r3, #64	; 0x40
 800601e:	d86f      	bhi.n	8006100 <HAL_TIM_ConfigClockSource+0x16c>
 8006020:	2b30      	cmp	r3, #48	; 0x30
 8006022:	d064      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0x15a>
 8006024:	2b30      	cmp	r3, #48	; 0x30
 8006026:	d86b      	bhi.n	8006100 <HAL_TIM_ConfigClockSource+0x16c>
 8006028:	2b20      	cmp	r3, #32
 800602a:	d060      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0x15a>
 800602c:	2b20      	cmp	r3, #32
 800602e:	d867      	bhi.n	8006100 <HAL_TIM_ConfigClockSource+0x16c>
 8006030:	2b00      	cmp	r3, #0
 8006032:	d05c      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0x15a>
 8006034:	2b10      	cmp	r3, #16
 8006036:	d05a      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0x15a>
 8006038:	e062      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6899      	ldr	r1, [r3, #8]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f000 fb19 	bl	8006680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800605c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	609a      	str	r2, [r3, #8]
      break;
 8006066:	e04f      	b.n	8006108 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6818      	ldr	r0, [r3, #0]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	6899      	ldr	r1, [r3, #8]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f000 fb02 	bl	8006680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800608a:	609a      	str	r2, [r3, #8]
      break;
 800608c:	e03c      	b.n	8006108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	6859      	ldr	r1, [r3, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	461a      	mov	r2, r3
 800609c:	f000 fa76 	bl	800658c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2150      	movs	r1, #80	; 0x50
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 facf 	bl	800664a <TIM_ITRx_SetConfig>
      break;
 80060ac:	e02c      	b.n	8006108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6818      	ldr	r0, [r3, #0]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	6859      	ldr	r1, [r3, #4]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	461a      	mov	r2, r3
 80060bc:	f000 fa95 	bl	80065ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2160      	movs	r1, #96	; 0x60
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fabf 	bl	800664a <TIM_ITRx_SetConfig>
      break;
 80060cc:	e01c      	b.n	8006108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	6859      	ldr	r1, [r3, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	461a      	mov	r2, r3
 80060dc:	f000 fa56 	bl	800658c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2140      	movs	r1, #64	; 0x40
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 faaf 	bl	800664a <TIM_ITRx_SetConfig>
      break;
 80060ec:	e00c      	b.n	8006108 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4619      	mov	r1, r3
 80060f8:	4610      	mov	r0, r2
 80060fa:	f000 faa6 	bl	800664a <TIM_ITRx_SetConfig>
      break;
 80060fe:	e003      	b.n	8006108 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	73fb      	strb	r3, [r7, #15]
      break;
 8006104:	e000      	b.n	8006108 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006118:	7bfb      	ldrb	r3, [r7, #15]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
	...

08006174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a34      	ldr	r2, [pc, #208]	; (8006258 <TIM_Base_SetConfig+0xe4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00f      	beq.n	80061ac <TIM_Base_SetConfig+0x38>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006192:	d00b      	beq.n	80061ac <TIM_Base_SetConfig+0x38>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a31      	ldr	r2, [pc, #196]	; (800625c <TIM_Base_SetConfig+0xe8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d007      	beq.n	80061ac <TIM_Base_SetConfig+0x38>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a30      	ldr	r2, [pc, #192]	; (8006260 <TIM_Base_SetConfig+0xec>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_Base_SetConfig+0x38>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a2f      	ldr	r2, [pc, #188]	; (8006264 <TIM_Base_SetConfig+0xf0>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d108      	bne.n	80061be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a25      	ldr	r2, [pc, #148]	; (8006258 <TIM_Base_SetConfig+0xe4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d01b      	beq.n	80061fe <TIM_Base_SetConfig+0x8a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061cc:	d017      	beq.n	80061fe <TIM_Base_SetConfig+0x8a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a22      	ldr	r2, [pc, #136]	; (800625c <TIM_Base_SetConfig+0xe8>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d013      	beq.n	80061fe <TIM_Base_SetConfig+0x8a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a21      	ldr	r2, [pc, #132]	; (8006260 <TIM_Base_SetConfig+0xec>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00f      	beq.n	80061fe <TIM_Base_SetConfig+0x8a>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a20      	ldr	r2, [pc, #128]	; (8006264 <TIM_Base_SetConfig+0xf0>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00b      	beq.n	80061fe <TIM_Base_SetConfig+0x8a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a1f      	ldr	r2, [pc, #124]	; (8006268 <TIM_Base_SetConfig+0xf4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d007      	beq.n	80061fe <TIM_Base_SetConfig+0x8a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a1e      	ldr	r2, [pc, #120]	; (800626c <TIM_Base_SetConfig+0xf8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d003      	beq.n	80061fe <TIM_Base_SetConfig+0x8a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a1d      	ldr	r2, [pc, #116]	; (8006270 <TIM_Base_SetConfig+0xfc>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d108      	bne.n	8006210 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a08      	ldr	r2, [pc, #32]	; (8006258 <TIM_Base_SetConfig+0xe4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d103      	bne.n	8006244 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	615a      	str	r2, [r3, #20]
}
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	40010000 	.word	0x40010000
 800625c:	40000400 	.word	0x40000400
 8006260:	40000800 	.word	0x40000800
 8006264:	40000c00 	.word	0x40000c00
 8006268:	40014000 	.word	0x40014000
 800626c:	40014400 	.word	0x40014400
 8006270:	40014800 	.word	0x40014800

08006274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f023 0201 	bic.w	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0303 	bic.w	r3, r3, #3
 80062aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f023 0302 	bic.w	r3, r3, #2
 80062bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a1c      	ldr	r2, [pc, #112]	; (800633c <TIM_OC1_SetConfig+0xc8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10c      	bne.n	80062ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f023 0308 	bic.w	r3, r3, #8
 80062d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f023 0304 	bic.w	r3, r3, #4
 80062e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a13      	ldr	r2, [pc, #76]	; (800633c <TIM_OC1_SetConfig+0xc8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d111      	bne.n	8006316 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	621a      	str	r2, [r3, #32]
}
 8006330:	bf00      	nop
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	40010000 	.word	0x40010000

08006340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f023 0210 	bic.w	r2, r3, #16
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800636e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4313      	orrs	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f023 0320 	bic.w	r3, r3, #32
 800638a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a1e      	ldr	r2, [pc, #120]	; (8006414 <TIM_OC2_SetConfig+0xd4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d10d      	bne.n	80063bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a15      	ldr	r2, [pc, #84]	; (8006414 <TIM_OC2_SetConfig+0xd4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d113      	bne.n	80063ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	621a      	str	r2, [r3, #32]
}
 8006406:	bf00      	nop
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	40010000 	.word	0x40010000

08006418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0303 	bic.w	r3, r3, #3
 800644e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	021b      	lsls	r3, r3, #8
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	4313      	orrs	r3, r2
 800646c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a1d      	ldr	r2, [pc, #116]	; (80064e8 <TIM_OC3_SetConfig+0xd0>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d10d      	bne.n	8006492 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800647c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	021b      	lsls	r3, r3, #8
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	4313      	orrs	r3, r2
 8006488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a14      	ldr	r2, [pc, #80]	; (80064e8 <TIM_OC3_SetConfig+0xd0>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d113      	bne.n	80064c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	621a      	str	r2, [r3, #32]
}
 80064dc:	bf00      	nop
 80064de:	371c      	adds	r7, #28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	40010000 	.word	0x40010000

080064ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800651a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	021b      	lsls	r3, r3, #8
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	031b      	lsls	r3, r3, #12
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a10      	ldr	r2, [pc, #64]	; (8006588 <TIM_OC4_SetConfig+0x9c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d109      	bne.n	8006560 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006552:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	019b      	lsls	r3, r3, #6
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	621a      	str	r2, [r3, #32]
}
 800657a:	bf00      	nop
 800657c:	371c      	adds	r7, #28
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40010000 	.word	0x40010000

0800658c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	f023 0201 	bic.w	r2, r3, #1
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	011b      	lsls	r3, r3, #4
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f023 030a 	bic.w	r3, r3, #10
 80065c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	621a      	str	r2, [r3, #32]
}
 80065de:	bf00      	nop
 80065e0:	371c      	adds	r7, #28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b087      	sub	sp, #28
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f023 0210 	bic.w	r2, r3, #16
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006614:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	031b      	lsls	r3, r3, #12
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006626:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	621a      	str	r2, [r3, #32]
}
 800663e:	bf00      	nop
 8006640:	371c      	adds	r7, #28
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800664a:	b480      	push	{r7}
 800664c:	b085      	sub	sp, #20
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	f043 0307 	orr.w	r3, r3, #7
 800666c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	609a      	str	r2, [r3, #8]
}
 8006674:	bf00      	nop
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800669a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	021a      	lsls	r2, r3, #8
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	431a      	orrs	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	609a      	str	r2, [r3, #8]
}
 80066b4:	bf00      	nop
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	2201      	movs	r2, #1
 80066d4:	fa02 f303 	lsl.w	r3, r2, r3
 80066d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a1a      	ldr	r2, [r3, #32]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	401a      	ands	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a1a      	ldr	r2, [r3, #32]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f003 031f 	and.w	r3, r3, #31
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	fa01 f303 	lsl.w	r3, r1, r3
 80066f8:	431a      	orrs	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	621a      	str	r2, [r3, #32]
}
 80066fe:	bf00      	nop
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
	...

0800670c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800671c:	2b01      	cmp	r3, #1
 800671e:	d101      	bne.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006720:	2302      	movs	r3, #2
 8006722:	e050      	b.n	80067c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a1c      	ldr	r2, [pc, #112]	; (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d018      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006770:	d013      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a18      	ldr	r2, [pc, #96]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d00e      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a16      	ldr	r2, [pc, #88]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d009      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a15      	ldr	r2, [pc, #84]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d004      	beq.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a13      	ldr	r2, [pc, #76]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d10c      	bne.n	80067b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	40010000 	.word	0x40010000
 80067d8:	40000400 	.word	0x40000400
 80067dc:	40000800 	.word	0x40000800
 80067e0:	40000c00 	.word	0x40000c00
 80067e4:	40014000 	.word	0x40014000

080067e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e03f      	b.n	80068a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fc fce4 	bl	8003204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2224      	movs	r2, #36	; 0x24
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fddb 	bl	8007410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691a      	ldr	r2, [r3, #16]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695a      	ldr	r2, [r3, #20]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b08a      	sub	sp, #40	; 0x28
 80068ae:	af02      	add	r7, sp, #8
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	603b      	str	r3, [r7, #0]
 80068b6:	4613      	mov	r3, r2
 80068b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d17c      	bne.n	80069c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <HAL_UART_Transmit+0x2c>
 80068d0:	88fb      	ldrh	r3, [r7, #6]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e075      	b.n	80069c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_UART_Transmit+0x3e>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e06e      	b.n	80069c6 <HAL_UART_Transmit+0x11c>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2221      	movs	r2, #33	; 0x21
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068fe:	f7fd f811 	bl	8003924 <HAL_GetTick>
 8006902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	88fa      	ldrh	r2, [r7, #6]
 8006908:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	88fa      	ldrh	r2, [r7, #6]
 800690e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006918:	d108      	bne.n	800692c <HAL_UART_Transmit+0x82>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d104      	bne.n	800692c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006922:	2300      	movs	r3, #0
 8006924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	61bb      	str	r3, [r7, #24]
 800692a:	e003      	b.n	8006934 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006930:	2300      	movs	r3, #0
 8006932:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800693c:	e02a      	b.n	8006994 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2200      	movs	r2, #0
 8006946:	2180      	movs	r1, #128	; 0x80
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 fb1f 	bl	8006f8c <UART_WaitOnFlagUntilTimeout>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e036      	b.n	80069c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10b      	bne.n	8006976 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800696c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	3302      	adds	r3, #2
 8006972:	61bb      	str	r3, [r7, #24]
 8006974:	e007      	b.n	8006986 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	781a      	ldrb	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	3301      	adds	r3, #1
 8006984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1cf      	bne.n	800693e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2200      	movs	r2, #0
 80069a6:	2140      	movs	r1, #64	; 0x40
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 faef 	bl	8006f8c <UART_WaitOnFlagUntilTimeout>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e006      	b.n	80069c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	e000      	b.n	80069c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80069c4:	2302      	movs	r3, #2
  }
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3720      	adds	r7, #32
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	4613      	mov	r3, r2
 80069da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d11d      	bne.n	8006a24 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <HAL_UART_Receive_IT+0x26>
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e016      	b.n	8006a26 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_UART_Receive_IT+0x38>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e00f      	b.n	8006a26 <HAL_UART_Receive_IT+0x58>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a14:	88fb      	ldrh	r3, [r7, #6]
 8006a16:	461a      	mov	r2, r3
 8006a18:	68b9      	ldr	r1, [r7, #8]
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fb24 	bl	8007068 <UART_Start_Receive_IT>
 8006a20:	4603      	mov	r3, r0
 8006a22:	e000      	b.n	8006a26 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006a24:	2302      	movs	r3, #2
  }
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
	...

08006a30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b0ba      	sub	sp, #232	; 0xe8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10f      	bne.n	8006a96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d009      	beq.n	8006a96 <HAL_UART_IRQHandler+0x66>
 8006a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fc03 	bl	800729a <UART_Receive_IT>
      return;
 8006a94:	e256      	b.n	8006f44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 80de 	beq.w	8006c5c <HAL_UART_IRQHandler+0x22c>
 8006aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d106      	bne.n	8006aba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f000 80d1 	beq.w	8006c5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00b      	beq.n	8006ade <HAL_UART_IRQHandler+0xae>
 8006ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d005      	beq.n	8006ade <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	f043 0201 	orr.w	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae2:	f003 0304 	and.w	r3, r3, #4
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00b      	beq.n	8006b02 <HAL_UART_IRQHandler+0xd2>
 8006aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d005      	beq.n	8006b02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f043 0202 	orr.w	r2, r3, #2
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00b      	beq.n	8006b26 <HAL_UART_IRQHandler+0xf6>
 8006b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d005      	beq.n	8006b26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	f043 0204 	orr.w	r2, r3, #4
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b2a:	f003 0308 	and.w	r3, r3, #8
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d011      	beq.n	8006b56 <HAL_UART_IRQHandler+0x126>
 8006b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d105      	bne.n	8006b4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	f043 0208 	orr.w	r2, r3, #8
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 81ed 	beq.w	8006f3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b64:	f003 0320 	and.w	r3, r3, #32
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <HAL_UART_IRQHandler+0x14e>
 8006b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b70:	f003 0320 	and.w	r3, r3, #32
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fb8e 	bl	800729a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b88:	2b40      	cmp	r3, #64	; 0x40
 8006b8a:	bf0c      	ite	eq
 8006b8c:	2301      	moveq	r3, #1
 8006b8e:	2300      	movne	r3, #0
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d103      	bne.n	8006baa <HAL_UART_IRQHandler+0x17a>
 8006ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d04f      	beq.n	8006c4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fa96 	bl	80070dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bba:	2b40      	cmp	r3, #64	; 0x40
 8006bbc:	d141      	bne.n	8006c42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3314      	adds	r3, #20
 8006bc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3314      	adds	r3, #20
 8006be6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006bea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006bf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1d9      	bne.n	8006bbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d013      	beq.n	8006c3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c16:	4a7d      	ldr	r2, [pc, #500]	; (8006e0c <HAL_UART_IRQHandler+0x3dc>)
 8006c18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fd f802 	bl	8003c28 <HAL_DMA_Abort_IT>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d016      	beq.n	8006c58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c34:	4610      	mov	r0, r2
 8006c36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c38:	e00e      	b.n	8006c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f990 	bl	8006f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c40:	e00a      	b.n	8006c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f98c 	bl	8006f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c48:	e006      	b.n	8006c58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f988 	bl	8006f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006c56:	e170      	b.n	8006f3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c58:	bf00      	nop
    return;
 8006c5a:	e16e      	b.n	8006f3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	f040 814a 	bne.w	8006efa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6a:	f003 0310 	and.w	r3, r3, #16
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 8143 	beq.w	8006efa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c78:	f003 0310 	and.w	r3, r3, #16
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 813c 	beq.w	8006efa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c82:	2300      	movs	r3, #0
 8006c84:	60bb      	str	r3, [r7, #8]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	60bb      	str	r3, [r7, #8]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	60bb      	str	r3, [r7, #8]
 8006c96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca2:	2b40      	cmp	r3, #64	; 0x40
 8006ca4:	f040 80b4 	bne.w	8006e10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 8140 	beq.w	8006f3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	f080 8139 	bcs.w	8006f3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cde:	f000 8088 	beq.w	8006df2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	330c      	adds	r3, #12
 8006d0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006d0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d1e:	e841 2300 	strex	r3, r2, [r1]
 8006d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1d9      	bne.n	8006ce2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3314      	adds	r3, #20
 8006d34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d40:	f023 0301 	bic.w	r3, r3, #1
 8006d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3314      	adds	r3, #20
 8006d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e1      	bne.n	8006d2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3314      	adds	r3, #20
 8006d70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3314      	adds	r3, #20
 8006d8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e3      	bne.n	8006d6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	330c      	adds	r3, #12
 8006db6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dba:	e853 3f00 	ldrex	r3, [r3]
 8006dbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc2:	f023 0310 	bic.w	r3, r3, #16
 8006dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	330c      	adds	r3, #12
 8006dd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006dd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8006dd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ddc:	e841 2300 	strex	r3, r2, [r1]
 8006de0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e3      	bne.n	8006db0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fc feab 	bl	8003b48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f8b6 	bl	8006f74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e08:	e099      	b.n	8006f3e <HAL_UART_IRQHandler+0x50e>
 8006e0a:	bf00      	nop
 8006e0c:	080071a3 	.word	0x080071a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 808b 	beq.w	8006f42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8086 	beq.w	8006f42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	330c      	adds	r3, #12
 8006e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	e853 3f00 	ldrex	r3, [r3]
 8006e44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	330c      	adds	r3, #12
 8006e56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006e5a:	647a      	str	r2, [r7, #68]	; 0x44
 8006e5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e3      	bne.n	8006e36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3314      	adds	r3, #20
 8006e74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	f023 0301 	bic.w	r3, r3, #1
 8006e84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3314      	adds	r3, #20
 8006e8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e92:	633a      	str	r2, [r7, #48]	; 0x30
 8006e94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e3      	bne.n	8006e6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	330c      	adds	r3, #12
 8006eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0310 	bic.w	r3, r3, #16
 8006eca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	330c      	adds	r3, #12
 8006ed4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ed8:	61fa      	str	r2, [r7, #28]
 8006eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	69b9      	ldr	r1, [r7, #24]
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e3      	bne.n	8006eb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f83e 	bl	8006f74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ef8:	e023      	b.n	8006f42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d009      	beq.n	8006f1a <HAL_UART_IRQHandler+0x4ea>
 8006f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f959 	bl	80071ca <UART_Transmit_IT>
    return;
 8006f18:	e014      	b.n	8006f44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00e      	beq.n	8006f44 <HAL_UART_IRQHandler+0x514>
 8006f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d008      	beq.n	8006f44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f999 	bl	800726a <UART_EndTransmit_IT>
    return;
 8006f38:	e004      	b.n	8006f44 <HAL_UART_IRQHandler+0x514>
    return;
 8006f3a:	bf00      	nop
 8006f3c:	e002      	b.n	8006f44 <HAL_UART_IRQHandler+0x514>
      return;
 8006f3e:	bf00      	nop
 8006f40:	e000      	b.n	8006f44 <HAL_UART_IRQHandler+0x514>
      return;
 8006f42:	bf00      	nop
  }
}
 8006f44:	37e8      	adds	r7, #232	; 0xe8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop

08006f4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b090      	sub	sp, #64	; 0x40
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	603b      	str	r3, [r7, #0]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f9c:	e050      	b.n	8007040 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d04c      	beq.n	8007040 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d007      	beq.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8006fac:	f7fc fcba 	bl	8003924 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d241      	bcs.n	8007040 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	330c      	adds	r3, #12
 8006fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc6:	e853 3f00 	ldrex	r3, [r3]
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	330c      	adds	r3, #12
 8006fda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fdc:	637a      	str	r2, [r7, #52]	; 0x34
 8006fde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fe4:	e841 2300 	strex	r3, r2, [r1]
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1e5      	bne.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3314      	adds	r3, #20
 8006ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	e853 3f00 	ldrex	r3, [r3]
 8006ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f023 0301 	bic.w	r3, r3, #1
 8007006:	63bb      	str	r3, [r7, #56]	; 0x38
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3314      	adds	r3, #20
 800700e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007010:	623a      	str	r2, [r7, #32]
 8007012:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007014:	69f9      	ldr	r1, [r7, #28]
 8007016:	6a3a      	ldr	r2, [r7, #32]
 8007018:	e841 2300 	strex	r3, r2, [r1]
 800701c:	61bb      	str	r3, [r7, #24]
   return(result);
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e5      	bne.n	8006ff0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2220      	movs	r2, #32
 8007028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2220      	movs	r2, #32
 8007030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e00f      	b.n	8007060 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	4013      	ands	r3, r2
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	429a      	cmp	r2, r3
 800704e:	bf0c      	ite	eq
 8007050:	2301      	moveq	r3, #1
 8007052:	2300      	movne	r3, #0
 8007054:	b2db      	uxtb	r3, r3
 8007056:	461a      	mov	r2, r3
 8007058:	79fb      	ldrb	r3, [r7, #7]
 800705a:	429a      	cmp	r2, r3
 800705c:	d09f      	beq.n	8006f9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3740      	adds	r7, #64	; 0x40
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	4613      	mov	r3, r2
 8007074:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	88fa      	ldrh	r2, [r7, #6]
 8007080:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	88fa      	ldrh	r2, [r7, #6]
 8007086:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2222      	movs	r2, #34	; 0x22
 8007092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070ac:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	695a      	ldr	r2, [r3, #20]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f042 0201 	orr.w	r2, r2, #1
 80070bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68da      	ldr	r2, [r3, #12]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0220 	orr.w	r2, r2, #32
 80070cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070dc:	b480      	push	{r7}
 80070de:	b095      	sub	sp, #84	; 0x54
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	330c      	adds	r3, #12
 80070ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	330c      	adds	r3, #12
 8007102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007104:	643a      	str	r2, [r7, #64]	; 0x40
 8007106:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800710a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e5      	bne.n	80070e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3314      	adds	r3, #20
 800711e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	e853 3f00 	ldrex	r3, [r3]
 8007126:	61fb      	str	r3, [r7, #28]
   return(result);
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	f023 0301 	bic.w	r3, r3, #1
 800712e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3314      	adds	r3, #20
 8007136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007138:	62fa      	str	r2, [r7, #44]	; 0x2c
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800713e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e5      	bne.n	8007118 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007150:	2b01      	cmp	r3, #1
 8007152:	d119      	bne.n	8007188 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	330c      	adds	r3, #12
 800715a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	e853 3f00 	ldrex	r3, [r3]
 8007162:	60bb      	str	r3, [r7, #8]
   return(result);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f023 0310 	bic.w	r3, r3, #16
 800716a:	647b      	str	r3, [r7, #68]	; 0x44
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	330c      	adds	r3, #12
 8007172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007174:	61ba      	str	r2, [r7, #24]
 8007176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	6979      	ldr	r1, [r7, #20]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	613b      	str	r3, [r7, #16]
   return(result);
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e5      	bne.n	8007154 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007196:	bf00      	nop
 8007198:	3754      	adds	r7, #84	; 0x54
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b084      	sub	sp, #16
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f7ff fecf 	bl	8006f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071c2:	bf00      	nop
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b085      	sub	sp, #20
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b21      	cmp	r3, #33	; 0x21
 80071dc:	d13e      	bne.n	800725c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e6:	d114      	bne.n	8007212 <UART_Transmit_IT+0x48>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d110      	bne.n	8007212 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007204:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	1c9a      	adds	r2, r3, #2
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	621a      	str	r2, [r3, #32]
 8007210:	e008      	b.n	8007224 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	1c59      	adds	r1, r3, #1
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	6211      	str	r1, [r2, #32]
 800721c:	781a      	ldrb	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	b29b      	uxth	r3, r3
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	4619      	mov	r1, r3
 8007232:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10f      	bne.n	8007258 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007246:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007256:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	e000      	b.n	800725e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800725c:	2302      	movs	r3, #2
  }
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68da      	ldr	r2, [r3, #12]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007280:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff fe5e 	bl	8006f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b08c      	sub	sp, #48	; 0x30
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b22      	cmp	r3, #34	; 0x22
 80072ac:	f040 80ab 	bne.w	8007406 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b8:	d117      	bne.n	80072ea <UART_Receive_IT+0x50>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d113      	bne.n	80072ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d8:	b29a      	uxth	r2, r3
 80072da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e2:	1c9a      	adds	r2, r3, #2
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	629a      	str	r2, [r3, #40]	; 0x28
 80072e8:	e026      	b.n	8007338 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80072f0:	2300      	movs	r3, #0
 80072f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fc:	d007      	beq.n	800730e <UART_Receive_IT+0x74>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10a      	bne.n	800731c <UART_Receive_IT+0x82>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d106      	bne.n	800731c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	b2da      	uxtb	r2, r3
 8007316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007318:	701a      	strb	r2, [r3, #0]
 800731a:	e008      	b.n	800732e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	b2db      	uxtb	r3, r3
 8007324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007328:	b2da      	uxtb	r2, r3
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800733c:	b29b      	uxth	r3, r3
 800733e:	3b01      	subs	r3, #1
 8007340:	b29b      	uxth	r3, r3
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	4619      	mov	r1, r3
 8007346:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007348:	2b00      	cmp	r3, #0
 800734a:	d15a      	bne.n	8007402 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0220 	bic.w	r2, r2, #32
 800735a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800736a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695a      	ldr	r2, [r3, #20]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0201 	bic.w	r2, r2, #1
 800737a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2220      	movs	r2, #32
 8007380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007388:	2b01      	cmp	r3, #1
 800738a:	d135      	bne.n	80073f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	330c      	adds	r3, #12
 8007398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	613b      	str	r3, [r7, #16]
   return(result);
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f023 0310 	bic.w	r3, r3, #16
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	330c      	adds	r3, #12
 80073b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b2:	623a      	str	r2, [r7, #32]
 80073b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	69f9      	ldr	r1, [r7, #28]
 80073b8:	6a3a      	ldr	r2, [r7, #32]
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	61bb      	str	r3, [r7, #24]
   return(result);
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e5      	bne.n	8007392 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b10      	cmp	r3, #16
 80073d2:	d10a      	bne.n	80073ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff fdbf 	bl	8006f74 <HAL_UARTEx_RxEventCallback>
 80073f6:	e002      	b.n	80073fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7fc f8f5 	bl	80035e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	e002      	b.n	8007408 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	e000      	b.n	8007408 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007406:	2302      	movs	r3, #2
  }
}
 8007408:	4618      	mov	r0, r3
 800740a:	3730      	adds	r7, #48	; 0x30
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007414:	b09f      	sub	sp, #124	; 0x7c
 8007416:	af00      	add	r7, sp, #0
 8007418:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800741a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007426:	68d9      	ldr	r1, [r3, #12]
 8007428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	ea40 0301 	orr.w	r3, r0, r1
 8007430:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007434:	689a      	ldr	r2, [r3, #8]
 8007436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	431a      	orrs	r2, r3
 800743c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	431a      	orrs	r2, r3
 8007442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	4313      	orrs	r3, r2
 8007448:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800744a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007454:	f021 010c 	bic.w	r1, r1, #12
 8007458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800745e:	430b      	orrs	r3, r1
 8007460:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800746c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800746e:	6999      	ldr	r1, [r3, #24]
 8007470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	ea40 0301 	orr.w	r3, r0, r1
 8007478:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800747a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	4bc5      	ldr	r3, [pc, #788]	; (8007794 <UART_SetConfig+0x384>)
 8007480:	429a      	cmp	r2, r3
 8007482:	d004      	beq.n	800748e <UART_SetConfig+0x7e>
 8007484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	4bc3      	ldr	r3, [pc, #780]	; (8007798 <UART_SetConfig+0x388>)
 800748a:	429a      	cmp	r2, r3
 800748c:	d103      	bne.n	8007496 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800748e:	f7fe f95b 	bl	8005748 <HAL_RCC_GetPCLK2Freq>
 8007492:	6778      	str	r0, [r7, #116]	; 0x74
 8007494:	e002      	b.n	800749c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007496:	f7fe f943 	bl	8005720 <HAL_RCC_GetPCLK1Freq>
 800749a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800749c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074a4:	f040 80b6 	bne.w	8007614 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074aa:	461c      	mov	r4, r3
 80074ac:	f04f 0500 	mov.w	r5, #0
 80074b0:	4622      	mov	r2, r4
 80074b2:	462b      	mov	r3, r5
 80074b4:	1891      	adds	r1, r2, r2
 80074b6:	6439      	str	r1, [r7, #64]	; 0x40
 80074b8:	415b      	adcs	r3, r3
 80074ba:	647b      	str	r3, [r7, #68]	; 0x44
 80074bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074c0:	1912      	adds	r2, r2, r4
 80074c2:	eb45 0303 	adc.w	r3, r5, r3
 80074c6:	f04f 0000 	mov.w	r0, #0
 80074ca:	f04f 0100 	mov.w	r1, #0
 80074ce:	00d9      	lsls	r1, r3, #3
 80074d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074d4:	00d0      	lsls	r0, r2, #3
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	1911      	adds	r1, r2, r4
 80074dc:	6639      	str	r1, [r7, #96]	; 0x60
 80074de:	416b      	adcs	r3, r5
 80074e0:	667b      	str	r3, [r7, #100]	; 0x64
 80074e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	461a      	mov	r2, r3
 80074e8:	f04f 0300 	mov.w	r3, #0
 80074ec:	1891      	adds	r1, r2, r2
 80074ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80074f0:	415b      	adcs	r3, r3
 80074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80074f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80074fc:	f7f9 fb5c 	bl	8000bb8 <__aeabi_uldivmod>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4ba5      	ldr	r3, [pc, #660]	; (800779c <UART_SetConfig+0x38c>)
 8007506:	fba3 2302 	umull	r2, r3, r3, r2
 800750a:	095b      	lsrs	r3, r3, #5
 800750c:	011e      	lsls	r6, r3, #4
 800750e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007510:	461c      	mov	r4, r3
 8007512:	f04f 0500 	mov.w	r5, #0
 8007516:	4622      	mov	r2, r4
 8007518:	462b      	mov	r3, r5
 800751a:	1891      	adds	r1, r2, r2
 800751c:	6339      	str	r1, [r7, #48]	; 0x30
 800751e:	415b      	adcs	r3, r3
 8007520:	637b      	str	r3, [r7, #52]	; 0x34
 8007522:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007526:	1912      	adds	r2, r2, r4
 8007528:	eb45 0303 	adc.w	r3, r5, r3
 800752c:	f04f 0000 	mov.w	r0, #0
 8007530:	f04f 0100 	mov.w	r1, #0
 8007534:	00d9      	lsls	r1, r3, #3
 8007536:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800753a:	00d0      	lsls	r0, r2, #3
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	1911      	adds	r1, r2, r4
 8007542:	65b9      	str	r1, [r7, #88]	; 0x58
 8007544:	416b      	adcs	r3, r5
 8007546:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	461a      	mov	r2, r3
 800754e:	f04f 0300 	mov.w	r3, #0
 8007552:	1891      	adds	r1, r2, r2
 8007554:	62b9      	str	r1, [r7, #40]	; 0x28
 8007556:	415b      	adcs	r3, r3
 8007558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800755a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800755e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007562:	f7f9 fb29 	bl	8000bb8 <__aeabi_uldivmod>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4b8c      	ldr	r3, [pc, #560]	; (800779c <UART_SetConfig+0x38c>)
 800756c:	fba3 1302 	umull	r1, r3, r3, r2
 8007570:	095b      	lsrs	r3, r3, #5
 8007572:	2164      	movs	r1, #100	; 0x64
 8007574:	fb01 f303 	mul.w	r3, r1, r3
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	3332      	adds	r3, #50	; 0x32
 800757e:	4a87      	ldr	r2, [pc, #540]	; (800779c <UART_SetConfig+0x38c>)
 8007580:	fba2 2303 	umull	r2, r3, r2, r3
 8007584:	095b      	lsrs	r3, r3, #5
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800758c:	441e      	add	r6, r3
 800758e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007590:	4618      	mov	r0, r3
 8007592:	f04f 0100 	mov.w	r1, #0
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	1894      	adds	r4, r2, r2
 800759c:	623c      	str	r4, [r7, #32]
 800759e:	415b      	adcs	r3, r3
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24
 80075a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075a6:	1812      	adds	r2, r2, r0
 80075a8:	eb41 0303 	adc.w	r3, r1, r3
 80075ac:	f04f 0400 	mov.w	r4, #0
 80075b0:	f04f 0500 	mov.w	r5, #0
 80075b4:	00dd      	lsls	r5, r3, #3
 80075b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075ba:	00d4      	lsls	r4, r2, #3
 80075bc:	4622      	mov	r2, r4
 80075be:	462b      	mov	r3, r5
 80075c0:	1814      	adds	r4, r2, r0
 80075c2:	653c      	str	r4, [r7, #80]	; 0x50
 80075c4:	414b      	adcs	r3, r1
 80075c6:	657b      	str	r3, [r7, #84]	; 0x54
 80075c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	461a      	mov	r2, r3
 80075ce:	f04f 0300 	mov.w	r3, #0
 80075d2:	1891      	adds	r1, r2, r2
 80075d4:	61b9      	str	r1, [r7, #24]
 80075d6:	415b      	adcs	r3, r3
 80075d8:	61fb      	str	r3, [r7, #28]
 80075da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80075e2:	f7f9 fae9 	bl	8000bb8 <__aeabi_uldivmod>
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	4b6c      	ldr	r3, [pc, #432]	; (800779c <UART_SetConfig+0x38c>)
 80075ec:	fba3 1302 	umull	r1, r3, r3, r2
 80075f0:	095b      	lsrs	r3, r3, #5
 80075f2:	2164      	movs	r1, #100	; 0x64
 80075f4:	fb01 f303 	mul.w	r3, r1, r3
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	3332      	adds	r3, #50	; 0x32
 80075fe:	4a67      	ldr	r2, [pc, #412]	; (800779c <UART_SetConfig+0x38c>)
 8007600:	fba2 2303 	umull	r2, r3, r2, r3
 8007604:	095b      	lsrs	r3, r3, #5
 8007606:	f003 0207 	and.w	r2, r3, #7
 800760a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4432      	add	r2, r6
 8007610:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007612:	e0b9      	b.n	8007788 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007616:	461c      	mov	r4, r3
 8007618:	f04f 0500 	mov.w	r5, #0
 800761c:	4622      	mov	r2, r4
 800761e:	462b      	mov	r3, r5
 8007620:	1891      	adds	r1, r2, r2
 8007622:	6139      	str	r1, [r7, #16]
 8007624:	415b      	adcs	r3, r3
 8007626:	617b      	str	r3, [r7, #20]
 8007628:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800762c:	1912      	adds	r2, r2, r4
 800762e:	eb45 0303 	adc.w	r3, r5, r3
 8007632:	f04f 0000 	mov.w	r0, #0
 8007636:	f04f 0100 	mov.w	r1, #0
 800763a:	00d9      	lsls	r1, r3, #3
 800763c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007640:	00d0      	lsls	r0, r2, #3
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	eb12 0804 	adds.w	r8, r2, r4
 800764a:	eb43 0905 	adc.w	r9, r3, r5
 800764e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	4618      	mov	r0, r3
 8007654:	f04f 0100 	mov.w	r1, #0
 8007658:	f04f 0200 	mov.w	r2, #0
 800765c:	f04f 0300 	mov.w	r3, #0
 8007660:	008b      	lsls	r3, r1, #2
 8007662:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007666:	0082      	lsls	r2, r0, #2
 8007668:	4640      	mov	r0, r8
 800766a:	4649      	mov	r1, r9
 800766c:	f7f9 faa4 	bl	8000bb8 <__aeabi_uldivmod>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	4b49      	ldr	r3, [pc, #292]	; (800779c <UART_SetConfig+0x38c>)
 8007676:	fba3 2302 	umull	r2, r3, r3, r2
 800767a:	095b      	lsrs	r3, r3, #5
 800767c:	011e      	lsls	r6, r3, #4
 800767e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007680:	4618      	mov	r0, r3
 8007682:	f04f 0100 	mov.w	r1, #0
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	1894      	adds	r4, r2, r2
 800768c:	60bc      	str	r4, [r7, #8]
 800768e:	415b      	adcs	r3, r3
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007696:	1812      	adds	r2, r2, r0
 8007698:	eb41 0303 	adc.w	r3, r1, r3
 800769c:	f04f 0400 	mov.w	r4, #0
 80076a0:	f04f 0500 	mov.w	r5, #0
 80076a4:	00dd      	lsls	r5, r3, #3
 80076a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80076aa:	00d4      	lsls	r4, r2, #3
 80076ac:	4622      	mov	r2, r4
 80076ae:	462b      	mov	r3, r5
 80076b0:	1814      	adds	r4, r2, r0
 80076b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80076b4:	414b      	adcs	r3, r1
 80076b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	4618      	mov	r0, r3
 80076be:	f04f 0100 	mov.w	r1, #0
 80076c2:	f04f 0200 	mov.w	r2, #0
 80076c6:	f04f 0300 	mov.w	r3, #0
 80076ca:	008b      	lsls	r3, r1, #2
 80076cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80076d0:	0082      	lsls	r2, r0, #2
 80076d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80076d6:	f7f9 fa6f 	bl	8000bb8 <__aeabi_uldivmod>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4b2f      	ldr	r3, [pc, #188]	; (800779c <UART_SetConfig+0x38c>)
 80076e0:	fba3 1302 	umull	r1, r3, r3, r2
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	2164      	movs	r1, #100	; 0x64
 80076e8:	fb01 f303 	mul.w	r3, r1, r3
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	011b      	lsls	r3, r3, #4
 80076f0:	3332      	adds	r3, #50	; 0x32
 80076f2:	4a2a      	ldr	r2, [pc, #168]	; (800779c <UART_SetConfig+0x38c>)
 80076f4:	fba2 2303 	umull	r2, r3, r2, r3
 80076f8:	095b      	lsrs	r3, r3, #5
 80076fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076fe:	441e      	add	r6, r3
 8007700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007702:	4618      	mov	r0, r3
 8007704:	f04f 0100 	mov.w	r1, #0
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	1894      	adds	r4, r2, r2
 800770e:	603c      	str	r4, [r7, #0]
 8007710:	415b      	adcs	r3, r3
 8007712:	607b      	str	r3, [r7, #4]
 8007714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007718:	1812      	adds	r2, r2, r0
 800771a:	eb41 0303 	adc.w	r3, r1, r3
 800771e:	f04f 0400 	mov.w	r4, #0
 8007722:	f04f 0500 	mov.w	r5, #0
 8007726:	00dd      	lsls	r5, r3, #3
 8007728:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800772c:	00d4      	lsls	r4, r2, #3
 800772e:	4622      	mov	r2, r4
 8007730:	462b      	mov	r3, r5
 8007732:	eb12 0a00 	adds.w	sl, r2, r0
 8007736:	eb43 0b01 	adc.w	fp, r3, r1
 800773a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	4618      	mov	r0, r3
 8007740:	f04f 0100 	mov.w	r1, #0
 8007744:	f04f 0200 	mov.w	r2, #0
 8007748:	f04f 0300 	mov.w	r3, #0
 800774c:	008b      	lsls	r3, r1, #2
 800774e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007752:	0082      	lsls	r2, r0, #2
 8007754:	4650      	mov	r0, sl
 8007756:	4659      	mov	r1, fp
 8007758:	f7f9 fa2e 	bl	8000bb8 <__aeabi_uldivmod>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4b0e      	ldr	r3, [pc, #56]	; (800779c <UART_SetConfig+0x38c>)
 8007762:	fba3 1302 	umull	r1, r3, r3, r2
 8007766:	095b      	lsrs	r3, r3, #5
 8007768:	2164      	movs	r1, #100	; 0x64
 800776a:	fb01 f303 	mul.w	r3, r1, r3
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	3332      	adds	r3, #50	; 0x32
 8007774:	4a09      	ldr	r2, [pc, #36]	; (800779c <UART_SetConfig+0x38c>)
 8007776:	fba2 2303 	umull	r2, r3, r2, r3
 800777a:	095b      	lsrs	r3, r3, #5
 800777c:	f003 020f 	and.w	r2, r3, #15
 8007780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4432      	add	r2, r6
 8007786:	609a      	str	r2, [r3, #8]
}
 8007788:	bf00      	nop
 800778a:	377c      	adds	r7, #124	; 0x7c
 800778c:	46bd      	mov	sp, r7
 800778e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007792:	bf00      	nop
 8007794:	40011000 	.word	0x40011000
 8007798:	40011400 	.word	0x40011400
 800779c:	51eb851f 	.word	0x51eb851f

080077a0 <__NVIC_SetPriority>:
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	6039      	str	r1, [r7, #0]
 80077aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	db0a      	blt.n	80077ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	490c      	ldr	r1, [pc, #48]	; (80077ec <__NVIC_SetPriority+0x4c>)
 80077ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077be:	0112      	lsls	r2, r2, #4
 80077c0:	b2d2      	uxtb	r2, r2
 80077c2:	440b      	add	r3, r1
 80077c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80077c8:	e00a      	b.n	80077e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	4908      	ldr	r1, [pc, #32]	; (80077f0 <__NVIC_SetPriority+0x50>)
 80077d0:	79fb      	ldrb	r3, [r7, #7]
 80077d2:	f003 030f 	and.w	r3, r3, #15
 80077d6:	3b04      	subs	r3, #4
 80077d8:	0112      	lsls	r2, r2, #4
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	440b      	add	r3, r1
 80077de:	761a      	strb	r2, [r3, #24]
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	e000e100 	.word	0xe000e100
 80077f0:	e000ed00 	.word	0xe000ed00

080077f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80077f8:	4b05      	ldr	r3, [pc, #20]	; (8007810 <SysTick_Handler+0x1c>)
 80077fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80077fc:	f001 fe34 	bl	8009468 <xTaskGetSchedulerState>
 8007800:	4603      	mov	r3, r0
 8007802:	2b01      	cmp	r3, #1
 8007804:	d001      	beq.n	800780a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007806:	f002 fc1f 	bl	800a048 <xPortSysTickHandler>
  }
}
 800780a:	bf00      	nop
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	e000e010 	.word	0xe000e010

08007814 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007814:	b580      	push	{r7, lr}
 8007816:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007818:	2100      	movs	r1, #0
 800781a:	f06f 0004 	mvn.w	r0, #4
 800781e:	f7ff ffbf 	bl	80077a0 <__NVIC_SetPriority>
#endif
}
 8007822:	bf00      	nop
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800782e:	f3ef 8305 	mrs	r3, IPSR
 8007832:	603b      	str	r3, [r7, #0]
  return(result);
 8007834:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800783a:	f06f 0305 	mvn.w	r3, #5
 800783e:	607b      	str	r3, [r7, #4]
 8007840:	e00c      	b.n	800785c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007842:	4b0a      	ldr	r3, [pc, #40]	; (800786c <osKernelInitialize+0x44>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d105      	bne.n	8007856 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800784a:	4b08      	ldr	r3, [pc, #32]	; (800786c <osKernelInitialize+0x44>)
 800784c:	2201      	movs	r2, #1
 800784e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007850:	2300      	movs	r3, #0
 8007852:	607b      	str	r3, [r7, #4]
 8007854:	e002      	b.n	800785c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007856:	f04f 33ff 	mov.w	r3, #4294967295
 800785a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800785c:	687b      	ldr	r3, [r7, #4]
}
 800785e:	4618      	mov	r0, r3
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	2000028c 	.word	0x2000028c

08007870 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007876:	f3ef 8305 	mrs	r3, IPSR
 800787a:	603b      	str	r3, [r7, #0]
  return(result);
 800787c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007882:	f06f 0305 	mvn.w	r3, #5
 8007886:	607b      	str	r3, [r7, #4]
 8007888:	e010      	b.n	80078ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800788a:	4b0b      	ldr	r3, [pc, #44]	; (80078b8 <osKernelStart+0x48>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d109      	bne.n	80078a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007892:	f7ff ffbf 	bl	8007814 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007896:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <osKernelStart+0x48>)
 8007898:	2202      	movs	r2, #2
 800789a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800789c:	f001 f988 	bl	8008bb0 <vTaskStartScheduler>
      stat = osOK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	607b      	str	r3, [r7, #4]
 80078a4:	e002      	b.n	80078ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80078a6:	f04f 33ff 	mov.w	r3, #4294967295
 80078aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80078ac:	687b      	ldr	r3, [r7, #4]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	2000028c 	.word	0x2000028c

080078bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08e      	sub	sp, #56	; 0x38
 80078c0:	af04      	add	r7, sp, #16
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80078c8:	2300      	movs	r3, #0
 80078ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078cc:	f3ef 8305 	mrs	r3, IPSR
 80078d0:	617b      	str	r3, [r7, #20]
  return(result);
 80078d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d17e      	bne.n	80079d6 <osThreadNew+0x11a>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d07b      	beq.n	80079d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80078de:	2380      	movs	r3, #128	; 0x80
 80078e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80078e2:	2318      	movs	r3, #24
 80078e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80078ea:	f04f 33ff 	mov.w	r3, #4294967295
 80078ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d045      	beq.n	8007982 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <osThreadNew+0x48>
        name = attr->name;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d008      	beq.n	800792a <osThreadNew+0x6e>
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	2b38      	cmp	r3, #56	; 0x38
 800791c:	d805      	bhi.n	800792a <osThreadNew+0x6e>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <osThreadNew+0x72>
        return (NULL);
 800792a:	2300      	movs	r3, #0
 800792c:	e054      	b.n	80079d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	089b      	lsrs	r3, r3, #2
 800793c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00e      	beq.n	8007964 <osThreadNew+0xa8>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	2bbb      	cmp	r3, #187	; 0xbb
 800794c:	d90a      	bls.n	8007964 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007952:	2b00      	cmp	r3, #0
 8007954:	d006      	beq.n	8007964 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <osThreadNew+0xa8>
        mem = 1;
 800795e:	2301      	movs	r3, #1
 8007960:	61bb      	str	r3, [r7, #24]
 8007962:	e010      	b.n	8007986 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10c      	bne.n	8007986 <osThreadNew+0xca>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d108      	bne.n	8007986 <osThreadNew+0xca>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d104      	bne.n	8007986 <osThreadNew+0xca>
          mem = 0;
 800797c:	2300      	movs	r3, #0
 800797e:	61bb      	str	r3, [r7, #24]
 8007980:	e001      	b.n	8007986 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007982:	2300      	movs	r3, #0
 8007984:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d110      	bne.n	80079ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007994:	9202      	str	r2, [sp, #8]
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	6a3a      	ldr	r2, [r7, #32]
 80079a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 ff18 	bl	80087d8 <xTaskCreateStatic>
 80079a8:	4603      	mov	r3, r0
 80079aa:	613b      	str	r3, [r7, #16]
 80079ac:	e013      	b.n	80079d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d110      	bne.n	80079d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	f107 0310 	add.w	r3, r7, #16
 80079bc:	9301      	str	r3, [sp, #4]
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 ff63 	bl	8008892 <xTaskCreate>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d001      	beq.n	80079d6 <osThreadNew+0x11a>
            hTask = NULL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80079d6:	693b      	ldr	r3, [r7, #16]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3728      	adds	r7, #40	; 0x28
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079e8:	f3ef 8305 	mrs	r3, IPSR
 80079ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80079ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <osDelay+0x1c>
    stat = osErrorISR;
 80079f4:	f06f 0305 	mvn.w	r3, #5
 80079f8:	60fb      	str	r3, [r7, #12]
 80079fa:	e007      	b.n	8007a0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f001 f89e 	bl	8008b48 <vTaskDelay>
    }
  }

  return (stat);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b088      	sub	sp, #32
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a22:	f3ef 8305 	mrs	r3, IPSR
 8007a26:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a28:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d174      	bne.n	8007b18 <osMutexNew+0x102>
    if (attr != NULL) {
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d003      	beq.n	8007a3c <osMutexNew+0x26>
      type = attr->attr_bits;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	61bb      	str	r3, [r7, #24]
 8007a3a:	e001      	b.n	8007a40 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <osMutexNew+0x3a>
      rmtx = 1U;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	617b      	str	r3, [r7, #20]
 8007a4e:	e001      	b.n	8007a54 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	f003 0308 	and.w	r3, r3, #8
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d15c      	bne.n	8007b18 <osMutexNew+0x102>
      mem = -1;
 8007a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a62:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d015      	beq.n	8007a96 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d006      	beq.n	8007a80 <osMutexNew+0x6a>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	2b4f      	cmp	r3, #79	; 0x4f
 8007a78:	d902      	bls.n	8007a80 <osMutexNew+0x6a>
          mem = 1;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	613b      	str	r3, [r7, #16]
 8007a7e:	e00c      	b.n	8007a9a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d108      	bne.n	8007a9a <osMutexNew+0x84>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d104      	bne.n	8007a9a <osMutexNew+0x84>
            mem = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	e001      	b.n	8007a9a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d112      	bne.n	8007ac6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d007      	beq.n	8007ab6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	2004      	movs	r0, #4
 8007aae:	f000 fa90 	bl	8007fd2 <xQueueCreateMutexStatic>
 8007ab2:	61f8      	str	r0, [r7, #28]
 8007ab4:	e016      	b.n	8007ae4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	4619      	mov	r1, r3
 8007abc:	2001      	movs	r0, #1
 8007abe:	f000 fa88 	bl	8007fd2 <xQueueCreateMutexStatic>
 8007ac2:	61f8      	str	r0, [r7, #28]
 8007ac4:	e00e      	b.n	8007ae4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10b      	bne.n	8007ae4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d004      	beq.n	8007adc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007ad2:	2004      	movs	r0, #4
 8007ad4:	f000 fa65 	bl	8007fa2 <xQueueCreateMutex>
 8007ad8:	61f8      	str	r0, [r7, #28]
 8007ada:	e003      	b.n	8007ae4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007adc:	2001      	movs	r0, #1
 8007ade:	f000 fa60 	bl	8007fa2 <xQueueCreateMutex>
 8007ae2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00c      	beq.n	8007b04 <osMutexNew+0xee>
        if (attr != NULL) {
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d003      	beq.n	8007af8 <osMutexNew+0xe2>
          name = attr->name;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	60fb      	str	r3, [r7, #12]
 8007af6:	e001      	b.n	8007afc <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007af8:	2300      	movs	r3, #0
 8007afa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007afc:	68f9      	ldr	r1, [r7, #12]
 8007afe:	69f8      	ldr	r0, [r7, #28]
 8007b00:	f000 fe0c 	bl	800871c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d006      	beq.n	8007b18 <osMutexNew+0x102>
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007b18:	69fb      	ldr	r3, [r7, #28]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3720      	adds	r7, #32
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4a07      	ldr	r2, [pc, #28]	; (8007b50 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	4a06      	ldr	r2, [pc, #24]	; (8007b54 <vApplicationGetIdleTaskMemory+0x30>)
 8007b3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2280      	movs	r2, #128	; 0x80
 8007b40:	601a      	str	r2, [r3, #0]
}
 8007b42:	bf00      	nop
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	20000290 	.word	0x20000290
 8007b54:	2000034c 	.word	0x2000034c

08007b58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4a07      	ldr	r2, [pc, #28]	; (8007b84 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	4a06      	ldr	r2, [pc, #24]	; (8007b88 <vApplicationGetTimerTaskMemory+0x30>)
 8007b6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b76:	601a      	str	r2, [r3, #0]
}
 8007b78:	bf00      	nop
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	2000054c 	.word	0x2000054c
 8007b88:	20000608 	.word	0x20000608

08007b8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f103 0208 	add.w	r2, r3, #8
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f103 0208 	add.w	r2, r3, #8
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f103 0208 	add.w	r2, r3, #8
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bda:	bf00      	nop
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007be6:	b480      	push	{r7}
 8007be8:	b085      	sub	sp, #20
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	601a      	str	r2, [r3, #0]
}
 8007c22:	bf00      	nop
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c44:	d103      	bne.n	8007c4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	e00c      	b.n	8007c68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3308      	adds	r3, #8
 8007c52:	60fb      	str	r3, [r7, #12]
 8007c54:	e002      	b.n	8007c5c <vListInsert+0x2e>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	60fb      	str	r3, [r7, #12]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d2f6      	bcs.n	8007c56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	1c5a      	adds	r2, r3, #1
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	601a      	str	r2, [r3, #0]
}
 8007c94:	bf00      	nop
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	6892      	ldr	r2, [r2, #8]
 8007cb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6852      	ldr	r2, [r2, #4]
 8007cc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d103      	bne.n	8007cd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	1e5a      	subs	r2, r3, #1
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10a      	bne.n	8007d1e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d1a:	bf00      	nop
 8007d1c:	e7fe      	b.n	8007d1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007d1e:	f002 f901 	bl	8009f24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2a:	68f9      	ldr	r1, [r7, #12]
 8007d2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d2e:	fb01 f303 	mul.w	r3, r1, r3
 8007d32:	441a      	add	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	68f9      	ldr	r1, [r7, #12]
 8007d52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d54:	fb01 f303 	mul.w	r3, r1, r3
 8007d58:	441a      	add	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	22ff      	movs	r2, #255	; 0xff
 8007d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	22ff      	movs	r2, #255	; 0xff
 8007d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d114      	bne.n	8007d9e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d01a      	beq.n	8007db2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3310      	adds	r3, #16
 8007d80:	4618      	mov	r0, r3
 8007d82:	f001 f9af 	bl	80090e4 <xTaskRemoveFromEventList>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d012      	beq.n	8007db2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d8c:	4b0c      	ldr	r3, [pc, #48]	; (8007dc0 <xQueueGenericReset+0xcc>)
 8007d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	e009      	b.n	8007db2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3310      	adds	r3, #16
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7ff fef2 	bl	8007b8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3324      	adds	r3, #36	; 0x24
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff feed 	bl	8007b8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007db2:	f002 f8e7 	bl	8009f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007db6:	2301      	movs	r3, #1
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	e000ed04 	.word	0xe000ed04

08007dc4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08e      	sub	sp, #56	; 0x38
 8007dc8:	af02      	add	r7, sp, #8
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
 8007dd0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10a      	bne.n	8007dee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dea:	bf00      	nop
 8007dec:	e7fe      	b.n	8007dec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10a      	bne.n	8007e0a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e06:	bf00      	nop
 8007e08:	e7fe      	b.n	8007e08 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d002      	beq.n	8007e16 <xQueueGenericCreateStatic+0x52>
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <xQueueGenericCreateStatic+0x56>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e000      	b.n	8007e1c <xQueueGenericCreateStatic+0x58>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10a      	bne.n	8007e36 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	623b      	str	r3, [r7, #32]
}
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d102      	bne.n	8007e42 <xQueueGenericCreateStatic+0x7e>
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <xQueueGenericCreateStatic+0x82>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <xQueueGenericCreateStatic+0x84>
 8007e46:	2300      	movs	r3, #0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10a      	bne.n	8007e62 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	61fb      	str	r3, [r7, #28]
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e62:	2350      	movs	r3, #80	; 0x50
 8007e64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2b50      	cmp	r3, #80	; 0x50
 8007e6a:	d00a      	beq.n	8007e82 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	61bb      	str	r3, [r7, #24]
}
 8007e7e:	bf00      	nop
 8007e80:	e7fe      	b.n	8007e80 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e82:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00d      	beq.n	8007eaa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e96:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	68b9      	ldr	r1, [r7, #8]
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 f83f 	bl	8007f28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3730      	adds	r7, #48	; 0x30
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b08a      	sub	sp, #40	; 0x28
 8007eb8:	af02      	add	r7, sp, #8
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10a      	bne.n	8007ede <xQueueGenericCreate+0x2a>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	613b      	str	r3, [r7, #16]
}
 8007eda:	bf00      	nop
 8007edc:	e7fe      	b.n	8007edc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	fb02 f303 	mul.w	r3, r2, r3
 8007ee6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	3350      	adds	r3, #80	; 0x50
 8007eec:	4618      	mov	r0, r3
 8007eee:	f002 f93b 	bl	800a168 <pvPortMalloc>
 8007ef2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d011      	beq.n	8007f1e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	3350      	adds	r3, #80	; 0x50
 8007f02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f0c:	79fa      	ldrb	r2, [r7, #7]
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	4613      	mov	r3, r2
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	68b9      	ldr	r1, [r7, #8]
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 f805 	bl	8007f28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f1e:	69bb      	ldr	r3, [r7, #24]
	}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3720      	adds	r7, #32
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d103      	bne.n	8007f44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	e002      	b.n	8007f4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f56:	2101      	movs	r1, #1
 8007f58:	69b8      	ldr	r0, [r7, #24]
 8007f5a:	f7ff fecb 	bl	8007cf4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	78fa      	ldrb	r2, [r7, #3]
 8007f62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f66:	bf00      	nop
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b082      	sub	sp, #8
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00e      	beq.n	8007f9a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007f8e:	2300      	movs	r3, #0
 8007f90:	2200      	movs	r2, #0
 8007f92:	2100      	movs	r1, #0
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f837 	bl	8008008 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007f9a:	bf00      	nop
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b086      	sub	sp, #24
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	4603      	mov	r3, r0
 8007faa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007fac:	2301      	movs	r3, #1
 8007fae:	617b      	str	r3, [r7, #20]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007fb4:	79fb      	ldrb	r3, [r7, #7]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	6939      	ldr	r1, [r7, #16]
 8007fba:	6978      	ldr	r0, [r7, #20]
 8007fbc:	f7ff ff7a 	bl	8007eb4 <xQueueGenericCreate>
 8007fc0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f7ff ffd3 	bl	8007f6e <prvInitialiseMutex>

		return xNewQueue;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
	}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3718      	adds	r7, #24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b088      	sub	sp, #32
 8007fd6:	af02      	add	r7, sp, #8
 8007fd8:	4603      	mov	r3, r0
 8007fda:	6039      	str	r1, [r7, #0]
 8007fdc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	617b      	str	r3, [r7, #20]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007fe6:	79fb      	ldrb	r3, [r7, #7]
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2200      	movs	r2, #0
 8007fee:	6939      	ldr	r1, [r7, #16]
 8007ff0:	6978      	ldr	r0, [r7, #20]
 8007ff2:	f7ff fee7 	bl	8007dc4 <xQueueGenericCreateStatic>
 8007ff6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f7ff ffb8 	bl	8007f6e <prvInitialiseMutex>

		return xNewQueue;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
	}
 8008000:	4618      	mov	r0, r3
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b08e      	sub	sp, #56	; 0x38
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
 8008014:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008016:	2300      	movs	r3, #0
 8008018:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10a      	bne.n	800803a <xQueueGenericSend+0x32>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008036:	bf00      	nop
 8008038:	e7fe      	b.n	8008038 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d103      	bne.n	8008048 <xQueueGenericSend+0x40>
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <xQueueGenericSend+0x44>
 8008048:	2301      	movs	r3, #1
 800804a:	e000      	b.n	800804e <xQueueGenericSend+0x46>
 800804c:	2300      	movs	r3, #0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10a      	bne.n	8008068 <xQueueGenericSend+0x60>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008064:	bf00      	nop
 8008066:	e7fe      	b.n	8008066 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2b02      	cmp	r3, #2
 800806c:	d103      	bne.n	8008076 <xQueueGenericSend+0x6e>
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008072:	2b01      	cmp	r3, #1
 8008074:	d101      	bne.n	800807a <xQueueGenericSend+0x72>
 8008076:	2301      	movs	r3, #1
 8008078:	e000      	b.n	800807c <xQueueGenericSend+0x74>
 800807a:	2300      	movs	r3, #0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10a      	bne.n	8008096 <xQueueGenericSend+0x8e>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	623b      	str	r3, [r7, #32]
}
 8008092:	bf00      	nop
 8008094:	e7fe      	b.n	8008094 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008096:	f001 f9e7 	bl	8009468 <xTaskGetSchedulerState>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d102      	bne.n	80080a6 <xQueueGenericSend+0x9e>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <xQueueGenericSend+0xa2>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e000      	b.n	80080ac <xQueueGenericSend+0xa4>
 80080aa:	2300      	movs	r3, #0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10a      	bne.n	80080c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	61fb      	str	r3, [r7, #28]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080c6:	f001 ff2d 	bl	8009f24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d302      	bcc.n	80080dc <xQueueGenericSend+0xd4>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d129      	bne.n	8008130 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	68b9      	ldr	r1, [r7, #8]
 80080e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080e2:	f000 fa0b 	bl	80084fc <prvCopyDataToQueue>
 80080e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d010      	beq.n	8008112 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	3324      	adds	r3, #36	; 0x24
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 fff5 	bl	80090e4 <xTaskRemoveFromEventList>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d013      	beq.n	8008128 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008100:	4b3f      	ldr	r3, [pc, #252]	; (8008200 <xQueueGenericSend+0x1f8>)
 8008102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008106:	601a      	str	r2, [r3, #0]
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	e00a      	b.n	8008128 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008114:	2b00      	cmp	r3, #0
 8008116:	d007      	beq.n	8008128 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008118:	4b39      	ldr	r3, [pc, #228]	; (8008200 <xQueueGenericSend+0x1f8>)
 800811a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008128:	f001 ff2c 	bl	8009f84 <vPortExitCritical>
				return pdPASS;
 800812c:	2301      	movs	r3, #1
 800812e:	e063      	b.n	80081f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d103      	bne.n	800813e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008136:	f001 ff25 	bl	8009f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800813a:	2300      	movs	r3, #0
 800813c:	e05c      	b.n	80081f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800813e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008140:	2b00      	cmp	r3, #0
 8008142:	d106      	bne.n	8008152 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008144:	f107 0314 	add.w	r3, r7, #20
 8008148:	4618      	mov	r0, r3
 800814a:	f001 f82f 	bl	80091ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800814e:	2301      	movs	r3, #1
 8008150:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008152:	f001 ff17 	bl	8009f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008156:	f000 fd9b 	bl	8008c90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800815a:	f001 fee3 	bl	8009f24 <vPortEnterCritical>
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008164:	b25b      	sxtb	r3, r3
 8008166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816a:	d103      	bne.n	8008174 <xQueueGenericSend+0x16c>
 800816c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800817a:	b25b      	sxtb	r3, r3
 800817c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008180:	d103      	bne.n	800818a <xQueueGenericSend+0x182>
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800818a:	f001 fefb 	bl	8009f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800818e:	1d3a      	adds	r2, r7, #4
 8008190:	f107 0314 	add.w	r3, r7, #20
 8008194:	4611      	mov	r1, r2
 8008196:	4618      	mov	r0, r3
 8008198:	f001 f81e 	bl	80091d8 <xTaskCheckForTimeOut>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d124      	bne.n	80081ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081a4:	f000 faa2 	bl	80086ec <prvIsQueueFull>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d018      	beq.n	80081e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	3310      	adds	r3, #16
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	4611      	mov	r1, r2
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 ff44 	bl	8009044 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80081bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081be:	f000 fa2d 	bl	800861c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80081c2:	f000 fd73 	bl	8008cac <xTaskResumeAll>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f47f af7c 	bne.w	80080c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80081ce:	4b0c      	ldr	r3, [pc, #48]	; (8008200 <xQueueGenericSend+0x1f8>)
 80081d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	e772      	b.n	80080c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081e2:	f000 fa1b 	bl	800861c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081e6:	f000 fd61 	bl	8008cac <xTaskResumeAll>
 80081ea:	e76c      	b.n	80080c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ee:	f000 fa15 	bl	800861c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081f2:	f000 fd5b 	bl	8008cac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3738      	adds	r7, #56	; 0x38
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	e000ed04 	.word	0xe000ed04

08008204 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b090      	sub	sp, #64	; 0x40
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10a      	bne.n	8008232 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d103      	bne.n	8008240 <xQueueGenericSendFromISR+0x3c>
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <xQueueGenericSendFromISR+0x40>
 8008240:	2301      	movs	r3, #1
 8008242:	e000      	b.n	8008246 <xQueueGenericSendFromISR+0x42>
 8008244:	2300      	movs	r3, #0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10a      	bne.n	8008260 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800825c:	bf00      	nop
 800825e:	e7fe      	b.n	800825e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b02      	cmp	r3, #2
 8008264:	d103      	bne.n	800826e <xQueueGenericSendFromISR+0x6a>
 8008266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826a:	2b01      	cmp	r3, #1
 800826c:	d101      	bne.n	8008272 <xQueueGenericSendFromISR+0x6e>
 800826e:	2301      	movs	r3, #1
 8008270:	e000      	b.n	8008274 <xQueueGenericSendFromISR+0x70>
 8008272:	2300      	movs	r3, #0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10a      	bne.n	800828e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	623b      	str	r3, [r7, #32]
}
 800828a:	bf00      	nop
 800828c:	e7fe      	b.n	800828c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800828e:	f001 ff2b 	bl	800a0e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008292:	f3ef 8211 	mrs	r2, BASEPRI
 8008296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	61fa      	str	r2, [r7, #28]
 80082a8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d302      	bcc.n	80082c0 <xQueueGenericSendFromISR+0xbc>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d12f      	bne.n	8008320 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	68b9      	ldr	r1, [r7, #8]
 80082d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082d6:	f000 f911 	bl	80084fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80082de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e2:	d112      	bne.n	800830a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d016      	beq.n	800831a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	3324      	adds	r3, #36	; 0x24
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 fef7 	bl	80090e4 <xTaskRemoveFromEventList>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00e      	beq.n	800831a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00b      	beq.n	800831a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	601a      	str	r2, [r3, #0]
 8008308:	e007      	b.n	800831a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800830a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800830e:	3301      	adds	r3, #1
 8008310:	b2db      	uxtb	r3, r3
 8008312:	b25a      	sxtb	r2, r3
 8008314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800831a:	2301      	movs	r3, #1
 800831c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800831e:	e001      	b.n	8008324 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008320:	2300      	movs	r3, #0
 8008322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008326:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800832e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008332:	4618      	mov	r0, r3
 8008334:	3740      	adds	r7, #64	; 0x40
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b08c      	sub	sp, #48	; 0x30
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008348:	2300      	movs	r3, #0
 800834a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10a      	bne.n	800836c <xQueueReceive+0x30>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	623b      	str	r3, [r7, #32]
}
 8008368:	bf00      	nop
 800836a:	e7fe      	b.n	800836a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d103      	bne.n	800837a <xQueueReceive+0x3e>
 8008372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <xQueueReceive+0x42>
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <xQueueReceive+0x44>
 800837e:	2300      	movs	r3, #0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10a      	bne.n	800839a <xQueueReceive+0x5e>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	61fb      	str	r3, [r7, #28]
}
 8008396:	bf00      	nop
 8008398:	e7fe      	b.n	8008398 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800839a:	f001 f865 	bl	8009468 <xTaskGetSchedulerState>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d102      	bne.n	80083aa <xQueueReceive+0x6e>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <xQueueReceive+0x72>
 80083aa:	2301      	movs	r3, #1
 80083ac:	e000      	b.n	80083b0 <xQueueReceive+0x74>
 80083ae:	2300      	movs	r3, #0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <xQueueReceive+0x8e>
	__asm volatile
 80083b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	61bb      	str	r3, [r7, #24]
}
 80083c6:	bf00      	nop
 80083c8:	e7fe      	b.n	80083c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083ca:	f001 fdab 	bl	8009f24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d01f      	beq.n	800841a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083da:	68b9      	ldr	r1, [r7, #8]
 80083dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083de:	f000 f8f7 	bl	80085d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e4:	1e5a      	subs	r2, r3, #1
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00f      	beq.n	8008412 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f4:	3310      	adds	r3, #16
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fe74 	bl	80090e4 <xTaskRemoveFromEventList>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d007      	beq.n	8008412 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008402:	4b3d      	ldr	r3, [pc, #244]	; (80084f8 <xQueueReceive+0x1bc>)
 8008404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008412:	f001 fdb7 	bl	8009f84 <vPortExitCritical>
				return pdPASS;
 8008416:	2301      	movs	r3, #1
 8008418:	e069      	b.n	80084ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d103      	bne.n	8008428 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008420:	f001 fdb0 	bl	8009f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008424:	2300      	movs	r3, #0
 8008426:	e062      	b.n	80084ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842a:	2b00      	cmp	r3, #0
 800842c:	d106      	bne.n	800843c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800842e:	f107 0310 	add.w	r3, r7, #16
 8008432:	4618      	mov	r0, r3
 8008434:	f000 feba 	bl	80091ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008438:	2301      	movs	r3, #1
 800843a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800843c:	f001 fda2 	bl	8009f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008440:	f000 fc26 	bl	8008c90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008444:	f001 fd6e 	bl	8009f24 <vPortEnterCritical>
 8008448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800844e:	b25b      	sxtb	r3, r3
 8008450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008454:	d103      	bne.n	800845e <xQueueReceive+0x122>
 8008456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008464:	b25b      	sxtb	r3, r3
 8008466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846a:	d103      	bne.n	8008474 <xQueueReceive+0x138>
 800846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008474:	f001 fd86 	bl	8009f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008478:	1d3a      	adds	r2, r7, #4
 800847a:	f107 0310 	add.w	r3, r7, #16
 800847e:	4611      	mov	r1, r2
 8008480:	4618      	mov	r0, r3
 8008482:	f000 fea9 	bl	80091d8 <xTaskCheckForTimeOut>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d123      	bne.n	80084d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800848c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800848e:	f000 f917 	bl	80086c0 <prvIsQueueEmpty>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d017      	beq.n	80084c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	3324      	adds	r3, #36	; 0x24
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	4611      	mov	r1, r2
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 fdcf 	bl	8009044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084a8:	f000 f8b8 	bl	800861c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084ac:	f000 fbfe 	bl	8008cac <xTaskResumeAll>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d189      	bne.n	80083ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80084b6:	4b10      	ldr	r3, [pc, #64]	; (80084f8 <xQueueReceive+0x1bc>)
 80084b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	e780      	b.n	80083ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80084c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084ca:	f000 f8a7 	bl	800861c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084ce:	f000 fbed 	bl	8008cac <xTaskResumeAll>
 80084d2:	e77a      	b.n	80083ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d6:	f000 f8a1 	bl	800861c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084da:	f000 fbe7 	bl	8008cac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e0:	f000 f8ee 	bl	80086c0 <prvIsQueueEmpty>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f43f af6f 	beq.w	80083ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3730      	adds	r7, #48	; 0x30
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	e000ed04 	.word	0xe000ed04

080084fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008508:	2300      	movs	r3, #0
 800850a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008510:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10d      	bne.n	8008536 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d14d      	bne.n	80085be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	4618      	mov	r0, r3
 8008528:	f000 ffbc 	bl	80094a4 <xTaskPriorityDisinherit>
 800852c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	609a      	str	r2, [r3, #8]
 8008534:	e043      	b.n	80085be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d119      	bne.n	8008570 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6858      	ldr	r0, [r3, #4]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008544:	461a      	mov	r2, r3
 8008546:	68b9      	ldr	r1, [r7, #8]
 8008548:	f002 f91f 	bl	800a78a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	685a      	ldr	r2, [r3, #4]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008554:	441a      	add	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	429a      	cmp	r2, r3
 8008564:	d32b      	bcc.n	80085be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	605a      	str	r2, [r3, #4]
 800856e:	e026      	b.n	80085be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	68d8      	ldr	r0, [r3, #12]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008578:	461a      	mov	r2, r3
 800857a:	68b9      	ldr	r1, [r7, #8]
 800857c:	f002 f905 	bl	800a78a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	68da      	ldr	r2, [r3, #12]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008588:	425b      	negs	r3, r3
 800858a:	441a      	add	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	429a      	cmp	r2, r3
 800859a:	d207      	bcs.n	80085ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	689a      	ldr	r2, [r3, #8]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a4:	425b      	negs	r3, r3
 80085a6:	441a      	add	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d105      	bne.n	80085be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	3b01      	subs	r3, #1
 80085bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80085c6:	697b      	ldr	r3, [r7, #20]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d018      	beq.n	8008614 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68da      	ldr	r2, [r3, #12]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ea:	441a      	add	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	68da      	ldr	r2, [r3, #12]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d303      	bcc.n	8008604 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68d9      	ldr	r1, [r3, #12]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860c:	461a      	mov	r2, r3
 800860e:	6838      	ldr	r0, [r7, #0]
 8008610:	f002 f8bb 	bl	800a78a <memcpy>
	}
}
 8008614:	bf00      	nop
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008624:	f001 fc7e 	bl	8009f24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800862e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008630:	e011      	b.n	8008656 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008636:	2b00      	cmp	r3, #0
 8008638:	d012      	beq.n	8008660 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	3324      	adds	r3, #36	; 0x24
 800863e:	4618      	mov	r0, r3
 8008640:	f000 fd50 	bl	80090e4 <xTaskRemoveFromEventList>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800864a:	f000 fe27 	bl	800929c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	3b01      	subs	r3, #1
 8008652:	b2db      	uxtb	r3, r3
 8008654:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800865a:	2b00      	cmp	r3, #0
 800865c:	dce9      	bgt.n	8008632 <prvUnlockQueue+0x16>
 800865e:	e000      	b.n	8008662 <prvUnlockQueue+0x46>
					break;
 8008660:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	22ff      	movs	r2, #255	; 0xff
 8008666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800866a:	f001 fc8b 	bl	8009f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800866e:	f001 fc59 	bl	8009f24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008678:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800867a:	e011      	b.n	80086a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d012      	beq.n	80086aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3310      	adds	r3, #16
 8008688:	4618      	mov	r0, r3
 800868a:	f000 fd2b 	bl	80090e4 <xTaskRemoveFromEventList>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008694:	f000 fe02 	bl	800929c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	3b01      	subs	r3, #1
 800869c:	b2db      	uxtb	r3, r3
 800869e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	dce9      	bgt.n	800867c <prvUnlockQueue+0x60>
 80086a8:	e000      	b.n	80086ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	22ff      	movs	r2, #255	; 0xff
 80086b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80086b4:	f001 fc66 	bl	8009f84 <vPortExitCritical>
}
 80086b8:	bf00      	nop
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086c8:	f001 fc2c 	bl	8009f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d102      	bne.n	80086da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086d4:	2301      	movs	r3, #1
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	e001      	b.n	80086de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086da:	2300      	movs	r3, #0
 80086dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086de:	f001 fc51 	bl	8009f84 <vPortExitCritical>

	return xReturn;
 80086e2:	68fb      	ldr	r3, [r7, #12]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086f4:	f001 fc16 	bl	8009f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008700:	429a      	cmp	r2, r3
 8008702:	d102      	bne.n	800870a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008704:	2301      	movs	r3, #1
 8008706:	60fb      	str	r3, [r7, #12]
 8008708:	e001      	b.n	800870e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800870a:	2300      	movs	r3, #0
 800870c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800870e:	f001 fc39 	bl	8009f84 <vPortExitCritical>

	return xReturn;
 8008712:	68fb      	ldr	r3, [r7, #12]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008726:	2300      	movs	r3, #0
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	e014      	b.n	8008756 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800872c:	4a0f      	ldr	r2, [pc, #60]	; (800876c <vQueueAddToRegistry+0x50>)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10b      	bne.n	8008750 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008738:	490c      	ldr	r1, [pc, #48]	; (800876c <vQueueAddToRegistry+0x50>)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008742:	4a0a      	ldr	r2, [pc, #40]	; (800876c <vQueueAddToRegistry+0x50>)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	00db      	lsls	r3, r3, #3
 8008748:	4413      	add	r3, r2
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800874e:	e006      	b.n	800875e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	3301      	adds	r3, #1
 8008754:	60fb      	str	r3, [r7, #12]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b07      	cmp	r3, #7
 800875a:	d9e7      	bls.n	800872c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800875c:	bf00      	nop
 800875e:	bf00      	nop
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	200051dc 	.word	0x200051dc

08008770 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008780:	f001 fbd0 	bl	8009f24 <vPortEnterCritical>
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800878a:	b25b      	sxtb	r3, r3
 800878c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008790:	d103      	bne.n	800879a <vQueueWaitForMessageRestricted+0x2a>
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087a0:	b25b      	sxtb	r3, r3
 80087a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a6:	d103      	bne.n	80087b0 <vQueueWaitForMessageRestricted+0x40>
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087b0:	f001 fbe8 	bl	8009f84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d106      	bne.n	80087ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	3324      	adds	r3, #36	; 0x24
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	68b9      	ldr	r1, [r7, #8]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 fc61 	bl	800908c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80087ca:	6978      	ldr	r0, [r7, #20]
 80087cc:	f7ff ff26 	bl	800861c <prvUnlockQueue>
	}
 80087d0:	bf00      	nop
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b08e      	sub	sp, #56	; 0x38
 80087dc:	af04      	add	r7, sp, #16
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
 80087e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <xTaskCreateStatic+0x2a>
	__asm volatile
 80087ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	623b      	str	r3, [r7, #32]
}
 80087fe:	bf00      	nop
 8008800:	e7fe      	b.n	8008800 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10a      	bne.n	800881e <xTaskCreateStatic+0x46>
	__asm volatile
 8008808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	61fb      	str	r3, [r7, #28]
}
 800881a:	bf00      	nop
 800881c:	e7fe      	b.n	800881c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800881e:	23bc      	movs	r3, #188	; 0xbc
 8008820:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	2bbc      	cmp	r3, #188	; 0xbc
 8008826:	d00a      	beq.n	800883e <xTaskCreateStatic+0x66>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	61bb      	str	r3, [r7, #24]
}
 800883a:	bf00      	nop
 800883c:	e7fe      	b.n	800883c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800883e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008842:	2b00      	cmp	r3, #0
 8008844:	d01e      	beq.n	8008884 <xTaskCreateStatic+0xac>
 8008846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008848:	2b00      	cmp	r3, #0
 800884a:	d01b      	beq.n	8008884 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800884c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008854:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	2202      	movs	r2, #2
 800885a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800885e:	2300      	movs	r3, #0
 8008860:	9303      	str	r3, [sp, #12]
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	9302      	str	r3, [sp, #8]
 8008866:	f107 0314 	add.w	r3, r7, #20
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	68b9      	ldr	r1, [r7, #8]
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 f850 	bl	800891c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800887c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800887e:	f000 f8f3 	bl	8008a68 <prvAddNewTaskToReadyList>
 8008882:	e001      	b.n	8008888 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008884:	2300      	movs	r3, #0
 8008886:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008888:	697b      	ldr	r3, [r7, #20]
	}
 800888a:	4618      	mov	r0, r3
 800888c:	3728      	adds	r7, #40	; 0x28
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008892:	b580      	push	{r7, lr}
 8008894:	b08c      	sub	sp, #48	; 0x30
 8008896:	af04      	add	r7, sp, #16
 8008898:	60f8      	str	r0, [r7, #12]
 800889a:	60b9      	str	r1, [r7, #8]
 800889c:	603b      	str	r3, [r7, #0]
 800889e:	4613      	mov	r3, r2
 80088a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088a2:	88fb      	ldrh	r3, [r7, #6]
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4618      	mov	r0, r3
 80088a8:	f001 fc5e 	bl	800a168 <pvPortMalloc>
 80088ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00e      	beq.n	80088d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088b4:	20bc      	movs	r0, #188	; 0xbc
 80088b6:	f001 fc57 	bl	800a168 <pvPortMalloc>
 80088ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	631a      	str	r2, [r3, #48]	; 0x30
 80088c8:	e005      	b.n	80088d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80088ca:	6978      	ldr	r0, [r7, #20]
 80088cc:	f001 fd18 	bl	800a300 <vPortFree>
 80088d0:	e001      	b.n	80088d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088d2:	2300      	movs	r3, #0
 80088d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d017      	beq.n	800890c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088e4:	88fa      	ldrh	r2, [r7, #6]
 80088e6:	2300      	movs	r3, #0
 80088e8:	9303      	str	r3, [sp, #12]
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	9302      	str	r3, [sp, #8]
 80088ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	68b9      	ldr	r1, [r7, #8]
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f000 f80e 	bl	800891c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008900:	69f8      	ldr	r0, [r7, #28]
 8008902:	f000 f8b1 	bl	8008a68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008906:	2301      	movs	r3, #1
 8008908:	61bb      	str	r3, [r7, #24]
 800890a:	e002      	b.n	8008912 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800890c:	f04f 33ff 	mov.w	r3, #4294967295
 8008910:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008912:	69bb      	ldr	r3, [r7, #24]
	}
 8008914:	4618      	mov	r0, r3
 8008916:	3720      	adds	r7, #32
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b088      	sub	sp, #32
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
 8008928:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	461a      	mov	r2, r3
 8008934:	21a5      	movs	r1, #165	; 0xa5
 8008936:	f001 ff36 	bl	800a7a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800893a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008944:	3b01      	subs	r3, #1
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	f023 0307 	bic.w	r3, r3, #7
 8008952:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <prvInitialiseNewTask+0x58>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	617b      	str	r3, [r7, #20]
}
 8008970:	bf00      	nop
 8008972:	e7fe      	b.n	8008972 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d01f      	beq.n	80089ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800897a:	2300      	movs	r3, #0
 800897c:	61fb      	str	r3, [r7, #28]
 800897e:	e012      	b.n	80089a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	4413      	add	r3, r2
 8008986:	7819      	ldrb	r1, [r3, #0]
 8008988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	4413      	add	r3, r2
 800898e:	3334      	adds	r3, #52	; 0x34
 8008990:	460a      	mov	r2, r1
 8008992:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	4413      	add	r3, r2
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d006      	beq.n	80089ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	3301      	adds	r3, #1
 80089a4:	61fb      	str	r3, [r7, #28]
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	2b0f      	cmp	r3, #15
 80089aa:	d9e9      	bls.n	8008980 <prvInitialiseNewTask+0x64>
 80089ac:	e000      	b.n	80089b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80089ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089b8:	e003      	b.n	80089c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c4:	2b37      	cmp	r3, #55	; 0x37
 80089c6:	d901      	bls.n	80089cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089c8:	2337      	movs	r3, #55	; 0x37
 80089ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80089d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089da:	2200      	movs	r2, #0
 80089dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e0:	3304      	adds	r3, #4
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7ff f8f2 	bl	8007bcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80089e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ea:	3318      	adds	r3, #24
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7ff f8ed 	bl	8007bcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80089f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1a:	3354      	adds	r3, #84	; 0x54
 8008a1c:	2260      	movs	r2, #96	; 0x60
 8008a1e:	2100      	movs	r1, #0
 8008a20:	4618      	mov	r0, r3
 8008a22:	f001 fec0 	bl	800a7a6 <memset>
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	4a0c      	ldr	r2, [pc, #48]	; (8008a5c <prvInitialiseNewTask+0x140>)
 8008a2a:	659a      	str	r2, [r3, #88]	; 0x58
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2e:	4a0c      	ldr	r2, [pc, #48]	; (8008a60 <prvInitialiseNewTask+0x144>)
 8008a30:	65da      	str	r2, [r3, #92]	; 0x5c
 8008a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a34:	4a0b      	ldr	r2, [pc, #44]	; (8008a64 <prvInitialiseNewTask+0x148>)
 8008a36:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a38:	683a      	ldr	r2, [r7, #0]
 8008a3a:	68f9      	ldr	r1, [r7, #12]
 8008a3c:	69b8      	ldr	r0, [r7, #24]
 8008a3e:	f001 f941 	bl	8009cc4 <pxPortInitialiseStack>
 8008a42:	4602      	mov	r2, r0
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a54:	bf00      	nop
 8008a56:	3720      	adds	r7, #32
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	0800d91c 	.word	0x0800d91c
 8008a60:	0800d93c 	.word	0x0800d93c
 8008a64:	0800d8fc 	.word	0x0800d8fc

08008a68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a70:	f001 fa58 	bl	8009f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a74:	4b2d      	ldr	r3, [pc, #180]	; (8008b2c <prvAddNewTaskToReadyList+0xc4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	4a2c      	ldr	r2, [pc, #176]	; (8008b2c <prvAddNewTaskToReadyList+0xc4>)
 8008a7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a7e:	4b2c      	ldr	r3, [pc, #176]	; (8008b30 <prvAddNewTaskToReadyList+0xc8>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d109      	bne.n	8008a9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a86:	4a2a      	ldr	r2, [pc, #168]	; (8008b30 <prvAddNewTaskToReadyList+0xc8>)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a8c:	4b27      	ldr	r3, [pc, #156]	; (8008b2c <prvAddNewTaskToReadyList+0xc4>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d110      	bne.n	8008ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a94:	f000 fc26 	bl	80092e4 <prvInitialiseTaskLists>
 8008a98:	e00d      	b.n	8008ab6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a9a:	4b26      	ldr	r3, [pc, #152]	; (8008b34 <prvAddNewTaskToReadyList+0xcc>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d109      	bne.n	8008ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008aa2:	4b23      	ldr	r3, [pc, #140]	; (8008b30 <prvAddNewTaskToReadyList+0xc8>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d802      	bhi.n	8008ab6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ab0:	4a1f      	ldr	r2, [pc, #124]	; (8008b30 <prvAddNewTaskToReadyList+0xc8>)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ab6:	4b20      	ldr	r3, [pc, #128]	; (8008b38 <prvAddNewTaskToReadyList+0xd0>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3301      	adds	r3, #1
 8008abc:	4a1e      	ldr	r2, [pc, #120]	; (8008b38 <prvAddNewTaskToReadyList+0xd0>)
 8008abe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ac0:	4b1d      	ldr	r3, [pc, #116]	; (8008b38 <prvAddNewTaskToReadyList+0xd0>)
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008acc:	4b1b      	ldr	r3, [pc, #108]	; (8008b3c <prvAddNewTaskToReadyList+0xd4>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d903      	bls.n	8008adc <prvAddNewTaskToReadyList+0x74>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	4a18      	ldr	r2, [pc, #96]	; (8008b3c <prvAddNewTaskToReadyList+0xd4>)
 8008ada:	6013      	str	r3, [r2, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4a15      	ldr	r2, [pc, #84]	; (8008b40 <prvAddNewTaskToReadyList+0xd8>)
 8008aea:	441a      	add	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3304      	adds	r3, #4
 8008af0:	4619      	mov	r1, r3
 8008af2:	4610      	mov	r0, r2
 8008af4:	f7ff f877 	bl	8007be6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008af8:	f001 fa44 	bl	8009f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008afc:	4b0d      	ldr	r3, [pc, #52]	; (8008b34 <prvAddNewTaskToReadyList+0xcc>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00e      	beq.n	8008b22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b04:	4b0a      	ldr	r3, [pc, #40]	; (8008b30 <prvAddNewTaskToReadyList+0xc8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d207      	bcs.n	8008b22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b12:	4b0c      	ldr	r3, [pc, #48]	; (8008b44 <prvAddNewTaskToReadyList+0xdc>)
 8008b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b18:	601a      	str	r2, [r3, #0]
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b22:	bf00      	nop
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20000edc 	.word	0x20000edc
 8008b30:	20000a08 	.word	0x20000a08
 8008b34:	20000ee8 	.word	0x20000ee8
 8008b38:	20000ef8 	.word	0x20000ef8
 8008b3c:	20000ee4 	.word	0x20000ee4
 8008b40:	20000a0c 	.word	0x20000a0c
 8008b44:	e000ed04 	.word	0xe000ed04

08008b48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b50:	2300      	movs	r3, #0
 8008b52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d017      	beq.n	8008b8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b5a:	4b13      	ldr	r3, [pc, #76]	; (8008ba8 <vTaskDelay+0x60>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00a      	beq.n	8008b78 <vTaskDelay+0x30>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	60bb      	str	r3, [r7, #8]
}
 8008b74:	bf00      	nop
 8008b76:	e7fe      	b.n	8008b76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b78:	f000 f88a 	bl	8008c90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fcfe 	bl	8009580 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b84:	f000 f892 	bl	8008cac <xTaskResumeAll>
 8008b88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d107      	bne.n	8008ba0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008b90:	4b06      	ldr	r3, [pc, #24]	; (8008bac <vTaskDelay+0x64>)
 8008b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ba0:	bf00      	nop
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	20000f04 	.word	0x20000f04
 8008bac:	e000ed04 	.word	0xe000ed04

08008bb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08a      	sub	sp, #40	; 0x28
 8008bb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008bbe:	463a      	mov	r2, r7
 8008bc0:	1d39      	adds	r1, r7, #4
 8008bc2:	f107 0308 	add.w	r3, r7, #8
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fe ffac 	bl	8007b24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	9202      	str	r2, [sp, #8]
 8008bd4:	9301      	str	r3, [sp, #4]
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	9300      	str	r3, [sp, #0]
 8008bda:	2300      	movs	r3, #0
 8008bdc:	460a      	mov	r2, r1
 8008bde:	4924      	ldr	r1, [pc, #144]	; (8008c70 <vTaskStartScheduler+0xc0>)
 8008be0:	4824      	ldr	r0, [pc, #144]	; (8008c74 <vTaskStartScheduler+0xc4>)
 8008be2:	f7ff fdf9 	bl	80087d8 <xTaskCreateStatic>
 8008be6:	4603      	mov	r3, r0
 8008be8:	4a23      	ldr	r2, [pc, #140]	; (8008c78 <vTaskStartScheduler+0xc8>)
 8008bea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008bec:	4b22      	ldr	r3, [pc, #136]	; (8008c78 <vTaskStartScheduler+0xc8>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	617b      	str	r3, [r7, #20]
 8008bf8:	e001      	b.n	8008bfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d102      	bne.n	8008c0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c04:	f000 fd10 	bl	8009628 <xTimerCreateTimerTask>
 8008c08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d11b      	bne.n	8008c48 <vTaskStartScheduler+0x98>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	613b      	str	r3, [r7, #16]
}
 8008c22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c24:	4b15      	ldr	r3, [pc, #84]	; (8008c7c <vTaskStartScheduler+0xcc>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3354      	adds	r3, #84	; 0x54
 8008c2a:	4a15      	ldr	r2, [pc, #84]	; (8008c80 <vTaskStartScheduler+0xd0>)
 8008c2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c2e:	4b15      	ldr	r3, [pc, #84]	; (8008c84 <vTaskStartScheduler+0xd4>)
 8008c30:	f04f 32ff 	mov.w	r2, #4294967295
 8008c34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c36:	4b14      	ldr	r3, [pc, #80]	; (8008c88 <vTaskStartScheduler+0xd8>)
 8008c38:	2201      	movs	r2, #1
 8008c3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c3c:	4b13      	ldr	r3, [pc, #76]	; (8008c8c <vTaskStartScheduler+0xdc>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c42:	f001 f8cd 	bl	8009de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c46:	e00e      	b.n	8008c66 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4e:	d10a      	bne.n	8008c66 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	60fb      	str	r3, [r7, #12]
}
 8008c62:	bf00      	nop
 8008c64:	e7fe      	b.n	8008c64 <vTaskStartScheduler+0xb4>
}
 8008c66:	bf00      	nop
 8008c68:	3718      	adds	r7, #24
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	0800d808 	.word	0x0800d808
 8008c74:	080092b5 	.word	0x080092b5
 8008c78:	20000f00 	.word	0x20000f00
 8008c7c:	20000a08 	.word	0x20000a08
 8008c80:	2000005c 	.word	0x2000005c
 8008c84:	20000efc 	.word	0x20000efc
 8008c88:	20000ee8 	.word	0x20000ee8
 8008c8c:	20000ee0 	.word	0x20000ee0

08008c90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c90:	b480      	push	{r7}
 8008c92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c94:	4b04      	ldr	r3, [pc, #16]	; (8008ca8 <vTaskSuspendAll+0x18>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	4a03      	ldr	r2, [pc, #12]	; (8008ca8 <vTaskSuspendAll+0x18>)
 8008c9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c9e:	bf00      	nop
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr
 8008ca8:	20000f04 	.word	0x20000f04

08008cac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008cba:	4b42      	ldr	r3, [pc, #264]	; (8008dc4 <xTaskResumeAll+0x118>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10a      	bne.n	8008cd8 <xTaskResumeAll+0x2c>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	603b      	str	r3, [r7, #0]
}
 8008cd4:	bf00      	nop
 8008cd6:	e7fe      	b.n	8008cd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008cd8:	f001 f924 	bl	8009f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008cdc:	4b39      	ldr	r3, [pc, #228]	; (8008dc4 <xTaskResumeAll+0x118>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	4a38      	ldr	r2, [pc, #224]	; (8008dc4 <xTaskResumeAll+0x118>)
 8008ce4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ce6:	4b37      	ldr	r3, [pc, #220]	; (8008dc4 <xTaskResumeAll+0x118>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d162      	bne.n	8008db4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008cee:	4b36      	ldr	r3, [pc, #216]	; (8008dc8 <xTaskResumeAll+0x11c>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d05e      	beq.n	8008db4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cf6:	e02f      	b.n	8008d58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cf8:	4b34      	ldr	r3, [pc, #208]	; (8008dcc <xTaskResumeAll+0x120>)
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	3318      	adds	r3, #24
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7fe ffcb 	bl	8007ca0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	3304      	adds	r3, #4
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fe ffc6 	bl	8007ca0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d18:	4b2d      	ldr	r3, [pc, #180]	; (8008dd0 <xTaskResumeAll+0x124>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d903      	bls.n	8008d28 <xTaskResumeAll+0x7c>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d24:	4a2a      	ldr	r2, [pc, #168]	; (8008dd0 <xTaskResumeAll+0x124>)
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4a27      	ldr	r2, [pc, #156]	; (8008dd4 <xTaskResumeAll+0x128>)
 8008d36:	441a      	add	r2, r3
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4610      	mov	r0, r2
 8008d40:	f7fe ff51 	bl	8007be6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d48:	4b23      	ldr	r3, [pc, #140]	; (8008dd8 <xTaskResumeAll+0x12c>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d302      	bcc.n	8008d58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008d52:	4b22      	ldr	r3, [pc, #136]	; (8008ddc <xTaskResumeAll+0x130>)
 8008d54:	2201      	movs	r2, #1
 8008d56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d58:	4b1c      	ldr	r3, [pc, #112]	; (8008dcc <xTaskResumeAll+0x120>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1cb      	bne.n	8008cf8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d66:	f000 fb5f 	bl	8009428 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d6a:	4b1d      	ldr	r3, [pc, #116]	; (8008de0 <xTaskResumeAll+0x134>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d010      	beq.n	8008d98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d76:	f000 f847 	bl	8008e08 <xTaskIncrementTick>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008d80:	4b16      	ldr	r3, [pc, #88]	; (8008ddc <xTaskResumeAll+0x130>)
 8008d82:	2201      	movs	r2, #1
 8008d84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1f1      	bne.n	8008d76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008d92:	4b13      	ldr	r3, [pc, #76]	; (8008de0 <xTaskResumeAll+0x134>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d98:	4b10      	ldr	r3, [pc, #64]	; (8008ddc <xTaskResumeAll+0x130>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d009      	beq.n	8008db4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008da0:	2301      	movs	r3, #1
 8008da2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008da4:	4b0f      	ldr	r3, [pc, #60]	; (8008de4 <xTaskResumeAll+0x138>)
 8008da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008db4:	f001 f8e6 	bl	8009f84 <vPortExitCritical>

	return xAlreadyYielded;
 8008db8:	68bb      	ldr	r3, [r7, #8]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000f04 	.word	0x20000f04
 8008dc8:	20000edc 	.word	0x20000edc
 8008dcc:	20000e9c 	.word	0x20000e9c
 8008dd0:	20000ee4 	.word	0x20000ee4
 8008dd4:	20000a0c 	.word	0x20000a0c
 8008dd8:	20000a08 	.word	0x20000a08
 8008ddc:	20000ef0 	.word	0x20000ef0
 8008de0:	20000eec 	.word	0x20000eec
 8008de4:	e000ed04 	.word	0xe000ed04

08008de8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008dee:	4b05      	ldr	r3, [pc, #20]	; (8008e04 <xTaskGetTickCount+0x1c>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008df4:	687b      	ldr	r3, [r7, #4]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	20000ee0 	.word	0x20000ee0

08008e08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e12:	4b4f      	ldr	r3, [pc, #316]	; (8008f50 <xTaskIncrementTick+0x148>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f040 808f 	bne.w	8008f3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e1c:	4b4d      	ldr	r3, [pc, #308]	; (8008f54 <xTaskIncrementTick+0x14c>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3301      	adds	r3, #1
 8008e22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e24:	4a4b      	ldr	r2, [pc, #300]	; (8008f54 <xTaskIncrementTick+0x14c>)
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d120      	bne.n	8008e72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e30:	4b49      	ldr	r3, [pc, #292]	; (8008f58 <xTaskIncrementTick+0x150>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00a      	beq.n	8008e50 <xTaskIncrementTick+0x48>
	__asm volatile
 8008e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3e:	f383 8811 	msr	BASEPRI, r3
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	603b      	str	r3, [r7, #0]
}
 8008e4c:	bf00      	nop
 8008e4e:	e7fe      	b.n	8008e4e <xTaskIncrementTick+0x46>
 8008e50:	4b41      	ldr	r3, [pc, #260]	; (8008f58 <xTaskIncrementTick+0x150>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	60fb      	str	r3, [r7, #12]
 8008e56:	4b41      	ldr	r3, [pc, #260]	; (8008f5c <xTaskIncrementTick+0x154>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a3f      	ldr	r2, [pc, #252]	; (8008f58 <xTaskIncrementTick+0x150>)
 8008e5c:	6013      	str	r3, [r2, #0]
 8008e5e:	4a3f      	ldr	r2, [pc, #252]	; (8008f5c <xTaskIncrementTick+0x154>)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	4b3e      	ldr	r3, [pc, #248]	; (8008f60 <xTaskIncrementTick+0x158>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	4a3d      	ldr	r2, [pc, #244]	; (8008f60 <xTaskIncrementTick+0x158>)
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	f000 fadb 	bl	8009428 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e72:	4b3c      	ldr	r3, [pc, #240]	; (8008f64 <xTaskIncrementTick+0x15c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d349      	bcc.n	8008f10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e7c:	4b36      	ldr	r3, [pc, #216]	; (8008f58 <xTaskIncrementTick+0x150>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d104      	bne.n	8008e90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e86:	4b37      	ldr	r3, [pc, #220]	; (8008f64 <xTaskIncrementTick+0x15c>)
 8008e88:	f04f 32ff 	mov.w	r2, #4294967295
 8008e8c:	601a      	str	r2, [r3, #0]
					break;
 8008e8e:	e03f      	b.n	8008f10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e90:	4b31      	ldr	r3, [pc, #196]	; (8008f58 <xTaskIncrementTick+0x150>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d203      	bcs.n	8008eb0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ea8:	4a2e      	ldr	r2, [pc, #184]	; (8008f64 <xTaskIncrementTick+0x15c>)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008eae:	e02f      	b.n	8008f10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fe fef3 	bl	8007ca0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d004      	beq.n	8008ecc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	3318      	adds	r3, #24
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fe feea 	bl	8007ca0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed0:	4b25      	ldr	r3, [pc, #148]	; (8008f68 <xTaskIncrementTick+0x160>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d903      	bls.n	8008ee0 <xTaskIncrementTick+0xd8>
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008edc:	4a22      	ldr	r2, [pc, #136]	; (8008f68 <xTaskIncrementTick+0x160>)
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4a1f      	ldr	r2, [pc, #124]	; (8008f6c <xTaskIncrementTick+0x164>)
 8008eee:	441a      	add	r2, r3
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f7fe fe75 	bl	8007be6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f00:	4b1b      	ldr	r3, [pc, #108]	; (8008f70 <xTaskIncrementTick+0x168>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d3b8      	bcc.n	8008e7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f0e:	e7b5      	b.n	8008e7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f10:	4b17      	ldr	r3, [pc, #92]	; (8008f70 <xTaskIncrementTick+0x168>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f16:	4915      	ldr	r1, [pc, #84]	; (8008f6c <xTaskIncrementTick+0x164>)
 8008f18:	4613      	mov	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4413      	add	r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	440b      	add	r3, r1
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d901      	bls.n	8008f2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f2c:	4b11      	ldr	r3, [pc, #68]	; (8008f74 <xTaskIncrementTick+0x16c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d007      	beq.n	8008f44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008f34:	2301      	movs	r3, #1
 8008f36:	617b      	str	r3, [r7, #20]
 8008f38:	e004      	b.n	8008f44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f3a:	4b0f      	ldr	r3, [pc, #60]	; (8008f78 <xTaskIncrementTick+0x170>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	4a0d      	ldr	r2, [pc, #52]	; (8008f78 <xTaskIncrementTick+0x170>)
 8008f42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f44:	697b      	ldr	r3, [r7, #20]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20000f04 	.word	0x20000f04
 8008f54:	20000ee0 	.word	0x20000ee0
 8008f58:	20000e94 	.word	0x20000e94
 8008f5c:	20000e98 	.word	0x20000e98
 8008f60:	20000ef4 	.word	0x20000ef4
 8008f64:	20000efc 	.word	0x20000efc
 8008f68:	20000ee4 	.word	0x20000ee4
 8008f6c:	20000a0c 	.word	0x20000a0c
 8008f70:	20000a08 	.word	0x20000a08
 8008f74:	20000ef0 	.word	0x20000ef0
 8008f78:	20000eec 	.word	0x20000eec

08008f7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f82:	4b2a      	ldr	r3, [pc, #168]	; (800902c <vTaskSwitchContext+0xb0>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d003      	beq.n	8008f92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f8a:	4b29      	ldr	r3, [pc, #164]	; (8009030 <vTaskSwitchContext+0xb4>)
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f90:	e046      	b.n	8009020 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008f92:	4b27      	ldr	r3, [pc, #156]	; (8009030 <vTaskSwitchContext+0xb4>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f98:	4b26      	ldr	r3, [pc, #152]	; (8009034 <vTaskSwitchContext+0xb8>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	60fb      	str	r3, [r7, #12]
 8008f9e:	e010      	b.n	8008fc2 <vTaskSwitchContext+0x46>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10a      	bne.n	8008fbc <vTaskSwitchContext+0x40>
	__asm volatile
 8008fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	607b      	str	r3, [r7, #4]
}
 8008fb8:	bf00      	nop
 8008fba:	e7fe      	b.n	8008fba <vTaskSwitchContext+0x3e>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	60fb      	str	r3, [r7, #12]
 8008fc2:	491d      	ldr	r1, [pc, #116]	; (8009038 <vTaskSwitchContext+0xbc>)
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	440b      	add	r3, r1
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0e4      	beq.n	8008fa0 <vTaskSwitchContext+0x24>
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4413      	add	r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4a15      	ldr	r2, [pc, #84]	; (8009038 <vTaskSwitchContext+0xbc>)
 8008fe2:	4413      	add	r3, r2
 8008fe4:	60bb      	str	r3, [r7, #8]
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	605a      	str	r2, [r3, #4]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	3308      	adds	r3, #8
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d104      	bne.n	8009006 <vTaskSwitchContext+0x8a>
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	605a      	str	r2, [r3, #4]
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	4a0b      	ldr	r2, [pc, #44]	; (800903c <vTaskSwitchContext+0xc0>)
 800900e:	6013      	str	r3, [r2, #0]
 8009010:	4a08      	ldr	r2, [pc, #32]	; (8009034 <vTaskSwitchContext+0xb8>)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009016:	4b09      	ldr	r3, [pc, #36]	; (800903c <vTaskSwitchContext+0xc0>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3354      	adds	r3, #84	; 0x54
 800901c:	4a08      	ldr	r2, [pc, #32]	; (8009040 <vTaskSwitchContext+0xc4>)
 800901e:	6013      	str	r3, [r2, #0]
}
 8009020:	bf00      	nop
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	20000f04 	.word	0x20000f04
 8009030:	20000ef0 	.word	0x20000ef0
 8009034:	20000ee4 	.word	0x20000ee4
 8009038:	20000a0c 	.word	0x20000a0c
 800903c:	20000a08 	.word	0x20000a08
 8009040:	2000005c 	.word	0x2000005c

08009044 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	60fb      	str	r3, [r7, #12]
}
 8009066:	bf00      	nop
 8009068:	e7fe      	b.n	8009068 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800906a:	4b07      	ldr	r3, [pc, #28]	; (8009088 <vTaskPlaceOnEventList+0x44>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3318      	adds	r3, #24
 8009070:	4619      	mov	r1, r3
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7fe fddb 	bl	8007c2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009078:	2101      	movs	r1, #1
 800907a:	6838      	ldr	r0, [r7, #0]
 800907c:	f000 fa80 	bl	8009580 <prvAddCurrentTaskToDelayedList>
}
 8009080:	bf00      	nop
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	20000a08 	.word	0x20000a08

0800908c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800908c:	b580      	push	{r7, lr}
 800908e:	b086      	sub	sp, #24
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10a      	bne.n	80090b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	617b      	str	r3, [r7, #20]
}
 80090b0:	bf00      	nop
 80090b2:	e7fe      	b.n	80090b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090b4:	4b0a      	ldr	r3, [pc, #40]	; (80090e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3318      	adds	r3, #24
 80090ba:	4619      	mov	r1, r3
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f7fe fd92 	bl	8007be6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80090c8:	f04f 33ff 	mov.w	r3, #4294967295
 80090cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80090ce:	6879      	ldr	r1, [r7, #4]
 80090d0:	68b8      	ldr	r0, [r7, #8]
 80090d2:	f000 fa55 	bl	8009580 <prvAddCurrentTaskToDelayedList>
	}
 80090d6:	bf00      	nop
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	20000a08 	.word	0x20000a08

080090e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10a      	bne.n	8009110 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	60fb      	str	r3, [r7, #12]
}
 800910c:	bf00      	nop
 800910e:	e7fe      	b.n	800910e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	3318      	adds	r3, #24
 8009114:	4618      	mov	r0, r3
 8009116:	f7fe fdc3 	bl	8007ca0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800911a:	4b1e      	ldr	r3, [pc, #120]	; (8009194 <xTaskRemoveFromEventList+0xb0>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d11d      	bne.n	800915e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	3304      	adds	r3, #4
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe fdba 	bl	8007ca0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009130:	4b19      	ldr	r3, [pc, #100]	; (8009198 <xTaskRemoveFromEventList+0xb4>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	429a      	cmp	r2, r3
 8009136:	d903      	bls.n	8009140 <xTaskRemoveFromEventList+0x5c>
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913c:	4a16      	ldr	r2, [pc, #88]	; (8009198 <xTaskRemoveFromEventList+0xb4>)
 800913e:	6013      	str	r3, [r2, #0]
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009144:	4613      	mov	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4413      	add	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4a13      	ldr	r2, [pc, #76]	; (800919c <xTaskRemoveFromEventList+0xb8>)
 800914e:	441a      	add	r2, r3
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	3304      	adds	r3, #4
 8009154:	4619      	mov	r1, r3
 8009156:	4610      	mov	r0, r2
 8009158:	f7fe fd45 	bl	8007be6 <vListInsertEnd>
 800915c:	e005      	b.n	800916a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	3318      	adds	r3, #24
 8009162:	4619      	mov	r1, r3
 8009164:	480e      	ldr	r0, [pc, #56]	; (80091a0 <xTaskRemoveFromEventList+0xbc>)
 8009166:	f7fe fd3e 	bl	8007be6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916e:	4b0d      	ldr	r3, [pc, #52]	; (80091a4 <xTaskRemoveFromEventList+0xc0>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009174:	429a      	cmp	r2, r3
 8009176:	d905      	bls.n	8009184 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009178:	2301      	movs	r3, #1
 800917a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800917c:	4b0a      	ldr	r3, [pc, #40]	; (80091a8 <xTaskRemoveFromEventList+0xc4>)
 800917e:	2201      	movs	r2, #1
 8009180:	601a      	str	r2, [r3, #0]
 8009182:	e001      	b.n	8009188 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009184:	2300      	movs	r3, #0
 8009186:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009188:	697b      	ldr	r3, [r7, #20]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3718      	adds	r7, #24
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	20000f04 	.word	0x20000f04
 8009198:	20000ee4 	.word	0x20000ee4
 800919c:	20000a0c 	.word	0x20000a0c
 80091a0:	20000e9c 	.word	0x20000e9c
 80091a4:	20000a08 	.word	0x20000a08
 80091a8:	20000ef0 	.word	0x20000ef0

080091ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80091b4:	4b06      	ldr	r3, [pc, #24]	; (80091d0 <vTaskInternalSetTimeOutState+0x24>)
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80091bc:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <vTaskInternalSetTimeOutState+0x28>)
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	605a      	str	r2, [r3, #4]
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	20000ef4 	.word	0x20000ef4
 80091d4:	20000ee0 	.word	0x20000ee0

080091d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b088      	sub	sp, #32
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10a      	bne.n	80091fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	613b      	str	r3, [r7, #16]
}
 80091fa:	bf00      	nop
 80091fc:	e7fe      	b.n	80091fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10a      	bne.n	800921a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	60fb      	str	r3, [r7, #12]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800921a:	f000 fe83 	bl	8009f24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800921e:	4b1d      	ldr	r3, [pc, #116]	; (8009294 <xTaskCheckForTimeOut+0xbc>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009236:	d102      	bne.n	800923e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009238:	2300      	movs	r3, #0
 800923a:	61fb      	str	r3, [r7, #28]
 800923c:	e023      	b.n	8009286 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	4b15      	ldr	r3, [pc, #84]	; (8009298 <xTaskCheckForTimeOut+0xc0>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	429a      	cmp	r2, r3
 8009248:	d007      	beq.n	800925a <xTaskCheckForTimeOut+0x82>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	429a      	cmp	r2, r3
 8009252:	d302      	bcc.n	800925a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009254:	2301      	movs	r3, #1
 8009256:	61fb      	str	r3, [r7, #28]
 8009258:	e015      	b.n	8009286 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	429a      	cmp	r2, r3
 8009262:	d20b      	bcs.n	800927c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	1ad2      	subs	r2, r2, r3
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7ff ff9b 	bl	80091ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009276:	2300      	movs	r3, #0
 8009278:	61fb      	str	r3, [r7, #28]
 800927a:	e004      	b.n	8009286 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	2200      	movs	r2, #0
 8009280:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009282:	2301      	movs	r3, #1
 8009284:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009286:	f000 fe7d 	bl	8009f84 <vPortExitCritical>

	return xReturn;
 800928a:	69fb      	ldr	r3, [r7, #28]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3720      	adds	r7, #32
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	20000ee0 	.word	0x20000ee0
 8009298:	20000ef4 	.word	0x20000ef4

0800929c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800929c:	b480      	push	{r7}
 800929e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80092a0:	4b03      	ldr	r3, [pc, #12]	; (80092b0 <vTaskMissedYield+0x14>)
 80092a2:	2201      	movs	r2, #1
 80092a4:	601a      	str	r2, [r3, #0]
}
 80092a6:	bf00      	nop
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	20000ef0 	.word	0x20000ef0

080092b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80092bc:	f000 f852 	bl	8009364 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092c0:	4b06      	ldr	r3, [pc, #24]	; (80092dc <prvIdleTask+0x28>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d9f9      	bls.n	80092bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80092c8:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <prvIdleTask+0x2c>)
 80092ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ce:	601a      	str	r2, [r3, #0]
 80092d0:	f3bf 8f4f 	dsb	sy
 80092d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80092d8:	e7f0      	b.n	80092bc <prvIdleTask+0x8>
 80092da:	bf00      	nop
 80092dc:	20000a0c 	.word	0x20000a0c
 80092e0:	e000ed04 	.word	0xe000ed04

080092e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092ea:	2300      	movs	r3, #0
 80092ec:	607b      	str	r3, [r7, #4]
 80092ee:	e00c      	b.n	800930a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	4613      	mov	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4a12      	ldr	r2, [pc, #72]	; (8009344 <prvInitialiseTaskLists+0x60>)
 80092fc:	4413      	add	r3, r2
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fe fc44 	bl	8007b8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	3301      	adds	r3, #1
 8009308:	607b      	str	r3, [r7, #4]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b37      	cmp	r3, #55	; 0x37
 800930e:	d9ef      	bls.n	80092f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009310:	480d      	ldr	r0, [pc, #52]	; (8009348 <prvInitialiseTaskLists+0x64>)
 8009312:	f7fe fc3b 	bl	8007b8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009316:	480d      	ldr	r0, [pc, #52]	; (800934c <prvInitialiseTaskLists+0x68>)
 8009318:	f7fe fc38 	bl	8007b8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800931c:	480c      	ldr	r0, [pc, #48]	; (8009350 <prvInitialiseTaskLists+0x6c>)
 800931e:	f7fe fc35 	bl	8007b8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009322:	480c      	ldr	r0, [pc, #48]	; (8009354 <prvInitialiseTaskLists+0x70>)
 8009324:	f7fe fc32 	bl	8007b8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009328:	480b      	ldr	r0, [pc, #44]	; (8009358 <prvInitialiseTaskLists+0x74>)
 800932a:	f7fe fc2f 	bl	8007b8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800932e:	4b0b      	ldr	r3, [pc, #44]	; (800935c <prvInitialiseTaskLists+0x78>)
 8009330:	4a05      	ldr	r2, [pc, #20]	; (8009348 <prvInitialiseTaskLists+0x64>)
 8009332:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009334:	4b0a      	ldr	r3, [pc, #40]	; (8009360 <prvInitialiseTaskLists+0x7c>)
 8009336:	4a05      	ldr	r2, [pc, #20]	; (800934c <prvInitialiseTaskLists+0x68>)
 8009338:	601a      	str	r2, [r3, #0]
}
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	20000a0c 	.word	0x20000a0c
 8009348:	20000e6c 	.word	0x20000e6c
 800934c:	20000e80 	.word	0x20000e80
 8009350:	20000e9c 	.word	0x20000e9c
 8009354:	20000eb0 	.word	0x20000eb0
 8009358:	20000ec8 	.word	0x20000ec8
 800935c:	20000e94 	.word	0x20000e94
 8009360:	20000e98 	.word	0x20000e98

08009364 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800936a:	e019      	b.n	80093a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800936c:	f000 fdda 	bl	8009f24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009370:	4b10      	ldr	r3, [pc, #64]	; (80093b4 <prvCheckTasksWaitingTermination+0x50>)
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3304      	adds	r3, #4
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe fc8f 	bl	8007ca0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009382:	4b0d      	ldr	r3, [pc, #52]	; (80093b8 <prvCheckTasksWaitingTermination+0x54>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3b01      	subs	r3, #1
 8009388:	4a0b      	ldr	r2, [pc, #44]	; (80093b8 <prvCheckTasksWaitingTermination+0x54>)
 800938a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800938c:	4b0b      	ldr	r3, [pc, #44]	; (80093bc <prvCheckTasksWaitingTermination+0x58>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3b01      	subs	r3, #1
 8009392:	4a0a      	ldr	r2, [pc, #40]	; (80093bc <prvCheckTasksWaitingTermination+0x58>)
 8009394:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009396:	f000 fdf5 	bl	8009f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f810 	bl	80093c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093a0:	4b06      	ldr	r3, [pc, #24]	; (80093bc <prvCheckTasksWaitingTermination+0x58>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e1      	bne.n	800936c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093a8:	bf00      	nop
 80093aa:	bf00      	nop
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20000eb0 	.word	0x20000eb0
 80093b8:	20000edc 	.word	0x20000edc
 80093bc:	20000ec4 	.word	0x20000ec4

080093c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3354      	adds	r3, #84	; 0x54
 80093cc:	4618      	mov	r0, r3
 80093ce:	f001 ff53 	bl	800b278 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d108      	bne.n	80093ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 ff8d 	bl	800a300 <vPortFree>
				vPortFree( pxTCB );
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 ff8a 	bl	800a300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093ec:	e018      	b.n	8009420 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d103      	bne.n	8009400 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 ff81 	bl	800a300 <vPortFree>
	}
 80093fe:	e00f      	b.n	8009420 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009406:	2b02      	cmp	r3, #2
 8009408:	d00a      	beq.n	8009420 <prvDeleteTCB+0x60>
	__asm volatile
 800940a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	60fb      	str	r3, [r7, #12]
}
 800941c:	bf00      	nop
 800941e:	e7fe      	b.n	800941e <prvDeleteTCB+0x5e>
	}
 8009420:	bf00      	nop
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800942e:	4b0c      	ldr	r3, [pc, #48]	; (8009460 <prvResetNextTaskUnblockTime+0x38>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d104      	bne.n	8009442 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009438:	4b0a      	ldr	r3, [pc, #40]	; (8009464 <prvResetNextTaskUnblockTime+0x3c>)
 800943a:	f04f 32ff 	mov.w	r2, #4294967295
 800943e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009440:	e008      	b.n	8009454 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009442:	4b07      	ldr	r3, [pc, #28]	; (8009460 <prvResetNextTaskUnblockTime+0x38>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	4a04      	ldr	r2, [pc, #16]	; (8009464 <prvResetNextTaskUnblockTime+0x3c>)
 8009452:	6013      	str	r3, [r2, #0]
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	20000e94 	.word	0x20000e94
 8009464:	20000efc 	.word	0x20000efc

08009468 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800946e:	4b0b      	ldr	r3, [pc, #44]	; (800949c <xTaskGetSchedulerState+0x34>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d102      	bne.n	800947c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009476:	2301      	movs	r3, #1
 8009478:	607b      	str	r3, [r7, #4]
 800947a:	e008      	b.n	800948e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800947c:	4b08      	ldr	r3, [pc, #32]	; (80094a0 <xTaskGetSchedulerState+0x38>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d102      	bne.n	800948a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009484:	2302      	movs	r3, #2
 8009486:	607b      	str	r3, [r7, #4]
 8009488:	e001      	b.n	800948e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800948a:	2300      	movs	r3, #0
 800948c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800948e:	687b      	ldr	r3, [r7, #4]
	}
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	20000ee8 	.word	0x20000ee8
 80094a0:	20000f04 	.word	0x20000f04

080094a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b086      	sub	sp, #24
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80094b0:	2300      	movs	r3, #0
 80094b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d056      	beq.n	8009568 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80094ba:	4b2e      	ldr	r3, [pc, #184]	; (8009574 <xTaskPriorityDisinherit+0xd0>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d00a      	beq.n	80094da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80094c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	60fb      	str	r3, [r7, #12]
}
 80094d6:	bf00      	nop
 80094d8:	e7fe      	b.n	80094d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10a      	bne.n	80094f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80094e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e6:	f383 8811 	msr	BASEPRI, r3
 80094ea:	f3bf 8f6f 	isb	sy
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	60bb      	str	r3, [r7, #8]
}
 80094f4:	bf00      	nop
 80094f6:	e7fe      	b.n	80094f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094fc:	1e5a      	subs	r2, r3, #1
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800950a:	429a      	cmp	r2, r3
 800950c:	d02c      	beq.n	8009568 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009512:	2b00      	cmp	r3, #0
 8009514:	d128      	bne.n	8009568 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	3304      	adds	r3, #4
 800951a:	4618      	mov	r0, r3
 800951c:	f7fe fbc0 	bl	8007ca0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009538:	4b0f      	ldr	r3, [pc, #60]	; (8009578 <xTaskPriorityDisinherit+0xd4>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	429a      	cmp	r2, r3
 800953e:	d903      	bls.n	8009548 <xTaskPriorityDisinherit+0xa4>
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009544:	4a0c      	ldr	r2, [pc, #48]	; (8009578 <xTaskPriorityDisinherit+0xd4>)
 8009546:	6013      	str	r3, [r2, #0]
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800954c:	4613      	mov	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4a09      	ldr	r2, [pc, #36]	; (800957c <xTaskPriorityDisinherit+0xd8>)
 8009556:	441a      	add	r2, r3
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	3304      	adds	r3, #4
 800955c:	4619      	mov	r1, r3
 800955e:	4610      	mov	r0, r2
 8009560:	f7fe fb41 	bl	8007be6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009564:	2301      	movs	r3, #1
 8009566:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009568:	697b      	ldr	r3, [r7, #20]
	}
 800956a:	4618      	mov	r0, r3
 800956c:	3718      	adds	r7, #24
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	20000a08 	.word	0x20000a08
 8009578:	20000ee4 	.word	0x20000ee4
 800957c:	20000a0c 	.word	0x20000a0c

08009580 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800958a:	4b21      	ldr	r3, [pc, #132]	; (8009610 <prvAddCurrentTaskToDelayedList+0x90>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009590:	4b20      	ldr	r3, [pc, #128]	; (8009614 <prvAddCurrentTaskToDelayedList+0x94>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3304      	adds	r3, #4
 8009596:	4618      	mov	r0, r3
 8009598:	f7fe fb82 	bl	8007ca0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a2:	d10a      	bne.n	80095ba <prvAddCurrentTaskToDelayedList+0x3a>
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d007      	beq.n	80095ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095aa:	4b1a      	ldr	r3, [pc, #104]	; (8009614 <prvAddCurrentTaskToDelayedList+0x94>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	3304      	adds	r3, #4
 80095b0:	4619      	mov	r1, r3
 80095b2:	4819      	ldr	r0, [pc, #100]	; (8009618 <prvAddCurrentTaskToDelayedList+0x98>)
 80095b4:	f7fe fb17 	bl	8007be6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095b8:	e026      	b.n	8009608 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4413      	add	r3, r2
 80095c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095c2:	4b14      	ldr	r3, [pc, #80]	; (8009614 <prvAddCurrentTaskToDelayedList+0x94>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d209      	bcs.n	80095e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095d2:	4b12      	ldr	r3, [pc, #72]	; (800961c <prvAddCurrentTaskToDelayedList+0x9c>)
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	4b0f      	ldr	r3, [pc, #60]	; (8009614 <prvAddCurrentTaskToDelayedList+0x94>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3304      	adds	r3, #4
 80095dc:	4619      	mov	r1, r3
 80095de:	4610      	mov	r0, r2
 80095e0:	f7fe fb25 	bl	8007c2e <vListInsert>
}
 80095e4:	e010      	b.n	8009608 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095e6:	4b0e      	ldr	r3, [pc, #56]	; (8009620 <prvAddCurrentTaskToDelayedList+0xa0>)
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	4b0a      	ldr	r3, [pc, #40]	; (8009614 <prvAddCurrentTaskToDelayedList+0x94>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3304      	adds	r3, #4
 80095f0:	4619      	mov	r1, r3
 80095f2:	4610      	mov	r0, r2
 80095f4:	f7fe fb1b 	bl	8007c2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095f8:	4b0a      	ldr	r3, [pc, #40]	; (8009624 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d202      	bcs.n	8009608 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009602:	4a08      	ldr	r2, [pc, #32]	; (8009624 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	6013      	str	r3, [r2, #0]
}
 8009608:	bf00      	nop
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	20000ee0 	.word	0x20000ee0
 8009614:	20000a08 	.word	0x20000a08
 8009618:	20000ec8 	.word	0x20000ec8
 800961c:	20000e98 	.word	0x20000e98
 8009620:	20000e94 	.word	0x20000e94
 8009624:	20000efc 	.word	0x20000efc

08009628 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08a      	sub	sp, #40	; 0x28
 800962c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800962e:	2300      	movs	r3, #0
 8009630:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009632:	f000 fb07 	bl	8009c44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009636:	4b1c      	ldr	r3, [pc, #112]	; (80096a8 <xTimerCreateTimerTask+0x80>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d021      	beq.n	8009682 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800963e:	2300      	movs	r3, #0
 8009640:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009642:	2300      	movs	r3, #0
 8009644:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009646:	1d3a      	adds	r2, r7, #4
 8009648:	f107 0108 	add.w	r1, r7, #8
 800964c:	f107 030c 	add.w	r3, r7, #12
 8009650:	4618      	mov	r0, r3
 8009652:	f7fe fa81 	bl	8007b58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	9202      	str	r2, [sp, #8]
 800965e:	9301      	str	r3, [sp, #4]
 8009660:	2302      	movs	r3, #2
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	2300      	movs	r3, #0
 8009666:	460a      	mov	r2, r1
 8009668:	4910      	ldr	r1, [pc, #64]	; (80096ac <xTimerCreateTimerTask+0x84>)
 800966a:	4811      	ldr	r0, [pc, #68]	; (80096b0 <xTimerCreateTimerTask+0x88>)
 800966c:	f7ff f8b4 	bl	80087d8 <xTaskCreateStatic>
 8009670:	4603      	mov	r3, r0
 8009672:	4a10      	ldr	r2, [pc, #64]	; (80096b4 <xTimerCreateTimerTask+0x8c>)
 8009674:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009676:	4b0f      	ldr	r3, [pc, #60]	; (80096b4 <xTimerCreateTimerTask+0x8c>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d001      	beq.n	8009682 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800967e:	2301      	movs	r3, #1
 8009680:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	613b      	str	r3, [r7, #16]
}
 800969a:	bf00      	nop
 800969c:	e7fe      	b.n	800969c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800969e:	697b      	ldr	r3, [r7, #20]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3718      	adds	r7, #24
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	20000f38 	.word	0x20000f38
 80096ac:	0800d810 	.word	0x0800d810
 80096b0:	080097ed 	.word	0x080097ed
 80096b4:	20000f3c 	.word	0x20000f3c

080096b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b08a      	sub	sp, #40	; 0x28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
 80096c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80096c6:	2300      	movs	r3, #0
 80096c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10a      	bne.n	80096e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	623b      	str	r3, [r7, #32]
}
 80096e2:	bf00      	nop
 80096e4:	e7fe      	b.n	80096e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80096e6:	4b1a      	ldr	r3, [pc, #104]	; (8009750 <xTimerGenericCommand+0x98>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d02a      	beq.n	8009744 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2b05      	cmp	r3, #5
 80096fe:	dc18      	bgt.n	8009732 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009700:	f7ff feb2 	bl	8009468 <xTaskGetSchedulerState>
 8009704:	4603      	mov	r3, r0
 8009706:	2b02      	cmp	r3, #2
 8009708:	d109      	bne.n	800971e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800970a:	4b11      	ldr	r3, [pc, #68]	; (8009750 <xTimerGenericCommand+0x98>)
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	f107 0110 	add.w	r1, r7, #16
 8009712:	2300      	movs	r3, #0
 8009714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009716:	f7fe fc77 	bl	8008008 <xQueueGenericSend>
 800971a:	6278      	str	r0, [r7, #36]	; 0x24
 800971c:	e012      	b.n	8009744 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800971e:	4b0c      	ldr	r3, [pc, #48]	; (8009750 <xTimerGenericCommand+0x98>)
 8009720:	6818      	ldr	r0, [r3, #0]
 8009722:	f107 0110 	add.w	r1, r7, #16
 8009726:	2300      	movs	r3, #0
 8009728:	2200      	movs	r2, #0
 800972a:	f7fe fc6d 	bl	8008008 <xQueueGenericSend>
 800972e:	6278      	str	r0, [r7, #36]	; 0x24
 8009730:	e008      	b.n	8009744 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009732:	4b07      	ldr	r3, [pc, #28]	; (8009750 <xTimerGenericCommand+0x98>)
 8009734:	6818      	ldr	r0, [r3, #0]
 8009736:	f107 0110 	add.w	r1, r7, #16
 800973a:	2300      	movs	r3, #0
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	f7fe fd61 	bl	8008204 <xQueueGenericSendFromISR>
 8009742:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009746:	4618      	mov	r0, r3
 8009748:	3728      	adds	r7, #40	; 0x28
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	20000f38 	.word	0x20000f38

08009754 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b088      	sub	sp, #32
 8009758:	af02      	add	r7, sp, #8
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800975e:	4b22      	ldr	r3, [pc, #136]	; (80097e8 <prvProcessExpiredTimer+0x94>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	3304      	adds	r3, #4
 800976c:	4618      	mov	r0, r3
 800976e:	f7fe fa97 	bl	8007ca0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009778:	f003 0304 	and.w	r3, r3, #4
 800977c:	2b00      	cmp	r3, #0
 800977e:	d022      	beq.n	80097c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	699a      	ldr	r2, [r3, #24]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	18d1      	adds	r1, r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	6978      	ldr	r0, [r7, #20]
 800978e:	f000 f8d1 	bl	8009934 <prvInsertTimerInActiveList>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d01f      	beq.n	80097d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009798:	2300      	movs	r3, #0
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	2300      	movs	r3, #0
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	2100      	movs	r1, #0
 80097a2:	6978      	ldr	r0, [r7, #20]
 80097a4:	f7ff ff88 	bl	80096b8 <xTimerGenericCommand>
 80097a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d113      	bne.n	80097d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	60fb      	str	r3, [r7, #12]
}
 80097c2:	bf00      	nop
 80097c4:	e7fe      	b.n	80097c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097cc:	f023 0301 	bic.w	r3, r3, #1
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	6a1b      	ldr	r3, [r3, #32]
 80097dc:	6978      	ldr	r0, [r7, #20]
 80097de:	4798      	blx	r3
}
 80097e0:	bf00      	nop
 80097e2:	3718      	adds	r7, #24
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	20000f30 	.word	0x20000f30

080097ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097f4:	f107 0308 	add.w	r3, r7, #8
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 f857 	bl	80098ac <prvGetNextExpireTime>
 80097fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	4619      	mov	r1, r3
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 f803 	bl	8009810 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800980a:	f000 f8d5 	bl	80099b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800980e:	e7f1      	b.n	80097f4 <prvTimerTask+0x8>

08009810 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800981a:	f7ff fa39 	bl	8008c90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800981e:	f107 0308 	add.w	r3, r7, #8
 8009822:	4618      	mov	r0, r3
 8009824:	f000 f866 	bl	80098f4 <prvSampleTimeNow>
 8009828:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d130      	bne.n	8009892 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10a      	bne.n	800984c <prvProcessTimerOrBlockTask+0x3c>
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	429a      	cmp	r2, r3
 800983c:	d806      	bhi.n	800984c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800983e:	f7ff fa35 	bl	8008cac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009842:	68f9      	ldr	r1, [r7, #12]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f7ff ff85 	bl	8009754 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800984a:	e024      	b.n	8009896 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d008      	beq.n	8009864 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009852:	4b13      	ldr	r3, [pc, #76]	; (80098a0 <prvProcessTimerOrBlockTask+0x90>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d101      	bne.n	8009860 <prvProcessTimerOrBlockTask+0x50>
 800985c:	2301      	movs	r3, #1
 800985e:	e000      	b.n	8009862 <prvProcessTimerOrBlockTask+0x52>
 8009860:	2300      	movs	r3, #0
 8009862:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009864:	4b0f      	ldr	r3, [pc, #60]	; (80098a4 <prvProcessTimerOrBlockTask+0x94>)
 8009866:	6818      	ldr	r0, [r3, #0]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	4619      	mov	r1, r3
 8009872:	f7fe ff7d 	bl	8008770 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009876:	f7ff fa19 	bl	8008cac <xTaskResumeAll>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10a      	bne.n	8009896 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009880:	4b09      	ldr	r3, [pc, #36]	; (80098a8 <prvProcessTimerOrBlockTask+0x98>)
 8009882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	f3bf 8f6f 	isb	sy
}
 8009890:	e001      	b.n	8009896 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009892:	f7ff fa0b 	bl	8008cac <xTaskResumeAll>
}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	20000f34 	.word	0x20000f34
 80098a4:	20000f38 	.word	0x20000f38
 80098a8:	e000ed04 	.word	0xe000ed04

080098ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80098b4:	4b0e      	ldr	r3, [pc, #56]	; (80098f0 <prvGetNextExpireTime+0x44>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <prvGetNextExpireTime+0x16>
 80098be:	2201      	movs	r2, #1
 80098c0:	e000      	b.n	80098c4 <prvGetNextExpireTime+0x18>
 80098c2:	2200      	movs	r2, #0
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d105      	bne.n	80098dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098d0:	4b07      	ldr	r3, [pc, #28]	; (80098f0 <prvGetNextExpireTime+0x44>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	60fb      	str	r3, [r7, #12]
 80098da:	e001      	b.n	80098e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80098dc:	2300      	movs	r3, #0
 80098de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80098e0:	68fb      	ldr	r3, [r7, #12]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	20000f30 	.word	0x20000f30

080098f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098fc:	f7ff fa74 	bl	8008de8 <xTaskGetTickCount>
 8009900:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009902:	4b0b      	ldr	r3, [pc, #44]	; (8009930 <prvSampleTimeNow+0x3c>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	429a      	cmp	r2, r3
 800990a:	d205      	bcs.n	8009918 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800990c:	f000 f936 	bl	8009b7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	601a      	str	r2, [r3, #0]
 8009916:	e002      	b.n	800991e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800991e:	4a04      	ldr	r2, [pc, #16]	; (8009930 <prvSampleTimeNow+0x3c>)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009924:	68fb      	ldr	r3, [r7, #12]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	20000f40 	.word	0x20000f40

08009934 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b086      	sub	sp, #24
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009942:	2300      	movs	r3, #0
 8009944:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	429a      	cmp	r2, r3
 8009958:	d812      	bhi.n	8009980 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	1ad2      	subs	r2, r2, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	429a      	cmp	r2, r3
 8009966:	d302      	bcc.n	800996e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009968:	2301      	movs	r3, #1
 800996a:	617b      	str	r3, [r7, #20]
 800996c:	e01b      	b.n	80099a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800996e:	4b10      	ldr	r3, [pc, #64]	; (80099b0 <prvInsertTimerInActiveList+0x7c>)
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	3304      	adds	r3, #4
 8009976:	4619      	mov	r1, r3
 8009978:	4610      	mov	r0, r2
 800997a:	f7fe f958 	bl	8007c2e <vListInsert>
 800997e:	e012      	b.n	80099a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	429a      	cmp	r2, r3
 8009986:	d206      	bcs.n	8009996 <prvInsertTimerInActiveList+0x62>
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	429a      	cmp	r2, r3
 800998e:	d302      	bcc.n	8009996 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009990:	2301      	movs	r3, #1
 8009992:	617b      	str	r3, [r7, #20]
 8009994:	e007      	b.n	80099a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009996:	4b07      	ldr	r3, [pc, #28]	; (80099b4 <prvInsertTimerInActiveList+0x80>)
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3304      	adds	r3, #4
 800999e:	4619      	mov	r1, r3
 80099a0:	4610      	mov	r0, r2
 80099a2:	f7fe f944 	bl	8007c2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80099a6:	697b      	ldr	r3, [r7, #20]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	20000f34 	.word	0x20000f34
 80099b4:	20000f30 	.word	0x20000f30

080099b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08e      	sub	sp, #56	; 0x38
 80099bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099be:	e0ca      	b.n	8009b56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	da18      	bge.n	80099f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80099c6:	1d3b      	adds	r3, r7, #4
 80099c8:	3304      	adds	r3, #4
 80099ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80099cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10a      	bne.n	80099e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	61fb      	str	r3, [r7, #28]
}
 80099e4:	bf00      	nop
 80099e6:	e7fe      	b.n	80099e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80099e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ee:	6850      	ldr	r0, [r2, #4]
 80099f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099f2:	6892      	ldr	r2, [r2, #8]
 80099f4:	4611      	mov	r1, r2
 80099f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f2c0 80aa 	blt.w	8009b54 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	695b      	ldr	r3, [r3, #20]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d004      	beq.n	8009a16 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0e:	3304      	adds	r3, #4
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7fe f945 	bl	8007ca0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a16:	463b      	mov	r3, r7
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7ff ff6b 	bl	80098f4 <prvSampleTimeNow>
 8009a1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b09      	cmp	r3, #9
 8009a24:	f200 8097 	bhi.w	8009b56 <prvProcessReceivedCommands+0x19e>
 8009a28:	a201      	add	r2, pc, #4	; (adr r2, 8009a30 <prvProcessReceivedCommands+0x78>)
 8009a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2e:	bf00      	nop
 8009a30:	08009a59 	.word	0x08009a59
 8009a34:	08009a59 	.word	0x08009a59
 8009a38:	08009a59 	.word	0x08009a59
 8009a3c:	08009acd 	.word	0x08009acd
 8009a40:	08009ae1 	.word	0x08009ae1
 8009a44:	08009b2b 	.word	0x08009b2b
 8009a48:	08009a59 	.word	0x08009a59
 8009a4c:	08009a59 	.word	0x08009a59
 8009a50:	08009acd 	.word	0x08009acd
 8009a54:	08009ae1 	.word	0x08009ae1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a5e:	f043 0301 	orr.w	r3, r3, #1
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6e:	699b      	ldr	r3, [r3, #24]
 8009a70:	18d1      	adds	r1, r2, r3
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a78:	f7ff ff5c 	bl	8009934 <prvInsertTimerInActiveList>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d069      	beq.n	8009b56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a90:	f003 0304 	and.w	r3, r3, #4
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d05e      	beq.n	8009b56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	441a      	add	r2, r3
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aaa:	f7ff fe05 	bl	80096b8 <xTimerGenericCommand>
 8009aae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009ab0:	6a3b      	ldr	r3, [r7, #32]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d14f      	bne.n	8009b56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	61bb      	str	r3, [r7, #24]
}
 8009ac8:	bf00      	nop
 8009aca:	e7fe      	b.n	8009aca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ad2:	f023 0301 	bic.w	r3, r3, #1
 8009ad6:	b2da      	uxtb	r2, r3
 8009ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009ade:	e03a      	b.n	8009b56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ae6:	f043 0301 	orr.w	r3, r3, #1
 8009aea:	b2da      	uxtb	r2, r3
 8009aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009af2:	68ba      	ldr	r2, [r7, #8]
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10a      	bne.n	8009b16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	617b      	str	r3, [r7, #20]
}
 8009b12:	bf00      	nop
 8009b14:	e7fe      	b.n	8009b14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b18:	699a      	ldr	r2, [r3, #24]
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	18d1      	adds	r1, r2, r3
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b24:	f7ff ff06 	bl	8009934 <prvInsertTimerInActiveList>
					break;
 8009b28:	e015      	b.n	8009b56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b30:	f003 0302 	and.w	r3, r3, #2
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d103      	bne.n	8009b40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b3a:	f000 fbe1 	bl	800a300 <vPortFree>
 8009b3e:	e00a      	b.n	8009b56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b46:	f023 0301 	bic.w	r3, r3, #1
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b52:	e000      	b.n	8009b56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009b54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b56:	4b08      	ldr	r3, [pc, #32]	; (8009b78 <prvProcessReceivedCommands+0x1c0>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	1d39      	adds	r1, r7, #4
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe fbec 	bl	800833c <xQueueReceive>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f47f af2a 	bne.w	80099c0 <prvProcessReceivedCommands+0x8>
	}
}
 8009b6c:	bf00      	nop
 8009b6e:	bf00      	nop
 8009b70:	3730      	adds	r7, #48	; 0x30
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20000f38 	.word	0x20000f38

08009b7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b088      	sub	sp, #32
 8009b80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b82:	e048      	b.n	8009c16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b84:	4b2d      	ldr	r3, [pc, #180]	; (8009c3c <prvSwitchTimerLists+0xc0>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b8e:	4b2b      	ldr	r3, [pc, #172]	; (8009c3c <prvSwitchTimerLists+0xc0>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fe f87f 	bl	8007ca0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bb0:	f003 0304 	and.w	r3, r3, #4
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d02e      	beq.n	8009c16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d90e      	bls.n	8009be8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bd6:	4b19      	ldr	r3, [pc, #100]	; (8009c3c <prvSwitchTimerLists+0xc0>)
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3304      	adds	r3, #4
 8009bde:	4619      	mov	r1, r3
 8009be0:	4610      	mov	r0, r2
 8009be2:	f7fe f824 	bl	8007c2e <vListInsert>
 8009be6:	e016      	b.n	8009c16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009be8:	2300      	movs	r3, #0
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	2300      	movs	r3, #0
 8009bee:	693a      	ldr	r2, [r7, #16]
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f7ff fd60 	bl	80096b8 <xTimerGenericCommand>
 8009bf8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10a      	bne.n	8009c16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	603b      	str	r3, [r7, #0]
}
 8009c12:	bf00      	nop
 8009c14:	e7fe      	b.n	8009c14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c16:	4b09      	ldr	r3, [pc, #36]	; (8009c3c <prvSwitchTimerLists+0xc0>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1b1      	bne.n	8009b84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c20:	4b06      	ldr	r3, [pc, #24]	; (8009c3c <prvSwitchTimerLists+0xc0>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c26:	4b06      	ldr	r3, [pc, #24]	; (8009c40 <prvSwitchTimerLists+0xc4>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a04      	ldr	r2, [pc, #16]	; (8009c3c <prvSwitchTimerLists+0xc0>)
 8009c2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c2e:	4a04      	ldr	r2, [pc, #16]	; (8009c40 <prvSwitchTimerLists+0xc4>)
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	6013      	str	r3, [r2, #0]
}
 8009c34:	bf00      	nop
 8009c36:	3718      	adds	r7, #24
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	20000f30 	.word	0x20000f30
 8009c40:	20000f34 	.word	0x20000f34

08009c44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c4a:	f000 f96b 	bl	8009f24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c4e:	4b15      	ldr	r3, [pc, #84]	; (8009ca4 <prvCheckForValidListAndQueue+0x60>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d120      	bne.n	8009c98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c56:	4814      	ldr	r0, [pc, #80]	; (8009ca8 <prvCheckForValidListAndQueue+0x64>)
 8009c58:	f7fd ff98 	bl	8007b8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c5c:	4813      	ldr	r0, [pc, #76]	; (8009cac <prvCheckForValidListAndQueue+0x68>)
 8009c5e:	f7fd ff95 	bl	8007b8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c62:	4b13      	ldr	r3, [pc, #76]	; (8009cb0 <prvCheckForValidListAndQueue+0x6c>)
 8009c64:	4a10      	ldr	r2, [pc, #64]	; (8009ca8 <prvCheckForValidListAndQueue+0x64>)
 8009c66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c68:	4b12      	ldr	r3, [pc, #72]	; (8009cb4 <prvCheckForValidListAndQueue+0x70>)
 8009c6a:	4a10      	ldr	r2, [pc, #64]	; (8009cac <prvCheckForValidListAndQueue+0x68>)
 8009c6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c6e:	2300      	movs	r3, #0
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	4b11      	ldr	r3, [pc, #68]	; (8009cb8 <prvCheckForValidListAndQueue+0x74>)
 8009c74:	4a11      	ldr	r2, [pc, #68]	; (8009cbc <prvCheckForValidListAndQueue+0x78>)
 8009c76:	2110      	movs	r1, #16
 8009c78:	200a      	movs	r0, #10
 8009c7a:	f7fe f8a3 	bl	8007dc4 <xQueueGenericCreateStatic>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	4a08      	ldr	r2, [pc, #32]	; (8009ca4 <prvCheckForValidListAndQueue+0x60>)
 8009c82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c84:	4b07      	ldr	r3, [pc, #28]	; (8009ca4 <prvCheckForValidListAndQueue+0x60>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d005      	beq.n	8009c98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c8c:	4b05      	ldr	r3, [pc, #20]	; (8009ca4 <prvCheckForValidListAndQueue+0x60>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	490b      	ldr	r1, [pc, #44]	; (8009cc0 <prvCheckForValidListAndQueue+0x7c>)
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fe fd42 	bl	800871c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c98:	f000 f974 	bl	8009f84 <vPortExitCritical>
}
 8009c9c:	bf00      	nop
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	20000f38 	.word	0x20000f38
 8009ca8:	20000f08 	.word	0x20000f08
 8009cac:	20000f1c 	.word	0x20000f1c
 8009cb0:	20000f30 	.word	0x20000f30
 8009cb4:	20000f34 	.word	0x20000f34
 8009cb8:	20000fe4 	.word	0x20000fe4
 8009cbc:	20000f44 	.word	0x20000f44
 8009cc0:	0800d818 	.word	0x0800d818

08009cc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	3b04      	subs	r3, #4
 8009cd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	3b04      	subs	r3, #4
 8009ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	f023 0201 	bic.w	r2, r3, #1
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3b04      	subs	r3, #4
 8009cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cf4:	4a0c      	ldr	r2, [pc, #48]	; (8009d28 <pxPortInitialiseStack+0x64>)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	3b14      	subs	r3, #20
 8009cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	3b04      	subs	r3, #4
 8009d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f06f 0202 	mvn.w	r2, #2
 8009d12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	3b20      	subs	r3, #32
 8009d18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	08009d2d 	.word	0x08009d2d

08009d2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d36:	4b12      	ldr	r3, [pc, #72]	; (8009d80 <prvTaskExitError+0x54>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3e:	d00a      	beq.n	8009d56 <prvTaskExitError+0x2a>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	60fb      	str	r3, [r7, #12]
}
 8009d52:	bf00      	nop
 8009d54:	e7fe      	b.n	8009d54 <prvTaskExitError+0x28>
	__asm volatile
 8009d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5a:	f383 8811 	msr	BASEPRI, r3
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	60bb      	str	r3, [r7, #8]
}
 8009d68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d6a:	bf00      	nop
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d0fc      	beq.n	8009d6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d72:	bf00      	nop
 8009d74:	bf00      	nop
 8009d76:	3714      	adds	r7, #20
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	20000058 	.word	0x20000058
	...

08009d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d90:	4b07      	ldr	r3, [pc, #28]	; (8009db0 <pxCurrentTCBConst2>)
 8009d92:	6819      	ldr	r1, [r3, #0]
 8009d94:	6808      	ldr	r0, [r1, #0]
 8009d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9a:	f380 8809 	msr	PSP, r0
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f04f 0000 	mov.w	r0, #0
 8009da6:	f380 8811 	msr	BASEPRI, r0
 8009daa:	4770      	bx	lr
 8009dac:	f3af 8000 	nop.w

08009db0 <pxCurrentTCBConst2>:
 8009db0:	20000a08 	.word	0x20000a08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop

08009db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009db8:	4808      	ldr	r0, [pc, #32]	; (8009ddc <prvPortStartFirstTask+0x24>)
 8009dba:	6800      	ldr	r0, [r0, #0]
 8009dbc:	6800      	ldr	r0, [r0, #0]
 8009dbe:	f380 8808 	msr	MSP, r0
 8009dc2:	f04f 0000 	mov.w	r0, #0
 8009dc6:	f380 8814 	msr	CONTROL, r0
 8009dca:	b662      	cpsie	i
 8009dcc:	b661      	cpsie	f
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	df00      	svc	0
 8009dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009dda:	bf00      	nop
 8009ddc:	e000ed08 	.word	0xe000ed08

08009de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009de6:	4b46      	ldr	r3, [pc, #280]	; (8009f00 <xPortStartScheduler+0x120>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a46      	ldr	r2, [pc, #280]	; (8009f04 <xPortStartScheduler+0x124>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d10a      	bne.n	8009e06 <xPortStartScheduler+0x26>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	613b      	str	r3, [r7, #16]
}
 8009e02:	bf00      	nop
 8009e04:	e7fe      	b.n	8009e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e06:	4b3e      	ldr	r3, [pc, #248]	; (8009f00 <xPortStartScheduler+0x120>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a3f      	ldr	r2, [pc, #252]	; (8009f08 <xPortStartScheduler+0x128>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d10a      	bne.n	8009e26 <xPortStartScheduler+0x46>
	__asm volatile
 8009e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e14:	f383 8811 	msr	BASEPRI, r3
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	60fb      	str	r3, [r7, #12]
}
 8009e22:	bf00      	nop
 8009e24:	e7fe      	b.n	8009e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e26:	4b39      	ldr	r3, [pc, #228]	; (8009f0c <xPortStartScheduler+0x12c>)
 8009e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	22ff      	movs	r2, #255	; 0xff
 8009e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e40:	78fb      	ldrb	r3, [r7, #3]
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e48:	b2da      	uxtb	r2, r3
 8009e4a:	4b31      	ldr	r3, [pc, #196]	; (8009f10 <xPortStartScheduler+0x130>)
 8009e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e4e:	4b31      	ldr	r3, [pc, #196]	; (8009f14 <xPortStartScheduler+0x134>)
 8009e50:	2207      	movs	r2, #7
 8009e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e54:	e009      	b.n	8009e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009e56:	4b2f      	ldr	r3, [pc, #188]	; (8009f14 <xPortStartScheduler+0x134>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	4a2d      	ldr	r2, [pc, #180]	; (8009f14 <xPortStartScheduler+0x134>)
 8009e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e60:	78fb      	ldrb	r3, [r7, #3]
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	005b      	lsls	r3, r3, #1
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e6a:	78fb      	ldrb	r3, [r7, #3]
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e72:	2b80      	cmp	r3, #128	; 0x80
 8009e74:	d0ef      	beq.n	8009e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e76:	4b27      	ldr	r3, [pc, #156]	; (8009f14 <xPortStartScheduler+0x134>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f1c3 0307 	rsb	r3, r3, #7
 8009e7e:	2b04      	cmp	r3, #4
 8009e80:	d00a      	beq.n	8009e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8009e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e86:	f383 8811 	msr	BASEPRI, r3
 8009e8a:	f3bf 8f6f 	isb	sy
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	60bb      	str	r3, [r7, #8]
}
 8009e94:	bf00      	nop
 8009e96:	e7fe      	b.n	8009e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e98:	4b1e      	ldr	r3, [pc, #120]	; (8009f14 <xPortStartScheduler+0x134>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	021b      	lsls	r3, r3, #8
 8009e9e:	4a1d      	ldr	r2, [pc, #116]	; (8009f14 <xPortStartScheduler+0x134>)
 8009ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ea2:	4b1c      	ldr	r3, [pc, #112]	; (8009f14 <xPortStartScheduler+0x134>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009eaa:	4a1a      	ldr	r2, [pc, #104]	; (8009f14 <xPortStartScheduler+0x134>)
 8009eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009eb6:	4b18      	ldr	r3, [pc, #96]	; (8009f18 <xPortStartScheduler+0x138>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a17      	ldr	r2, [pc, #92]	; (8009f18 <xPortStartScheduler+0x138>)
 8009ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ec2:	4b15      	ldr	r3, [pc, #84]	; (8009f18 <xPortStartScheduler+0x138>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a14      	ldr	r2, [pc, #80]	; (8009f18 <xPortStartScheduler+0x138>)
 8009ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ece:	f000 f8dd 	bl	800a08c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ed2:	4b12      	ldr	r3, [pc, #72]	; (8009f1c <xPortStartScheduler+0x13c>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ed8:	f000 f8fc 	bl	800a0d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009edc:	4b10      	ldr	r3, [pc, #64]	; (8009f20 <xPortStartScheduler+0x140>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a0f      	ldr	r2, [pc, #60]	; (8009f20 <xPortStartScheduler+0x140>)
 8009ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ee8:	f7ff ff66 	bl	8009db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009eec:	f7ff f846 	bl	8008f7c <vTaskSwitchContext>
	prvTaskExitError();
 8009ef0:	f7ff ff1c 	bl	8009d2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	e000ed00 	.word	0xe000ed00
 8009f04:	410fc271 	.word	0x410fc271
 8009f08:	410fc270 	.word	0x410fc270
 8009f0c:	e000e400 	.word	0xe000e400
 8009f10:	20001034 	.word	0x20001034
 8009f14:	20001038 	.word	0x20001038
 8009f18:	e000ed20 	.word	0xe000ed20
 8009f1c:	20000058 	.word	0x20000058
 8009f20:	e000ef34 	.word	0xe000ef34

08009f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
	__asm volatile
 8009f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	607b      	str	r3, [r7, #4]
}
 8009f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f3e:	4b0f      	ldr	r3, [pc, #60]	; (8009f7c <vPortEnterCritical+0x58>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3301      	adds	r3, #1
 8009f44:	4a0d      	ldr	r2, [pc, #52]	; (8009f7c <vPortEnterCritical+0x58>)
 8009f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f48:	4b0c      	ldr	r3, [pc, #48]	; (8009f7c <vPortEnterCritical+0x58>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d10f      	bne.n	8009f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f50:	4b0b      	ldr	r3, [pc, #44]	; (8009f80 <vPortEnterCritical+0x5c>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00a      	beq.n	8009f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8009f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	603b      	str	r3, [r7, #0]
}
 8009f6c:	bf00      	nop
 8009f6e:	e7fe      	b.n	8009f6e <vPortEnterCritical+0x4a>
	}
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	20000058 	.word	0x20000058
 8009f80:	e000ed04 	.word	0xe000ed04

08009f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f8a:	4b12      	ldr	r3, [pc, #72]	; (8009fd4 <vPortExitCritical+0x50>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d10a      	bne.n	8009fa8 <vPortExitCritical+0x24>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	607b      	str	r3, [r7, #4]
}
 8009fa4:	bf00      	nop
 8009fa6:	e7fe      	b.n	8009fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009fa8:	4b0a      	ldr	r3, [pc, #40]	; (8009fd4 <vPortExitCritical+0x50>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	4a09      	ldr	r2, [pc, #36]	; (8009fd4 <vPortExitCritical+0x50>)
 8009fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009fb2:	4b08      	ldr	r3, [pc, #32]	; (8009fd4 <vPortExitCritical+0x50>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d105      	bne.n	8009fc6 <vPortExitCritical+0x42>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	f383 8811 	msr	BASEPRI, r3
}
 8009fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009fc6:	bf00      	nop
 8009fc8:	370c      	adds	r7, #12
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	20000058 	.word	0x20000058
	...

08009fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009fe0:	f3ef 8009 	mrs	r0, PSP
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	4b15      	ldr	r3, [pc, #84]	; (800a040 <pxCurrentTCBConst>)
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	f01e 0f10 	tst.w	lr, #16
 8009ff0:	bf08      	it	eq
 8009ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffa:	6010      	str	r0, [r2, #0]
 8009ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a000:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a004:	f380 8811 	msr	BASEPRI, r0
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f7fe ffb4 	bl	8008f7c <vTaskSwitchContext>
 800a014:	f04f 0000 	mov.w	r0, #0
 800a018:	f380 8811 	msr	BASEPRI, r0
 800a01c:	bc09      	pop	{r0, r3}
 800a01e:	6819      	ldr	r1, [r3, #0]
 800a020:	6808      	ldr	r0, [r1, #0]
 800a022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a026:	f01e 0f10 	tst.w	lr, #16
 800a02a:	bf08      	it	eq
 800a02c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a030:	f380 8809 	msr	PSP, r0
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	f3af 8000 	nop.w

0800a040 <pxCurrentTCBConst>:
 800a040:	20000a08 	.word	0x20000a08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a044:	bf00      	nop
 800a046:	bf00      	nop

0800a048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	607b      	str	r3, [r7, #4]
}
 800a060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a062:	f7fe fed1 	bl	8008e08 <xTaskIncrementTick>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d003      	beq.n	800a074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a06c:	4b06      	ldr	r3, [pc, #24]	; (800a088 <xPortSysTickHandler+0x40>)
 800a06e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a072:	601a      	str	r2, [r3, #0]
 800a074:	2300      	movs	r3, #0
 800a076:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	f383 8811 	msr	BASEPRI, r3
}
 800a07e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	e000ed04 	.word	0xe000ed04

0800a08c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a08c:	b480      	push	{r7}
 800a08e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a090:	4b0b      	ldr	r3, [pc, #44]	; (800a0c0 <vPortSetupTimerInterrupt+0x34>)
 800a092:	2200      	movs	r2, #0
 800a094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a096:	4b0b      	ldr	r3, [pc, #44]	; (800a0c4 <vPortSetupTimerInterrupt+0x38>)
 800a098:	2200      	movs	r2, #0
 800a09a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a09c:	4b0a      	ldr	r3, [pc, #40]	; (800a0c8 <vPortSetupTimerInterrupt+0x3c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a0a      	ldr	r2, [pc, #40]	; (800a0cc <vPortSetupTimerInterrupt+0x40>)
 800a0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a6:	099b      	lsrs	r3, r3, #6
 800a0a8:	4a09      	ldr	r2, [pc, #36]	; (800a0d0 <vPortSetupTimerInterrupt+0x44>)
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a0ae:	4b04      	ldr	r3, [pc, #16]	; (800a0c0 <vPortSetupTimerInterrupt+0x34>)
 800a0b0:	2207      	movs	r2, #7
 800a0b2:	601a      	str	r2, [r3, #0]
}
 800a0b4:	bf00      	nop
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	e000e010 	.word	0xe000e010
 800a0c4:	e000e018 	.word	0xe000e018
 800a0c8:	2000004c 	.word	0x2000004c
 800a0cc:	10624dd3 	.word	0x10624dd3
 800a0d0:	e000e014 	.word	0xe000e014

0800a0d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a0e4 <vPortEnableVFP+0x10>
 800a0d8:	6801      	ldr	r1, [r0, #0]
 800a0da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a0de:	6001      	str	r1, [r0, #0]
 800a0e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0e2:	bf00      	nop
 800a0e4:	e000ed88 	.word	0xe000ed88

0800a0e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0ee:	f3ef 8305 	mrs	r3, IPSR
 800a0f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b0f      	cmp	r3, #15
 800a0f8:	d914      	bls.n	800a124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0fa:	4a17      	ldr	r2, [pc, #92]	; (800a158 <vPortValidateInterruptPriority+0x70>)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	4413      	add	r3, r2
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a104:	4b15      	ldr	r3, [pc, #84]	; (800a15c <vPortValidateInterruptPriority+0x74>)
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	7afa      	ldrb	r2, [r7, #11]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d20a      	bcs.n	800a124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	607b      	str	r3, [r7, #4]
}
 800a120:	bf00      	nop
 800a122:	e7fe      	b.n	800a122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a124:	4b0e      	ldr	r3, [pc, #56]	; (800a160 <vPortValidateInterruptPriority+0x78>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a12c:	4b0d      	ldr	r3, [pc, #52]	; (800a164 <vPortValidateInterruptPriority+0x7c>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	429a      	cmp	r2, r3
 800a132:	d90a      	bls.n	800a14a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	603b      	str	r3, [r7, #0]
}
 800a146:	bf00      	nop
 800a148:	e7fe      	b.n	800a148 <vPortValidateInterruptPriority+0x60>
	}
 800a14a:	bf00      	nop
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	e000e3f0 	.word	0xe000e3f0
 800a15c:	20001034 	.word	0x20001034
 800a160:	e000ed0c 	.word	0xe000ed0c
 800a164:	20001038 	.word	0x20001038

0800a168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b08a      	sub	sp, #40	; 0x28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a170:	2300      	movs	r3, #0
 800a172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a174:	f7fe fd8c 	bl	8008c90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a178:	4b5b      	ldr	r3, [pc, #364]	; (800a2e8 <pvPortMalloc+0x180>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d101      	bne.n	800a184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a180:	f000 f920 	bl	800a3c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a184:	4b59      	ldr	r3, [pc, #356]	; (800a2ec <pvPortMalloc+0x184>)
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4013      	ands	r3, r2
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f040 8093 	bne.w	800a2b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d01d      	beq.n	800a1d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a198:	2208      	movs	r2, #8
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4413      	add	r3, r2
 800a19e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f003 0307 	and.w	r3, r3, #7
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d014      	beq.n	800a1d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f023 0307 	bic.w	r3, r3, #7
 800a1b0:	3308      	adds	r3, #8
 800a1b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f003 0307 	and.w	r3, r3, #7
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00a      	beq.n	800a1d4 <pvPortMalloc+0x6c>
	__asm volatile
 800a1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	617b      	str	r3, [r7, #20]
}
 800a1d0:	bf00      	nop
 800a1d2:	e7fe      	b.n	800a1d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d06e      	beq.n	800a2b8 <pvPortMalloc+0x150>
 800a1da:	4b45      	ldr	r3, [pc, #276]	; (800a2f0 <pvPortMalloc+0x188>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d869      	bhi.n	800a2b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1e4:	4b43      	ldr	r3, [pc, #268]	; (800a2f4 <pvPortMalloc+0x18c>)
 800a1e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1e8:	4b42      	ldr	r3, [pc, #264]	; (800a2f4 <pvPortMalloc+0x18c>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1ee:	e004      	b.n	800a1fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	429a      	cmp	r2, r3
 800a202:	d903      	bls.n	800a20c <pvPortMalloc+0xa4>
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1f1      	bne.n	800a1f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a20c:	4b36      	ldr	r3, [pc, #216]	; (800a2e8 <pvPortMalloc+0x180>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a212:	429a      	cmp	r2, r3
 800a214:	d050      	beq.n	800a2b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2208      	movs	r2, #8
 800a21c:	4413      	add	r3, r2
 800a21e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	1ad2      	subs	r2, r2, r3
 800a230:	2308      	movs	r3, #8
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	429a      	cmp	r2, r3
 800a236:	d91f      	bls.n	800a278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4413      	add	r3, r2
 800a23e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	f003 0307 	and.w	r3, r3, #7
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00a      	beq.n	800a260 <pvPortMalloc+0xf8>
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	613b      	str	r3, [r7, #16]
}
 800a25c:	bf00      	nop
 800a25e:	e7fe      	b.n	800a25e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	1ad2      	subs	r2, r2, r3
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a272:	69b8      	ldr	r0, [r7, #24]
 800a274:	f000 f908 	bl	800a488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a278:	4b1d      	ldr	r3, [pc, #116]	; (800a2f0 <pvPortMalloc+0x188>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	4a1b      	ldr	r2, [pc, #108]	; (800a2f0 <pvPortMalloc+0x188>)
 800a284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a286:	4b1a      	ldr	r3, [pc, #104]	; (800a2f0 <pvPortMalloc+0x188>)
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	4b1b      	ldr	r3, [pc, #108]	; (800a2f8 <pvPortMalloc+0x190>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d203      	bcs.n	800a29a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a292:	4b17      	ldr	r3, [pc, #92]	; (800a2f0 <pvPortMalloc+0x188>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a18      	ldr	r2, [pc, #96]	; (800a2f8 <pvPortMalloc+0x190>)
 800a298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	685a      	ldr	r2, [r3, #4]
 800a29e:	4b13      	ldr	r3, [pc, #76]	; (800a2ec <pvPortMalloc+0x184>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	431a      	orrs	r2, r3
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a2ae:	4b13      	ldr	r3, [pc, #76]	; (800a2fc <pvPortMalloc+0x194>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	4a11      	ldr	r2, [pc, #68]	; (800a2fc <pvPortMalloc+0x194>)
 800a2b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2b8:	f7fe fcf8 	bl	8008cac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	f003 0307 	and.w	r3, r3, #7
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00a      	beq.n	800a2dc <pvPortMalloc+0x174>
	__asm volatile
 800a2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ca:	f383 8811 	msr	BASEPRI, r3
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f3bf 8f4f 	dsb	sy
 800a2d6:	60fb      	str	r3, [r7, #12]
}
 800a2d8:	bf00      	nop
 800a2da:	e7fe      	b.n	800a2da <pvPortMalloc+0x172>
	return pvReturn;
 800a2dc:	69fb      	ldr	r3, [r7, #28]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3728      	adds	r7, #40	; 0x28
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20004c44 	.word	0x20004c44
 800a2ec:	20004c58 	.word	0x20004c58
 800a2f0:	20004c48 	.word	0x20004c48
 800a2f4:	20004c3c 	.word	0x20004c3c
 800a2f8:	20004c4c 	.word	0x20004c4c
 800a2fc:	20004c50 	.word	0x20004c50

0800a300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d04d      	beq.n	800a3ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a312:	2308      	movs	r3, #8
 800a314:	425b      	negs	r3, r3
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	4413      	add	r3, r2
 800a31a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	685a      	ldr	r2, [r3, #4]
 800a324:	4b24      	ldr	r3, [pc, #144]	; (800a3b8 <vPortFree+0xb8>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4013      	ands	r3, r2
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10a      	bne.n	800a344 <vPortFree+0x44>
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	60fb      	str	r3, [r7, #12]
}
 800a340:	bf00      	nop
 800a342:	e7fe      	b.n	800a342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00a      	beq.n	800a362 <vPortFree+0x62>
	__asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	60bb      	str	r3, [r7, #8]
}
 800a35e:	bf00      	nop
 800a360:	e7fe      	b.n	800a360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	685a      	ldr	r2, [r3, #4]
 800a366:	4b14      	ldr	r3, [pc, #80]	; (800a3b8 <vPortFree+0xb8>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4013      	ands	r3, r2
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d01e      	beq.n	800a3ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d11a      	bne.n	800a3ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	4b0e      	ldr	r3, [pc, #56]	; (800a3b8 <vPortFree+0xb8>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	43db      	mvns	r3, r3
 800a382:	401a      	ands	r2, r3
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a388:	f7fe fc82 	bl	8008c90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	685a      	ldr	r2, [r3, #4]
 800a390:	4b0a      	ldr	r3, [pc, #40]	; (800a3bc <vPortFree+0xbc>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4413      	add	r3, r2
 800a396:	4a09      	ldr	r2, [pc, #36]	; (800a3bc <vPortFree+0xbc>)
 800a398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a39a:	6938      	ldr	r0, [r7, #16]
 800a39c:	f000 f874 	bl	800a488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a3a0:	4b07      	ldr	r3, [pc, #28]	; (800a3c0 <vPortFree+0xc0>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	4a06      	ldr	r2, [pc, #24]	; (800a3c0 <vPortFree+0xc0>)
 800a3a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a3aa:	f7fe fc7f 	bl	8008cac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a3ae:	bf00      	nop
 800a3b0:	3718      	adds	r7, #24
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	20004c58 	.word	0x20004c58
 800a3bc:	20004c48 	.word	0x20004c48
 800a3c0:	20004c54 	.word	0x20004c54

0800a3c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a3ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a3ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3d0:	4b27      	ldr	r3, [pc, #156]	; (800a470 <prvHeapInit+0xac>)
 800a3d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f003 0307 	and.w	r3, r3, #7
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00c      	beq.n	800a3f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3307      	adds	r3, #7
 800a3e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f023 0307 	bic.w	r3, r3, #7
 800a3ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	1ad3      	subs	r3, r2, r3
 800a3f2:	4a1f      	ldr	r2, [pc, #124]	; (800a470 <prvHeapInit+0xac>)
 800a3f4:	4413      	add	r3, r2
 800a3f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3fc:	4a1d      	ldr	r2, [pc, #116]	; (800a474 <prvHeapInit+0xb0>)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a402:	4b1c      	ldr	r3, [pc, #112]	; (800a474 <prvHeapInit+0xb0>)
 800a404:	2200      	movs	r2, #0
 800a406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	4413      	add	r3, r2
 800a40e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a410:	2208      	movs	r2, #8
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	1a9b      	subs	r3, r3, r2
 800a416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f023 0307 	bic.w	r3, r3, #7
 800a41e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4a15      	ldr	r2, [pc, #84]	; (800a478 <prvHeapInit+0xb4>)
 800a424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a426:	4b14      	ldr	r3, [pc, #80]	; (800a478 <prvHeapInit+0xb4>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2200      	movs	r2, #0
 800a42c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a42e:	4b12      	ldr	r3, [pc, #72]	; (800a478 <prvHeapInit+0xb4>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2200      	movs	r2, #0
 800a434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	1ad2      	subs	r2, r2, r3
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a444:	4b0c      	ldr	r3, [pc, #48]	; (800a478 <prvHeapInit+0xb4>)
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	4a0a      	ldr	r2, [pc, #40]	; (800a47c <prvHeapInit+0xb8>)
 800a452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	4a09      	ldr	r2, [pc, #36]	; (800a480 <prvHeapInit+0xbc>)
 800a45a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a45c:	4b09      	ldr	r3, [pc, #36]	; (800a484 <prvHeapInit+0xc0>)
 800a45e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a462:	601a      	str	r2, [r3, #0]
}
 800a464:	bf00      	nop
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	2000103c 	.word	0x2000103c
 800a474:	20004c3c 	.word	0x20004c3c
 800a478:	20004c44 	.word	0x20004c44
 800a47c:	20004c4c 	.word	0x20004c4c
 800a480:	20004c48 	.word	0x20004c48
 800a484:	20004c58 	.word	0x20004c58

0800a488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a490:	4b28      	ldr	r3, [pc, #160]	; (800a534 <prvInsertBlockIntoFreeList+0xac>)
 800a492:	60fb      	str	r3, [r7, #12]
 800a494:	e002      	b.n	800a49c <prvInsertBlockIntoFreeList+0x14>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	60fb      	str	r3, [r7, #12]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d8f7      	bhi.n	800a496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d108      	bne.n	800a4ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	685a      	ldr	r2, [r3, #4]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	441a      	add	r2, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	441a      	add	r2, r3
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d118      	bne.n	800a510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	4b15      	ldr	r3, [pc, #84]	; (800a538 <prvInsertBlockIntoFreeList+0xb0>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d00d      	beq.n	800a506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685a      	ldr	r2, [r3, #4]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	441a      	add	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	e008      	b.n	800a518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a506:	4b0c      	ldr	r3, [pc, #48]	; (800a538 <prvInsertBlockIntoFreeList+0xb0>)
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	601a      	str	r2, [r3, #0]
 800a50e:	e003      	b.n	800a518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d002      	beq.n	800a526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a526:	bf00      	nop
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	20004c3c 	.word	0x20004c3c
 800a538:	20004c44 	.word	0x20004c44

0800a53c <atoi>:
 800a53c:	220a      	movs	r2, #10
 800a53e:	2100      	movs	r1, #0
 800a540:	f001 b812 	b.w	800b568 <strtol>

0800a544 <__errno>:
 800a544:	4b01      	ldr	r3, [pc, #4]	; (800a54c <__errno+0x8>)
 800a546:	6818      	ldr	r0, [r3, #0]
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	2000005c 	.word	0x2000005c

0800a550 <std>:
 800a550:	2300      	movs	r3, #0
 800a552:	b510      	push	{r4, lr}
 800a554:	4604      	mov	r4, r0
 800a556:	e9c0 3300 	strd	r3, r3, [r0]
 800a55a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a55e:	6083      	str	r3, [r0, #8]
 800a560:	8181      	strh	r1, [r0, #12]
 800a562:	6643      	str	r3, [r0, #100]	; 0x64
 800a564:	81c2      	strh	r2, [r0, #14]
 800a566:	6183      	str	r3, [r0, #24]
 800a568:	4619      	mov	r1, r3
 800a56a:	2208      	movs	r2, #8
 800a56c:	305c      	adds	r0, #92	; 0x5c
 800a56e:	f000 f91a 	bl	800a7a6 <memset>
 800a572:	4b05      	ldr	r3, [pc, #20]	; (800a588 <std+0x38>)
 800a574:	6263      	str	r3, [r4, #36]	; 0x24
 800a576:	4b05      	ldr	r3, [pc, #20]	; (800a58c <std+0x3c>)
 800a578:	62a3      	str	r3, [r4, #40]	; 0x28
 800a57a:	4b05      	ldr	r3, [pc, #20]	; (800a590 <std+0x40>)
 800a57c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a57e:	4b05      	ldr	r3, [pc, #20]	; (800a594 <std+0x44>)
 800a580:	6224      	str	r4, [r4, #32]
 800a582:	6323      	str	r3, [r4, #48]	; 0x30
 800a584:	bd10      	pop	{r4, pc}
 800a586:	bf00      	nop
 800a588:	0800b391 	.word	0x0800b391
 800a58c:	0800b3b3 	.word	0x0800b3b3
 800a590:	0800b3eb 	.word	0x0800b3eb
 800a594:	0800b40f 	.word	0x0800b40f

0800a598 <_cleanup_r>:
 800a598:	4901      	ldr	r1, [pc, #4]	; (800a5a0 <_cleanup_r+0x8>)
 800a59a:	f000 b8af 	b.w	800a6fc <_fwalk_reent>
 800a59e:	bf00      	nop
 800a5a0:	0800c53d 	.word	0x0800c53d

0800a5a4 <__sfmoreglue>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	1e4a      	subs	r2, r1, #1
 800a5a8:	2568      	movs	r5, #104	; 0x68
 800a5aa:	4355      	muls	r5, r2
 800a5ac:	460e      	mov	r6, r1
 800a5ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a5b2:	f000 f901 	bl	800a7b8 <_malloc_r>
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	b140      	cbz	r0, 800a5cc <__sfmoreglue+0x28>
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	e9c0 1600 	strd	r1, r6, [r0]
 800a5c0:	300c      	adds	r0, #12
 800a5c2:	60a0      	str	r0, [r4, #8]
 800a5c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5c8:	f000 f8ed 	bl	800a7a6 <memset>
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	bd70      	pop	{r4, r5, r6, pc}

0800a5d0 <__sfp_lock_acquire>:
 800a5d0:	4801      	ldr	r0, [pc, #4]	; (800a5d8 <__sfp_lock_acquire+0x8>)
 800a5d2:	f000 b8d8 	b.w	800a786 <__retarget_lock_acquire_recursive>
 800a5d6:	bf00      	nop
 800a5d8:	20005224 	.word	0x20005224

0800a5dc <__sfp_lock_release>:
 800a5dc:	4801      	ldr	r0, [pc, #4]	; (800a5e4 <__sfp_lock_release+0x8>)
 800a5de:	f000 b8d3 	b.w	800a788 <__retarget_lock_release_recursive>
 800a5e2:	bf00      	nop
 800a5e4:	20005224 	.word	0x20005224

0800a5e8 <__sinit_lock_acquire>:
 800a5e8:	4801      	ldr	r0, [pc, #4]	; (800a5f0 <__sinit_lock_acquire+0x8>)
 800a5ea:	f000 b8cc 	b.w	800a786 <__retarget_lock_acquire_recursive>
 800a5ee:	bf00      	nop
 800a5f0:	2000521f 	.word	0x2000521f

0800a5f4 <__sinit_lock_release>:
 800a5f4:	4801      	ldr	r0, [pc, #4]	; (800a5fc <__sinit_lock_release+0x8>)
 800a5f6:	f000 b8c7 	b.w	800a788 <__retarget_lock_release_recursive>
 800a5fa:	bf00      	nop
 800a5fc:	2000521f 	.word	0x2000521f

0800a600 <__sinit>:
 800a600:	b510      	push	{r4, lr}
 800a602:	4604      	mov	r4, r0
 800a604:	f7ff fff0 	bl	800a5e8 <__sinit_lock_acquire>
 800a608:	69a3      	ldr	r3, [r4, #24]
 800a60a:	b11b      	cbz	r3, 800a614 <__sinit+0x14>
 800a60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a610:	f7ff bff0 	b.w	800a5f4 <__sinit_lock_release>
 800a614:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a618:	6523      	str	r3, [r4, #80]	; 0x50
 800a61a:	4b13      	ldr	r3, [pc, #76]	; (800a668 <__sinit+0x68>)
 800a61c:	4a13      	ldr	r2, [pc, #76]	; (800a66c <__sinit+0x6c>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	62a2      	str	r2, [r4, #40]	; 0x28
 800a622:	42a3      	cmp	r3, r4
 800a624:	bf04      	itt	eq
 800a626:	2301      	moveq	r3, #1
 800a628:	61a3      	streq	r3, [r4, #24]
 800a62a:	4620      	mov	r0, r4
 800a62c:	f000 f820 	bl	800a670 <__sfp>
 800a630:	6060      	str	r0, [r4, #4]
 800a632:	4620      	mov	r0, r4
 800a634:	f000 f81c 	bl	800a670 <__sfp>
 800a638:	60a0      	str	r0, [r4, #8]
 800a63a:	4620      	mov	r0, r4
 800a63c:	f000 f818 	bl	800a670 <__sfp>
 800a640:	2200      	movs	r2, #0
 800a642:	60e0      	str	r0, [r4, #12]
 800a644:	2104      	movs	r1, #4
 800a646:	6860      	ldr	r0, [r4, #4]
 800a648:	f7ff ff82 	bl	800a550 <std>
 800a64c:	68a0      	ldr	r0, [r4, #8]
 800a64e:	2201      	movs	r2, #1
 800a650:	2109      	movs	r1, #9
 800a652:	f7ff ff7d 	bl	800a550 <std>
 800a656:	68e0      	ldr	r0, [r4, #12]
 800a658:	2202      	movs	r2, #2
 800a65a:	2112      	movs	r1, #18
 800a65c:	f7ff ff78 	bl	800a550 <std>
 800a660:	2301      	movs	r3, #1
 800a662:	61a3      	str	r3, [r4, #24]
 800a664:	e7d2      	b.n	800a60c <__sinit+0xc>
 800a666:	bf00      	nop
 800a668:	0800d95c 	.word	0x0800d95c
 800a66c:	0800a599 	.word	0x0800a599

0800a670 <__sfp>:
 800a670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a672:	4607      	mov	r7, r0
 800a674:	f7ff ffac 	bl	800a5d0 <__sfp_lock_acquire>
 800a678:	4b1e      	ldr	r3, [pc, #120]	; (800a6f4 <__sfp+0x84>)
 800a67a:	681e      	ldr	r6, [r3, #0]
 800a67c:	69b3      	ldr	r3, [r6, #24]
 800a67e:	b913      	cbnz	r3, 800a686 <__sfp+0x16>
 800a680:	4630      	mov	r0, r6
 800a682:	f7ff ffbd 	bl	800a600 <__sinit>
 800a686:	3648      	adds	r6, #72	; 0x48
 800a688:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a68c:	3b01      	subs	r3, #1
 800a68e:	d503      	bpl.n	800a698 <__sfp+0x28>
 800a690:	6833      	ldr	r3, [r6, #0]
 800a692:	b30b      	cbz	r3, 800a6d8 <__sfp+0x68>
 800a694:	6836      	ldr	r6, [r6, #0]
 800a696:	e7f7      	b.n	800a688 <__sfp+0x18>
 800a698:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a69c:	b9d5      	cbnz	r5, 800a6d4 <__sfp+0x64>
 800a69e:	4b16      	ldr	r3, [pc, #88]	; (800a6f8 <__sfp+0x88>)
 800a6a0:	60e3      	str	r3, [r4, #12]
 800a6a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6a6:	6665      	str	r5, [r4, #100]	; 0x64
 800a6a8:	f000 f86c 	bl	800a784 <__retarget_lock_init_recursive>
 800a6ac:	f7ff ff96 	bl	800a5dc <__sfp_lock_release>
 800a6b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a6b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a6b8:	6025      	str	r5, [r4, #0]
 800a6ba:	61a5      	str	r5, [r4, #24]
 800a6bc:	2208      	movs	r2, #8
 800a6be:	4629      	mov	r1, r5
 800a6c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6c4:	f000 f86f 	bl	800a7a6 <memset>
 800a6c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6d4:	3468      	adds	r4, #104	; 0x68
 800a6d6:	e7d9      	b.n	800a68c <__sfp+0x1c>
 800a6d8:	2104      	movs	r1, #4
 800a6da:	4638      	mov	r0, r7
 800a6dc:	f7ff ff62 	bl	800a5a4 <__sfmoreglue>
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	6030      	str	r0, [r6, #0]
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d1d5      	bne.n	800a694 <__sfp+0x24>
 800a6e8:	f7ff ff78 	bl	800a5dc <__sfp_lock_release>
 800a6ec:	230c      	movs	r3, #12
 800a6ee:	603b      	str	r3, [r7, #0]
 800a6f0:	e7ee      	b.n	800a6d0 <__sfp+0x60>
 800a6f2:	bf00      	nop
 800a6f4:	0800d95c 	.word	0x0800d95c
 800a6f8:	ffff0001 	.word	0xffff0001

0800a6fc <_fwalk_reent>:
 800a6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a700:	4606      	mov	r6, r0
 800a702:	4688      	mov	r8, r1
 800a704:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a708:	2700      	movs	r7, #0
 800a70a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a70e:	f1b9 0901 	subs.w	r9, r9, #1
 800a712:	d505      	bpl.n	800a720 <_fwalk_reent+0x24>
 800a714:	6824      	ldr	r4, [r4, #0]
 800a716:	2c00      	cmp	r4, #0
 800a718:	d1f7      	bne.n	800a70a <_fwalk_reent+0xe>
 800a71a:	4638      	mov	r0, r7
 800a71c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a720:	89ab      	ldrh	r3, [r5, #12]
 800a722:	2b01      	cmp	r3, #1
 800a724:	d907      	bls.n	800a736 <_fwalk_reent+0x3a>
 800a726:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a72a:	3301      	adds	r3, #1
 800a72c:	d003      	beq.n	800a736 <_fwalk_reent+0x3a>
 800a72e:	4629      	mov	r1, r5
 800a730:	4630      	mov	r0, r6
 800a732:	47c0      	blx	r8
 800a734:	4307      	orrs	r7, r0
 800a736:	3568      	adds	r5, #104	; 0x68
 800a738:	e7e9      	b.n	800a70e <_fwalk_reent+0x12>
	...

0800a73c <__libc_init_array>:
 800a73c:	b570      	push	{r4, r5, r6, lr}
 800a73e:	4d0d      	ldr	r5, [pc, #52]	; (800a774 <__libc_init_array+0x38>)
 800a740:	4c0d      	ldr	r4, [pc, #52]	; (800a778 <__libc_init_array+0x3c>)
 800a742:	1b64      	subs	r4, r4, r5
 800a744:	10a4      	asrs	r4, r4, #2
 800a746:	2600      	movs	r6, #0
 800a748:	42a6      	cmp	r6, r4
 800a74a:	d109      	bne.n	800a760 <__libc_init_array+0x24>
 800a74c:	4d0b      	ldr	r5, [pc, #44]	; (800a77c <__libc_init_array+0x40>)
 800a74e:	4c0c      	ldr	r4, [pc, #48]	; (800a780 <__libc_init_array+0x44>)
 800a750:	f002 ff68 	bl	800d624 <_init>
 800a754:	1b64      	subs	r4, r4, r5
 800a756:	10a4      	asrs	r4, r4, #2
 800a758:	2600      	movs	r6, #0
 800a75a:	42a6      	cmp	r6, r4
 800a75c:	d105      	bne.n	800a76a <__libc_init_array+0x2e>
 800a75e:	bd70      	pop	{r4, r5, r6, pc}
 800a760:	f855 3b04 	ldr.w	r3, [r5], #4
 800a764:	4798      	blx	r3
 800a766:	3601      	adds	r6, #1
 800a768:	e7ee      	b.n	800a748 <__libc_init_array+0xc>
 800a76a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a76e:	4798      	blx	r3
 800a770:	3601      	adds	r6, #1
 800a772:	e7f2      	b.n	800a75a <__libc_init_array+0x1e>
 800a774:	0800dcec 	.word	0x0800dcec
 800a778:	0800dcec 	.word	0x0800dcec
 800a77c:	0800dcec 	.word	0x0800dcec
 800a780:	0800dcf0 	.word	0x0800dcf0

0800a784 <__retarget_lock_init_recursive>:
 800a784:	4770      	bx	lr

0800a786 <__retarget_lock_acquire_recursive>:
 800a786:	4770      	bx	lr

0800a788 <__retarget_lock_release_recursive>:
 800a788:	4770      	bx	lr

0800a78a <memcpy>:
 800a78a:	440a      	add	r2, r1
 800a78c:	4291      	cmp	r1, r2
 800a78e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a792:	d100      	bne.n	800a796 <memcpy+0xc>
 800a794:	4770      	bx	lr
 800a796:	b510      	push	{r4, lr}
 800a798:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a79c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7a0:	4291      	cmp	r1, r2
 800a7a2:	d1f9      	bne.n	800a798 <memcpy+0xe>
 800a7a4:	bd10      	pop	{r4, pc}

0800a7a6 <memset>:
 800a7a6:	4402      	add	r2, r0
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d100      	bne.n	800a7b0 <memset+0xa>
 800a7ae:	4770      	bx	lr
 800a7b0:	f803 1b01 	strb.w	r1, [r3], #1
 800a7b4:	e7f9      	b.n	800a7aa <memset+0x4>
	...

0800a7b8 <_malloc_r>:
 800a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ba:	1ccd      	adds	r5, r1, #3
 800a7bc:	f025 0503 	bic.w	r5, r5, #3
 800a7c0:	3508      	adds	r5, #8
 800a7c2:	2d0c      	cmp	r5, #12
 800a7c4:	bf38      	it	cc
 800a7c6:	250c      	movcc	r5, #12
 800a7c8:	2d00      	cmp	r5, #0
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	db01      	blt.n	800a7d2 <_malloc_r+0x1a>
 800a7ce:	42a9      	cmp	r1, r5
 800a7d0:	d903      	bls.n	800a7da <_malloc_r+0x22>
 800a7d2:	230c      	movs	r3, #12
 800a7d4:	6033      	str	r3, [r6, #0]
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7da:	f001 ff6d 	bl	800c6b8 <__malloc_lock>
 800a7de:	4921      	ldr	r1, [pc, #132]	; (800a864 <_malloc_r+0xac>)
 800a7e0:	680a      	ldr	r2, [r1, #0]
 800a7e2:	4614      	mov	r4, r2
 800a7e4:	b99c      	cbnz	r4, 800a80e <_malloc_r+0x56>
 800a7e6:	4f20      	ldr	r7, [pc, #128]	; (800a868 <_malloc_r+0xb0>)
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	b923      	cbnz	r3, 800a7f6 <_malloc_r+0x3e>
 800a7ec:	4621      	mov	r1, r4
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	f000 fd9e 	bl	800b330 <_sbrk_r>
 800a7f4:	6038      	str	r0, [r7, #0]
 800a7f6:	4629      	mov	r1, r5
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f000 fd99 	bl	800b330 <_sbrk_r>
 800a7fe:	1c43      	adds	r3, r0, #1
 800a800:	d123      	bne.n	800a84a <_malloc_r+0x92>
 800a802:	230c      	movs	r3, #12
 800a804:	6033      	str	r3, [r6, #0]
 800a806:	4630      	mov	r0, r6
 800a808:	f001 ff5c 	bl	800c6c4 <__malloc_unlock>
 800a80c:	e7e3      	b.n	800a7d6 <_malloc_r+0x1e>
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	1b5b      	subs	r3, r3, r5
 800a812:	d417      	bmi.n	800a844 <_malloc_r+0x8c>
 800a814:	2b0b      	cmp	r3, #11
 800a816:	d903      	bls.n	800a820 <_malloc_r+0x68>
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	441c      	add	r4, r3
 800a81c:	6025      	str	r5, [r4, #0]
 800a81e:	e004      	b.n	800a82a <_malloc_r+0x72>
 800a820:	6863      	ldr	r3, [r4, #4]
 800a822:	42a2      	cmp	r2, r4
 800a824:	bf0c      	ite	eq
 800a826:	600b      	streq	r3, [r1, #0]
 800a828:	6053      	strne	r3, [r2, #4]
 800a82a:	4630      	mov	r0, r6
 800a82c:	f001 ff4a 	bl	800c6c4 <__malloc_unlock>
 800a830:	f104 000b 	add.w	r0, r4, #11
 800a834:	1d23      	adds	r3, r4, #4
 800a836:	f020 0007 	bic.w	r0, r0, #7
 800a83a:	1ac2      	subs	r2, r0, r3
 800a83c:	d0cc      	beq.n	800a7d8 <_malloc_r+0x20>
 800a83e:	1a1b      	subs	r3, r3, r0
 800a840:	50a3      	str	r3, [r4, r2]
 800a842:	e7c9      	b.n	800a7d8 <_malloc_r+0x20>
 800a844:	4622      	mov	r2, r4
 800a846:	6864      	ldr	r4, [r4, #4]
 800a848:	e7cc      	b.n	800a7e4 <_malloc_r+0x2c>
 800a84a:	1cc4      	adds	r4, r0, #3
 800a84c:	f024 0403 	bic.w	r4, r4, #3
 800a850:	42a0      	cmp	r0, r4
 800a852:	d0e3      	beq.n	800a81c <_malloc_r+0x64>
 800a854:	1a21      	subs	r1, r4, r0
 800a856:	4630      	mov	r0, r6
 800a858:	f000 fd6a 	bl	800b330 <_sbrk_r>
 800a85c:	3001      	adds	r0, #1
 800a85e:	d1dd      	bne.n	800a81c <_malloc_r+0x64>
 800a860:	e7cf      	b.n	800a802 <_malloc_r+0x4a>
 800a862:	bf00      	nop
 800a864:	20004c5c 	.word	0x20004c5c
 800a868:	20004c60 	.word	0x20004c60

0800a86c <__cvt>:
 800a86c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a870:	ec55 4b10 	vmov	r4, r5, d0
 800a874:	2d00      	cmp	r5, #0
 800a876:	460e      	mov	r6, r1
 800a878:	4619      	mov	r1, r3
 800a87a:	462b      	mov	r3, r5
 800a87c:	bfbb      	ittet	lt
 800a87e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a882:	461d      	movlt	r5, r3
 800a884:	2300      	movge	r3, #0
 800a886:	232d      	movlt	r3, #45	; 0x2d
 800a888:	700b      	strb	r3, [r1, #0]
 800a88a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a88c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a890:	4691      	mov	r9, r2
 800a892:	f023 0820 	bic.w	r8, r3, #32
 800a896:	bfbc      	itt	lt
 800a898:	4622      	movlt	r2, r4
 800a89a:	4614      	movlt	r4, r2
 800a89c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8a0:	d005      	beq.n	800a8ae <__cvt+0x42>
 800a8a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a8a6:	d100      	bne.n	800a8aa <__cvt+0x3e>
 800a8a8:	3601      	adds	r6, #1
 800a8aa:	2102      	movs	r1, #2
 800a8ac:	e000      	b.n	800a8b0 <__cvt+0x44>
 800a8ae:	2103      	movs	r1, #3
 800a8b0:	ab03      	add	r3, sp, #12
 800a8b2:	9301      	str	r3, [sp, #4]
 800a8b4:	ab02      	add	r3, sp, #8
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	ec45 4b10 	vmov	d0, r4, r5
 800a8bc:	4653      	mov	r3, sl
 800a8be:	4632      	mov	r2, r6
 800a8c0:	f000 ffca 	bl	800b858 <_dtoa_r>
 800a8c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a8c8:	4607      	mov	r7, r0
 800a8ca:	d102      	bne.n	800a8d2 <__cvt+0x66>
 800a8cc:	f019 0f01 	tst.w	r9, #1
 800a8d0:	d022      	beq.n	800a918 <__cvt+0xac>
 800a8d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8d6:	eb07 0906 	add.w	r9, r7, r6
 800a8da:	d110      	bne.n	800a8fe <__cvt+0x92>
 800a8dc:	783b      	ldrb	r3, [r7, #0]
 800a8de:	2b30      	cmp	r3, #48	; 0x30
 800a8e0:	d10a      	bne.n	800a8f8 <__cvt+0x8c>
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	f7f6 f8f5 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8ee:	b918      	cbnz	r0, 800a8f8 <__cvt+0x8c>
 800a8f0:	f1c6 0601 	rsb	r6, r6, #1
 800a8f4:	f8ca 6000 	str.w	r6, [sl]
 800a8f8:	f8da 3000 	ldr.w	r3, [sl]
 800a8fc:	4499      	add	r9, r3
 800a8fe:	2200      	movs	r2, #0
 800a900:	2300      	movs	r3, #0
 800a902:	4620      	mov	r0, r4
 800a904:	4629      	mov	r1, r5
 800a906:	f7f6 f8e7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a90a:	b108      	cbz	r0, 800a910 <__cvt+0xa4>
 800a90c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a910:	2230      	movs	r2, #48	; 0x30
 800a912:	9b03      	ldr	r3, [sp, #12]
 800a914:	454b      	cmp	r3, r9
 800a916:	d307      	bcc.n	800a928 <__cvt+0xbc>
 800a918:	9b03      	ldr	r3, [sp, #12]
 800a91a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a91c:	1bdb      	subs	r3, r3, r7
 800a91e:	4638      	mov	r0, r7
 800a920:	6013      	str	r3, [r2, #0]
 800a922:	b004      	add	sp, #16
 800a924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a928:	1c59      	adds	r1, r3, #1
 800a92a:	9103      	str	r1, [sp, #12]
 800a92c:	701a      	strb	r2, [r3, #0]
 800a92e:	e7f0      	b.n	800a912 <__cvt+0xa6>

0800a930 <__exponent>:
 800a930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a932:	4603      	mov	r3, r0
 800a934:	2900      	cmp	r1, #0
 800a936:	bfb8      	it	lt
 800a938:	4249      	neglt	r1, r1
 800a93a:	f803 2b02 	strb.w	r2, [r3], #2
 800a93e:	bfb4      	ite	lt
 800a940:	222d      	movlt	r2, #45	; 0x2d
 800a942:	222b      	movge	r2, #43	; 0x2b
 800a944:	2909      	cmp	r1, #9
 800a946:	7042      	strb	r2, [r0, #1]
 800a948:	dd2a      	ble.n	800a9a0 <__exponent+0x70>
 800a94a:	f10d 0407 	add.w	r4, sp, #7
 800a94e:	46a4      	mov	ip, r4
 800a950:	270a      	movs	r7, #10
 800a952:	46a6      	mov	lr, r4
 800a954:	460a      	mov	r2, r1
 800a956:	fb91 f6f7 	sdiv	r6, r1, r7
 800a95a:	fb07 1516 	mls	r5, r7, r6, r1
 800a95e:	3530      	adds	r5, #48	; 0x30
 800a960:	2a63      	cmp	r2, #99	; 0x63
 800a962:	f104 34ff 	add.w	r4, r4, #4294967295
 800a966:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a96a:	4631      	mov	r1, r6
 800a96c:	dcf1      	bgt.n	800a952 <__exponent+0x22>
 800a96e:	3130      	adds	r1, #48	; 0x30
 800a970:	f1ae 0502 	sub.w	r5, lr, #2
 800a974:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a978:	1c44      	adds	r4, r0, #1
 800a97a:	4629      	mov	r1, r5
 800a97c:	4561      	cmp	r1, ip
 800a97e:	d30a      	bcc.n	800a996 <__exponent+0x66>
 800a980:	f10d 0209 	add.w	r2, sp, #9
 800a984:	eba2 020e 	sub.w	r2, r2, lr
 800a988:	4565      	cmp	r5, ip
 800a98a:	bf88      	it	hi
 800a98c:	2200      	movhi	r2, #0
 800a98e:	4413      	add	r3, r2
 800a990:	1a18      	subs	r0, r3, r0
 800a992:	b003      	add	sp, #12
 800a994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a99a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a99e:	e7ed      	b.n	800a97c <__exponent+0x4c>
 800a9a0:	2330      	movs	r3, #48	; 0x30
 800a9a2:	3130      	adds	r1, #48	; 0x30
 800a9a4:	7083      	strb	r3, [r0, #2]
 800a9a6:	70c1      	strb	r1, [r0, #3]
 800a9a8:	1d03      	adds	r3, r0, #4
 800a9aa:	e7f1      	b.n	800a990 <__exponent+0x60>

0800a9ac <_printf_float>:
 800a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b0:	ed2d 8b02 	vpush	{d8}
 800a9b4:	b08d      	sub	sp, #52	; 0x34
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a9bc:	4616      	mov	r6, r2
 800a9be:	461f      	mov	r7, r3
 800a9c0:	4605      	mov	r5, r0
 800a9c2:	f001 fdf7 	bl	800c5b4 <_localeconv_r>
 800a9c6:	f8d0 a000 	ldr.w	sl, [r0]
 800a9ca:	4650      	mov	r0, sl
 800a9cc:	f7f5 fc08 	bl	80001e0 <strlen>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	930a      	str	r3, [sp, #40]	; 0x28
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	9305      	str	r3, [sp, #20]
 800a9d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a9dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a9e0:	3307      	adds	r3, #7
 800a9e2:	f023 0307 	bic.w	r3, r3, #7
 800a9e6:	f103 0208 	add.w	r2, r3, #8
 800a9ea:	f8c8 2000 	str.w	r2, [r8]
 800a9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a9f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a9fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9fe:	9307      	str	r3, [sp, #28]
 800aa00:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa04:	ee08 0a10 	vmov	s16, r0
 800aa08:	4b9f      	ldr	r3, [pc, #636]	; (800ac88 <_printf_float+0x2dc>)
 800aa0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa0e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa12:	f7f6 f893 	bl	8000b3c <__aeabi_dcmpun>
 800aa16:	bb88      	cbnz	r0, 800aa7c <_printf_float+0xd0>
 800aa18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa1c:	4b9a      	ldr	r3, [pc, #616]	; (800ac88 <_printf_float+0x2dc>)
 800aa1e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa22:	f7f6 f86d 	bl	8000b00 <__aeabi_dcmple>
 800aa26:	bb48      	cbnz	r0, 800aa7c <_printf_float+0xd0>
 800aa28:	2200      	movs	r2, #0
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	4640      	mov	r0, r8
 800aa2e:	4649      	mov	r1, r9
 800aa30:	f7f6 f85c 	bl	8000aec <__aeabi_dcmplt>
 800aa34:	b110      	cbz	r0, 800aa3c <_printf_float+0x90>
 800aa36:	232d      	movs	r3, #45	; 0x2d
 800aa38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa3c:	4b93      	ldr	r3, [pc, #588]	; (800ac8c <_printf_float+0x2e0>)
 800aa3e:	4894      	ldr	r0, [pc, #592]	; (800ac90 <_printf_float+0x2e4>)
 800aa40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa44:	bf94      	ite	ls
 800aa46:	4698      	movls	r8, r3
 800aa48:	4680      	movhi	r8, r0
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	6123      	str	r3, [r4, #16]
 800aa4e:	9b05      	ldr	r3, [sp, #20]
 800aa50:	f023 0204 	bic.w	r2, r3, #4
 800aa54:	6022      	str	r2, [r4, #0]
 800aa56:	f04f 0900 	mov.w	r9, #0
 800aa5a:	9700      	str	r7, [sp, #0]
 800aa5c:	4633      	mov	r3, r6
 800aa5e:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa60:	4621      	mov	r1, r4
 800aa62:	4628      	mov	r0, r5
 800aa64:	f000 f9d8 	bl	800ae18 <_printf_common>
 800aa68:	3001      	adds	r0, #1
 800aa6a:	f040 8090 	bne.w	800ab8e <_printf_float+0x1e2>
 800aa6e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa72:	b00d      	add	sp, #52	; 0x34
 800aa74:	ecbd 8b02 	vpop	{d8}
 800aa78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa7c:	4642      	mov	r2, r8
 800aa7e:	464b      	mov	r3, r9
 800aa80:	4640      	mov	r0, r8
 800aa82:	4649      	mov	r1, r9
 800aa84:	f7f6 f85a 	bl	8000b3c <__aeabi_dcmpun>
 800aa88:	b140      	cbz	r0, 800aa9c <_printf_float+0xf0>
 800aa8a:	464b      	mov	r3, r9
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	bfbc      	itt	lt
 800aa90:	232d      	movlt	r3, #45	; 0x2d
 800aa92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aa96:	487f      	ldr	r0, [pc, #508]	; (800ac94 <_printf_float+0x2e8>)
 800aa98:	4b7f      	ldr	r3, [pc, #508]	; (800ac98 <_printf_float+0x2ec>)
 800aa9a:	e7d1      	b.n	800aa40 <_printf_float+0x94>
 800aa9c:	6863      	ldr	r3, [r4, #4]
 800aa9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aaa2:	9206      	str	r2, [sp, #24]
 800aaa4:	1c5a      	adds	r2, r3, #1
 800aaa6:	d13f      	bne.n	800ab28 <_printf_float+0x17c>
 800aaa8:	2306      	movs	r3, #6
 800aaaa:	6063      	str	r3, [r4, #4]
 800aaac:	9b05      	ldr	r3, [sp, #20]
 800aaae:	6861      	ldr	r1, [r4, #4]
 800aab0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aab4:	2300      	movs	r3, #0
 800aab6:	9303      	str	r3, [sp, #12]
 800aab8:	ab0a      	add	r3, sp, #40	; 0x28
 800aaba:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aabe:	ab09      	add	r3, sp, #36	; 0x24
 800aac0:	ec49 8b10 	vmov	d0, r8, r9
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	6022      	str	r2, [r4, #0]
 800aac8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aacc:	4628      	mov	r0, r5
 800aace:	f7ff fecd 	bl	800a86c <__cvt>
 800aad2:	9b06      	ldr	r3, [sp, #24]
 800aad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aad6:	2b47      	cmp	r3, #71	; 0x47
 800aad8:	4680      	mov	r8, r0
 800aada:	d108      	bne.n	800aaee <_printf_float+0x142>
 800aadc:	1cc8      	adds	r0, r1, #3
 800aade:	db02      	blt.n	800aae6 <_printf_float+0x13a>
 800aae0:	6863      	ldr	r3, [r4, #4]
 800aae2:	4299      	cmp	r1, r3
 800aae4:	dd41      	ble.n	800ab6a <_printf_float+0x1be>
 800aae6:	f1ab 0b02 	sub.w	fp, fp, #2
 800aaea:	fa5f fb8b 	uxtb.w	fp, fp
 800aaee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aaf2:	d820      	bhi.n	800ab36 <_printf_float+0x18a>
 800aaf4:	3901      	subs	r1, #1
 800aaf6:	465a      	mov	r2, fp
 800aaf8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aafc:	9109      	str	r1, [sp, #36]	; 0x24
 800aafe:	f7ff ff17 	bl	800a930 <__exponent>
 800ab02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab04:	1813      	adds	r3, r2, r0
 800ab06:	2a01      	cmp	r2, #1
 800ab08:	4681      	mov	r9, r0
 800ab0a:	6123      	str	r3, [r4, #16]
 800ab0c:	dc02      	bgt.n	800ab14 <_printf_float+0x168>
 800ab0e:	6822      	ldr	r2, [r4, #0]
 800ab10:	07d2      	lsls	r2, r2, #31
 800ab12:	d501      	bpl.n	800ab18 <_printf_float+0x16c>
 800ab14:	3301      	adds	r3, #1
 800ab16:	6123      	str	r3, [r4, #16]
 800ab18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d09c      	beq.n	800aa5a <_printf_float+0xae>
 800ab20:	232d      	movs	r3, #45	; 0x2d
 800ab22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab26:	e798      	b.n	800aa5a <_printf_float+0xae>
 800ab28:	9a06      	ldr	r2, [sp, #24]
 800ab2a:	2a47      	cmp	r2, #71	; 0x47
 800ab2c:	d1be      	bne.n	800aaac <_printf_float+0x100>
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1bc      	bne.n	800aaac <_printf_float+0x100>
 800ab32:	2301      	movs	r3, #1
 800ab34:	e7b9      	b.n	800aaaa <_printf_float+0xfe>
 800ab36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab3a:	d118      	bne.n	800ab6e <_printf_float+0x1c2>
 800ab3c:	2900      	cmp	r1, #0
 800ab3e:	6863      	ldr	r3, [r4, #4]
 800ab40:	dd0b      	ble.n	800ab5a <_printf_float+0x1ae>
 800ab42:	6121      	str	r1, [r4, #16]
 800ab44:	b913      	cbnz	r3, 800ab4c <_printf_float+0x1a0>
 800ab46:	6822      	ldr	r2, [r4, #0]
 800ab48:	07d0      	lsls	r0, r2, #31
 800ab4a:	d502      	bpl.n	800ab52 <_printf_float+0x1a6>
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	440b      	add	r3, r1
 800ab50:	6123      	str	r3, [r4, #16]
 800ab52:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab54:	f04f 0900 	mov.w	r9, #0
 800ab58:	e7de      	b.n	800ab18 <_printf_float+0x16c>
 800ab5a:	b913      	cbnz	r3, 800ab62 <_printf_float+0x1b6>
 800ab5c:	6822      	ldr	r2, [r4, #0]
 800ab5e:	07d2      	lsls	r2, r2, #31
 800ab60:	d501      	bpl.n	800ab66 <_printf_float+0x1ba>
 800ab62:	3302      	adds	r3, #2
 800ab64:	e7f4      	b.n	800ab50 <_printf_float+0x1a4>
 800ab66:	2301      	movs	r3, #1
 800ab68:	e7f2      	b.n	800ab50 <_printf_float+0x1a4>
 800ab6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ab6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab70:	4299      	cmp	r1, r3
 800ab72:	db05      	blt.n	800ab80 <_printf_float+0x1d4>
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	6121      	str	r1, [r4, #16]
 800ab78:	07d8      	lsls	r0, r3, #31
 800ab7a:	d5ea      	bpl.n	800ab52 <_printf_float+0x1a6>
 800ab7c:	1c4b      	adds	r3, r1, #1
 800ab7e:	e7e7      	b.n	800ab50 <_printf_float+0x1a4>
 800ab80:	2900      	cmp	r1, #0
 800ab82:	bfd4      	ite	le
 800ab84:	f1c1 0202 	rsble	r2, r1, #2
 800ab88:	2201      	movgt	r2, #1
 800ab8a:	4413      	add	r3, r2
 800ab8c:	e7e0      	b.n	800ab50 <_printf_float+0x1a4>
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	055a      	lsls	r2, r3, #21
 800ab92:	d407      	bmi.n	800aba4 <_printf_float+0x1f8>
 800ab94:	6923      	ldr	r3, [r4, #16]
 800ab96:	4642      	mov	r2, r8
 800ab98:	4631      	mov	r1, r6
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	47b8      	blx	r7
 800ab9e:	3001      	adds	r0, #1
 800aba0:	d12c      	bne.n	800abfc <_printf_float+0x250>
 800aba2:	e764      	b.n	800aa6e <_printf_float+0xc2>
 800aba4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aba8:	f240 80e0 	bls.w	800ad6c <_printf_float+0x3c0>
 800abac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abb0:	2200      	movs	r2, #0
 800abb2:	2300      	movs	r3, #0
 800abb4:	f7f5 ff90 	bl	8000ad8 <__aeabi_dcmpeq>
 800abb8:	2800      	cmp	r0, #0
 800abba:	d034      	beq.n	800ac26 <_printf_float+0x27a>
 800abbc:	4a37      	ldr	r2, [pc, #220]	; (800ac9c <_printf_float+0x2f0>)
 800abbe:	2301      	movs	r3, #1
 800abc0:	4631      	mov	r1, r6
 800abc2:	4628      	mov	r0, r5
 800abc4:	47b8      	blx	r7
 800abc6:	3001      	adds	r0, #1
 800abc8:	f43f af51 	beq.w	800aa6e <_printf_float+0xc2>
 800abcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abd0:	429a      	cmp	r2, r3
 800abd2:	db02      	blt.n	800abda <_printf_float+0x22e>
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	07d8      	lsls	r0, r3, #31
 800abd8:	d510      	bpl.n	800abfc <_printf_float+0x250>
 800abda:	ee18 3a10 	vmov	r3, s16
 800abde:	4652      	mov	r2, sl
 800abe0:	4631      	mov	r1, r6
 800abe2:	4628      	mov	r0, r5
 800abe4:	47b8      	blx	r7
 800abe6:	3001      	adds	r0, #1
 800abe8:	f43f af41 	beq.w	800aa6e <_printf_float+0xc2>
 800abec:	f04f 0800 	mov.w	r8, #0
 800abf0:	f104 091a 	add.w	r9, r4, #26
 800abf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abf6:	3b01      	subs	r3, #1
 800abf8:	4543      	cmp	r3, r8
 800abfa:	dc09      	bgt.n	800ac10 <_printf_float+0x264>
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	079b      	lsls	r3, r3, #30
 800ac00:	f100 8105 	bmi.w	800ae0e <_printf_float+0x462>
 800ac04:	68e0      	ldr	r0, [r4, #12]
 800ac06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac08:	4298      	cmp	r0, r3
 800ac0a:	bfb8      	it	lt
 800ac0c:	4618      	movlt	r0, r3
 800ac0e:	e730      	b.n	800aa72 <_printf_float+0xc6>
 800ac10:	2301      	movs	r3, #1
 800ac12:	464a      	mov	r2, r9
 800ac14:	4631      	mov	r1, r6
 800ac16:	4628      	mov	r0, r5
 800ac18:	47b8      	blx	r7
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	f43f af27 	beq.w	800aa6e <_printf_float+0xc2>
 800ac20:	f108 0801 	add.w	r8, r8, #1
 800ac24:	e7e6      	b.n	800abf4 <_printf_float+0x248>
 800ac26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	dc39      	bgt.n	800aca0 <_printf_float+0x2f4>
 800ac2c:	4a1b      	ldr	r2, [pc, #108]	; (800ac9c <_printf_float+0x2f0>)
 800ac2e:	2301      	movs	r3, #1
 800ac30:	4631      	mov	r1, r6
 800ac32:	4628      	mov	r0, r5
 800ac34:	47b8      	blx	r7
 800ac36:	3001      	adds	r0, #1
 800ac38:	f43f af19 	beq.w	800aa6e <_printf_float+0xc2>
 800ac3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac40:	4313      	orrs	r3, r2
 800ac42:	d102      	bne.n	800ac4a <_printf_float+0x29e>
 800ac44:	6823      	ldr	r3, [r4, #0]
 800ac46:	07d9      	lsls	r1, r3, #31
 800ac48:	d5d8      	bpl.n	800abfc <_printf_float+0x250>
 800ac4a:	ee18 3a10 	vmov	r3, s16
 800ac4e:	4652      	mov	r2, sl
 800ac50:	4631      	mov	r1, r6
 800ac52:	4628      	mov	r0, r5
 800ac54:	47b8      	blx	r7
 800ac56:	3001      	adds	r0, #1
 800ac58:	f43f af09 	beq.w	800aa6e <_printf_float+0xc2>
 800ac5c:	f04f 0900 	mov.w	r9, #0
 800ac60:	f104 0a1a 	add.w	sl, r4, #26
 800ac64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac66:	425b      	negs	r3, r3
 800ac68:	454b      	cmp	r3, r9
 800ac6a:	dc01      	bgt.n	800ac70 <_printf_float+0x2c4>
 800ac6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac6e:	e792      	b.n	800ab96 <_printf_float+0x1ea>
 800ac70:	2301      	movs	r3, #1
 800ac72:	4652      	mov	r2, sl
 800ac74:	4631      	mov	r1, r6
 800ac76:	4628      	mov	r0, r5
 800ac78:	47b8      	blx	r7
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	f43f aef7 	beq.w	800aa6e <_printf_float+0xc2>
 800ac80:	f109 0901 	add.w	r9, r9, #1
 800ac84:	e7ee      	b.n	800ac64 <_printf_float+0x2b8>
 800ac86:	bf00      	nop
 800ac88:	7fefffff 	.word	0x7fefffff
 800ac8c:	0800d960 	.word	0x0800d960
 800ac90:	0800d964 	.word	0x0800d964
 800ac94:	0800d96c 	.word	0x0800d96c
 800ac98:	0800d968 	.word	0x0800d968
 800ac9c:	0800d970 	.word	0x0800d970
 800aca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aca2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aca4:	429a      	cmp	r2, r3
 800aca6:	bfa8      	it	ge
 800aca8:	461a      	movge	r2, r3
 800acaa:	2a00      	cmp	r2, #0
 800acac:	4691      	mov	r9, r2
 800acae:	dc37      	bgt.n	800ad20 <_printf_float+0x374>
 800acb0:	f04f 0b00 	mov.w	fp, #0
 800acb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acb8:	f104 021a 	add.w	r2, r4, #26
 800acbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acbe:	9305      	str	r3, [sp, #20]
 800acc0:	eba3 0309 	sub.w	r3, r3, r9
 800acc4:	455b      	cmp	r3, fp
 800acc6:	dc33      	bgt.n	800ad30 <_printf_float+0x384>
 800acc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800accc:	429a      	cmp	r2, r3
 800acce:	db3b      	blt.n	800ad48 <_printf_float+0x39c>
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	07da      	lsls	r2, r3, #31
 800acd4:	d438      	bmi.n	800ad48 <_printf_float+0x39c>
 800acd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acd8:	9b05      	ldr	r3, [sp, #20]
 800acda:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	eba2 0901 	sub.w	r9, r2, r1
 800ace2:	4599      	cmp	r9, r3
 800ace4:	bfa8      	it	ge
 800ace6:	4699      	movge	r9, r3
 800ace8:	f1b9 0f00 	cmp.w	r9, #0
 800acec:	dc35      	bgt.n	800ad5a <_printf_float+0x3ae>
 800acee:	f04f 0800 	mov.w	r8, #0
 800acf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acf6:	f104 0a1a 	add.w	sl, r4, #26
 800acfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acfe:	1a9b      	subs	r3, r3, r2
 800ad00:	eba3 0309 	sub.w	r3, r3, r9
 800ad04:	4543      	cmp	r3, r8
 800ad06:	f77f af79 	ble.w	800abfc <_printf_float+0x250>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	4652      	mov	r2, sl
 800ad0e:	4631      	mov	r1, r6
 800ad10:	4628      	mov	r0, r5
 800ad12:	47b8      	blx	r7
 800ad14:	3001      	adds	r0, #1
 800ad16:	f43f aeaa 	beq.w	800aa6e <_printf_float+0xc2>
 800ad1a:	f108 0801 	add.w	r8, r8, #1
 800ad1e:	e7ec      	b.n	800acfa <_printf_float+0x34e>
 800ad20:	4613      	mov	r3, r2
 800ad22:	4631      	mov	r1, r6
 800ad24:	4642      	mov	r2, r8
 800ad26:	4628      	mov	r0, r5
 800ad28:	47b8      	blx	r7
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	d1c0      	bne.n	800acb0 <_printf_float+0x304>
 800ad2e:	e69e      	b.n	800aa6e <_printf_float+0xc2>
 800ad30:	2301      	movs	r3, #1
 800ad32:	4631      	mov	r1, r6
 800ad34:	4628      	mov	r0, r5
 800ad36:	9205      	str	r2, [sp, #20]
 800ad38:	47b8      	blx	r7
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	f43f ae97 	beq.w	800aa6e <_printf_float+0xc2>
 800ad40:	9a05      	ldr	r2, [sp, #20]
 800ad42:	f10b 0b01 	add.w	fp, fp, #1
 800ad46:	e7b9      	b.n	800acbc <_printf_float+0x310>
 800ad48:	ee18 3a10 	vmov	r3, s16
 800ad4c:	4652      	mov	r2, sl
 800ad4e:	4631      	mov	r1, r6
 800ad50:	4628      	mov	r0, r5
 800ad52:	47b8      	blx	r7
 800ad54:	3001      	adds	r0, #1
 800ad56:	d1be      	bne.n	800acd6 <_printf_float+0x32a>
 800ad58:	e689      	b.n	800aa6e <_printf_float+0xc2>
 800ad5a:	9a05      	ldr	r2, [sp, #20]
 800ad5c:	464b      	mov	r3, r9
 800ad5e:	4442      	add	r2, r8
 800ad60:	4631      	mov	r1, r6
 800ad62:	4628      	mov	r0, r5
 800ad64:	47b8      	blx	r7
 800ad66:	3001      	adds	r0, #1
 800ad68:	d1c1      	bne.n	800acee <_printf_float+0x342>
 800ad6a:	e680      	b.n	800aa6e <_printf_float+0xc2>
 800ad6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad6e:	2a01      	cmp	r2, #1
 800ad70:	dc01      	bgt.n	800ad76 <_printf_float+0x3ca>
 800ad72:	07db      	lsls	r3, r3, #31
 800ad74:	d538      	bpl.n	800ade8 <_printf_float+0x43c>
 800ad76:	2301      	movs	r3, #1
 800ad78:	4642      	mov	r2, r8
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	47b8      	blx	r7
 800ad80:	3001      	adds	r0, #1
 800ad82:	f43f ae74 	beq.w	800aa6e <_printf_float+0xc2>
 800ad86:	ee18 3a10 	vmov	r3, s16
 800ad8a:	4652      	mov	r2, sl
 800ad8c:	4631      	mov	r1, r6
 800ad8e:	4628      	mov	r0, r5
 800ad90:	47b8      	blx	r7
 800ad92:	3001      	adds	r0, #1
 800ad94:	f43f ae6b 	beq.w	800aa6e <_printf_float+0xc2>
 800ad98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f7f5 fe9a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ada4:	b9d8      	cbnz	r0, 800adde <_printf_float+0x432>
 800ada6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ada8:	f108 0201 	add.w	r2, r8, #1
 800adac:	3b01      	subs	r3, #1
 800adae:	4631      	mov	r1, r6
 800adb0:	4628      	mov	r0, r5
 800adb2:	47b8      	blx	r7
 800adb4:	3001      	adds	r0, #1
 800adb6:	d10e      	bne.n	800add6 <_printf_float+0x42a>
 800adb8:	e659      	b.n	800aa6e <_printf_float+0xc2>
 800adba:	2301      	movs	r3, #1
 800adbc:	4652      	mov	r2, sl
 800adbe:	4631      	mov	r1, r6
 800adc0:	4628      	mov	r0, r5
 800adc2:	47b8      	blx	r7
 800adc4:	3001      	adds	r0, #1
 800adc6:	f43f ae52 	beq.w	800aa6e <_printf_float+0xc2>
 800adca:	f108 0801 	add.w	r8, r8, #1
 800adce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800add0:	3b01      	subs	r3, #1
 800add2:	4543      	cmp	r3, r8
 800add4:	dcf1      	bgt.n	800adba <_printf_float+0x40e>
 800add6:	464b      	mov	r3, r9
 800add8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800addc:	e6dc      	b.n	800ab98 <_printf_float+0x1ec>
 800adde:	f04f 0800 	mov.w	r8, #0
 800ade2:	f104 0a1a 	add.w	sl, r4, #26
 800ade6:	e7f2      	b.n	800adce <_printf_float+0x422>
 800ade8:	2301      	movs	r3, #1
 800adea:	4642      	mov	r2, r8
 800adec:	e7df      	b.n	800adae <_printf_float+0x402>
 800adee:	2301      	movs	r3, #1
 800adf0:	464a      	mov	r2, r9
 800adf2:	4631      	mov	r1, r6
 800adf4:	4628      	mov	r0, r5
 800adf6:	47b8      	blx	r7
 800adf8:	3001      	adds	r0, #1
 800adfa:	f43f ae38 	beq.w	800aa6e <_printf_float+0xc2>
 800adfe:	f108 0801 	add.w	r8, r8, #1
 800ae02:	68e3      	ldr	r3, [r4, #12]
 800ae04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae06:	1a5b      	subs	r3, r3, r1
 800ae08:	4543      	cmp	r3, r8
 800ae0a:	dcf0      	bgt.n	800adee <_printf_float+0x442>
 800ae0c:	e6fa      	b.n	800ac04 <_printf_float+0x258>
 800ae0e:	f04f 0800 	mov.w	r8, #0
 800ae12:	f104 0919 	add.w	r9, r4, #25
 800ae16:	e7f4      	b.n	800ae02 <_printf_float+0x456>

0800ae18 <_printf_common>:
 800ae18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae1c:	4616      	mov	r6, r2
 800ae1e:	4699      	mov	r9, r3
 800ae20:	688a      	ldr	r2, [r1, #8]
 800ae22:	690b      	ldr	r3, [r1, #16]
 800ae24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	bfb8      	it	lt
 800ae2c:	4613      	movlt	r3, r2
 800ae2e:	6033      	str	r3, [r6, #0]
 800ae30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae34:	4607      	mov	r7, r0
 800ae36:	460c      	mov	r4, r1
 800ae38:	b10a      	cbz	r2, 800ae3e <_printf_common+0x26>
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	6033      	str	r3, [r6, #0]
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	0699      	lsls	r1, r3, #26
 800ae42:	bf42      	ittt	mi
 800ae44:	6833      	ldrmi	r3, [r6, #0]
 800ae46:	3302      	addmi	r3, #2
 800ae48:	6033      	strmi	r3, [r6, #0]
 800ae4a:	6825      	ldr	r5, [r4, #0]
 800ae4c:	f015 0506 	ands.w	r5, r5, #6
 800ae50:	d106      	bne.n	800ae60 <_printf_common+0x48>
 800ae52:	f104 0a19 	add.w	sl, r4, #25
 800ae56:	68e3      	ldr	r3, [r4, #12]
 800ae58:	6832      	ldr	r2, [r6, #0]
 800ae5a:	1a9b      	subs	r3, r3, r2
 800ae5c:	42ab      	cmp	r3, r5
 800ae5e:	dc26      	bgt.n	800aeae <_printf_common+0x96>
 800ae60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae64:	1e13      	subs	r3, r2, #0
 800ae66:	6822      	ldr	r2, [r4, #0]
 800ae68:	bf18      	it	ne
 800ae6a:	2301      	movne	r3, #1
 800ae6c:	0692      	lsls	r2, r2, #26
 800ae6e:	d42b      	bmi.n	800aec8 <_printf_common+0xb0>
 800ae70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae74:	4649      	mov	r1, r9
 800ae76:	4638      	mov	r0, r7
 800ae78:	47c0      	blx	r8
 800ae7a:	3001      	adds	r0, #1
 800ae7c:	d01e      	beq.n	800aebc <_printf_common+0xa4>
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	68e5      	ldr	r5, [r4, #12]
 800ae82:	6832      	ldr	r2, [r6, #0]
 800ae84:	f003 0306 	and.w	r3, r3, #6
 800ae88:	2b04      	cmp	r3, #4
 800ae8a:	bf08      	it	eq
 800ae8c:	1aad      	subeq	r5, r5, r2
 800ae8e:	68a3      	ldr	r3, [r4, #8]
 800ae90:	6922      	ldr	r2, [r4, #16]
 800ae92:	bf0c      	ite	eq
 800ae94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae98:	2500      	movne	r5, #0
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	bfc4      	itt	gt
 800ae9e:	1a9b      	subgt	r3, r3, r2
 800aea0:	18ed      	addgt	r5, r5, r3
 800aea2:	2600      	movs	r6, #0
 800aea4:	341a      	adds	r4, #26
 800aea6:	42b5      	cmp	r5, r6
 800aea8:	d11a      	bne.n	800aee0 <_printf_common+0xc8>
 800aeaa:	2000      	movs	r0, #0
 800aeac:	e008      	b.n	800aec0 <_printf_common+0xa8>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	4652      	mov	r2, sl
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	47c0      	blx	r8
 800aeb8:	3001      	adds	r0, #1
 800aeba:	d103      	bne.n	800aec4 <_printf_common+0xac>
 800aebc:	f04f 30ff 	mov.w	r0, #4294967295
 800aec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aec4:	3501      	adds	r5, #1
 800aec6:	e7c6      	b.n	800ae56 <_printf_common+0x3e>
 800aec8:	18e1      	adds	r1, r4, r3
 800aeca:	1c5a      	adds	r2, r3, #1
 800aecc:	2030      	movs	r0, #48	; 0x30
 800aece:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aed2:	4422      	add	r2, r4
 800aed4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aed8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aedc:	3302      	adds	r3, #2
 800aede:	e7c7      	b.n	800ae70 <_printf_common+0x58>
 800aee0:	2301      	movs	r3, #1
 800aee2:	4622      	mov	r2, r4
 800aee4:	4649      	mov	r1, r9
 800aee6:	4638      	mov	r0, r7
 800aee8:	47c0      	blx	r8
 800aeea:	3001      	adds	r0, #1
 800aeec:	d0e6      	beq.n	800aebc <_printf_common+0xa4>
 800aeee:	3601      	adds	r6, #1
 800aef0:	e7d9      	b.n	800aea6 <_printf_common+0x8e>
	...

0800aef4 <_printf_i>:
 800aef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aef8:	460c      	mov	r4, r1
 800aefa:	4691      	mov	r9, r2
 800aefc:	7e27      	ldrb	r7, [r4, #24]
 800aefe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800af00:	2f78      	cmp	r7, #120	; 0x78
 800af02:	4680      	mov	r8, r0
 800af04:	469a      	mov	sl, r3
 800af06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af0a:	d807      	bhi.n	800af1c <_printf_i+0x28>
 800af0c:	2f62      	cmp	r7, #98	; 0x62
 800af0e:	d80a      	bhi.n	800af26 <_printf_i+0x32>
 800af10:	2f00      	cmp	r7, #0
 800af12:	f000 80d8 	beq.w	800b0c6 <_printf_i+0x1d2>
 800af16:	2f58      	cmp	r7, #88	; 0x58
 800af18:	f000 80a3 	beq.w	800b062 <_printf_i+0x16e>
 800af1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800af20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af24:	e03a      	b.n	800af9c <_printf_i+0xa8>
 800af26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af2a:	2b15      	cmp	r3, #21
 800af2c:	d8f6      	bhi.n	800af1c <_printf_i+0x28>
 800af2e:	a001      	add	r0, pc, #4	; (adr r0, 800af34 <_printf_i+0x40>)
 800af30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800af34:	0800af8d 	.word	0x0800af8d
 800af38:	0800afa1 	.word	0x0800afa1
 800af3c:	0800af1d 	.word	0x0800af1d
 800af40:	0800af1d 	.word	0x0800af1d
 800af44:	0800af1d 	.word	0x0800af1d
 800af48:	0800af1d 	.word	0x0800af1d
 800af4c:	0800afa1 	.word	0x0800afa1
 800af50:	0800af1d 	.word	0x0800af1d
 800af54:	0800af1d 	.word	0x0800af1d
 800af58:	0800af1d 	.word	0x0800af1d
 800af5c:	0800af1d 	.word	0x0800af1d
 800af60:	0800b0ad 	.word	0x0800b0ad
 800af64:	0800afd1 	.word	0x0800afd1
 800af68:	0800b08f 	.word	0x0800b08f
 800af6c:	0800af1d 	.word	0x0800af1d
 800af70:	0800af1d 	.word	0x0800af1d
 800af74:	0800b0cf 	.word	0x0800b0cf
 800af78:	0800af1d 	.word	0x0800af1d
 800af7c:	0800afd1 	.word	0x0800afd1
 800af80:	0800af1d 	.word	0x0800af1d
 800af84:	0800af1d 	.word	0x0800af1d
 800af88:	0800b097 	.word	0x0800b097
 800af8c:	680b      	ldr	r3, [r1, #0]
 800af8e:	1d1a      	adds	r2, r3, #4
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	600a      	str	r2, [r1, #0]
 800af94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800af98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af9c:	2301      	movs	r3, #1
 800af9e:	e0a3      	b.n	800b0e8 <_printf_i+0x1f4>
 800afa0:	6825      	ldr	r5, [r4, #0]
 800afa2:	6808      	ldr	r0, [r1, #0]
 800afa4:	062e      	lsls	r6, r5, #24
 800afa6:	f100 0304 	add.w	r3, r0, #4
 800afaa:	d50a      	bpl.n	800afc2 <_printf_i+0xce>
 800afac:	6805      	ldr	r5, [r0, #0]
 800afae:	600b      	str	r3, [r1, #0]
 800afb0:	2d00      	cmp	r5, #0
 800afb2:	da03      	bge.n	800afbc <_printf_i+0xc8>
 800afb4:	232d      	movs	r3, #45	; 0x2d
 800afb6:	426d      	negs	r5, r5
 800afb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afbc:	485e      	ldr	r0, [pc, #376]	; (800b138 <_printf_i+0x244>)
 800afbe:	230a      	movs	r3, #10
 800afc0:	e019      	b.n	800aff6 <_printf_i+0x102>
 800afc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800afc6:	6805      	ldr	r5, [r0, #0]
 800afc8:	600b      	str	r3, [r1, #0]
 800afca:	bf18      	it	ne
 800afcc:	b22d      	sxthne	r5, r5
 800afce:	e7ef      	b.n	800afb0 <_printf_i+0xbc>
 800afd0:	680b      	ldr	r3, [r1, #0]
 800afd2:	6825      	ldr	r5, [r4, #0]
 800afd4:	1d18      	adds	r0, r3, #4
 800afd6:	6008      	str	r0, [r1, #0]
 800afd8:	0628      	lsls	r0, r5, #24
 800afda:	d501      	bpl.n	800afe0 <_printf_i+0xec>
 800afdc:	681d      	ldr	r5, [r3, #0]
 800afde:	e002      	b.n	800afe6 <_printf_i+0xf2>
 800afe0:	0669      	lsls	r1, r5, #25
 800afe2:	d5fb      	bpl.n	800afdc <_printf_i+0xe8>
 800afe4:	881d      	ldrh	r5, [r3, #0]
 800afe6:	4854      	ldr	r0, [pc, #336]	; (800b138 <_printf_i+0x244>)
 800afe8:	2f6f      	cmp	r7, #111	; 0x6f
 800afea:	bf0c      	ite	eq
 800afec:	2308      	moveq	r3, #8
 800afee:	230a      	movne	r3, #10
 800aff0:	2100      	movs	r1, #0
 800aff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aff6:	6866      	ldr	r6, [r4, #4]
 800aff8:	60a6      	str	r6, [r4, #8]
 800affa:	2e00      	cmp	r6, #0
 800affc:	bfa2      	ittt	ge
 800affe:	6821      	ldrge	r1, [r4, #0]
 800b000:	f021 0104 	bicge.w	r1, r1, #4
 800b004:	6021      	strge	r1, [r4, #0]
 800b006:	b90d      	cbnz	r5, 800b00c <_printf_i+0x118>
 800b008:	2e00      	cmp	r6, #0
 800b00a:	d04d      	beq.n	800b0a8 <_printf_i+0x1b4>
 800b00c:	4616      	mov	r6, r2
 800b00e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b012:	fb03 5711 	mls	r7, r3, r1, r5
 800b016:	5dc7      	ldrb	r7, [r0, r7]
 800b018:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b01c:	462f      	mov	r7, r5
 800b01e:	42bb      	cmp	r3, r7
 800b020:	460d      	mov	r5, r1
 800b022:	d9f4      	bls.n	800b00e <_printf_i+0x11a>
 800b024:	2b08      	cmp	r3, #8
 800b026:	d10b      	bne.n	800b040 <_printf_i+0x14c>
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	07df      	lsls	r7, r3, #31
 800b02c:	d508      	bpl.n	800b040 <_printf_i+0x14c>
 800b02e:	6923      	ldr	r3, [r4, #16]
 800b030:	6861      	ldr	r1, [r4, #4]
 800b032:	4299      	cmp	r1, r3
 800b034:	bfde      	ittt	le
 800b036:	2330      	movle	r3, #48	; 0x30
 800b038:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b03c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b040:	1b92      	subs	r2, r2, r6
 800b042:	6122      	str	r2, [r4, #16]
 800b044:	f8cd a000 	str.w	sl, [sp]
 800b048:	464b      	mov	r3, r9
 800b04a:	aa03      	add	r2, sp, #12
 800b04c:	4621      	mov	r1, r4
 800b04e:	4640      	mov	r0, r8
 800b050:	f7ff fee2 	bl	800ae18 <_printf_common>
 800b054:	3001      	adds	r0, #1
 800b056:	d14c      	bne.n	800b0f2 <_printf_i+0x1fe>
 800b058:	f04f 30ff 	mov.w	r0, #4294967295
 800b05c:	b004      	add	sp, #16
 800b05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b062:	4835      	ldr	r0, [pc, #212]	; (800b138 <_printf_i+0x244>)
 800b064:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b068:	6823      	ldr	r3, [r4, #0]
 800b06a:	680e      	ldr	r6, [r1, #0]
 800b06c:	061f      	lsls	r7, r3, #24
 800b06e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b072:	600e      	str	r6, [r1, #0]
 800b074:	d514      	bpl.n	800b0a0 <_printf_i+0x1ac>
 800b076:	07d9      	lsls	r1, r3, #31
 800b078:	bf44      	itt	mi
 800b07a:	f043 0320 	orrmi.w	r3, r3, #32
 800b07e:	6023      	strmi	r3, [r4, #0]
 800b080:	b91d      	cbnz	r5, 800b08a <_printf_i+0x196>
 800b082:	6823      	ldr	r3, [r4, #0]
 800b084:	f023 0320 	bic.w	r3, r3, #32
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	2310      	movs	r3, #16
 800b08c:	e7b0      	b.n	800aff0 <_printf_i+0xfc>
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	f043 0320 	orr.w	r3, r3, #32
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	2378      	movs	r3, #120	; 0x78
 800b098:	4828      	ldr	r0, [pc, #160]	; (800b13c <_printf_i+0x248>)
 800b09a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b09e:	e7e3      	b.n	800b068 <_printf_i+0x174>
 800b0a0:	065e      	lsls	r6, r3, #25
 800b0a2:	bf48      	it	mi
 800b0a4:	b2ad      	uxthmi	r5, r5
 800b0a6:	e7e6      	b.n	800b076 <_printf_i+0x182>
 800b0a8:	4616      	mov	r6, r2
 800b0aa:	e7bb      	b.n	800b024 <_printf_i+0x130>
 800b0ac:	680b      	ldr	r3, [r1, #0]
 800b0ae:	6826      	ldr	r6, [r4, #0]
 800b0b0:	6960      	ldr	r0, [r4, #20]
 800b0b2:	1d1d      	adds	r5, r3, #4
 800b0b4:	600d      	str	r5, [r1, #0]
 800b0b6:	0635      	lsls	r5, r6, #24
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	d501      	bpl.n	800b0c0 <_printf_i+0x1cc>
 800b0bc:	6018      	str	r0, [r3, #0]
 800b0be:	e002      	b.n	800b0c6 <_printf_i+0x1d2>
 800b0c0:	0671      	lsls	r1, r6, #25
 800b0c2:	d5fb      	bpl.n	800b0bc <_printf_i+0x1c8>
 800b0c4:	8018      	strh	r0, [r3, #0]
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	6123      	str	r3, [r4, #16]
 800b0ca:	4616      	mov	r6, r2
 800b0cc:	e7ba      	b.n	800b044 <_printf_i+0x150>
 800b0ce:	680b      	ldr	r3, [r1, #0]
 800b0d0:	1d1a      	adds	r2, r3, #4
 800b0d2:	600a      	str	r2, [r1, #0]
 800b0d4:	681e      	ldr	r6, [r3, #0]
 800b0d6:	6862      	ldr	r2, [r4, #4]
 800b0d8:	2100      	movs	r1, #0
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f7f5 f888 	bl	80001f0 <memchr>
 800b0e0:	b108      	cbz	r0, 800b0e6 <_printf_i+0x1f2>
 800b0e2:	1b80      	subs	r0, r0, r6
 800b0e4:	6060      	str	r0, [r4, #4]
 800b0e6:	6863      	ldr	r3, [r4, #4]
 800b0e8:	6123      	str	r3, [r4, #16]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0f0:	e7a8      	b.n	800b044 <_printf_i+0x150>
 800b0f2:	6923      	ldr	r3, [r4, #16]
 800b0f4:	4632      	mov	r2, r6
 800b0f6:	4649      	mov	r1, r9
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	47d0      	blx	sl
 800b0fc:	3001      	adds	r0, #1
 800b0fe:	d0ab      	beq.n	800b058 <_printf_i+0x164>
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	079b      	lsls	r3, r3, #30
 800b104:	d413      	bmi.n	800b12e <_printf_i+0x23a>
 800b106:	68e0      	ldr	r0, [r4, #12]
 800b108:	9b03      	ldr	r3, [sp, #12]
 800b10a:	4298      	cmp	r0, r3
 800b10c:	bfb8      	it	lt
 800b10e:	4618      	movlt	r0, r3
 800b110:	e7a4      	b.n	800b05c <_printf_i+0x168>
 800b112:	2301      	movs	r3, #1
 800b114:	4632      	mov	r2, r6
 800b116:	4649      	mov	r1, r9
 800b118:	4640      	mov	r0, r8
 800b11a:	47d0      	blx	sl
 800b11c:	3001      	adds	r0, #1
 800b11e:	d09b      	beq.n	800b058 <_printf_i+0x164>
 800b120:	3501      	adds	r5, #1
 800b122:	68e3      	ldr	r3, [r4, #12]
 800b124:	9903      	ldr	r1, [sp, #12]
 800b126:	1a5b      	subs	r3, r3, r1
 800b128:	42ab      	cmp	r3, r5
 800b12a:	dcf2      	bgt.n	800b112 <_printf_i+0x21e>
 800b12c:	e7eb      	b.n	800b106 <_printf_i+0x212>
 800b12e:	2500      	movs	r5, #0
 800b130:	f104 0619 	add.w	r6, r4, #25
 800b134:	e7f5      	b.n	800b122 <_printf_i+0x22e>
 800b136:	bf00      	nop
 800b138:	0800d972 	.word	0x0800d972
 800b13c:	0800d983 	.word	0x0800d983

0800b140 <iprintf>:
 800b140:	b40f      	push	{r0, r1, r2, r3}
 800b142:	4b0a      	ldr	r3, [pc, #40]	; (800b16c <iprintf+0x2c>)
 800b144:	b513      	push	{r0, r1, r4, lr}
 800b146:	681c      	ldr	r4, [r3, #0]
 800b148:	b124      	cbz	r4, 800b154 <iprintf+0x14>
 800b14a:	69a3      	ldr	r3, [r4, #24]
 800b14c:	b913      	cbnz	r3, 800b154 <iprintf+0x14>
 800b14e:	4620      	mov	r0, r4
 800b150:	f7ff fa56 	bl	800a600 <__sinit>
 800b154:	ab05      	add	r3, sp, #20
 800b156:	9a04      	ldr	r2, [sp, #16]
 800b158:	68a1      	ldr	r1, [r4, #8]
 800b15a:	9301      	str	r3, [sp, #4]
 800b15c:	4620      	mov	r0, r4
 800b15e:	f002 f81b 	bl	800d198 <_vfiprintf_r>
 800b162:	b002      	add	sp, #8
 800b164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b168:	b004      	add	sp, #16
 800b16a:	4770      	bx	lr
 800b16c:	2000005c 	.word	0x2000005c

0800b170 <_puts_r>:
 800b170:	b570      	push	{r4, r5, r6, lr}
 800b172:	460e      	mov	r6, r1
 800b174:	4605      	mov	r5, r0
 800b176:	b118      	cbz	r0, 800b180 <_puts_r+0x10>
 800b178:	6983      	ldr	r3, [r0, #24]
 800b17a:	b90b      	cbnz	r3, 800b180 <_puts_r+0x10>
 800b17c:	f7ff fa40 	bl	800a600 <__sinit>
 800b180:	69ab      	ldr	r3, [r5, #24]
 800b182:	68ac      	ldr	r4, [r5, #8]
 800b184:	b913      	cbnz	r3, 800b18c <_puts_r+0x1c>
 800b186:	4628      	mov	r0, r5
 800b188:	f7ff fa3a 	bl	800a600 <__sinit>
 800b18c:	4b2c      	ldr	r3, [pc, #176]	; (800b240 <_puts_r+0xd0>)
 800b18e:	429c      	cmp	r4, r3
 800b190:	d120      	bne.n	800b1d4 <_puts_r+0x64>
 800b192:	686c      	ldr	r4, [r5, #4]
 800b194:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b196:	07db      	lsls	r3, r3, #31
 800b198:	d405      	bmi.n	800b1a6 <_puts_r+0x36>
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	0598      	lsls	r0, r3, #22
 800b19e:	d402      	bmi.n	800b1a6 <_puts_r+0x36>
 800b1a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1a2:	f7ff faf0 	bl	800a786 <__retarget_lock_acquire_recursive>
 800b1a6:	89a3      	ldrh	r3, [r4, #12]
 800b1a8:	0719      	lsls	r1, r3, #28
 800b1aa:	d51d      	bpl.n	800b1e8 <_puts_r+0x78>
 800b1ac:	6923      	ldr	r3, [r4, #16]
 800b1ae:	b1db      	cbz	r3, 800b1e8 <_puts_r+0x78>
 800b1b0:	3e01      	subs	r6, #1
 800b1b2:	68a3      	ldr	r3, [r4, #8]
 800b1b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	60a3      	str	r3, [r4, #8]
 800b1bc:	bb39      	cbnz	r1, 800b20e <_puts_r+0x9e>
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	da38      	bge.n	800b234 <_puts_r+0xc4>
 800b1c2:	4622      	mov	r2, r4
 800b1c4:	210a      	movs	r1, #10
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	f000 f9d8 	bl	800b57c <__swbuf_r>
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	d011      	beq.n	800b1f4 <_puts_r+0x84>
 800b1d0:	250a      	movs	r5, #10
 800b1d2:	e011      	b.n	800b1f8 <_puts_r+0x88>
 800b1d4:	4b1b      	ldr	r3, [pc, #108]	; (800b244 <_puts_r+0xd4>)
 800b1d6:	429c      	cmp	r4, r3
 800b1d8:	d101      	bne.n	800b1de <_puts_r+0x6e>
 800b1da:	68ac      	ldr	r4, [r5, #8]
 800b1dc:	e7da      	b.n	800b194 <_puts_r+0x24>
 800b1de:	4b1a      	ldr	r3, [pc, #104]	; (800b248 <_puts_r+0xd8>)
 800b1e0:	429c      	cmp	r4, r3
 800b1e2:	bf08      	it	eq
 800b1e4:	68ec      	ldreq	r4, [r5, #12]
 800b1e6:	e7d5      	b.n	800b194 <_puts_r+0x24>
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	f000 fa2a 	bl	800b644 <__swsetup_r>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d0dd      	beq.n	800b1b0 <_puts_r+0x40>
 800b1f4:	f04f 35ff 	mov.w	r5, #4294967295
 800b1f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1fa:	07da      	lsls	r2, r3, #31
 800b1fc:	d405      	bmi.n	800b20a <_puts_r+0x9a>
 800b1fe:	89a3      	ldrh	r3, [r4, #12]
 800b200:	059b      	lsls	r3, r3, #22
 800b202:	d402      	bmi.n	800b20a <_puts_r+0x9a>
 800b204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b206:	f7ff fabf 	bl	800a788 <__retarget_lock_release_recursive>
 800b20a:	4628      	mov	r0, r5
 800b20c:	bd70      	pop	{r4, r5, r6, pc}
 800b20e:	2b00      	cmp	r3, #0
 800b210:	da04      	bge.n	800b21c <_puts_r+0xac>
 800b212:	69a2      	ldr	r2, [r4, #24]
 800b214:	429a      	cmp	r2, r3
 800b216:	dc06      	bgt.n	800b226 <_puts_r+0xb6>
 800b218:	290a      	cmp	r1, #10
 800b21a:	d004      	beq.n	800b226 <_puts_r+0xb6>
 800b21c:	6823      	ldr	r3, [r4, #0]
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	6022      	str	r2, [r4, #0]
 800b222:	7019      	strb	r1, [r3, #0]
 800b224:	e7c5      	b.n	800b1b2 <_puts_r+0x42>
 800b226:	4622      	mov	r2, r4
 800b228:	4628      	mov	r0, r5
 800b22a:	f000 f9a7 	bl	800b57c <__swbuf_r>
 800b22e:	3001      	adds	r0, #1
 800b230:	d1bf      	bne.n	800b1b2 <_puts_r+0x42>
 800b232:	e7df      	b.n	800b1f4 <_puts_r+0x84>
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	250a      	movs	r5, #10
 800b238:	1c5a      	adds	r2, r3, #1
 800b23a:	6022      	str	r2, [r4, #0]
 800b23c:	701d      	strb	r5, [r3, #0]
 800b23e:	e7db      	b.n	800b1f8 <_puts_r+0x88>
 800b240:	0800d91c 	.word	0x0800d91c
 800b244:	0800d93c 	.word	0x0800d93c
 800b248:	0800d8fc 	.word	0x0800d8fc

0800b24c <puts>:
 800b24c:	4b02      	ldr	r3, [pc, #8]	; (800b258 <puts+0xc>)
 800b24e:	4601      	mov	r1, r0
 800b250:	6818      	ldr	r0, [r3, #0]
 800b252:	f7ff bf8d 	b.w	800b170 <_puts_r>
 800b256:	bf00      	nop
 800b258:	2000005c 	.word	0x2000005c

0800b25c <cleanup_glue>:
 800b25c:	b538      	push	{r3, r4, r5, lr}
 800b25e:	460c      	mov	r4, r1
 800b260:	6809      	ldr	r1, [r1, #0]
 800b262:	4605      	mov	r5, r0
 800b264:	b109      	cbz	r1, 800b26a <cleanup_glue+0xe>
 800b266:	f7ff fff9 	bl	800b25c <cleanup_glue>
 800b26a:	4621      	mov	r1, r4
 800b26c:	4628      	mov	r0, r5
 800b26e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b272:	f001 bdbb 	b.w	800cdec <_free_r>
	...

0800b278 <_reclaim_reent>:
 800b278:	4b2c      	ldr	r3, [pc, #176]	; (800b32c <_reclaim_reent+0xb4>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4283      	cmp	r3, r0
 800b27e:	b570      	push	{r4, r5, r6, lr}
 800b280:	4604      	mov	r4, r0
 800b282:	d051      	beq.n	800b328 <_reclaim_reent+0xb0>
 800b284:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b286:	b143      	cbz	r3, 800b29a <_reclaim_reent+0x22>
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d14a      	bne.n	800b324 <_reclaim_reent+0xac>
 800b28e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b290:	6819      	ldr	r1, [r3, #0]
 800b292:	b111      	cbz	r1, 800b29a <_reclaim_reent+0x22>
 800b294:	4620      	mov	r0, r4
 800b296:	f001 fda9 	bl	800cdec <_free_r>
 800b29a:	6961      	ldr	r1, [r4, #20]
 800b29c:	b111      	cbz	r1, 800b2a4 <_reclaim_reent+0x2c>
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f001 fda4 	bl	800cdec <_free_r>
 800b2a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b2a6:	b111      	cbz	r1, 800b2ae <_reclaim_reent+0x36>
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f001 fd9f 	bl	800cdec <_free_r>
 800b2ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b2b0:	b111      	cbz	r1, 800b2b8 <_reclaim_reent+0x40>
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f001 fd9a 	bl	800cdec <_free_r>
 800b2b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b2ba:	b111      	cbz	r1, 800b2c2 <_reclaim_reent+0x4a>
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f001 fd95 	bl	800cdec <_free_r>
 800b2c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b2c4:	b111      	cbz	r1, 800b2cc <_reclaim_reent+0x54>
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f001 fd90 	bl	800cdec <_free_r>
 800b2cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b2ce:	b111      	cbz	r1, 800b2d6 <_reclaim_reent+0x5e>
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f001 fd8b 	bl	800cdec <_free_r>
 800b2d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b2d8:	b111      	cbz	r1, 800b2e0 <_reclaim_reent+0x68>
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f001 fd86 	bl	800cdec <_free_r>
 800b2e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2e2:	b111      	cbz	r1, 800b2ea <_reclaim_reent+0x72>
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f001 fd81 	bl	800cdec <_free_r>
 800b2ea:	69a3      	ldr	r3, [r4, #24]
 800b2ec:	b1e3      	cbz	r3, 800b328 <_reclaim_reent+0xb0>
 800b2ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	4798      	blx	r3
 800b2f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b2f6:	b1b9      	cbz	r1, 800b328 <_reclaim_reent+0xb0>
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2fe:	f7ff bfad 	b.w	800b25c <cleanup_glue>
 800b302:	5949      	ldr	r1, [r1, r5]
 800b304:	b941      	cbnz	r1, 800b318 <_reclaim_reent+0xa0>
 800b306:	3504      	adds	r5, #4
 800b308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b30a:	2d80      	cmp	r5, #128	; 0x80
 800b30c:	68d9      	ldr	r1, [r3, #12]
 800b30e:	d1f8      	bne.n	800b302 <_reclaim_reent+0x8a>
 800b310:	4620      	mov	r0, r4
 800b312:	f001 fd6b 	bl	800cdec <_free_r>
 800b316:	e7ba      	b.n	800b28e <_reclaim_reent+0x16>
 800b318:	680e      	ldr	r6, [r1, #0]
 800b31a:	4620      	mov	r0, r4
 800b31c:	f001 fd66 	bl	800cdec <_free_r>
 800b320:	4631      	mov	r1, r6
 800b322:	e7ef      	b.n	800b304 <_reclaim_reent+0x8c>
 800b324:	2500      	movs	r5, #0
 800b326:	e7ef      	b.n	800b308 <_reclaim_reent+0x90>
 800b328:	bd70      	pop	{r4, r5, r6, pc}
 800b32a:	bf00      	nop
 800b32c:	2000005c 	.word	0x2000005c

0800b330 <_sbrk_r>:
 800b330:	b538      	push	{r3, r4, r5, lr}
 800b332:	4d06      	ldr	r5, [pc, #24]	; (800b34c <_sbrk_r+0x1c>)
 800b334:	2300      	movs	r3, #0
 800b336:	4604      	mov	r4, r0
 800b338:	4608      	mov	r0, r1
 800b33a:	602b      	str	r3, [r5, #0]
 800b33c:	f7f8 f8f4 	bl	8003528 <_sbrk>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	d102      	bne.n	800b34a <_sbrk_r+0x1a>
 800b344:	682b      	ldr	r3, [r5, #0]
 800b346:	b103      	cbz	r3, 800b34a <_sbrk_r+0x1a>
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	bd38      	pop	{r3, r4, r5, pc}
 800b34c:	20005228 	.word	0x20005228

0800b350 <siprintf>:
 800b350:	b40e      	push	{r1, r2, r3}
 800b352:	b500      	push	{lr}
 800b354:	b09c      	sub	sp, #112	; 0x70
 800b356:	ab1d      	add	r3, sp, #116	; 0x74
 800b358:	9002      	str	r0, [sp, #8]
 800b35a:	9006      	str	r0, [sp, #24]
 800b35c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b360:	4809      	ldr	r0, [pc, #36]	; (800b388 <siprintf+0x38>)
 800b362:	9107      	str	r1, [sp, #28]
 800b364:	9104      	str	r1, [sp, #16]
 800b366:	4909      	ldr	r1, [pc, #36]	; (800b38c <siprintf+0x3c>)
 800b368:	f853 2b04 	ldr.w	r2, [r3], #4
 800b36c:	9105      	str	r1, [sp, #20]
 800b36e:	6800      	ldr	r0, [r0, #0]
 800b370:	9301      	str	r3, [sp, #4]
 800b372:	a902      	add	r1, sp, #8
 800b374:	f001 fde6 	bl	800cf44 <_svfiprintf_r>
 800b378:	9b02      	ldr	r3, [sp, #8]
 800b37a:	2200      	movs	r2, #0
 800b37c:	701a      	strb	r2, [r3, #0]
 800b37e:	b01c      	add	sp, #112	; 0x70
 800b380:	f85d eb04 	ldr.w	lr, [sp], #4
 800b384:	b003      	add	sp, #12
 800b386:	4770      	bx	lr
 800b388:	2000005c 	.word	0x2000005c
 800b38c:	ffff0208 	.word	0xffff0208

0800b390 <__sread>:
 800b390:	b510      	push	{r4, lr}
 800b392:	460c      	mov	r4, r1
 800b394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b398:	f002 f82e 	bl	800d3f8 <_read_r>
 800b39c:	2800      	cmp	r0, #0
 800b39e:	bfab      	itete	ge
 800b3a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3a2:	89a3      	ldrhlt	r3, [r4, #12]
 800b3a4:	181b      	addge	r3, r3, r0
 800b3a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3aa:	bfac      	ite	ge
 800b3ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3ae:	81a3      	strhlt	r3, [r4, #12]
 800b3b0:	bd10      	pop	{r4, pc}

0800b3b2 <__swrite>:
 800b3b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b6:	461f      	mov	r7, r3
 800b3b8:	898b      	ldrh	r3, [r1, #12]
 800b3ba:	05db      	lsls	r3, r3, #23
 800b3bc:	4605      	mov	r5, r0
 800b3be:	460c      	mov	r4, r1
 800b3c0:	4616      	mov	r6, r2
 800b3c2:	d505      	bpl.n	800b3d0 <__swrite+0x1e>
 800b3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c8:	2302      	movs	r3, #2
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f001 f8f6 	bl	800c5bc <_lseek_r>
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3da:	81a3      	strh	r3, [r4, #12]
 800b3dc:	4632      	mov	r2, r6
 800b3de:	463b      	mov	r3, r7
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e6:	f000 b91b 	b.w	800b620 <_write_r>

0800b3ea <__sseek>:
 800b3ea:	b510      	push	{r4, lr}
 800b3ec:	460c      	mov	r4, r1
 800b3ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f2:	f001 f8e3 	bl	800c5bc <_lseek_r>
 800b3f6:	1c43      	adds	r3, r0, #1
 800b3f8:	89a3      	ldrh	r3, [r4, #12]
 800b3fa:	bf15      	itete	ne
 800b3fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b406:	81a3      	strheq	r3, [r4, #12]
 800b408:	bf18      	it	ne
 800b40a:	81a3      	strhne	r3, [r4, #12]
 800b40c:	bd10      	pop	{r4, pc}

0800b40e <__sclose>:
 800b40e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b412:	f000 b985 	b.w	800b720 <_close_r>

0800b416 <strncmp>:
 800b416:	b510      	push	{r4, lr}
 800b418:	b16a      	cbz	r2, 800b436 <strncmp+0x20>
 800b41a:	3901      	subs	r1, #1
 800b41c:	1884      	adds	r4, r0, r2
 800b41e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b422:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b426:	4293      	cmp	r3, r2
 800b428:	d103      	bne.n	800b432 <strncmp+0x1c>
 800b42a:	42a0      	cmp	r0, r4
 800b42c:	d001      	beq.n	800b432 <strncmp+0x1c>
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1f5      	bne.n	800b41e <strncmp+0x8>
 800b432:	1a98      	subs	r0, r3, r2
 800b434:	bd10      	pop	{r4, pc}
 800b436:	4610      	mov	r0, r2
 800b438:	e7fc      	b.n	800b434 <strncmp+0x1e>

0800b43a <strncpy>:
 800b43a:	b510      	push	{r4, lr}
 800b43c:	3901      	subs	r1, #1
 800b43e:	4603      	mov	r3, r0
 800b440:	b132      	cbz	r2, 800b450 <strncpy+0x16>
 800b442:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b446:	f803 4b01 	strb.w	r4, [r3], #1
 800b44a:	3a01      	subs	r2, #1
 800b44c:	2c00      	cmp	r4, #0
 800b44e:	d1f7      	bne.n	800b440 <strncpy+0x6>
 800b450:	441a      	add	r2, r3
 800b452:	2100      	movs	r1, #0
 800b454:	4293      	cmp	r3, r2
 800b456:	d100      	bne.n	800b45a <strncpy+0x20>
 800b458:	bd10      	pop	{r4, pc}
 800b45a:	f803 1b01 	strb.w	r1, [r3], #1
 800b45e:	e7f9      	b.n	800b454 <strncpy+0x1a>

0800b460 <_strtol_l.isra.0>:
 800b460:	2b01      	cmp	r3, #1
 800b462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b466:	d001      	beq.n	800b46c <_strtol_l.isra.0+0xc>
 800b468:	2b24      	cmp	r3, #36	; 0x24
 800b46a:	d906      	bls.n	800b47a <_strtol_l.isra.0+0x1a>
 800b46c:	f7ff f86a 	bl	800a544 <__errno>
 800b470:	2316      	movs	r3, #22
 800b472:	6003      	str	r3, [r0, #0]
 800b474:	2000      	movs	r0, #0
 800b476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b47a:	4f3a      	ldr	r7, [pc, #232]	; (800b564 <_strtol_l.isra.0+0x104>)
 800b47c:	468e      	mov	lr, r1
 800b47e:	4676      	mov	r6, lr
 800b480:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b484:	5de5      	ldrb	r5, [r4, r7]
 800b486:	f015 0508 	ands.w	r5, r5, #8
 800b48a:	d1f8      	bne.n	800b47e <_strtol_l.isra.0+0x1e>
 800b48c:	2c2d      	cmp	r4, #45	; 0x2d
 800b48e:	d134      	bne.n	800b4fa <_strtol_l.isra.0+0x9a>
 800b490:	f89e 4000 	ldrb.w	r4, [lr]
 800b494:	f04f 0801 	mov.w	r8, #1
 800b498:	f106 0e02 	add.w	lr, r6, #2
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d05c      	beq.n	800b55a <_strtol_l.isra.0+0xfa>
 800b4a0:	2b10      	cmp	r3, #16
 800b4a2:	d10c      	bne.n	800b4be <_strtol_l.isra.0+0x5e>
 800b4a4:	2c30      	cmp	r4, #48	; 0x30
 800b4a6:	d10a      	bne.n	800b4be <_strtol_l.isra.0+0x5e>
 800b4a8:	f89e 4000 	ldrb.w	r4, [lr]
 800b4ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b4b0:	2c58      	cmp	r4, #88	; 0x58
 800b4b2:	d14d      	bne.n	800b550 <_strtol_l.isra.0+0xf0>
 800b4b4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b4b8:	2310      	movs	r3, #16
 800b4ba:	f10e 0e02 	add.w	lr, lr, #2
 800b4be:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b4c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b4c6:	2600      	movs	r6, #0
 800b4c8:	fbbc f9f3 	udiv	r9, ip, r3
 800b4cc:	4635      	mov	r5, r6
 800b4ce:	fb03 ca19 	mls	sl, r3, r9, ip
 800b4d2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b4d6:	2f09      	cmp	r7, #9
 800b4d8:	d818      	bhi.n	800b50c <_strtol_l.isra.0+0xac>
 800b4da:	463c      	mov	r4, r7
 800b4dc:	42a3      	cmp	r3, r4
 800b4de:	dd24      	ble.n	800b52a <_strtol_l.isra.0+0xca>
 800b4e0:	2e00      	cmp	r6, #0
 800b4e2:	db1f      	blt.n	800b524 <_strtol_l.isra.0+0xc4>
 800b4e4:	45a9      	cmp	r9, r5
 800b4e6:	d31d      	bcc.n	800b524 <_strtol_l.isra.0+0xc4>
 800b4e8:	d101      	bne.n	800b4ee <_strtol_l.isra.0+0x8e>
 800b4ea:	45a2      	cmp	sl, r4
 800b4ec:	db1a      	blt.n	800b524 <_strtol_l.isra.0+0xc4>
 800b4ee:	fb05 4503 	mla	r5, r5, r3, r4
 800b4f2:	2601      	movs	r6, #1
 800b4f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b4f8:	e7eb      	b.n	800b4d2 <_strtol_l.isra.0+0x72>
 800b4fa:	2c2b      	cmp	r4, #43	; 0x2b
 800b4fc:	bf08      	it	eq
 800b4fe:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b502:	46a8      	mov	r8, r5
 800b504:	bf08      	it	eq
 800b506:	f106 0e02 	addeq.w	lr, r6, #2
 800b50a:	e7c7      	b.n	800b49c <_strtol_l.isra.0+0x3c>
 800b50c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b510:	2f19      	cmp	r7, #25
 800b512:	d801      	bhi.n	800b518 <_strtol_l.isra.0+0xb8>
 800b514:	3c37      	subs	r4, #55	; 0x37
 800b516:	e7e1      	b.n	800b4dc <_strtol_l.isra.0+0x7c>
 800b518:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b51c:	2f19      	cmp	r7, #25
 800b51e:	d804      	bhi.n	800b52a <_strtol_l.isra.0+0xca>
 800b520:	3c57      	subs	r4, #87	; 0x57
 800b522:	e7db      	b.n	800b4dc <_strtol_l.isra.0+0x7c>
 800b524:	f04f 36ff 	mov.w	r6, #4294967295
 800b528:	e7e4      	b.n	800b4f4 <_strtol_l.isra.0+0x94>
 800b52a:	2e00      	cmp	r6, #0
 800b52c:	da05      	bge.n	800b53a <_strtol_l.isra.0+0xda>
 800b52e:	2322      	movs	r3, #34	; 0x22
 800b530:	6003      	str	r3, [r0, #0]
 800b532:	4665      	mov	r5, ip
 800b534:	b942      	cbnz	r2, 800b548 <_strtol_l.isra.0+0xe8>
 800b536:	4628      	mov	r0, r5
 800b538:	e79d      	b.n	800b476 <_strtol_l.isra.0+0x16>
 800b53a:	f1b8 0f00 	cmp.w	r8, #0
 800b53e:	d000      	beq.n	800b542 <_strtol_l.isra.0+0xe2>
 800b540:	426d      	negs	r5, r5
 800b542:	2a00      	cmp	r2, #0
 800b544:	d0f7      	beq.n	800b536 <_strtol_l.isra.0+0xd6>
 800b546:	b10e      	cbz	r6, 800b54c <_strtol_l.isra.0+0xec>
 800b548:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b54c:	6011      	str	r1, [r2, #0]
 800b54e:	e7f2      	b.n	800b536 <_strtol_l.isra.0+0xd6>
 800b550:	2430      	movs	r4, #48	; 0x30
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1b3      	bne.n	800b4be <_strtol_l.isra.0+0x5e>
 800b556:	2308      	movs	r3, #8
 800b558:	e7b1      	b.n	800b4be <_strtol_l.isra.0+0x5e>
 800b55a:	2c30      	cmp	r4, #48	; 0x30
 800b55c:	d0a4      	beq.n	800b4a8 <_strtol_l.isra.0+0x48>
 800b55e:	230a      	movs	r3, #10
 800b560:	e7ad      	b.n	800b4be <_strtol_l.isra.0+0x5e>
 800b562:	bf00      	nop
 800b564:	0800d995 	.word	0x0800d995

0800b568 <strtol>:
 800b568:	4613      	mov	r3, r2
 800b56a:	460a      	mov	r2, r1
 800b56c:	4601      	mov	r1, r0
 800b56e:	4802      	ldr	r0, [pc, #8]	; (800b578 <strtol+0x10>)
 800b570:	6800      	ldr	r0, [r0, #0]
 800b572:	f7ff bf75 	b.w	800b460 <_strtol_l.isra.0>
 800b576:	bf00      	nop
 800b578:	2000005c 	.word	0x2000005c

0800b57c <__swbuf_r>:
 800b57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b57e:	460e      	mov	r6, r1
 800b580:	4614      	mov	r4, r2
 800b582:	4605      	mov	r5, r0
 800b584:	b118      	cbz	r0, 800b58e <__swbuf_r+0x12>
 800b586:	6983      	ldr	r3, [r0, #24]
 800b588:	b90b      	cbnz	r3, 800b58e <__swbuf_r+0x12>
 800b58a:	f7ff f839 	bl	800a600 <__sinit>
 800b58e:	4b21      	ldr	r3, [pc, #132]	; (800b614 <__swbuf_r+0x98>)
 800b590:	429c      	cmp	r4, r3
 800b592:	d12b      	bne.n	800b5ec <__swbuf_r+0x70>
 800b594:	686c      	ldr	r4, [r5, #4]
 800b596:	69a3      	ldr	r3, [r4, #24]
 800b598:	60a3      	str	r3, [r4, #8]
 800b59a:	89a3      	ldrh	r3, [r4, #12]
 800b59c:	071a      	lsls	r2, r3, #28
 800b59e:	d52f      	bpl.n	800b600 <__swbuf_r+0x84>
 800b5a0:	6923      	ldr	r3, [r4, #16]
 800b5a2:	b36b      	cbz	r3, 800b600 <__swbuf_r+0x84>
 800b5a4:	6923      	ldr	r3, [r4, #16]
 800b5a6:	6820      	ldr	r0, [r4, #0]
 800b5a8:	1ac0      	subs	r0, r0, r3
 800b5aa:	6963      	ldr	r3, [r4, #20]
 800b5ac:	b2f6      	uxtb	r6, r6
 800b5ae:	4283      	cmp	r3, r0
 800b5b0:	4637      	mov	r7, r6
 800b5b2:	dc04      	bgt.n	800b5be <__swbuf_r+0x42>
 800b5b4:	4621      	mov	r1, r4
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	f000 ffc0 	bl	800c53c <_fflush_r>
 800b5bc:	bb30      	cbnz	r0, 800b60c <__swbuf_r+0x90>
 800b5be:	68a3      	ldr	r3, [r4, #8]
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	60a3      	str	r3, [r4, #8]
 800b5c4:	6823      	ldr	r3, [r4, #0]
 800b5c6:	1c5a      	adds	r2, r3, #1
 800b5c8:	6022      	str	r2, [r4, #0]
 800b5ca:	701e      	strb	r6, [r3, #0]
 800b5cc:	6963      	ldr	r3, [r4, #20]
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	4283      	cmp	r3, r0
 800b5d2:	d004      	beq.n	800b5de <__swbuf_r+0x62>
 800b5d4:	89a3      	ldrh	r3, [r4, #12]
 800b5d6:	07db      	lsls	r3, r3, #31
 800b5d8:	d506      	bpl.n	800b5e8 <__swbuf_r+0x6c>
 800b5da:	2e0a      	cmp	r6, #10
 800b5dc:	d104      	bne.n	800b5e8 <__swbuf_r+0x6c>
 800b5de:	4621      	mov	r1, r4
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	f000 ffab 	bl	800c53c <_fflush_r>
 800b5e6:	b988      	cbnz	r0, 800b60c <__swbuf_r+0x90>
 800b5e8:	4638      	mov	r0, r7
 800b5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5ec:	4b0a      	ldr	r3, [pc, #40]	; (800b618 <__swbuf_r+0x9c>)
 800b5ee:	429c      	cmp	r4, r3
 800b5f0:	d101      	bne.n	800b5f6 <__swbuf_r+0x7a>
 800b5f2:	68ac      	ldr	r4, [r5, #8]
 800b5f4:	e7cf      	b.n	800b596 <__swbuf_r+0x1a>
 800b5f6:	4b09      	ldr	r3, [pc, #36]	; (800b61c <__swbuf_r+0xa0>)
 800b5f8:	429c      	cmp	r4, r3
 800b5fa:	bf08      	it	eq
 800b5fc:	68ec      	ldreq	r4, [r5, #12]
 800b5fe:	e7ca      	b.n	800b596 <__swbuf_r+0x1a>
 800b600:	4621      	mov	r1, r4
 800b602:	4628      	mov	r0, r5
 800b604:	f000 f81e 	bl	800b644 <__swsetup_r>
 800b608:	2800      	cmp	r0, #0
 800b60a:	d0cb      	beq.n	800b5a4 <__swbuf_r+0x28>
 800b60c:	f04f 37ff 	mov.w	r7, #4294967295
 800b610:	e7ea      	b.n	800b5e8 <__swbuf_r+0x6c>
 800b612:	bf00      	nop
 800b614:	0800d91c 	.word	0x0800d91c
 800b618:	0800d93c 	.word	0x0800d93c
 800b61c:	0800d8fc 	.word	0x0800d8fc

0800b620 <_write_r>:
 800b620:	b538      	push	{r3, r4, r5, lr}
 800b622:	4d07      	ldr	r5, [pc, #28]	; (800b640 <_write_r+0x20>)
 800b624:	4604      	mov	r4, r0
 800b626:	4608      	mov	r0, r1
 800b628:	4611      	mov	r1, r2
 800b62a:	2200      	movs	r2, #0
 800b62c:	602a      	str	r2, [r5, #0]
 800b62e:	461a      	mov	r2, r3
 800b630:	f7f7 ff29 	bl	8003486 <_write>
 800b634:	1c43      	adds	r3, r0, #1
 800b636:	d102      	bne.n	800b63e <_write_r+0x1e>
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	b103      	cbz	r3, 800b63e <_write_r+0x1e>
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	bd38      	pop	{r3, r4, r5, pc}
 800b640:	20005228 	.word	0x20005228

0800b644 <__swsetup_r>:
 800b644:	4b32      	ldr	r3, [pc, #200]	; (800b710 <__swsetup_r+0xcc>)
 800b646:	b570      	push	{r4, r5, r6, lr}
 800b648:	681d      	ldr	r5, [r3, #0]
 800b64a:	4606      	mov	r6, r0
 800b64c:	460c      	mov	r4, r1
 800b64e:	b125      	cbz	r5, 800b65a <__swsetup_r+0x16>
 800b650:	69ab      	ldr	r3, [r5, #24]
 800b652:	b913      	cbnz	r3, 800b65a <__swsetup_r+0x16>
 800b654:	4628      	mov	r0, r5
 800b656:	f7fe ffd3 	bl	800a600 <__sinit>
 800b65a:	4b2e      	ldr	r3, [pc, #184]	; (800b714 <__swsetup_r+0xd0>)
 800b65c:	429c      	cmp	r4, r3
 800b65e:	d10f      	bne.n	800b680 <__swsetup_r+0x3c>
 800b660:	686c      	ldr	r4, [r5, #4]
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b668:	0719      	lsls	r1, r3, #28
 800b66a:	d42c      	bmi.n	800b6c6 <__swsetup_r+0x82>
 800b66c:	06dd      	lsls	r5, r3, #27
 800b66e:	d411      	bmi.n	800b694 <__swsetup_r+0x50>
 800b670:	2309      	movs	r3, #9
 800b672:	6033      	str	r3, [r6, #0]
 800b674:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b678:	81a3      	strh	r3, [r4, #12]
 800b67a:	f04f 30ff 	mov.w	r0, #4294967295
 800b67e:	e03e      	b.n	800b6fe <__swsetup_r+0xba>
 800b680:	4b25      	ldr	r3, [pc, #148]	; (800b718 <__swsetup_r+0xd4>)
 800b682:	429c      	cmp	r4, r3
 800b684:	d101      	bne.n	800b68a <__swsetup_r+0x46>
 800b686:	68ac      	ldr	r4, [r5, #8]
 800b688:	e7eb      	b.n	800b662 <__swsetup_r+0x1e>
 800b68a:	4b24      	ldr	r3, [pc, #144]	; (800b71c <__swsetup_r+0xd8>)
 800b68c:	429c      	cmp	r4, r3
 800b68e:	bf08      	it	eq
 800b690:	68ec      	ldreq	r4, [r5, #12]
 800b692:	e7e6      	b.n	800b662 <__swsetup_r+0x1e>
 800b694:	0758      	lsls	r0, r3, #29
 800b696:	d512      	bpl.n	800b6be <__swsetup_r+0x7a>
 800b698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b69a:	b141      	cbz	r1, 800b6ae <__swsetup_r+0x6a>
 800b69c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6a0:	4299      	cmp	r1, r3
 800b6a2:	d002      	beq.n	800b6aa <__swsetup_r+0x66>
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	f001 fba1 	bl	800cdec <_free_r>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	6363      	str	r3, [r4, #52]	; 0x34
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6b4:	81a3      	strh	r3, [r4, #12]
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	6063      	str	r3, [r4, #4]
 800b6ba:	6923      	ldr	r3, [r4, #16]
 800b6bc:	6023      	str	r3, [r4, #0]
 800b6be:	89a3      	ldrh	r3, [r4, #12]
 800b6c0:	f043 0308 	orr.w	r3, r3, #8
 800b6c4:	81a3      	strh	r3, [r4, #12]
 800b6c6:	6923      	ldr	r3, [r4, #16]
 800b6c8:	b94b      	cbnz	r3, 800b6de <__swsetup_r+0x9a>
 800b6ca:	89a3      	ldrh	r3, [r4, #12]
 800b6cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6d4:	d003      	beq.n	800b6de <__swsetup_r+0x9a>
 800b6d6:	4621      	mov	r1, r4
 800b6d8:	4630      	mov	r0, r6
 800b6da:	f000 ffa5 	bl	800c628 <__smakebuf_r>
 800b6de:	89a0      	ldrh	r0, [r4, #12]
 800b6e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6e4:	f010 0301 	ands.w	r3, r0, #1
 800b6e8:	d00a      	beq.n	800b700 <__swsetup_r+0xbc>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	60a3      	str	r3, [r4, #8]
 800b6ee:	6963      	ldr	r3, [r4, #20]
 800b6f0:	425b      	negs	r3, r3
 800b6f2:	61a3      	str	r3, [r4, #24]
 800b6f4:	6923      	ldr	r3, [r4, #16]
 800b6f6:	b943      	cbnz	r3, 800b70a <__swsetup_r+0xc6>
 800b6f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6fc:	d1ba      	bne.n	800b674 <__swsetup_r+0x30>
 800b6fe:	bd70      	pop	{r4, r5, r6, pc}
 800b700:	0781      	lsls	r1, r0, #30
 800b702:	bf58      	it	pl
 800b704:	6963      	ldrpl	r3, [r4, #20]
 800b706:	60a3      	str	r3, [r4, #8]
 800b708:	e7f4      	b.n	800b6f4 <__swsetup_r+0xb0>
 800b70a:	2000      	movs	r0, #0
 800b70c:	e7f7      	b.n	800b6fe <__swsetup_r+0xba>
 800b70e:	bf00      	nop
 800b710:	2000005c 	.word	0x2000005c
 800b714:	0800d91c 	.word	0x0800d91c
 800b718:	0800d93c 	.word	0x0800d93c
 800b71c:	0800d8fc 	.word	0x0800d8fc

0800b720 <_close_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4d06      	ldr	r5, [pc, #24]	; (800b73c <_close_r+0x1c>)
 800b724:	2300      	movs	r3, #0
 800b726:	4604      	mov	r4, r0
 800b728:	4608      	mov	r0, r1
 800b72a:	602b      	str	r3, [r5, #0]
 800b72c:	f7f7 fec7 	bl	80034be <_close>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	d102      	bne.n	800b73a <_close_r+0x1a>
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	b103      	cbz	r3, 800b73a <_close_r+0x1a>
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	bd38      	pop	{r3, r4, r5, pc}
 800b73c:	20005228 	.word	0x20005228

0800b740 <quorem>:
 800b740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b744:	6903      	ldr	r3, [r0, #16]
 800b746:	690c      	ldr	r4, [r1, #16]
 800b748:	42a3      	cmp	r3, r4
 800b74a:	4607      	mov	r7, r0
 800b74c:	f2c0 8081 	blt.w	800b852 <quorem+0x112>
 800b750:	3c01      	subs	r4, #1
 800b752:	f101 0814 	add.w	r8, r1, #20
 800b756:	f100 0514 	add.w	r5, r0, #20
 800b75a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b75e:	9301      	str	r3, [sp, #4]
 800b760:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b764:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b768:	3301      	adds	r3, #1
 800b76a:	429a      	cmp	r2, r3
 800b76c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b770:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b774:	fbb2 f6f3 	udiv	r6, r2, r3
 800b778:	d331      	bcc.n	800b7de <quorem+0x9e>
 800b77a:	f04f 0e00 	mov.w	lr, #0
 800b77e:	4640      	mov	r0, r8
 800b780:	46ac      	mov	ip, r5
 800b782:	46f2      	mov	sl, lr
 800b784:	f850 2b04 	ldr.w	r2, [r0], #4
 800b788:	b293      	uxth	r3, r2
 800b78a:	fb06 e303 	mla	r3, r6, r3, lr
 800b78e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b792:	b29b      	uxth	r3, r3
 800b794:	ebaa 0303 	sub.w	r3, sl, r3
 800b798:	0c12      	lsrs	r2, r2, #16
 800b79a:	f8dc a000 	ldr.w	sl, [ip]
 800b79e:	fb06 e202 	mla	r2, r6, r2, lr
 800b7a2:	fa13 f38a 	uxtah	r3, r3, sl
 800b7a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b7aa:	fa1f fa82 	uxth.w	sl, r2
 800b7ae:	f8dc 2000 	ldr.w	r2, [ip]
 800b7b2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b7b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7c0:	4581      	cmp	r9, r0
 800b7c2:	f84c 3b04 	str.w	r3, [ip], #4
 800b7c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b7ca:	d2db      	bcs.n	800b784 <quorem+0x44>
 800b7cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b7d0:	b92b      	cbnz	r3, 800b7de <quorem+0x9e>
 800b7d2:	9b01      	ldr	r3, [sp, #4]
 800b7d4:	3b04      	subs	r3, #4
 800b7d6:	429d      	cmp	r5, r3
 800b7d8:	461a      	mov	r2, r3
 800b7da:	d32e      	bcc.n	800b83a <quorem+0xfa>
 800b7dc:	613c      	str	r4, [r7, #16]
 800b7de:	4638      	mov	r0, r7
 800b7e0:	f001 f9f4 	bl	800cbcc <__mcmp>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	db24      	blt.n	800b832 <quorem+0xf2>
 800b7e8:	3601      	adds	r6, #1
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	f04f 0c00 	mov.w	ip, #0
 800b7f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7f4:	f8d0 e000 	ldr.w	lr, [r0]
 800b7f8:	b293      	uxth	r3, r2
 800b7fa:	ebac 0303 	sub.w	r3, ip, r3
 800b7fe:	0c12      	lsrs	r2, r2, #16
 800b800:	fa13 f38e 	uxtah	r3, r3, lr
 800b804:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b808:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b812:	45c1      	cmp	r9, r8
 800b814:	f840 3b04 	str.w	r3, [r0], #4
 800b818:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b81c:	d2e8      	bcs.n	800b7f0 <quorem+0xb0>
 800b81e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b822:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b826:	b922      	cbnz	r2, 800b832 <quorem+0xf2>
 800b828:	3b04      	subs	r3, #4
 800b82a:	429d      	cmp	r5, r3
 800b82c:	461a      	mov	r2, r3
 800b82e:	d30a      	bcc.n	800b846 <quorem+0x106>
 800b830:	613c      	str	r4, [r7, #16]
 800b832:	4630      	mov	r0, r6
 800b834:	b003      	add	sp, #12
 800b836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83a:	6812      	ldr	r2, [r2, #0]
 800b83c:	3b04      	subs	r3, #4
 800b83e:	2a00      	cmp	r2, #0
 800b840:	d1cc      	bne.n	800b7dc <quorem+0x9c>
 800b842:	3c01      	subs	r4, #1
 800b844:	e7c7      	b.n	800b7d6 <quorem+0x96>
 800b846:	6812      	ldr	r2, [r2, #0]
 800b848:	3b04      	subs	r3, #4
 800b84a:	2a00      	cmp	r2, #0
 800b84c:	d1f0      	bne.n	800b830 <quorem+0xf0>
 800b84e:	3c01      	subs	r4, #1
 800b850:	e7eb      	b.n	800b82a <quorem+0xea>
 800b852:	2000      	movs	r0, #0
 800b854:	e7ee      	b.n	800b834 <quorem+0xf4>
	...

0800b858 <_dtoa_r>:
 800b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85c:	ed2d 8b02 	vpush	{d8}
 800b860:	ec57 6b10 	vmov	r6, r7, d0
 800b864:	b095      	sub	sp, #84	; 0x54
 800b866:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b868:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b86c:	9105      	str	r1, [sp, #20]
 800b86e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b872:	4604      	mov	r4, r0
 800b874:	9209      	str	r2, [sp, #36]	; 0x24
 800b876:	930f      	str	r3, [sp, #60]	; 0x3c
 800b878:	b975      	cbnz	r5, 800b898 <_dtoa_r+0x40>
 800b87a:	2010      	movs	r0, #16
 800b87c:	f000 ff14 	bl	800c6a8 <malloc>
 800b880:	4602      	mov	r2, r0
 800b882:	6260      	str	r0, [r4, #36]	; 0x24
 800b884:	b920      	cbnz	r0, 800b890 <_dtoa_r+0x38>
 800b886:	4bb2      	ldr	r3, [pc, #712]	; (800bb50 <_dtoa_r+0x2f8>)
 800b888:	21ea      	movs	r1, #234	; 0xea
 800b88a:	48b2      	ldr	r0, [pc, #712]	; (800bb54 <_dtoa_r+0x2fc>)
 800b88c:	f001 fdc6 	bl	800d41c <__assert_func>
 800b890:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b894:	6005      	str	r5, [r0, #0]
 800b896:	60c5      	str	r5, [r0, #12]
 800b898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b89a:	6819      	ldr	r1, [r3, #0]
 800b89c:	b151      	cbz	r1, 800b8b4 <_dtoa_r+0x5c>
 800b89e:	685a      	ldr	r2, [r3, #4]
 800b8a0:	604a      	str	r2, [r1, #4]
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	4093      	lsls	r3, r2
 800b8a6:	608b      	str	r3, [r1, #8]
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f000 ff51 	bl	800c750 <_Bfree>
 800b8ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	601a      	str	r2, [r3, #0]
 800b8b4:	1e3b      	subs	r3, r7, #0
 800b8b6:	bfb9      	ittee	lt
 800b8b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b8bc:	9303      	strlt	r3, [sp, #12]
 800b8be:	2300      	movge	r3, #0
 800b8c0:	f8c8 3000 	strge.w	r3, [r8]
 800b8c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b8c8:	4ba3      	ldr	r3, [pc, #652]	; (800bb58 <_dtoa_r+0x300>)
 800b8ca:	bfbc      	itt	lt
 800b8cc:	2201      	movlt	r2, #1
 800b8ce:	f8c8 2000 	strlt.w	r2, [r8]
 800b8d2:	ea33 0309 	bics.w	r3, r3, r9
 800b8d6:	d11b      	bne.n	800b910 <_dtoa_r+0xb8>
 800b8d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b8da:	f242 730f 	movw	r3, #9999	; 0x270f
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8e4:	4333      	orrs	r3, r6
 800b8e6:	f000 857a 	beq.w	800c3de <_dtoa_r+0xb86>
 800b8ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8ec:	b963      	cbnz	r3, 800b908 <_dtoa_r+0xb0>
 800b8ee:	4b9b      	ldr	r3, [pc, #620]	; (800bb5c <_dtoa_r+0x304>)
 800b8f0:	e024      	b.n	800b93c <_dtoa_r+0xe4>
 800b8f2:	4b9b      	ldr	r3, [pc, #620]	; (800bb60 <_dtoa_r+0x308>)
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	3308      	adds	r3, #8
 800b8f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8fa:	6013      	str	r3, [r2, #0]
 800b8fc:	9800      	ldr	r0, [sp, #0]
 800b8fe:	b015      	add	sp, #84	; 0x54
 800b900:	ecbd 8b02 	vpop	{d8}
 800b904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b908:	4b94      	ldr	r3, [pc, #592]	; (800bb5c <_dtoa_r+0x304>)
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	3303      	adds	r3, #3
 800b90e:	e7f3      	b.n	800b8f8 <_dtoa_r+0xa0>
 800b910:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b914:	2200      	movs	r2, #0
 800b916:	ec51 0b17 	vmov	r0, r1, d7
 800b91a:	2300      	movs	r3, #0
 800b91c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b920:	f7f5 f8da 	bl	8000ad8 <__aeabi_dcmpeq>
 800b924:	4680      	mov	r8, r0
 800b926:	b158      	cbz	r0, 800b940 <_dtoa_r+0xe8>
 800b928:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b92a:	2301      	movs	r3, #1
 800b92c:	6013      	str	r3, [r2, #0]
 800b92e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b930:	2b00      	cmp	r3, #0
 800b932:	f000 8551 	beq.w	800c3d8 <_dtoa_r+0xb80>
 800b936:	488b      	ldr	r0, [pc, #556]	; (800bb64 <_dtoa_r+0x30c>)
 800b938:	6018      	str	r0, [r3, #0]
 800b93a:	1e43      	subs	r3, r0, #1
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	e7dd      	b.n	800b8fc <_dtoa_r+0xa4>
 800b940:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b944:	aa12      	add	r2, sp, #72	; 0x48
 800b946:	a913      	add	r1, sp, #76	; 0x4c
 800b948:	4620      	mov	r0, r4
 800b94a:	f001 f9e3 	bl	800cd14 <__d2b>
 800b94e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b952:	4683      	mov	fp, r0
 800b954:	2d00      	cmp	r5, #0
 800b956:	d07c      	beq.n	800ba52 <_dtoa_r+0x1fa>
 800b958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b95a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b95e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b962:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b966:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b96a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b96e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b972:	4b7d      	ldr	r3, [pc, #500]	; (800bb68 <_dtoa_r+0x310>)
 800b974:	2200      	movs	r2, #0
 800b976:	4630      	mov	r0, r6
 800b978:	4639      	mov	r1, r7
 800b97a:	f7f4 fc8d 	bl	8000298 <__aeabi_dsub>
 800b97e:	a36e      	add	r3, pc, #440	; (adr r3, 800bb38 <_dtoa_r+0x2e0>)
 800b980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b984:	f7f4 fe40 	bl	8000608 <__aeabi_dmul>
 800b988:	a36d      	add	r3, pc, #436	; (adr r3, 800bb40 <_dtoa_r+0x2e8>)
 800b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98e:	f7f4 fc85 	bl	800029c <__adddf3>
 800b992:	4606      	mov	r6, r0
 800b994:	4628      	mov	r0, r5
 800b996:	460f      	mov	r7, r1
 800b998:	f7f4 fdcc 	bl	8000534 <__aeabi_i2d>
 800b99c:	a36a      	add	r3, pc, #424	; (adr r3, 800bb48 <_dtoa_r+0x2f0>)
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	f7f4 fe31 	bl	8000608 <__aeabi_dmul>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	4639      	mov	r1, r7
 800b9ae:	f7f4 fc75 	bl	800029c <__adddf3>
 800b9b2:	4606      	mov	r6, r0
 800b9b4:	460f      	mov	r7, r1
 800b9b6:	f7f5 f8d7 	bl	8000b68 <__aeabi_d2iz>
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	4682      	mov	sl, r0
 800b9be:	2300      	movs	r3, #0
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	4639      	mov	r1, r7
 800b9c4:	f7f5 f892 	bl	8000aec <__aeabi_dcmplt>
 800b9c8:	b148      	cbz	r0, 800b9de <_dtoa_r+0x186>
 800b9ca:	4650      	mov	r0, sl
 800b9cc:	f7f4 fdb2 	bl	8000534 <__aeabi_i2d>
 800b9d0:	4632      	mov	r2, r6
 800b9d2:	463b      	mov	r3, r7
 800b9d4:	f7f5 f880 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9d8:	b908      	cbnz	r0, 800b9de <_dtoa_r+0x186>
 800b9da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9de:	f1ba 0f16 	cmp.w	sl, #22
 800b9e2:	d854      	bhi.n	800ba8e <_dtoa_r+0x236>
 800b9e4:	4b61      	ldr	r3, [pc, #388]	; (800bb6c <_dtoa_r+0x314>)
 800b9e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b9f2:	f7f5 f87b 	bl	8000aec <__aeabi_dcmplt>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d04b      	beq.n	800ba92 <_dtoa_r+0x23a>
 800b9fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9fe:	2300      	movs	r3, #0
 800ba00:	930e      	str	r3, [sp, #56]	; 0x38
 800ba02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba04:	1b5d      	subs	r5, r3, r5
 800ba06:	1e6b      	subs	r3, r5, #1
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	bf43      	ittte	mi
 800ba0c:	2300      	movmi	r3, #0
 800ba0e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ba12:	9304      	strmi	r3, [sp, #16]
 800ba14:	f04f 0800 	movpl.w	r8, #0
 800ba18:	f1ba 0f00 	cmp.w	sl, #0
 800ba1c:	db3b      	blt.n	800ba96 <_dtoa_r+0x23e>
 800ba1e:	9b04      	ldr	r3, [sp, #16]
 800ba20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ba24:	4453      	add	r3, sl
 800ba26:	9304      	str	r3, [sp, #16]
 800ba28:	2300      	movs	r3, #0
 800ba2a:	9306      	str	r3, [sp, #24]
 800ba2c:	9b05      	ldr	r3, [sp, #20]
 800ba2e:	2b09      	cmp	r3, #9
 800ba30:	d869      	bhi.n	800bb06 <_dtoa_r+0x2ae>
 800ba32:	2b05      	cmp	r3, #5
 800ba34:	bfc4      	itt	gt
 800ba36:	3b04      	subgt	r3, #4
 800ba38:	9305      	strgt	r3, [sp, #20]
 800ba3a:	9b05      	ldr	r3, [sp, #20]
 800ba3c:	f1a3 0302 	sub.w	r3, r3, #2
 800ba40:	bfcc      	ite	gt
 800ba42:	2500      	movgt	r5, #0
 800ba44:	2501      	movle	r5, #1
 800ba46:	2b03      	cmp	r3, #3
 800ba48:	d869      	bhi.n	800bb1e <_dtoa_r+0x2c6>
 800ba4a:	e8df f003 	tbb	[pc, r3]
 800ba4e:	4e2c      	.short	0x4e2c
 800ba50:	5a4c      	.short	0x5a4c
 800ba52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ba56:	441d      	add	r5, r3
 800ba58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ba5c:	2b20      	cmp	r3, #32
 800ba5e:	bfc1      	itttt	gt
 800ba60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba68:	fa09 f303 	lslgt.w	r3, r9, r3
 800ba6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba70:	bfda      	itte	le
 800ba72:	f1c3 0320 	rsble	r3, r3, #32
 800ba76:	fa06 f003 	lslle.w	r0, r6, r3
 800ba7a:	4318      	orrgt	r0, r3
 800ba7c:	f7f4 fd4a 	bl	8000514 <__aeabi_ui2d>
 800ba80:	2301      	movs	r3, #1
 800ba82:	4606      	mov	r6, r0
 800ba84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ba88:	3d01      	subs	r5, #1
 800ba8a:	9310      	str	r3, [sp, #64]	; 0x40
 800ba8c:	e771      	b.n	800b972 <_dtoa_r+0x11a>
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e7b6      	b.n	800ba00 <_dtoa_r+0x1a8>
 800ba92:	900e      	str	r0, [sp, #56]	; 0x38
 800ba94:	e7b5      	b.n	800ba02 <_dtoa_r+0x1aa>
 800ba96:	f1ca 0300 	rsb	r3, sl, #0
 800ba9a:	9306      	str	r3, [sp, #24]
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	eba8 080a 	sub.w	r8, r8, sl
 800baa2:	930d      	str	r3, [sp, #52]	; 0x34
 800baa4:	e7c2      	b.n	800ba2c <_dtoa_r+0x1d4>
 800baa6:	2300      	movs	r3, #0
 800baa8:	9308      	str	r3, [sp, #32]
 800baaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baac:	2b00      	cmp	r3, #0
 800baae:	dc39      	bgt.n	800bb24 <_dtoa_r+0x2cc>
 800bab0:	f04f 0901 	mov.w	r9, #1
 800bab4:	f8cd 9004 	str.w	r9, [sp, #4]
 800bab8:	464b      	mov	r3, r9
 800baba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800babe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bac0:	2200      	movs	r2, #0
 800bac2:	6042      	str	r2, [r0, #4]
 800bac4:	2204      	movs	r2, #4
 800bac6:	f102 0614 	add.w	r6, r2, #20
 800baca:	429e      	cmp	r6, r3
 800bacc:	6841      	ldr	r1, [r0, #4]
 800bace:	d92f      	bls.n	800bb30 <_dtoa_r+0x2d8>
 800bad0:	4620      	mov	r0, r4
 800bad2:	f000 fdfd 	bl	800c6d0 <_Balloc>
 800bad6:	9000      	str	r0, [sp, #0]
 800bad8:	2800      	cmp	r0, #0
 800bada:	d14b      	bne.n	800bb74 <_dtoa_r+0x31c>
 800badc:	4b24      	ldr	r3, [pc, #144]	; (800bb70 <_dtoa_r+0x318>)
 800bade:	4602      	mov	r2, r0
 800bae0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bae4:	e6d1      	b.n	800b88a <_dtoa_r+0x32>
 800bae6:	2301      	movs	r3, #1
 800bae8:	e7de      	b.n	800baa8 <_dtoa_r+0x250>
 800baea:	2300      	movs	r3, #0
 800baec:	9308      	str	r3, [sp, #32]
 800baee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baf0:	eb0a 0903 	add.w	r9, sl, r3
 800baf4:	f109 0301 	add.w	r3, r9, #1
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	9301      	str	r3, [sp, #4]
 800bafc:	bfb8      	it	lt
 800bafe:	2301      	movlt	r3, #1
 800bb00:	e7dd      	b.n	800babe <_dtoa_r+0x266>
 800bb02:	2301      	movs	r3, #1
 800bb04:	e7f2      	b.n	800baec <_dtoa_r+0x294>
 800bb06:	2501      	movs	r5, #1
 800bb08:	2300      	movs	r3, #0
 800bb0a:	9305      	str	r3, [sp, #20]
 800bb0c:	9508      	str	r5, [sp, #32]
 800bb0e:	f04f 39ff 	mov.w	r9, #4294967295
 800bb12:	2200      	movs	r2, #0
 800bb14:	f8cd 9004 	str.w	r9, [sp, #4]
 800bb18:	2312      	movs	r3, #18
 800bb1a:	9209      	str	r2, [sp, #36]	; 0x24
 800bb1c:	e7cf      	b.n	800babe <_dtoa_r+0x266>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	9308      	str	r3, [sp, #32]
 800bb22:	e7f4      	b.n	800bb0e <_dtoa_r+0x2b6>
 800bb24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bb28:	f8cd 9004 	str.w	r9, [sp, #4]
 800bb2c:	464b      	mov	r3, r9
 800bb2e:	e7c6      	b.n	800babe <_dtoa_r+0x266>
 800bb30:	3101      	adds	r1, #1
 800bb32:	6041      	str	r1, [r0, #4]
 800bb34:	0052      	lsls	r2, r2, #1
 800bb36:	e7c6      	b.n	800bac6 <_dtoa_r+0x26e>
 800bb38:	636f4361 	.word	0x636f4361
 800bb3c:	3fd287a7 	.word	0x3fd287a7
 800bb40:	8b60c8b3 	.word	0x8b60c8b3
 800bb44:	3fc68a28 	.word	0x3fc68a28
 800bb48:	509f79fb 	.word	0x509f79fb
 800bb4c:	3fd34413 	.word	0x3fd34413
 800bb50:	0800daa2 	.word	0x0800daa2
 800bb54:	0800dab9 	.word	0x0800dab9
 800bb58:	7ff00000 	.word	0x7ff00000
 800bb5c:	0800da9e 	.word	0x0800da9e
 800bb60:	0800da95 	.word	0x0800da95
 800bb64:	0800d971 	.word	0x0800d971
 800bb68:	3ff80000 	.word	0x3ff80000
 800bb6c:	0800dbb8 	.word	0x0800dbb8
 800bb70:	0800db18 	.word	0x0800db18
 800bb74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb76:	9a00      	ldr	r2, [sp, #0]
 800bb78:	601a      	str	r2, [r3, #0]
 800bb7a:	9b01      	ldr	r3, [sp, #4]
 800bb7c:	2b0e      	cmp	r3, #14
 800bb7e:	f200 80ad 	bhi.w	800bcdc <_dtoa_r+0x484>
 800bb82:	2d00      	cmp	r5, #0
 800bb84:	f000 80aa 	beq.w	800bcdc <_dtoa_r+0x484>
 800bb88:	f1ba 0f00 	cmp.w	sl, #0
 800bb8c:	dd36      	ble.n	800bbfc <_dtoa_r+0x3a4>
 800bb8e:	4ac3      	ldr	r2, [pc, #780]	; (800be9c <_dtoa_r+0x644>)
 800bb90:	f00a 030f 	and.w	r3, sl, #15
 800bb94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb98:	ed93 7b00 	vldr	d7, [r3]
 800bb9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bba0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800bba4:	eeb0 8a47 	vmov.f32	s16, s14
 800bba8:	eef0 8a67 	vmov.f32	s17, s15
 800bbac:	d016      	beq.n	800bbdc <_dtoa_r+0x384>
 800bbae:	4bbc      	ldr	r3, [pc, #752]	; (800bea0 <_dtoa_r+0x648>)
 800bbb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bbb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbb8:	f7f4 fe50 	bl	800085c <__aeabi_ddiv>
 800bbbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbc0:	f007 070f 	and.w	r7, r7, #15
 800bbc4:	2503      	movs	r5, #3
 800bbc6:	4eb6      	ldr	r6, [pc, #728]	; (800bea0 <_dtoa_r+0x648>)
 800bbc8:	b957      	cbnz	r7, 800bbe0 <_dtoa_r+0x388>
 800bbca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbce:	ec53 2b18 	vmov	r2, r3, d8
 800bbd2:	f7f4 fe43 	bl	800085c <__aeabi_ddiv>
 800bbd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbda:	e029      	b.n	800bc30 <_dtoa_r+0x3d8>
 800bbdc:	2502      	movs	r5, #2
 800bbde:	e7f2      	b.n	800bbc6 <_dtoa_r+0x36e>
 800bbe0:	07f9      	lsls	r1, r7, #31
 800bbe2:	d508      	bpl.n	800bbf6 <_dtoa_r+0x39e>
 800bbe4:	ec51 0b18 	vmov	r0, r1, d8
 800bbe8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bbec:	f7f4 fd0c 	bl	8000608 <__aeabi_dmul>
 800bbf0:	ec41 0b18 	vmov	d8, r0, r1
 800bbf4:	3501      	adds	r5, #1
 800bbf6:	107f      	asrs	r7, r7, #1
 800bbf8:	3608      	adds	r6, #8
 800bbfa:	e7e5      	b.n	800bbc8 <_dtoa_r+0x370>
 800bbfc:	f000 80a6 	beq.w	800bd4c <_dtoa_r+0x4f4>
 800bc00:	f1ca 0600 	rsb	r6, sl, #0
 800bc04:	4ba5      	ldr	r3, [pc, #660]	; (800be9c <_dtoa_r+0x644>)
 800bc06:	4fa6      	ldr	r7, [pc, #664]	; (800bea0 <_dtoa_r+0x648>)
 800bc08:	f006 020f 	and.w	r2, r6, #15
 800bc0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bc18:	f7f4 fcf6 	bl	8000608 <__aeabi_dmul>
 800bc1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc20:	1136      	asrs	r6, r6, #4
 800bc22:	2300      	movs	r3, #0
 800bc24:	2502      	movs	r5, #2
 800bc26:	2e00      	cmp	r6, #0
 800bc28:	f040 8085 	bne.w	800bd36 <_dtoa_r+0x4de>
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d1d2      	bne.n	800bbd6 <_dtoa_r+0x37e>
 800bc30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f000 808c 	beq.w	800bd50 <_dtoa_r+0x4f8>
 800bc38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bc3c:	4b99      	ldr	r3, [pc, #612]	; (800bea4 <_dtoa_r+0x64c>)
 800bc3e:	2200      	movs	r2, #0
 800bc40:	4630      	mov	r0, r6
 800bc42:	4639      	mov	r1, r7
 800bc44:	f7f4 ff52 	bl	8000aec <__aeabi_dcmplt>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	f000 8081 	beq.w	800bd50 <_dtoa_r+0x4f8>
 800bc4e:	9b01      	ldr	r3, [sp, #4]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d07d      	beq.n	800bd50 <_dtoa_r+0x4f8>
 800bc54:	f1b9 0f00 	cmp.w	r9, #0
 800bc58:	dd3c      	ble.n	800bcd4 <_dtoa_r+0x47c>
 800bc5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bc5e:	9307      	str	r3, [sp, #28]
 800bc60:	2200      	movs	r2, #0
 800bc62:	4b91      	ldr	r3, [pc, #580]	; (800bea8 <_dtoa_r+0x650>)
 800bc64:	4630      	mov	r0, r6
 800bc66:	4639      	mov	r1, r7
 800bc68:	f7f4 fcce 	bl	8000608 <__aeabi_dmul>
 800bc6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc70:	3501      	adds	r5, #1
 800bc72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800bc76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	f7f4 fc5a 	bl	8000534 <__aeabi_i2d>
 800bc80:	4632      	mov	r2, r6
 800bc82:	463b      	mov	r3, r7
 800bc84:	f7f4 fcc0 	bl	8000608 <__aeabi_dmul>
 800bc88:	4b88      	ldr	r3, [pc, #544]	; (800beac <_dtoa_r+0x654>)
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f7f4 fb06 	bl	800029c <__adddf3>
 800bc90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bc94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc98:	9303      	str	r3, [sp, #12]
 800bc9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d15c      	bne.n	800bd5a <_dtoa_r+0x502>
 800bca0:	4b83      	ldr	r3, [pc, #524]	; (800beb0 <_dtoa_r+0x658>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	4630      	mov	r0, r6
 800bca6:	4639      	mov	r1, r7
 800bca8:	f7f4 faf6 	bl	8000298 <__aeabi_dsub>
 800bcac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcb0:	4606      	mov	r6, r0
 800bcb2:	460f      	mov	r7, r1
 800bcb4:	f7f4 ff38 	bl	8000b28 <__aeabi_dcmpgt>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	f040 8296 	bne.w	800c1ea <_dtoa_r+0x992>
 800bcbe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcc8:	4639      	mov	r1, r7
 800bcca:	f7f4 ff0f 	bl	8000aec <__aeabi_dcmplt>
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	f040 8288 	bne.w	800c1e4 <_dtoa_r+0x98c>
 800bcd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bcd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f2c0 8158 	blt.w	800bf94 <_dtoa_r+0x73c>
 800bce4:	f1ba 0f0e 	cmp.w	sl, #14
 800bce8:	f300 8154 	bgt.w	800bf94 <_dtoa_r+0x73c>
 800bcec:	4b6b      	ldr	r3, [pc, #428]	; (800be9c <_dtoa_r+0x644>)
 800bcee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bcf2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bcf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f280 80e3 	bge.w	800bec4 <_dtoa_r+0x66c>
 800bcfe:	9b01      	ldr	r3, [sp, #4]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f300 80df 	bgt.w	800bec4 <_dtoa_r+0x66c>
 800bd06:	f040 826d 	bne.w	800c1e4 <_dtoa_r+0x98c>
 800bd0a:	4b69      	ldr	r3, [pc, #420]	; (800beb0 <_dtoa_r+0x658>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	4640      	mov	r0, r8
 800bd10:	4649      	mov	r1, r9
 800bd12:	f7f4 fc79 	bl	8000608 <__aeabi_dmul>
 800bd16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd1a:	f7f4 fefb 	bl	8000b14 <__aeabi_dcmpge>
 800bd1e:	9e01      	ldr	r6, [sp, #4]
 800bd20:	4637      	mov	r7, r6
 800bd22:	2800      	cmp	r0, #0
 800bd24:	f040 8243 	bne.w	800c1ae <_dtoa_r+0x956>
 800bd28:	9d00      	ldr	r5, [sp, #0]
 800bd2a:	2331      	movs	r3, #49	; 0x31
 800bd2c:	f805 3b01 	strb.w	r3, [r5], #1
 800bd30:	f10a 0a01 	add.w	sl, sl, #1
 800bd34:	e23f      	b.n	800c1b6 <_dtoa_r+0x95e>
 800bd36:	07f2      	lsls	r2, r6, #31
 800bd38:	d505      	bpl.n	800bd46 <_dtoa_r+0x4ee>
 800bd3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd3e:	f7f4 fc63 	bl	8000608 <__aeabi_dmul>
 800bd42:	3501      	adds	r5, #1
 800bd44:	2301      	movs	r3, #1
 800bd46:	1076      	asrs	r6, r6, #1
 800bd48:	3708      	adds	r7, #8
 800bd4a:	e76c      	b.n	800bc26 <_dtoa_r+0x3ce>
 800bd4c:	2502      	movs	r5, #2
 800bd4e:	e76f      	b.n	800bc30 <_dtoa_r+0x3d8>
 800bd50:	9b01      	ldr	r3, [sp, #4]
 800bd52:	f8cd a01c 	str.w	sl, [sp, #28]
 800bd56:	930c      	str	r3, [sp, #48]	; 0x30
 800bd58:	e78d      	b.n	800bc76 <_dtoa_r+0x41e>
 800bd5a:	9900      	ldr	r1, [sp, #0]
 800bd5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bd5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd60:	4b4e      	ldr	r3, [pc, #312]	; (800be9c <_dtoa_r+0x644>)
 800bd62:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd66:	4401      	add	r1, r0
 800bd68:	9102      	str	r1, [sp, #8]
 800bd6a:	9908      	ldr	r1, [sp, #32]
 800bd6c:	eeb0 8a47 	vmov.f32	s16, s14
 800bd70:	eef0 8a67 	vmov.f32	s17, s15
 800bd74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd7c:	2900      	cmp	r1, #0
 800bd7e:	d045      	beq.n	800be0c <_dtoa_r+0x5b4>
 800bd80:	494c      	ldr	r1, [pc, #304]	; (800beb4 <_dtoa_r+0x65c>)
 800bd82:	2000      	movs	r0, #0
 800bd84:	f7f4 fd6a 	bl	800085c <__aeabi_ddiv>
 800bd88:	ec53 2b18 	vmov	r2, r3, d8
 800bd8c:	f7f4 fa84 	bl	8000298 <__aeabi_dsub>
 800bd90:	9d00      	ldr	r5, [sp, #0]
 800bd92:	ec41 0b18 	vmov	d8, r0, r1
 800bd96:	4639      	mov	r1, r7
 800bd98:	4630      	mov	r0, r6
 800bd9a:	f7f4 fee5 	bl	8000b68 <__aeabi_d2iz>
 800bd9e:	900c      	str	r0, [sp, #48]	; 0x30
 800bda0:	f7f4 fbc8 	bl	8000534 <__aeabi_i2d>
 800bda4:	4602      	mov	r2, r0
 800bda6:	460b      	mov	r3, r1
 800bda8:	4630      	mov	r0, r6
 800bdaa:	4639      	mov	r1, r7
 800bdac:	f7f4 fa74 	bl	8000298 <__aeabi_dsub>
 800bdb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdb2:	3330      	adds	r3, #48	; 0x30
 800bdb4:	f805 3b01 	strb.w	r3, [r5], #1
 800bdb8:	ec53 2b18 	vmov	r2, r3, d8
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	460f      	mov	r7, r1
 800bdc0:	f7f4 fe94 	bl	8000aec <__aeabi_dcmplt>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d165      	bne.n	800be94 <_dtoa_r+0x63c>
 800bdc8:	4632      	mov	r2, r6
 800bdca:	463b      	mov	r3, r7
 800bdcc:	4935      	ldr	r1, [pc, #212]	; (800bea4 <_dtoa_r+0x64c>)
 800bdce:	2000      	movs	r0, #0
 800bdd0:	f7f4 fa62 	bl	8000298 <__aeabi_dsub>
 800bdd4:	ec53 2b18 	vmov	r2, r3, d8
 800bdd8:	f7f4 fe88 	bl	8000aec <__aeabi_dcmplt>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	f040 80b9 	bne.w	800bf54 <_dtoa_r+0x6fc>
 800bde2:	9b02      	ldr	r3, [sp, #8]
 800bde4:	429d      	cmp	r5, r3
 800bde6:	f43f af75 	beq.w	800bcd4 <_dtoa_r+0x47c>
 800bdea:	4b2f      	ldr	r3, [pc, #188]	; (800bea8 <_dtoa_r+0x650>)
 800bdec:	ec51 0b18 	vmov	r0, r1, d8
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f7f4 fc09 	bl	8000608 <__aeabi_dmul>
 800bdf6:	4b2c      	ldr	r3, [pc, #176]	; (800bea8 <_dtoa_r+0x650>)
 800bdf8:	ec41 0b18 	vmov	d8, r0, r1
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	4630      	mov	r0, r6
 800be00:	4639      	mov	r1, r7
 800be02:	f7f4 fc01 	bl	8000608 <__aeabi_dmul>
 800be06:	4606      	mov	r6, r0
 800be08:	460f      	mov	r7, r1
 800be0a:	e7c4      	b.n	800bd96 <_dtoa_r+0x53e>
 800be0c:	ec51 0b17 	vmov	r0, r1, d7
 800be10:	f7f4 fbfa 	bl	8000608 <__aeabi_dmul>
 800be14:	9b02      	ldr	r3, [sp, #8]
 800be16:	9d00      	ldr	r5, [sp, #0]
 800be18:	930c      	str	r3, [sp, #48]	; 0x30
 800be1a:	ec41 0b18 	vmov	d8, r0, r1
 800be1e:	4639      	mov	r1, r7
 800be20:	4630      	mov	r0, r6
 800be22:	f7f4 fea1 	bl	8000b68 <__aeabi_d2iz>
 800be26:	9011      	str	r0, [sp, #68]	; 0x44
 800be28:	f7f4 fb84 	bl	8000534 <__aeabi_i2d>
 800be2c:	4602      	mov	r2, r0
 800be2e:	460b      	mov	r3, r1
 800be30:	4630      	mov	r0, r6
 800be32:	4639      	mov	r1, r7
 800be34:	f7f4 fa30 	bl	8000298 <__aeabi_dsub>
 800be38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be3a:	3330      	adds	r3, #48	; 0x30
 800be3c:	f805 3b01 	strb.w	r3, [r5], #1
 800be40:	9b02      	ldr	r3, [sp, #8]
 800be42:	429d      	cmp	r5, r3
 800be44:	4606      	mov	r6, r0
 800be46:	460f      	mov	r7, r1
 800be48:	f04f 0200 	mov.w	r2, #0
 800be4c:	d134      	bne.n	800beb8 <_dtoa_r+0x660>
 800be4e:	4b19      	ldr	r3, [pc, #100]	; (800beb4 <_dtoa_r+0x65c>)
 800be50:	ec51 0b18 	vmov	r0, r1, d8
 800be54:	f7f4 fa22 	bl	800029c <__adddf3>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	4630      	mov	r0, r6
 800be5e:	4639      	mov	r1, r7
 800be60:	f7f4 fe62 	bl	8000b28 <__aeabi_dcmpgt>
 800be64:	2800      	cmp	r0, #0
 800be66:	d175      	bne.n	800bf54 <_dtoa_r+0x6fc>
 800be68:	ec53 2b18 	vmov	r2, r3, d8
 800be6c:	4911      	ldr	r1, [pc, #68]	; (800beb4 <_dtoa_r+0x65c>)
 800be6e:	2000      	movs	r0, #0
 800be70:	f7f4 fa12 	bl	8000298 <__aeabi_dsub>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	4630      	mov	r0, r6
 800be7a:	4639      	mov	r1, r7
 800be7c:	f7f4 fe36 	bl	8000aec <__aeabi_dcmplt>
 800be80:	2800      	cmp	r0, #0
 800be82:	f43f af27 	beq.w	800bcd4 <_dtoa_r+0x47c>
 800be86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be88:	1e6b      	subs	r3, r5, #1
 800be8a:	930c      	str	r3, [sp, #48]	; 0x30
 800be8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be90:	2b30      	cmp	r3, #48	; 0x30
 800be92:	d0f8      	beq.n	800be86 <_dtoa_r+0x62e>
 800be94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800be98:	e04a      	b.n	800bf30 <_dtoa_r+0x6d8>
 800be9a:	bf00      	nop
 800be9c:	0800dbb8 	.word	0x0800dbb8
 800bea0:	0800db90 	.word	0x0800db90
 800bea4:	3ff00000 	.word	0x3ff00000
 800bea8:	40240000 	.word	0x40240000
 800beac:	401c0000 	.word	0x401c0000
 800beb0:	40140000 	.word	0x40140000
 800beb4:	3fe00000 	.word	0x3fe00000
 800beb8:	4baf      	ldr	r3, [pc, #700]	; (800c178 <_dtoa_r+0x920>)
 800beba:	f7f4 fba5 	bl	8000608 <__aeabi_dmul>
 800bebe:	4606      	mov	r6, r0
 800bec0:	460f      	mov	r7, r1
 800bec2:	e7ac      	b.n	800be1e <_dtoa_r+0x5c6>
 800bec4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bec8:	9d00      	ldr	r5, [sp, #0]
 800beca:	4642      	mov	r2, r8
 800becc:	464b      	mov	r3, r9
 800bece:	4630      	mov	r0, r6
 800bed0:	4639      	mov	r1, r7
 800bed2:	f7f4 fcc3 	bl	800085c <__aeabi_ddiv>
 800bed6:	f7f4 fe47 	bl	8000b68 <__aeabi_d2iz>
 800beda:	9002      	str	r0, [sp, #8]
 800bedc:	f7f4 fb2a 	bl	8000534 <__aeabi_i2d>
 800bee0:	4642      	mov	r2, r8
 800bee2:	464b      	mov	r3, r9
 800bee4:	f7f4 fb90 	bl	8000608 <__aeabi_dmul>
 800bee8:	4602      	mov	r2, r0
 800beea:	460b      	mov	r3, r1
 800beec:	4630      	mov	r0, r6
 800beee:	4639      	mov	r1, r7
 800bef0:	f7f4 f9d2 	bl	8000298 <__aeabi_dsub>
 800bef4:	9e02      	ldr	r6, [sp, #8]
 800bef6:	9f01      	ldr	r7, [sp, #4]
 800bef8:	3630      	adds	r6, #48	; 0x30
 800befa:	f805 6b01 	strb.w	r6, [r5], #1
 800befe:	9e00      	ldr	r6, [sp, #0]
 800bf00:	1bae      	subs	r6, r5, r6
 800bf02:	42b7      	cmp	r7, r6
 800bf04:	4602      	mov	r2, r0
 800bf06:	460b      	mov	r3, r1
 800bf08:	d137      	bne.n	800bf7a <_dtoa_r+0x722>
 800bf0a:	f7f4 f9c7 	bl	800029c <__adddf3>
 800bf0e:	4642      	mov	r2, r8
 800bf10:	464b      	mov	r3, r9
 800bf12:	4606      	mov	r6, r0
 800bf14:	460f      	mov	r7, r1
 800bf16:	f7f4 fe07 	bl	8000b28 <__aeabi_dcmpgt>
 800bf1a:	b9c8      	cbnz	r0, 800bf50 <_dtoa_r+0x6f8>
 800bf1c:	4642      	mov	r2, r8
 800bf1e:	464b      	mov	r3, r9
 800bf20:	4630      	mov	r0, r6
 800bf22:	4639      	mov	r1, r7
 800bf24:	f7f4 fdd8 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf28:	b110      	cbz	r0, 800bf30 <_dtoa_r+0x6d8>
 800bf2a:	9b02      	ldr	r3, [sp, #8]
 800bf2c:	07d9      	lsls	r1, r3, #31
 800bf2e:	d40f      	bmi.n	800bf50 <_dtoa_r+0x6f8>
 800bf30:	4620      	mov	r0, r4
 800bf32:	4659      	mov	r1, fp
 800bf34:	f000 fc0c 	bl	800c750 <_Bfree>
 800bf38:	2300      	movs	r3, #0
 800bf3a:	702b      	strb	r3, [r5, #0]
 800bf3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf3e:	f10a 0001 	add.w	r0, sl, #1
 800bf42:	6018      	str	r0, [r3, #0]
 800bf44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	f43f acd8 	beq.w	800b8fc <_dtoa_r+0xa4>
 800bf4c:	601d      	str	r5, [r3, #0]
 800bf4e:	e4d5      	b.n	800b8fc <_dtoa_r+0xa4>
 800bf50:	f8cd a01c 	str.w	sl, [sp, #28]
 800bf54:	462b      	mov	r3, r5
 800bf56:	461d      	mov	r5, r3
 800bf58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf5c:	2a39      	cmp	r2, #57	; 0x39
 800bf5e:	d108      	bne.n	800bf72 <_dtoa_r+0x71a>
 800bf60:	9a00      	ldr	r2, [sp, #0]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d1f7      	bne.n	800bf56 <_dtoa_r+0x6fe>
 800bf66:	9a07      	ldr	r2, [sp, #28]
 800bf68:	9900      	ldr	r1, [sp, #0]
 800bf6a:	3201      	adds	r2, #1
 800bf6c:	9207      	str	r2, [sp, #28]
 800bf6e:	2230      	movs	r2, #48	; 0x30
 800bf70:	700a      	strb	r2, [r1, #0]
 800bf72:	781a      	ldrb	r2, [r3, #0]
 800bf74:	3201      	adds	r2, #1
 800bf76:	701a      	strb	r2, [r3, #0]
 800bf78:	e78c      	b.n	800be94 <_dtoa_r+0x63c>
 800bf7a:	4b7f      	ldr	r3, [pc, #508]	; (800c178 <_dtoa_r+0x920>)
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f7f4 fb43 	bl	8000608 <__aeabi_dmul>
 800bf82:	2200      	movs	r2, #0
 800bf84:	2300      	movs	r3, #0
 800bf86:	4606      	mov	r6, r0
 800bf88:	460f      	mov	r7, r1
 800bf8a:	f7f4 fda5 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	d09b      	beq.n	800beca <_dtoa_r+0x672>
 800bf92:	e7cd      	b.n	800bf30 <_dtoa_r+0x6d8>
 800bf94:	9a08      	ldr	r2, [sp, #32]
 800bf96:	2a00      	cmp	r2, #0
 800bf98:	f000 80c4 	beq.w	800c124 <_dtoa_r+0x8cc>
 800bf9c:	9a05      	ldr	r2, [sp, #20]
 800bf9e:	2a01      	cmp	r2, #1
 800bfa0:	f300 80a8 	bgt.w	800c0f4 <_dtoa_r+0x89c>
 800bfa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bfa6:	2a00      	cmp	r2, #0
 800bfa8:	f000 80a0 	beq.w	800c0ec <_dtoa_r+0x894>
 800bfac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bfb0:	9e06      	ldr	r6, [sp, #24]
 800bfb2:	4645      	mov	r5, r8
 800bfb4:	9a04      	ldr	r2, [sp, #16]
 800bfb6:	2101      	movs	r1, #1
 800bfb8:	441a      	add	r2, r3
 800bfba:	4620      	mov	r0, r4
 800bfbc:	4498      	add	r8, r3
 800bfbe:	9204      	str	r2, [sp, #16]
 800bfc0:	f000 fc82 	bl	800c8c8 <__i2b>
 800bfc4:	4607      	mov	r7, r0
 800bfc6:	2d00      	cmp	r5, #0
 800bfc8:	dd0b      	ble.n	800bfe2 <_dtoa_r+0x78a>
 800bfca:	9b04      	ldr	r3, [sp, #16]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	dd08      	ble.n	800bfe2 <_dtoa_r+0x78a>
 800bfd0:	42ab      	cmp	r3, r5
 800bfd2:	9a04      	ldr	r2, [sp, #16]
 800bfd4:	bfa8      	it	ge
 800bfd6:	462b      	movge	r3, r5
 800bfd8:	eba8 0803 	sub.w	r8, r8, r3
 800bfdc:	1aed      	subs	r5, r5, r3
 800bfde:	1ad3      	subs	r3, r2, r3
 800bfe0:	9304      	str	r3, [sp, #16]
 800bfe2:	9b06      	ldr	r3, [sp, #24]
 800bfe4:	b1fb      	cbz	r3, 800c026 <_dtoa_r+0x7ce>
 800bfe6:	9b08      	ldr	r3, [sp, #32]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f000 809f 	beq.w	800c12c <_dtoa_r+0x8d4>
 800bfee:	2e00      	cmp	r6, #0
 800bff0:	dd11      	ble.n	800c016 <_dtoa_r+0x7be>
 800bff2:	4639      	mov	r1, r7
 800bff4:	4632      	mov	r2, r6
 800bff6:	4620      	mov	r0, r4
 800bff8:	f000 fd22 	bl	800ca40 <__pow5mult>
 800bffc:	465a      	mov	r2, fp
 800bffe:	4601      	mov	r1, r0
 800c000:	4607      	mov	r7, r0
 800c002:	4620      	mov	r0, r4
 800c004:	f000 fc76 	bl	800c8f4 <__multiply>
 800c008:	4659      	mov	r1, fp
 800c00a:	9007      	str	r0, [sp, #28]
 800c00c:	4620      	mov	r0, r4
 800c00e:	f000 fb9f 	bl	800c750 <_Bfree>
 800c012:	9b07      	ldr	r3, [sp, #28]
 800c014:	469b      	mov	fp, r3
 800c016:	9b06      	ldr	r3, [sp, #24]
 800c018:	1b9a      	subs	r2, r3, r6
 800c01a:	d004      	beq.n	800c026 <_dtoa_r+0x7ce>
 800c01c:	4659      	mov	r1, fp
 800c01e:	4620      	mov	r0, r4
 800c020:	f000 fd0e 	bl	800ca40 <__pow5mult>
 800c024:	4683      	mov	fp, r0
 800c026:	2101      	movs	r1, #1
 800c028:	4620      	mov	r0, r4
 800c02a:	f000 fc4d 	bl	800c8c8 <__i2b>
 800c02e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c030:	2b00      	cmp	r3, #0
 800c032:	4606      	mov	r6, r0
 800c034:	dd7c      	ble.n	800c130 <_dtoa_r+0x8d8>
 800c036:	461a      	mov	r2, r3
 800c038:	4601      	mov	r1, r0
 800c03a:	4620      	mov	r0, r4
 800c03c:	f000 fd00 	bl	800ca40 <__pow5mult>
 800c040:	9b05      	ldr	r3, [sp, #20]
 800c042:	2b01      	cmp	r3, #1
 800c044:	4606      	mov	r6, r0
 800c046:	dd76      	ble.n	800c136 <_dtoa_r+0x8de>
 800c048:	2300      	movs	r3, #0
 800c04a:	9306      	str	r3, [sp, #24]
 800c04c:	6933      	ldr	r3, [r6, #16]
 800c04e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c052:	6918      	ldr	r0, [r3, #16]
 800c054:	f000 fbe8 	bl	800c828 <__hi0bits>
 800c058:	f1c0 0020 	rsb	r0, r0, #32
 800c05c:	9b04      	ldr	r3, [sp, #16]
 800c05e:	4418      	add	r0, r3
 800c060:	f010 001f 	ands.w	r0, r0, #31
 800c064:	f000 8086 	beq.w	800c174 <_dtoa_r+0x91c>
 800c068:	f1c0 0320 	rsb	r3, r0, #32
 800c06c:	2b04      	cmp	r3, #4
 800c06e:	dd7f      	ble.n	800c170 <_dtoa_r+0x918>
 800c070:	f1c0 001c 	rsb	r0, r0, #28
 800c074:	9b04      	ldr	r3, [sp, #16]
 800c076:	4403      	add	r3, r0
 800c078:	4480      	add	r8, r0
 800c07a:	4405      	add	r5, r0
 800c07c:	9304      	str	r3, [sp, #16]
 800c07e:	f1b8 0f00 	cmp.w	r8, #0
 800c082:	dd05      	ble.n	800c090 <_dtoa_r+0x838>
 800c084:	4659      	mov	r1, fp
 800c086:	4642      	mov	r2, r8
 800c088:	4620      	mov	r0, r4
 800c08a:	f000 fd33 	bl	800caf4 <__lshift>
 800c08e:	4683      	mov	fp, r0
 800c090:	9b04      	ldr	r3, [sp, #16]
 800c092:	2b00      	cmp	r3, #0
 800c094:	dd05      	ble.n	800c0a2 <_dtoa_r+0x84a>
 800c096:	4631      	mov	r1, r6
 800c098:	461a      	mov	r2, r3
 800c09a:	4620      	mov	r0, r4
 800c09c:	f000 fd2a 	bl	800caf4 <__lshift>
 800c0a0:	4606      	mov	r6, r0
 800c0a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d069      	beq.n	800c17c <_dtoa_r+0x924>
 800c0a8:	4631      	mov	r1, r6
 800c0aa:	4658      	mov	r0, fp
 800c0ac:	f000 fd8e 	bl	800cbcc <__mcmp>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	da63      	bge.n	800c17c <_dtoa_r+0x924>
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	4659      	mov	r1, fp
 800c0b8:	220a      	movs	r2, #10
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	f000 fb6a 	bl	800c794 <__multadd>
 800c0c0:	9b08      	ldr	r3, [sp, #32]
 800c0c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0c6:	4683      	mov	fp, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f000 818f 	beq.w	800c3ec <_dtoa_r+0xb94>
 800c0ce:	4639      	mov	r1, r7
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	220a      	movs	r2, #10
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	f000 fb5d 	bl	800c794 <__multadd>
 800c0da:	f1b9 0f00 	cmp.w	r9, #0
 800c0de:	4607      	mov	r7, r0
 800c0e0:	f300 808e 	bgt.w	800c200 <_dtoa_r+0x9a8>
 800c0e4:	9b05      	ldr	r3, [sp, #20]
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	dc50      	bgt.n	800c18c <_dtoa_r+0x934>
 800c0ea:	e089      	b.n	800c200 <_dtoa_r+0x9a8>
 800c0ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c0ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0f2:	e75d      	b.n	800bfb0 <_dtoa_r+0x758>
 800c0f4:	9b01      	ldr	r3, [sp, #4]
 800c0f6:	1e5e      	subs	r6, r3, #1
 800c0f8:	9b06      	ldr	r3, [sp, #24]
 800c0fa:	42b3      	cmp	r3, r6
 800c0fc:	bfbf      	itttt	lt
 800c0fe:	9b06      	ldrlt	r3, [sp, #24]
 800c100:	9606      	strlt	r6, [sp, #24]
 800c102:	1af2      	sublt	r2, r6, r3
 800c104:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c106:	bfb6      	itet	lt
 800c108:	189b      	addlt	r3, r3, r2
 800c10a:	1b9e      	subge	r6, r3, r6
 800c10c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c10e:	9b01      	ldr	r3, [sp, #4]
 800c110:	bfb8      	it	lt
 800c112:	2600      	movlt	r6, #0
 800c114:	2b00      	cmp	r3, #0
 800c116:	bfb5      	itete	lt
 800c118:	eba8 0503 	sublt.w	r5, r8, r3
 800c11c:	9b01      	ldrge	r3, [sp, #4]
 800c11e:	2300      	movlt	r3, #0
 800c120:	4645      	movge	r5, r8
 800c122:	e747      	b.n	800bfb4 <_dtoa_r+0x75c>
 800c124:	9e06      	ldr	r6, [sp, #24]
 800c126:	9f08      	ldr	r7, [sp, #32]
 800c128:	4645      	mov	r5, r8
 800c12a:	e74c      	b.n	800bfc6 <_dtoa_r+0x76e>
 800c12c:	9a06      	ldr	r2, [sp, #24]
 800c12e:	e775      	b.n	800c01c <_dtoa_r+0x7c4>
 800c130:	9b05      	ldr	r3, [sp, #20]
 800c132:	2b01      	cmp	r3, #1
 800c134:	dc18      	bgt.n	800c168 <_dtoa_r+0x910>
 800c136:	9b02      	ldr	r3, [sp, #8]
 800c138:	b9b3      	cbnz	r3, 800c168 <_dtoa_r+0x910>
 800c13a:	9b03      	ldr	r3, [sp, #12]
 800c13c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c140:	b9a3      	cbnz	r3, 800c16c <_dtoa_r+0x914>
 800c142:	9b03      	ldr	r3, [sp, #12]
 800c144:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c148:	0d1b      	lsrs	r3, r3, #20
 800c14a:	051b      	lsls	r3, r3, #20
 800c14c:	b12b      	cbz	r3, 800c15a <_dtoa_r+0x902>
 800c14e:	9b04      	ldr	r3, [sp, #16]
 800c150:	3301      	adds	r3, #1
 800c152:	9304      	str	r3, [sp, #16]
 800c154:	f108 0801 	add.w	r8, r8, #1
 800c158:	2301      	movs	r3, #1
 800c15a:	9306      	str	r3, [sp, #24]
 800c15c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f47f af74 	bne.w	800c04c <_dtoa_r+0x7f4>
 800c164:	2001      	movs	r0, #1
 800c166:	e779      	b.n	800c05c <_dtoa_r+0x804>
 800c168:	2300      	movs	r3, #0
 800c16a:	e7f6      	b.n	800c15a <_dtoa_r+0x902>
 800c16c:	9b02      	ldr	r3, [sp, #8]
 800c16e:	e7f4      	b.n	800c15a <_dtoa_r+0x902>
 800c170:	d085      	beq.n	800c07e <_dtoa_r+0x826>
 800c172:	4618      	mov	r0, r3
 800c174:	301c      	adds	r0, #28
 800c176:	e77d      	b.n	800c074 <_dtoa_r+0x81c>
 800c178:	40240000 	.word	0x40240000
 800c17c:	9b01      	ldr	r3, [sp, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	dc38      	bgt.n	800c1f4 <_dtoa_r+0x99c>
 800c182:	9b05      	ldr	r3, [sp, #20]
 800c184:	2b02      	cmp	r3, #2
 800c186:	dd35      	ble.n	800c1f4 <_dtoa_r+0x99c>
 800c188:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c18c:	f1b9 0f00 	cmp.w	r9, #0
 800c190:	d10d      	bne.n	800c1ae <_dtoa_r+0x956>
 800c192:	4631      	mov	r1, r6
 800c194:	464b      	mov	r3, r9
 800c196:	2205      	movs	r2, #5
 800c198:	4620      	mov	r0, r4
 800c19a:	f000 fafb 	bl	800c794 <__multadd>
 800c19e:	4601      	mov	r1, r0
 800c1a0:	4606      	mov	r6, r0
 800c1a2:	4658      	mov	r0, fp
 800c1a4:	f000 fd12 	bl	800cbcc <__mcmp>
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	f73f adbd 	bgt.w	800bd28 <_dtoa_r+0x4d0>
 800c1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b0:	9d00      	ldr	r5, [sp, #0]
 800c1b2:	ea6f 0a03 	mvn.w	sl, r3
 800c1b6:	f04f 0800 	mov.w	r8, #0
 800c1ba:	4631      	mov	r1, r6
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f000 fac7 	bl	800c750 <_Bfree>
 800c1c2:	2f00      	cmp	r7, #0
 800c1c4:	f43f aeb4 	beq.w	800bf30 <_dtoa_r+0x6d8>
 800c1c8:	f1b8 0f00 	cmp.w	r8, #0
 800c1cc:	d005      	beq.n	800c1da <_dtoa_r+0x982>
 800c1ce:	45b8      	cmp	r8, r7
 800c1d0:	d003      	beq.n	800c1da <_dtoa_r+0x982>
 800c1d2:	4641      	mov	r1, r8
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f000 fabb 	bl	800c750 <_Bfree>
 800c1da:	4639      	mov	r1, r7
 800c1dc:	4620      	mov	r0, r4
 800c1de:	f000 fab7 	bl	800c750 <_Bfree>
 800c1e2:	e6a5      	b.n	800bf30 <_dtoa_r+0x6d8>
 800c1e4:	2600      	movs	r6, #0
 800c1e6:	4637      	mov	r7, r6
 800c1e8:	e7e1      	b.n	800c1ae <_dtoa_r+0x956>
 800c1ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c1ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c1f0:	4637      	mov	r7, r6
 800c1f2:	e599      	b.n	800bd28 <_dtoa_r+0x4d0>
 800c1f4:	9b08      	ldr	r3, [sp, #32]
 800c1f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	f000 80fd 	beq.w	800c3fa <_dtoa_r+0xba2>
 800c200:	2d00      	cmp	r5, #0
 800c202:	dd05      	ble.n	800c210 <_dtoa_r+0x9b8>
 800c204:	4639      	mov	r1, r7
 800c206:	462a      	mov	r2, r5
 800c208:	4620      	mov	r0, r4
 800c20a:	f000 fc73 	bl	800caf4 <__lshift>
 800c20e:	4607      	mov	r7, r0
 800c210:	9b06      	ldr	r3, [sp, #24]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d05c      	beq.n	800c2d0 <_dtoa_r+0xa78>
 800c216:	6879      	ldr	r1, [r7, #4]
 800c218:	4620      	mov	r0, r4
 800c21a:	f000 fa59 	bl	800c6d0 <_Balloc>
 800c21e:	4605      	mov	r5, r0
 800c220:	b928      	cbnz	r0, 800c22e <_dtoa_r+0x9d6>
 800c222:	4b80      	ldr	r3, [pc, #512]	; (800c424 <_dtoa_r+0xbcc>)
 800c224:	4602      	mov	r2, r0
 800c226:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c22a:	f7ff bb2e 	b.w	800b88a <_dtoa_r+0x32>
 800c22e:	693a      	ldr	r2, [r7, #16]
 800c230:	3202      	adds	r2, #2
 800c232:	0092      	lsls	r2, r2, #2
 800c234:	f107 010c 	add.w	r1, r7, #12
 800c238:	300c      	adds	r0, #12
 800c23a:	f7fe faa6 	bl	800a78a <memcpy>
 800c23e:	2201      	movs	r2, #1
 800c240:	4629      	mov	r1, r5
 800c242:	4620      	mov	r0, r4
 800c244:	f000 fc56 	bl	800caf4 <__lshift>
 800c248:	9b00      	ldr	r3, [sp, #0]
 800c24a:	3301      	adds	r3, #1
 800c24c:	9301      	str	r3, [sp, #4]
 800c24e:	9b00      	ldr	r3, [sp, #0]
 800c250:	444b      	add	r3, r9
 800c252:	9307      	str	r3, [sp, #28]
 800c254:	9b02      	ldr	r3, [sp, #8]
 800c256:	f003 0301 	and.w	r3, r3, #1
 800c25a:	46b8      	mov	r8, r7
 800c25c:	9306      	str	r3, [sp, #24]
 800c25e:	4607      	mov	r7, r0
 800c260:	9b01      	ldr	r3, [sp, #4]
 800c262:	4631      	mov	r1, r6
 800c264:	3b01      	subs	r3, #1
 800c266:	4658      	mov	r0, fp
 800c268:	9302      	str	r3, [sp, #8]
 800c26a:	f7ff fa69 	bl	800b740 <quorem>
 800c26e:	4603      	mov	r3, r0
 800c270:	3330      	adds	r3, #48	; 0x30
 800c272:	9004      	str	r0, [sp, #16]
 800c274:	4641      	mov	r1, r8
 800c276:	4658      	mov	r0, fp
 800c278:	9308      	str	r3, [sp, #32]
 800c27a:	f000 fca7 	bl	800cbcc <__mcmp>
 800c27e:	463a      	mov	r2, r7
 800c280:	4681      	mov	r9, r0
 800c282:	4631      	mov	r1, r6
 800c284:	4620      	mov	r0, r4
 800c286:	f000 fcbd 	bl	800cc04 <__mdiff>
 800c28a:	68c2      	ldr	r2, [r0, #12]
 800c28c:	9b08      	ldr	r3, [sp, #32]
 800c28e:	4605      	mov	r5, r0
 800c290:	bb02      	cbnz	r2, 800c2d4 <_dtoa_r+0xa7c>
 800c292:	4601      	mov	r1, r0
 800c294:	4658      	mov	r0, fp
 800c296:	f000 fc99 	bl	800cbcc <__mcmp>
 800c29a:	9b08      	ldr	r3, [sp, #32]
 800c29c:	4602      	mov	r2, r0
 800c29e:	4629      	mov	r1, r5
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c2a6:	f000 fa53 	bl	800c750 <_Bfree>
 800c2aa:	9b05      	ldr	r3, [sp, #20]
 800c2ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2ae:	9d01      	ldr	r5, [sp, #4]
 800c2b0:	ea43 0102 	orr.w	r1, r3, r2
 800c2b4:	9b06      	ldr	r3, [sp, #24]
 800c2b6:	430b      	orrs	r3, r1
 800c2b8:	9b08      	ldr	r3, [sp, #32]
 800c2ba:	d10d      	bne.n	800c2d8 <_dtoa_r+0xa80>
 800c2bc:	2b39      	cmp	r3, #57	; 0x39
 800c2be:	d029      	beq.n	800c314 <_dtoa_r+0xabc>
 800c2c0:	f1b9 0f00 	cmp.w	r9, #0
 800c2c4:	dd01      	ble.n	800c2ca <_dtoa_r+0xa72>
 800c2c6:	9b04      	ldr	r3, [sp, #16]
 800c2c8:	3331      	adds	r3, #49	; 0x31
 800c2ca:	9a02      	ldr	r2, [sp, #8]
 800c2cc:	7013      	strb	r3, [r2, #0]
 800c2ce:	e774      	b.n	800c1ba <_dtoa_r+0x962>
 800c2d0:	4638      	mov	r0, r7
 800c2d2:	e7b9      	b.n	800c248 <_dtoa_r+0x9f0>
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	e7e2      	b.n	800c29e <_dtoa_r+0xa46>
 800c2d8:	f1b9 0f00 	cmp.w	r9, #0
 800c2dc:	db06      	blt.n	800c2ec <_dtoa_r+0xa94>
 800c2de:	9905      	ldr	r1, [sp, #20]
 800c2e0:	ea41 0909 	orr.w	r9, r1, r9
 800c2e4:	9906      	ldr	r1, [sp, #24]
 800c2e6:	ea59 0101 	orrs.w	r1, r9, r1
 800c2ea:	d120      	bne.n	800c32e <_dtoa_r+0xad6>
 800c2ec:	2a00      	cmp	r2, #0
 800c2ee:	ddec      	ble.n	800c2ca <_dtoa_r+0xa72>
 800c2f0:	4659      	mov	r1, fp
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	9301      	str	r3, [sp, #4]
 800c2f8:	f000 fbfc 	bl	800caf4 <__lshift>
 800c2fc:	4631      	mov	r1, r6
 800c2fe:	4683      	mov	fp, r0
 800c300:	f000 fc64 	bl	800cbcc <__mcmp>
 800c304:	2800      	cmp	r0, #0
 800c306:	9b01      	ldr	r3, [sp, #4]
 800c308:	dc02      	bgt.n	800c310 <_dtoa_r+0xab8>
 800c30a:	d1de      	bne.n	800c2ca <_dtoa_r+0xa72>
 800c30c:	07da      	lsls	r2, r3, #31
 800c30e:	d5dc      	bpl.n	800c2ca <_dtoa_r+0xa72>
 800c310:	2b39      	cmp	r3, #57	; 0x39
 800c312:	d1d8      	bne.n	800c2c6 <_dtoa_r+0xa6e>
 800c314:	9a02      	ldr	r2, [sp, #8]
 800c316:	2339      	movs	r3, #57	; 0x39
 800c318:	7013      	strb	r3, [r2, #0]
 800c31a:	462b      	mov	r3, r5
 800c31c:	461d      	mov	r5, r3
 800c31e:	3b01      	subs	r3, #1
 800c320:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c324:	2a39      	cmp	r2, #57	; 0x39
 800c326:	d050      	beq.n	800c3ca <_dtoa_r+0xb72>
 800c328:	3201      	adds	r2, #1
 800c32a:	701a      	strb	r2, [r3, #0]
 800c32c:	e745      	b.n	800c1ba <_dtoa_r+0x962>
 800c32e:	2a00      	cmp	r2, #0
 800c330:	dd03      	ble.n	800c33a <_dtoa_r+0xae2>
 800c332:	2b39      	cmp	r3, #57	; 0x39
 800c334:	d0ee      	beq.n	800c314 <_dtoa_r+0xabc>
 800c336:	3301      	adds	r3, #1
 800c338:	e7c7      	b.n	800c2ca <_dtoa_r+0xa72>
 800c33a:	9a01      	ldr	r2, [sp, #4]
 800c33c:	9907      	ldr	r1, [sp, #28]
 800c33e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c342:	428a      	cmp	r2, r1
 800c344:	d02a      	beq.n	800c39c <_dtoa_r+0xb44>
 800c346:	4659      	mov	r1, fp
 800c348:	2300      	movs	r3, #0
 800c34a:	220a      	movs	r2, #10
 800c34c:	4620      	mov	r0, r4
 800c34e:	f000 fa21 	bl	800c794 <__multadd>
 800c352:	45b8      	cmp	r8, r7
 800c354:	4683      	mov	fp, r0
 800c356:	f04f 0300 	mov.w	r3, #0
 800c35a:	f04f 020a 	mov.w	r2, #10
 800c35e:	4641      	mov	r1, r8
 800c360:	4620      	mov	r0, r4
 800c362:	d107      	bne.n	800c374 <_dtoa_r+0xb1c>
 800c364:	f000 fa16 	bl	800c794 <__multadd>
 800c368:	4680      	mov	r8, r0
 800c36a:	4607      	mov	r7, r0
 800c36c:	9b01      	ldr	r3, [sp, #4]
 800c36e:	3301      	adds	r3, #1
 800c370:	9301      	str	r3, [sp, #4]
 800c372:	e775      	b.n	800c260 <_dtoa_r+0xa08>
 800c374:	f000 fa0e 	bl	800c794 <__multadd>
 800c378:	4639      	mov	r1, r7
 800c37a:	4680      	mov	r8, r0
 800c37c:	2300      	movs	r3, #0
 800c37e:	220a      	movs	r2, #10
 800c380:	4620      	mov	r0, r4
 800c382:	f000 fa07 	bl	800c794 <__multadd>
 800c386:	4607      	mov	r7, r0
 800c388:	e7f0      	b.n	800c36c <_dtoa_r+0xb14>
 800c38a:	f1b9 0f00 	cmp.w	r9, #0
 800c38e:	9a00      	ldr	r2, [sp, #0]
 800c390:	bfcc      	ite	gt
 800c392:	464d      	movgt	r5, r9
 800c394:	2501      	movle	r5, #1
 800c396:	4415      	add	r5, r2
 800c398:	f04f 0800 	mov.w	r8, #0
 800c39c:	4659      	mov	r1, fp
 800c39e:	2201      	movs	r2, #1
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	9301      	str	r3, [sp, #4]
 800c3a4:	f000 fba6 	bl	800caf4 <__lshift>
 800c3a8:	4631      	mov	r1, r6
 800c3aa:	4683      	mov	fp, r0
 800c3ac:	f000 fc0e 	bl	800cbcc <__mcmp>
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	dcb2      	bgt.n	800c31a <_dtoa_r+0xac2>
 800c3b4:	d102      	bne.n	800c3bc <_dtoa_r+0xb64>
 800c3b6:	9b01      	ldr	r3, [sp, #4]
 800c3b8:	07db      	lsls	r3, r3, #31
 800c3ba:	d4ae      	bmi.n	800c31a <_dtoa_r+0xac2>
 800c3bc:	462b      	mov	r3, r5
 800c3be:	461d      	mov	r5, r3
 800c3c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3c4:	2a30      	cmp	r2, #48	; 0x30
 800c3c6:	d0fa      	beq.n	800c3be <_dtoa_r+0xb66>
 800c3c8:	e6f7      	b.n	800c1ba <_dtoa_r+0x962>
 800c3ca:	9a00      	ldr	r2, [sp, #0]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d1a5      	bne.n	800c31c <_dtoa_r+0xac4>
 800c3d0:	f10a 0a01 	add.w	sl, sl, #1
 800c3d4:	2331      	movs	r3, #49	; 0x31
 800c3d6:	e779      	b.n	800c2cc <_dtoa_r+0xa74>
 800c3d8:	4b13      	ldr	r3, [pc, #76]	; (800c428 <_dtoa_r+0xbd0>)
 800c3da:	f7ff baaf 	b.w	800b93c <_dtoa_r+0xe4>
 800c3de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f47f aa86 	bne.w	800b8f2 <_dtoa_r+0x9a>
 800c3e6:	4b11      	ldr	r3, [pc, #68]	; (800c42c <_dtoa_r+0xbd4>)
 800c3e8:	f7ff baa8 	b.w	800b93c <_dtoa_r+0xe4>
 800c3ec:	f1b9 0f00 	cmp.w	r9, #0
 800c3f0:	dc03      	bgt.n	800c3fa <_dtoa_r+0xba2>
 800c3f2:	9b05      	ldr	r3, [sp, #20]
 800c3f4:	2b02      	cmp	r3, #2
 800c3f6:	f73f aec9 	bgt.w	800c18c <_dtoa_r+0x934>
 800c3fa:	9d00      	ldr	r5, [sp, #0]
 800c3fc:	4631      	mov	r1, r6
 800c3fe:	4658      	mov	r0, fp
 800c400:	f7ff f99e 	bl	800b740 <quorem>
 800c404:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c408:	f805 3b01 	strb.w	r3, [r5], #1
 800c40c:	9a00      	ldr	r2, [sp, #0]
 800c40e:	1aaa      	subs	r2, r5, r2
 800c410:	4591      	cmp	r9, r2
 800c412:	ddba      	ble.n	800c38a <_dtoa_r+0xb32>
 800c414:	4659      	mov	r1, fp
 800c416:	2300      	movs	r3, #0
 800c418:	220a      	movs	r2, #10
 800c41a:	4620      	mov	r0, r4
 800c41c:	f000 f9ba 	bl	800c794 <__multadd>
 800c420:	4683      	mov	fp, r0
 800c422:	e7eb      	b.n	800c3fc <_dtoa_r+0xba4>
 800c424:	0800db18 	.word	0x0800db18
 800c428:	0800d970 	.word	0x0800d970
 800c42c:	0800da95 	.word	0x0800da95

0800c430 <__sflush_r>:
 800c430:	898a      	ldrh	r2, [r1, #12]
 800c432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c436:	4605      	mov	r5, r0
 800c438:	0710      	lsls	r0, r2, #28
 800c43a:	460c      	mov	r4, r1
 800c43c:	d458      	bmi.n	800c4f0 <__sflush_r+0xc0>
 800c43e:	684b      	ldr	r3, [r1, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	dc05      	bgt.n	800c450 <__sflush_r+0x20>
 800c444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c446:	2b00      	cmp	r3, #0
 800c448:	dc02      	bgt.n	800c450 <__sflush_r+0x20>
 800c44a:	2000      	movs	r0, #0
 800c44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c452:	2e00      	cmp	r6, #0
 800c454:	d0f9      	beq.n	800c44a <__sflush_r+0x1a>
 800c456:	2300      	movs	r3, #0
 800c458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c45c:	682f      	ldr	r7, [r5, #0]
 800c45e:	602b      	str	r3, [r5, #0]
 800c460:	d032      	beq.n	800c4c8 <__sflush_r+0x98>
 800c462:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c464:	89a3      	ldrh	r3, [r4, #12]
 800c466:	075a      	lsls	r2, r3, #29
 800c468:	d505      	bpl.n	800c476 <__sflush_r+0x46>
 800c46a:	6863      	ldr	r3, [r4, #4]
 800c46c:	1ac0      	subs	r0, r0, r3
 800c46e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c470:	b10b      	cbz	r3, 800c476 <__sflush_r+0x46>
 800c472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c474:	1ac0      	subs	r0, r0, r3
 800c476:	2300      	movs	r3, #0
 800c478:	4602      	mov	r2, r0
 800c47a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c47c:	6a21      	ldr	r1, [r4, #32]
 800c47e:	4628      	mov	r0, r5
 800c480:	47b0      	blx	r6
 800c482:	1c43      	adds	r3, r0, #1
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	d106      	bne.n	800c496 <__sflush_r+0x66>
 800c488:	6829      	ldr	r1, [r5, #0]
 800c48a:	291d      	cmp	r1, #29
 800c48c:	d82c      	bhi.n	800c4e8 <__sflush_r+0xb8>
 800c48e:	4a2a      	ldr	r2, [pc, #168]	; (800c538 <__sflush_r+0x108>)
 800c490:	40ca      	lsrs	r2, r1
 800c492:	07d6      	lsls	r6, r2, #31
 800c494:	d528      	bpl.n	800c4e8 <__sflush_r+0xb8>
 800c496:	2200      	movs	r2, #0
 800c498:	6062      	str	r2, [r4, #4]
 800c49a:	04d9      	lsls	r1, r3, #19
 800c49c:	6922      	ldr	r2, [r4, #16]
 800c49e:	6022      	str	r2, [r4, #0]
 800c4a0:	d504      	bpl.n	800c4ac <__sflush_r+0x7c>
 800c4a2:	1c42      	adds	r2, r0, #1
 800c4a4:	d101      	bne.n	800c4aa <__sflush_r+0x7a>
 800c4a6:	682b      	ldr	r3, [r5, #0]
 800c4a8:	b903      	cbnz	r3, 800c4ac <__sflush_r+0x7c>
 800c4aa:	6560      	str	r0, [r4, #84]	; 0x54
 800c4ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4ae:	602f      	str	r7, [r5, #0]
 800c4b0:	2900      	cmp	r1, #0
 800c4b2:	d0ca      	beq.n	800c44a <__sflush_r+0x1a>
 800c4b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4b8:	4299      	cmp	r1, r3
 800c4ba:	d002      	beq.n	800c4c2 <__sflush_r+0x92>
 800c4bc:	4628      	mov	r0, r5
 800c4be:	f000 fc95 	bl	800cdec <_free_r>
 800c4c2:	2000      	movs	r0, #0
 800c4c4:	6360      	str	r0, [r4, #52]	; 0x34
 800c4c6:	e7c1      	b.n	800c44c <__sflush_r+0x1c>
 800c4c8:	6a21      	ldr	r1, [r4, #32]
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	47b0      	blx	r6
 800c4d0:	1c41      	adds	r1, r0, #1
 800c4d2:	d1c7      	bne.n	800c464 <__sflush_r+0x34>
 800c4d4:	682b      	ldr	r3, [r5, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d0c4      	beq.n	800c464 <__sflush_r+0x34>
 800c4da:	2b1d      	cmp	r3, #29
 800c4dc:	d001      	beq.n	800c4e2 <__sflush_r+0xb2>
 800c4de:	2b16      	cmp	r3, #22
 800c4e0:	d101      	bne.n	800c4e6 <__sflush_r+0xb6>
 800c4e2:	602f      	str	r7, [r5, #0]
 800c4e4:	e7b1      	b.n	800c44a <__sflush_r+0x1a>
 800c4e6:	89a3      	ldrh	r3, [r4, #12]
 800c4e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4ec:	81a3      	strh	r3, [r4, #12]
 800c4ee:	e7ad      	b.n	800c44c <__sflush_r+0x1c>
 800c4f0:	690f      	ldr	r7, [r1, #16]
 800c4f2:	2f00      	cmp	r7, #0
 800c4f4:	d0a9      	beq.n	800c44a <__sflush_r+0x1a>
 800c4f6:	0793      	lsls	r3, r2, #30
 800c4f8:	680e      	ldr	r6, [r1, #0]
 800c4fa:	bf08      	it	eq
 800c4fc:	694b      	ldreq	r3, [r1, #20]
 800c4fe:	600f      	str	r7, [r1, #0]
 800c500:	bf18      	it	ne
 800c502:	2300      	movne	r3, #0
 800c504:	eba6 0807 	sub.w	r8, r6, r7
 800c508:	608b      	str	r3, [r1, #8]
 800c50a:	f1b8 0f00 	cmp.w	r8, #0
 800c50e:	dd9c      	ble.n	800c44a <__sflush_r+0x1a>
 800c510:	6a21      	ldr	r1, [r4, #32]
 800c512:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c514:	4643      	mov	r3, r8
 800c516:	463a      	mov	r2, r7
 800c518:	4628      	mov	r0, r5
 800c51a:	47b0      	blx	r6
 800c51c:	2800      	cmp	r0, #0
 800c51e:	dc06      	bgt.n	800c52e <__sflush_r+0xfe>
 800c520:	89a3      	ldrh	r3, [r4, #12]
 800c522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c526:	81a3      	strh	r3, [r4, #12]
 800c528:	f04f 30ff 	mov.w	r0, #4294967295
 800c52c:	e78e      	b.n	800c44c <__sflush_r+0x1c>
 800c52e:	4407      	add	r7, r0
 800c530:	eba8 0800 	sub.w	r8, r8, r0
 800c534:	e7e9      	b.n	800c50a <__sflush_r+0xda>
 800c536:	bf00      	nop
 800c538:	20400001 	.word	0x20400001

0800c53c <_fflush_r>:
 800c53c:	b538      	push	{r3, r4, r5, lr}
 800c53e:	690b      	ldr	r3, [r1, #16]
 800c540:	4605      	mov	r5, r0
 800c542:	460c      	mov	r4, r1
 800c544:	b913      	cbnz	r3, 800c54c <_fflush_r+0x10>
 800c546:	2500      	movs	r5, #0
 800c548:	4628      	mov	r0, r5
 800c54a:	bd38      	pop	{r3, r4, r5, pc}
 800c54c:	b118      	cbz	r0, 800c556 <_fflush_r+0x1a>
 800c54e:	6983      	ldr	r3, [r0, #24]
 800c550:	b90b      	cbnz	r3, 800c556 <_fflush_r+0x1a>
 800c552:	f7fe f855 	bl	800a600 <__sinit>
 800c556:	4b14      	ldr	r3, [pc, #80]	; (800c5a8 <_fflush_r+0x6c>)
 800c558:	429c      	cmp	r4, r3
 800c55a:	d11b      	bne.n	800c594 <_fflush_r+0x58>
 800c55c:	686c      	ldr	r4, [r5, #4]
 800c55e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d0ef      	beq.n	800c546 <_fflush_r+0xa>
 800c566:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c568:	07d0      	lsls	r0, r2, #31
 800c56a:	d404      	bmi.n	800c576 <_fflush_r+0x3a>
 800c56c:	0599      	lsls	r1, r3, #22
 800c56e:	d402      	bmi.n	800c576 <_fflush_r+0x3a>
 800c570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c572:	f7fe f908 	bl	800a786 <__retarget_lock_acquire_recursive>
 800c576:	4628      	mov	r0, r5
 800c578:	4621      	mov	r1, r4
 800c57a:	f7ff ff59 	bl	800c430 <__sflush_r>
 800c57e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c580:	07da      	lsls	r2, r3, #31
 800c582:	4605      	mov	r5, r0
 800c584:	d4e0      	bmi.n	800c548 <_fflush_r+0xc>
 800c586:	89a3      	ldrh	r3, [r4, #12]
 800c588:	059b      	lsls	r3, r3, #22
 800c58a:	d4dd      	bmi.n	800c548 <_fflush_r+0xc>
 800c58c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c58e:	f7fe f8fb 	bl	800a788 <__retarget_lock_release_recursive>
 800c592:	e7d9      	b.n	800c548 <_fflush_r+0xc>
 800c594:	4b05      	ldr	r3, [pc, #20]	; (800c5ac <_fflush_r+0x70>)
 800c596:	429c      	cmp	r4, r3
 800c598:	d101      	bne.n	800c59e <_fflush_r+0x62>
 800c59a:	68ac      	ldr	r4, [r5, #8]
 800c59c:	e7df      	b.n	800c55e <_fflush_r+0x22>
 800c59e:	4b04      	ldr	r3, [pc, #16]	; (800c5b0 <_fflush_r+0x74>)
 800c5a0:	429c      	cmp	r4, r3
 800c5a2:	bf08      	it	eq
 800c5a4:	68ec      	ldreq	r4, [r5, #12]
 800c5a6:	e7da      	b.n	800c55e <_fflush_r+0x22>
 800c5a8:	0800d91c 	.word	0x0800d91c
 800c5ac:	0800d93c 	.word	0x0800d93c
 800c5b0:	0800d8fc 	.word	0x0800d8fc

0800c5b4 <_localeconv_r>:
 800c5b4:	4800      	ldr	r0, [pc, #0]	; (800c5b8 <_localeconv_r+0x4>)
 800c5b6:	4770      	bx	lr
 800c5b8:	200001b0 	.word	0x200001b0

0800c5bc <_lseek_r>:
 800c5bc:	b538      	push	{r3, r4, r5, lr}
 800c5be:	4d07      	ldr	r5, [pc, #28]	; (800c5dc <_lseek_r+0x20>)
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	4608      	mov	r0, r1
 800c5c4:	4611      	mov	r1, r2
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	602a      	str	r2, [r5, #0]
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	f7f6 ff9e 	bl	800350c <_lseek>
 800c5d0:	1c43      	adds	r3, r0, #1
 800c5d2:	d102      	bne.n	800c5da <_lseek_r+0x1e>
 800c5d4:	682b      	ldr	r3, [r5, #0]
 800c5d6:	b103      	cbz	r3, 800c5da <_lseek_r+0x1e>
 800c5d8:	6023      	str	r3, [r4, #0]
 800c5da:	bd38      	pop	{r3, r4, r5, pc}
 800c5dc:	20005228 	.word	0x20005228

0800c5e0 <__swhatbuf_r>:
 800c5e0:	b570      	push	{r4, r5, r6, lr}
 800c5e2:	460e      	mov	r6, r1
 800c5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5e8:	2900      	cmp	r1, #0
 800c5ea:	b096      	sub	sp, #88	; 0x58
 800c5ec:	4614      	mov	r4, r2
 800c5ee:	461d      	mov	r5, r3
 800c5f0:	da07      	bge.n	800c602 <__swhatbuf_r+0x22>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	602b      	str	r3, [r5, #0]
 800c5f6:	89b3      	ldrh	r3, [r6, #12]
 800c5f8:	061a      	lsls	r2, r3, #24
 800c5fa:	d410      	bmi.n	800c61e <__swhatbuf_r+0x3e>
 800c5fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c600:	e00e      	b.n	800c620 <__swhatbuf_r+0x40>
 800c602:	466a      	mov	r2, sp
 800c604:	f000 ff3a 	bl	800d47c <_fstat_r>
 800c608:	2800      	cmp	r0, #0
 800c60a:	dbf2      	blt.n	800c5f2 <__swhatbuf_r+0x12>
 800c60c:	9a01      	ldr	r2, [sp, #4]
 800c60e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c612:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c616:	425a      	negs	r2, r3
 800c618:	415a      	adcs	r2, r3
 800c61a:	602a      	str	r2, [r5, #0]
 800c61c:	e7ee      	b.n	800c5fc <__swhatbuf_r+0x1c>
 800c61e:	2340      	movs	r3, #64	; 0x40
 800c620:	2000      	movs	r0, #0
 800c622:	6023      	str	r3, [r4, #0]
 800c624:	b016      	add	sp, #88	; 0x58
 800c626:	bd70      	pop	{r4, r5, r6, pc}

0800c628 <__smakebuf_r>:
 800c628:	898b      	ldrh	r3, [r1, #12]
 800c62a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c62c:	079d      	lsls	r5, r3, #30
 800c62e:	4606      	mov	r6, r0
 800c630:	460c      	mov	r4, r1
 800c632:	d507      	bpl.n	800c644 <__smakebuf_r+0x1c>
 800c634:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	6123      	str	r3, [r4, #16]
 800c63c:	2301      	movs	r3, #1
 800c63e:	6163      	str	r3, [r4, #20]
 800c640:	b002      	add	sp, #8
 800c642:	bd70      	pop	{r4, r5, r6, pc}
 800c644:	ab01      	add	r3, sp, #4
 800c646:	466a      	mov	r2, sp
 800c648:	f7ff ffca 	bl	800c5e0 <__swhatbuf_r>
 800c64c:	9900      	ldr	r1, [sp, #0]
 800c64e:	4605      	mov	r5, r0
 800c650:	4630      	mov	r0, r6
 800c652:	f7fe f8b1 	bl	800a7b8 <_malloc_r>
 800c656:	b948      	cbnz	r0, 800c66c <__smakebuf_r+0x44>
 800c658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c65c:	059a      	lsls	r2, r3, #22
 800c65e:	d4ef      	bmi.n	800c640 <__smakebuf_r+0x18>
 800c660:	f023 0303 	bic.w	r3, r3, #3
 800c664:	f043 0302 	orr.w	r3, r3, #2
 800c668:	81a3      	strh	r3, [r4, #12]
 800c66a:	e7e3      	b.n	800c634 <__smakebuf_r+0xc>
 800c66c:	4b0d      	ldr	r3, [pc, #52]	; (800c6a4 <__smakebuf_r+0x7c>)
 800c66e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c670:	89a3      	ldrh	r3, [r4, #12]
 800c672:	6020      	str	r0, [r4, #0]
 800c674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c678:	81a3      	strh	r3, [r4, #12]
 800c67a:	9b00      	ldr	r3, [sp, #0]
 800c67c:	6163      	str	r3, [r4, #20]
 800c67e:	9b01      	ldr	r3, [sp, #4]
 800c680:	6120      	str	r0, [r4, #16]
 800c682:	b15b      	cbz	r3, 800c69c <__smakebuf_r+0x74>
 800c684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c688:	4630      	mov	r0, r6
 800c68a:	f000 ff09 	bl	800d4a0 <_isatty_r>
 800c68e:	b128      	cbz	r0, 800c69c <__smakebuf_r+0x74>
 800c690:	89a3      	ldrh	r3, [r4, #12]
 800c692:	f023 0303 	bic.w	r3, r3, #3
 800c696:	f043 0301 	orr.w	r3, r3, #1
 800c69a:	81a3      	strh	r3, [r4, #12]
 800c69c:	89a0      	ldrh	r0, [r4, #12]
 800c69e:	4305      	orrs	r5, r0
 800c6a0:	81a5      	strh	r5, [r4, #12]
 800c6a2:	e7cd      	b.n	800c640 <__smakebuf_r+0x18>
 800c6a4:	0800a599 	.word	0x0800a599

0800c6a8 <malloc>:
 800c6a8:	4b02      	ldr	r3, [pc, #8]	; (800c6b4 <malloc+0xc>)
 800c6aa:	4601      	mov	r1, r0
 800c6ac:	6818      	ldr	r0, [r3, #0]
 800c6ae:	f7fe b883 	b.w	800a7b8 <_malloc_r>
 800c6b2:	bf00      	nop
 800c6b4:	2000005c 	.word	0x2000005c

0800c6b8 <__malloc_lock>:
 800c6b8:	4801      	ldr	r0, [pc, #4]	; (800c6c0 <__malloc_lock+0x8>)
 800c6ba:	f7fe b864 	b.w	800a786 <__retarget_lock_acquire_recursive>
 800c6be:	bf00      	nop
 800c6c0:	20005220 	.word	0x20005220

0800c6c4 <__malloc_unlock>:
 800c6c4:	4801      	ldr	r0, [pc, #4]	; (800c6cc <__malloc_unlock+0x8>)
 800c6c6:	f7fe b85f 	b.w	800a788 <__retarget_lock_release_recursive>
 800c6ca:	bf00      	nop
 800c6cc:	20005220 	.word	0x20005220

0800c6d0 <_Balloc>:
 800c6d0:	b570      	push	{r4, r5, r6, lr}
 800c6d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c6d4:	4604      	mov	r4, r0
 800c6d6:	460d      	mov	r5, r1
 800c6d8:	b976      	cbnz	r6, 800c6f8 <_Balloc+0x28>
 800c6da:	2010      	movs	r0, #16
 800c6dc:	f7ff ffe4 	bl	800c6a8 <malloc>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	6260      	str	r0, [r4, #36]	; 0x24
 800c6e4:	b920      	cbnz	r0, 800c6f0 <_Balloc+0x20>
 800c6e6:	4b18      	ldr	r3, [pc, #96]	; (800c748 <_Balloc+0x78>)
 800c6e8:	4818      	ldr	r0, [pc, #96]	; (800c74c <_Balloc+0x7c>)
 800c6ea:	2166      	movs	r1, #102	; 0x66
 800c6ec:	f000 fe96 	bl	800d41c <__assert_func>
 800c6f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6f4:	6006      	str	r6, [r0, #0]
 800c6f6:	60c6      	str	r6, [r0, #12]
 800c6f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c6fa:	68f3      	ldr	r3, [r6, #12]
 800c6fc:	b183      	cbz	r3, 800c720 <_Balloc+0x50>
 800c6fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c700:	68db      	ldr	r3, [r3, #12]
 800c702:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c706:	b9b8      	cbnz	r0, 800c738 <_Balloc+0x68>
 800c708:	2101      	movs	r1, #1
 800c70a:	fa01 f605 	lsl.w	r6, r1, r5
 800c70e:	1d72      	adds	r2, r6, #5
 800c710:	0092      	lsls	r2, r2, #2
 800c712:	4620      	mov	r0, r4
 800c714:	f000 fb5a 	bl	800cdcc <_calloc_r>
 800c718:	b160      	cbz	r0, 800c734 <_Balloc+0x64>
 800c71a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c71e:	e00e      	b.n	800c73e <_Balloc+0x6e>
 800c720:	2221      	movs	r2, #33	; 0x21
 800c722:	2104      	movs	r1, #4
 800c724:	4620      	mov	r0, r4
 800c726:	f000 fb51 	bl	800cdcc <_calloc_r>
 800c72a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c72c:	60f0      	str	r0, [r6, #12]
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d1e4      	bne.n	800c6fe <_Balloc+0x2e>
 800c734:	2000      	movs	r0, #0
 800c736:	bd70      	pop	{r4, r5, r6, pc}
 800c738:	6802      	ldr	r2, [r0, #0]
 800c73a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c73e:	2300      	movs	r3, #0
 800c740:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c744:	e7f7      	b.n	800c736 <_Balloc+0x66>
 800c746:	bf00      	nop
 800c748:	0800daa2 	.word	0x0800daa2
 800c74c:	0800db29 	.word	0x0800db29

0800c750 <_Bfree>:
 800c750:	b570      	push	{r4, r5, r6, lr}
 800c752:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c754:	4605      	mov	r5, r0
 800c756:	460c      	mov	r4, r1
 800c758:	b976      	cbnz	r6, 800c778 <_Bfree+0x28>
 800c75a:	2010      	movs	r0, #16
 800c75c:	f7ff ffa4 	bl	800c6a8 <malloc>
 800c760:	4602      	mov	r2, r0
 800c762:	6268      	str	r0, [r5, #36]	; 0x24
 800c764:	b920      	cbnz	r0, 800c770 <_Bfree+0x20>
 800c766:	4b09      	ldr	r3, [pc, #36]	; (800c78c <_Bfree+0x3c>)
 800c768:	4809      	ldr	r0, [pc, #36]	; (800c790 <_Bfree+0x40>)
 800c76a:	218a      	movs	r1, #138	; 0x8a
 800c76c:	f000 fe56 	bl	800d41c <__assert_func>
 800c770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c774:	6006      	str	r6, [r0, #0]
 800c776:	60c6      	str	r6, [r0, #12]
 800c778:	b13c      	cbz	r4, 800c78a <_Bfree+0x3a>
 800c77a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c77c:	6862      	ldr	r2, [r4, #4]
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c784:	6021      	str	r1, [r4, #0]
 800c786:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c78a:	bd70      	pop	{r4, r5, r6, pc}
 800c78c:	0800daa2 	.word	0x0800daa2
 800c790:	0800db29 	.word	0x0800db29

0800c794 <__multadd>:
 800c794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c798:	690e      	ldr	r6, [r1, #16]
 800c79a:	4607      	mov	r7, r0
 800c79c:	4698      	mov	r8, r3
 800c79e:	460c      	mov	r4, r1
 800c7a0:	f101 0014 	add.w	r0, r1, #20
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	6805      	ldr	r5, [r0, #0]
 800c7a8:	b2a9      	uxth	r1, r5
 800c7aa:	fb02 8101 	mla	r1, r2, r1, r8
 800c7ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c7b2:	0c2d      	lsrs	r5, r5, #16
 800c7b4:	fb02 c505 	mla	r5, r2, r5, ip
 800c7b8:	b289      	uxth	r1, r1
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c7c0:	429e      	cmp	r6, r3
 800c7c2:	f840 1b04 	str.w	r1, [r0], #4
 800c7c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c7ca:	dcec      	bgt.n	800c7a6 <__multadd+0x12>
 800c7cc:	f1b8 0f00 	cmp.w	r8, #0
 800c7d0:	d022      	beq.n	800c818 <__multadd+0x84>
 800c7d2:	68a3      	ldr	r3, [r4, #8]
 800c7d4:	42b3      	cmp	r3, r6
 800c7d6:	dc19      	bgt.n	800c80c <__multadd+0x78>
 800c7d8:	6861      	ldr	r1, [r4, #4]
 800c7da:	4638      	mov	r0, r7
 800c7dc:	3101      	adds	r1, #1
 800c7de:	f7ff ff77 	bl	800c6d0 <_Balloc>
 800c7e2:	4605      	mov	r5, r0
 800c7e4:	b928      	cbnz	r0, 800c7f2 <__multadd+0x5e>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	4b0d      	ldr	r3, [pc, #52]	; (800c820 <__multadd+0x8c>)
 800c7ea:	480e      	ldr	r0, [pc, #56]	; (800c824 <__multadd+0x90>)
 800c7ec:	21b5      	movs	r1, #181	; 0xb5
 800c7ee:	f000 fe15 	bl	800d41c <__assert_func>
 800c7f2:	6922      	ldr	r2, [r4, #16]
 800c7f4:	3202      	adds	r2, #2
 800c7f6:	f104 010c 	add.w	r1, r4, #12
 800c7fa:	0092      	lsls	r2, r2, #2
 800c7fc:	300c      	adds	r0, #12
 800c7fe:	f7fd ffc4 	bl	800a78a <memcpy>
 800c802:	4621      	mov	r1, r4
 800c804:	4638      	mov	r0, r7
 800c806:	f7ff ffa3 	bl	800c750 <_Bfree>
 800c80a:	462c      	mov	r4, r5
 800c80c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c810:	3601      	adds	r6, #1
 800c812:	f8c3 8014 	str.w	r8, [r3, #20]
 800c816:	6126      	str	r6, [r4, #16]
 800c818:	4620      	mov	r0, r4
 800c81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c81e:	bf00      	nop
 800c820:	0800db18 	.word	0x0800db18
 800c824:	0800db29 	.word	0x0800db29

0800c828 <__hi0bits>:
 800c828:	0c03      	lsrs	r3, r0, #16
 800c82a:	041b      	lsls	r3, r3, #16
 800c82c:	b9d3      	cbnz	r3, 800c864 <__hi0bits+0x3c>
 800c82e:	0400      	lsls	r0, r0, #16
 800c830:	2310      	movs	r3, #16
 800c832:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c836:	bf04      	itt	eq
 800c838:	0200      	lsleq	r0, r0, #8
 800c83a:	3308      	addeq	r3, #8
 800c83c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c840:	bf04      	itt	eq
 800c842:	0100      	lsleq	r0, r0, #4
 800c844:	3304      	addeq	r3, #4
 800c846:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c84a:	bf04      	itt	eq
 800c84c:	0080      	lsleq	r0, r0, #2
 800c84e:	3302      	addeq	r3, #2
 800c850:	2800      	cmp	r0, #0
 800c852:	db05      	blt.n	800c860 <__hi0bits+0x38>
 800c854:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c858:	f103 0301 	add.w	r3, r3, #1
 800c85c:	bf08      	it	eq
 800c85e:	2320      	moveq	r3, #32
 800c860:	4618      	mov	r0, r3
 800c862:	4770      	bx	lr
 800c864:	2300      	movs	r3, #0
 800c866:	e7e4      	b.n	800c832 <__hi0bits+0xa>

0800c868 <__lo0bits>:
 800c868:	6803      	ldr	r3, [r0, #0]
 800c86a:	f013 0207 	ands.w	r2, r3, #7
 800c86e:	4601      	mov	r1, r0
 800c870:	d00b      	beq.n	800c88a <__lo0bits+0x22>
 800c872:	07da      	lsls	r2, r3, #31
 800c874:	d424      	bmi.n	800c8c0 <__lo0bits+0x58>
 800c876:	0798      	lsls	r0, r3, #30
 800c878:	bf49      	itett	mi
 800c87a:	085b      	lsrmi	r3, r3, #1
 800c87c:	089b      	lsrpl	r3, r3, #2
 800c87e:	2001      	movmi	r0, #1
 800c880:	600b      	strmi	r3, [r1, #0]
 800c882:	bf5c      	itt	pl
 800c884:	600b      	strpl	r3, [r1, #0]
 800c886:	2002      	movpl	r0, #2
 800c888:	4770      	bx	lr
 800c88a:	b298      	uxth	r0, r3
 800c88c:	b9b0      	cbnz	r0, 800c8bc <__lo0bits+0x54>
 800c88e:	0c1b      	lsrs	r3, r3, #16
 800c890:	2010      	movs	r0, #16
 800c892:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c896:	bf04      	itt	eq
 800c898:	0a1b      	lsreq	r3, r3, #8
 800c89a:	3008      	addeq	r0, #8
 800c89c:	071a      	lsls	r2, r3, #28
 800c89e:	bf04      	itt	eq
 800c8a0:	091b      	lsreq	r3, r3, #4
 800c8a2:	3004      	addeq	r0, #4
 800c8a4:	079a      	lsls	r2, r3, #30
 800c8a6:	bf04      	itt	eq
 800c8a8:	089b      	lsreq	r3, r3, #2
 800c8aa:	3002      	addeq	r0, #2
 800c8ac:	07da      	lsls	r2, r3, #31
 800c8ae:	d403      	bmi.n	800c8b8 <__lo0bits+0x50>
 800c8b0:	085b      	lsrs	r3, r3, #1
 800c8b2:	f100 0001 	add.w	r0, r0, #1
 800c8b6:	d005      	beq.n	800c8c4 <__lo0bits+0x5c>
 800c8b8:	600b      	str	r3, [r1, #0]
 800c8ba:	4770      	bx	lr
 800c8bc:	4610      	mov	r0, r2
 800c8be:	e7e8      	b.n	800c892 <__lo0bits+0x2a>
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	4770      	bx	lr
 800c8c4:	2020      	movs	r0, #32
 800c8c6:	4770      	bx	lr

0800c8c8 <__i2b>:
 800c8c8:	b510      	push	{r4, lr}
 800c8ca:	460c      	mov	r4, r1
 800c8cc:	2101      	movs	r1, #1
 800c8ce:	f7ff feff 	bl	800c6d0 <_Balloc>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	b928      	cbnz	r0, 800c8e2 <__i2b+0x1a>
 800c8d6:	4b05      	ldr	r3, [pc, #20]	; (800c8ec <__i2b+0x24>)
 800c8d8:	4805      	ldr	r0, [pc, #20]	; (800c8f0 <__i2b+0x28>)
 800c8da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c8de:	f000 fd9d 	bl	800d41c <__assert_func>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	6144      	str	r4, [r0, #20]
 800c8e6:	6103      	str	r3, [r0, #16]
 800c8e8:	bd10      	pop	{r4, pc}
 800c8ea:	bf00      	nop
 800c8ec:	0800db18 	.word	0x0800db18
 800c8f0:	0800db29 	.word	0x0800db29

0800c8f4 <__multiply>:
 800c8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f8:	4614      	mov	r4, r2
 800c8fa:	690a      	ldr	r2, [r1, #16]
 800c8fc:	6923      	ldr	r3, [r4, #16]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	bfb8      	it	lt
 800c902:	460b      	movlt	r3, r1
 800c904:	460d      	mov	r5, r1
 800c906:	bfbc      	itt	lt
 800c908:	4625      	movlt	r5, r4
 800c90a:	461c      	movlt	r4, r3
 800c90c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c910:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c914:	68ab      	ldr	r3, [r5, #8]
 800c916:	6869      	ldr	r1, [r5, #4]
 800c918:	eb0a 0709 	add.w	r7, sl, r9
 800c91c:	42bb      	cmp	r3, r7
 800c91e:	b085      	sub	sp, #20
 800c920:	bfb8      	it	lt
 800c922:	3101      	addlt	r1, #1
 800c924:	f7ff fed4 	bl	800c6d0 <_Balloc>
 800c928:	b930      	cbnz	r0, 800c938 <__multiply+0x44>
 800c92a:	4602      	mov	r2, r0
 800c92c:	4b42      	ldr	r3, [pc, #264]	; (800ca38 <__multiply+0x144>)
 800c92e:	4843      	ldr	r0, [pc, #268]	; (800ca3c <__multiply+0x148>)
 800c930:	f240 115d 	movw	r1, #349	; 0x15d
 800c934:	f000 fd72 	bl	800d41c <__assert_func>
 800c938:	f100 0614 	add.w	r6, r0, #20
 800c93c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c940:	4633      	mov	r3, r6
 800c942:	2200      	movs	r2, #0
 800c944:	4543      	cmp	r3, r8
 800c946:	d31e      	bcc.n	800c986 <__multiply+0x92>
 800c948:	f105 0c14 	add.w	ip, r5, #20
 800c94c:	f104 0314 	add.w	r3, r4, #20
 800c950:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c954:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c958:	9202      	str	r2, [sp, #8]
 800c95a:	ebac 0205 	sub.w	r2, ip, r5
 800c95e:	3a15      	subs	r2, #21
 800c960:	f022 0203 	bic.w	r2, r2, #3
 800c964:	3204      	adds	r2, #4
 800c966:	f105 0115 	add.w	r1, r5, #21
 800c96a:	458c      	cmp	ip, r1
 800c96c:	bf38      	it	cc
 800c96e:	2204      	movcc	r2, #4
 800c970:	9201      	str	r2, [sp, #4]
 800c972:	9a02      	ldr	r2, [sp, #8]
 800c974:	9303      	str	r3, [sp, #12]
 800c976:	429a      	cmp	r2, r3
 800c978:	d808      	bhi.n	800c98c <__multiply+0x98>
 800c97a:	2f00      	cmp	r7, #0
 800c97c:	dc55      	bgt.n	800ca2a <__multiply+0x136>
 800c97e:	6107      	str	r7, [r0, #16]
 800c980:	b005      	add	sp, #20
 800c982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c986:	f843 2b04 	str.w	r2, [r3], #4
 800c98a:	e7db      	b.n	800c944 <__multiply+0x50>
 800c98c:	f8b3 a000 	ldrh.w	sl, [r3]
 800c990:	f1ba 0f00 	cmp.w	sl, #0
 800c994:	d020      	beq.n	800c9d8 <__multiply+0xe4>
 800c996:	f105 0e14 	add.w	lr, r5, #20
 800c99a:	46b1      	mov	r9, r6
 800c99c:	2200      	movs	r2, #0
 800c99e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c9a2:	f8d9 b000 	ldr.w	fp, [r9]
 800c9a6:	b2a1      	uxth	r1, r4
 800c9a8:	fa1f fb8b 	uxth.w	fp, fp
 800c9ac:	fb0a b101 	mla	r1, sl, r1, fp
 800c9b0:	4411      	add	r1, r2
 800c9b2:	f8d9 2000 	ldr.w	r2, [r9]
 800c9b6:	0c24      	lsrs	r4, r4, #16
 800c9b8:	0c12      	lsrs	r2, r2, #16
 800c9ba:	fb0a 2404 	mla	r4, sl, r4, r2
 800c9be:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c9c2:	b289      	uxth	r1, r1
 800c9c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c9c8:	45f4      	cmp	ip, lr
 800c9ca:	f849 1b04 	str.w	r1, [r9], #4
 800c9ce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c9d2:	d8e4      	bhi.n	800c99e <__multiply+0xaa>
 800c9d4:	9901      	ldr	r1, [sp, #4]
 800c9d6:	5072      	str	r2, [r6, r1]
 800c9d8:	9a03      	ldr	r2, [sp, #12]
 800c9da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c9de:	3304      	adds	r3, #4
 800c9e0:	f1b9 0f00 	cmp.w	r9, #0
 800c9e4:	d01f      	beq.n	800ca26 <__multiply+0x132>
 800c9e6:	6834      	ldr	r4, [r6, #0]
 800c9e8:	f105 0114 	add.w	r1, r5, #20
 800c9ec:	46b6      	mov	lr, r6
 800c9ee:	f04f 0a00 	mov.w	sl, #0
 800c9f2:	880a      	ldrh	r2, [r1, #0]
 800c9f4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c9f8:	fb09 b202 	mla	r2, r9, r2, fp
 800c9fc:	4492      	add	sl, r2
 800c9fe:	b2a4      	uxth	r4, r4
 800ca00:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ca04:	f84e 4b04 	str.w	r4, [lr], #4
 800ca08:	f851 4b04 	ldr.w	r4, [r1], #4
 800ca0c:	f8be 2000 	ldrh.w	r2, [lr]
 800ca10:	0c24      	lsrs	r4, r4, #16
 800ca12:	fb09 2404 	mla	r4, r9, r4, r2
 800ca16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ca1a:	458c      	cmp	ip, r1
 800ca1c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ca20:	d8e7      	bhi.n	800c9f2 <__multiply+0xfe>
 800ca22:	9a01      	ldr	r2, [sp, #4]
 800ca24:	50b4      	str	r4, [r6, r2]
 800ca26:	3604      	adds	r6, #4
 800ca28:	e7a3      	b.n	800c972 <__multiply+0x7e>
 800ca2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1a5      	bne.n	800c97e <__multiply+0x8a>
 800ca32:	3f01      	subs	r7, #1
 800ca34:	e7a1      	b.n	800c97a <__multiply+0x86>
 800ca36:	bf00      	nop
 800ca38:	0800db18 	.word	0x0800db18
 800ca3c:	0800db29 	.word	0x0800db29

0800ca40 <__pow5mult>:
 800ca40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca44:	4615      	mov	r5, r2
 800ca46:	f012 0203 	ands.w	r2, r2, #3
 800ca4a:	4606      	mov	r6, r0
 800ca4c:	460f      	mov	r7, r1
 800ca4e:	d007      	beq.n	800ca60 <__pow5mult+0x20>
 800ca50:	4c25      	ldr	r4, [pc, #148]	; (800cae8 <__pow5mult+0xa8>)
 800ca52:	3a01      	subs	r2, #1
 800ca54:	2300      	movs	r3, #0
 800ca56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca5a:	f7ff fe9b 	bl	800c794 <__multadd>
 800ca5e:	4607      	mov	r7, r0
 800ca60:	10ad      	asrs	r5, r5, #2
 800ca62:	d03d      	beq.n	800cae0 <__pow5mult+0xa0>
 800ca64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ca66:	b97c      	cbnz	r4, 800ca88 <__pow5mult+0x48>
 800ca68:	2010      	movs	r0, #16
 800ca6a:	f7ff fe1d 	bl	800c6a8 <malloc>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	6270      	str	r0, [r6, #36]	; 0x24
 800ca72:	b928      	cbnz	r0, 800ca80 <__pow5mult+0x40>
 800ca74:	4b1d      	ldr	r3, [pc, #116]	; (800caec <__pow5mult+0xac>)
 800ca76:	481e      	ldr	r0, [pc, #120]	; (800caf0 <__pow5mult+0xb0>)
 800ca78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ca7c:	f000 fcce 	bl	800d41c <__assert_func>
 800ca80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca84:	6004      	str	r4, [r0, #0]
 800ca86:	60c4      	str	r4, [r0, #12]
 800ca88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ca8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca90:	b94c      	cbnz	r4, 800caa6 <__pow5mult+0x66>
 800ca92:	f240 2171 	movw	r1, #625	; 0x271
 800ca96:	4630      	mov	r0, r6
 800ca98:	f7ff ff16 	bl	800c8c8 <__i2b>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800caa2:	4604      	mov	r4, r0
 800caa4:	6003      	str	r3, [r0, #0]
 800caa6:	f04f 0900 	mov.w	r9, #0
 800caaa:	07eb      	lsls	r3, r5, #31
 800caac:	d50a      	bpl.n	800cac4 <__pow5mult+0x84>
 800caae:	4639      	mov	r1, r7
 800cab0:	4622      	mov	r2, r4
 800cab2:	4630      	mov	r0, r6
 800cab4:	f7ff ff1e 	bl	800c8f4 <__multiply>
 800cab8:	4639      	mov	r1, r7
 800caba:	4680      	mov	r8, r0
 800cabc:	4630      	mov	r0, r6
 800cabe:	f7ff fe47 	bl	800c750 <_Bfree>
 800cac2:	4647      	mov	r7, r8
 800cac4:	106d      	asrs	r5, r5, #1
 800cac6:	d00b      	beq.n	800cae0 <__pow5mult+0xa0>
 800cac8:	6820      	ldr	r0, [r4, #0]
 800caca:	b938      	cbnz	r0, 800cadc <__pow5mult+0x9c>
 800cacc:	4622      	mov	r2, r4
 800cace:	4621      	mov	r1, r4
 800cad0:	4630      	mov	r0, r6
 800cad2:	f7ff ff0f 	bl	800c8f4 <__multiply>
 800cad6:	6020      	str	r0, [r4, #0]
 800cad8:	f8c0 9000 	str.w	r9, [r0]
 800cadc:	4604      	mov	r4, r0
 800cade:	e7e4      	b.n	800caaa <__pow5mult+0x6a>
 800cae0:	4638      	mov	r0, r7
 800cae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cae6:	bf00      	nop
 800cae8:	0800dc80 	.word	0x0800dc80
 800caec:	0800daa2 	.word	0x0800daa2
 800caf0:	0800db29 	.word	0x0800db29

0800caf4 <__lshift>:
 800caf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf8:	460c      	mov	r4, r1
 800cafa:	6849      	ldr	r1, [r1, #4]
 800cafc:	6923      	ldr	r3, [r4, #16]
 800cafe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb02:	68a3      	ldr	r3, [r4, #8]
 800cb04:	4607      	mov	r7, r0
 800cb06:	4691      	mov	r9, r2
 800cb08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb0c:	f108 0601 	add.w	r6, r8, #1
 800cb10:	42b3      	cmp	r3, r6
 800cb12:	db0b      	blt.n	800cb2c <__lshift+0x38>
 800cb14:	4638      	mov	r0, r7
 800cb16:	f7ff fddb 	bl	800c6d0 <_Balloc>
 800cb1a:	4605      	mov	r5, r0
 800cb1c:	b948      	cbnz	r0, 800cb32 <__lshift+0x3e>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	4b28      	ldr	r3, [pc, #160]	; (800cbc4 <__lshift+0xd0>)
 800cb22:	4829      	ldr	r0, [pc, #164]	; (800cbc8 <__lshift+0xd4>)
 800cb24:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cb28:	f000 fc78 	bl	800d41c <__assert_func>
 800cb2c:	3101      	adds	r1, #1
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	e7ee      	b.n	800cb10 <__lshift+0x1c>
 800cb32:	2300      	movs	r3, #0
 800cb34:	f100 0114 	add.w	r1, r0, #20
 800cb38:	f100 0210 	add.w	r2, r0, #16
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	4553      	cmp	r3, sl
 800cb40:	db33      	blt.n	800cbaa <__lshift+0xb6>
 800cb42:	6920      	ldr	r0, [r4, #16]
 800cb44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb48:	f104 0314 	add.w	r3, r4, #20
 800cb4c:	f019 091f 	ands.w	r9, r9, #31
 800cb50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb58:	d02b      	beq.n	800cbb2 <__lshift+0xbe>
 800cb5a:	f1c9 0e20 	rsb	lr, r9, #32
 800cb5e:	468a      	mov	sl, r1
 800cb60:	2200      	movs	r2, #0
 800cb62:	6818      	ldr	r0, [r3, #0]
 800cb64:	fa00 f009 	lsl.w	r0, r0, r9
 800cb68:	4302      	orrs	r2, r0
 800cb6a:	f84a 2b04 	str.w	r2, [sl], #4
 800cb6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb72:	459c      	cmp	ip, r3
 800cb74:	fa22 f20e 	lsr.w	r2, r2, lr
 800cb78:	d8f3      	bhi.n	800cb62 <__lshift+0x6e>
 800cb7a:	ebac 0304 	sub.w	r3, ip, r4
 800cb7e:	3b15      	subs	r3, #21
 800cb80:	f023 0303 	bic.w	r3, r3, #3
 800cb84:	3304      	adds	r3, #4
 800cb86:	f104 0015 	add.w	r0, r4, #21
 800cb8a:	4584      	cmp	ip, r0
 800cb8c:	bf38      	it	cc
 800cb8e:	2304      	movcc	r3, #4
 800cb90:	50ca      	str	r2, [r1, r3]
 800cb92:	b10a      	cbz	r2, 800cb98 <__lshift+0xa4>
 800cb94:	f108 0602 	add.w	r6, r8, #2
 800cb98:	3e01      	subs	r6, #1
 800cb9a:	4638      	mov	r0, r7
 800cb9c:	612e      	str	r6, [r5, #16]
 800cb9e:	4621      	mov	r1, r4
 800cba0:	f7ff fdd6 	bl	800c750 <_Bfree>
 800cba4:	4628      	mov	r0, r5
 800cba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800cbae:	3301      	adds	r3, #1
 800cbb0:	e7c5      	b.n	800cb3e <__lshift+0x4a>
 800cbb2:	3904      	subs	r1, #4
 800cbb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cbbc:	459c      	cmp	ip, r3
 800cbbe:	d8f9      	bhi.n	800cbb4 <__lshift+0xc0>
 800cbc0:	e7ea      	b.n	800cb98 <__lshift+0xa4>
 800cbc2:	bf00      	nop
 800cbc4:	0800db18 	.word	0x0800db18
 800cbc8:	0800db29 	.word	0x0800db29

0800cbcc <__mcmp>:
 800cbcc:	b530      	push	{r4, r5, lr}
 800cbce:	6902      	ldr	r2, [r0, #16]
 800cbd0:	690c      	ldr	r4, [r1, #16]
 800cbd2:	1b12      	subs	r2, r2, r4
 800cbd4:	d10e      	bne.n	800cbf4 <__mcmp+0x28>
 800cbd6:	f100 0314 	add.w	r3, r0, #20
 800cbda:	3114      	adds	r1, #20
 800cbdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cbe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cbe4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cbe8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cbec:	42a5      	cmp	r5, r4
 800cbee:	d003      	beq.n	800cbf8 <__mcmp+0x2c>
 800cbf0:	d305      	bcc.n	800cbfe <__mcmp+0x32>
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	4610      	mov	r0, r2
 800cbf6:	bd30      	pop	{r4, r5, pc}
 800cbf8:	4283      	cmp	r3, r0
 800cbfa:	d3f3      	bcc.n	800cbe4 <__mcmp+0x18>
 800cbfc:	e7fa      	b.n	800cbf4 <__mcmp+0x28>
 800cbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800cc02:	e7f7      	b.n	800cbf4 <__mcmp+0x28>

0800cc04 <__mdiff>:
 800cc04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc08:	460c      	mov	r4, r1
 800cc0a:	4606      	mov	r6, r0
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	4620      	mov	r0, r4
 800cc10:	4617      	mov	r7, r2
 800cc12:	f7ff ffdb 	bl	800cbcc <__mcmp>
 800cc16:	1e05      	subs	r5, r0, #0
 800cc18:	d110      	bne.n	800cc3c <__mdiff+0x38>
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f7ff fd57 	bl	800c6d0 <_Balloc>
 800cc22:	b930      	cbnz	r0, 800cc32 <__mdiff+0x2e>
 800cc24:	4b39      	ldr	r3, [pc, #228]	; (800cd0c <__mdiff+0x108>)
 800cc26:	4602      	mov	r2, r0
 800cc28:	f240 2132 	movw	r1, #562	; 0x232
 800cc2c:	4838      	ldr	r0, [pc, #224]	; (800cd10 <__mdiff+0x10c>)
 800cc2e:	f000 fbf5 	bl	800d41c <__assert_func>
 800cc32:	2301      	movs	r3, #1
 800cc34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc3c:	bfa4      	itt	ge
 800cc3e:	463b      	movge	r3, r7
 800cc40:	4627      	movge	r7, r4
 800cc42:	4630      	mov	r0, r6
 800cc44:	6879      	ldr	r1, [r7, #4]
 800cc46:	bfa6      	itte	ge
 800cc48:	461c      	movge	r4, r3
 800cc4a:	2500      	movge	r5, #0
 800cc4c:	2501      	movlt	r5, #1
 800cc4e:	f7ff fd3f 	bl	800c6d0 <_Balloc>
 800cc52:	b920      	cbnz	r0, 800cc5e <__mdiff+0x5a>
 800cc54:	4b2d      	ldr	r3, [pc, #180]	; (800cd0c <__mdiff+0x108>)
 800cc56:	4602      	mov	r2, r0
 800cc58:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cc5c:	e7e6      	b.n	800cc2c <__mdiff+0x28>
 800cc5e:	693e      	ldr	r6, [r7, #16]
 800cc60:	60c5      	str	r5, [r0, #12]
 800cc62:	6925      	ldr	r5, [r4, #16]
 800cc64:	f107 0114 	add.w	r1, r7, #20
 800cc68:	f104 0914 	add.w	r9, r4, #20
 800cc6c:	f100 0e14 	add.w	lr, r0, #20
 800cc70:	f107 0210 	add.w	r2, r7, #16
 800cc74:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cc78:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cc7c:	46f2      	mov	sl, lr
 800cc7e:	2700      	movs	r7, #0
 800cc80:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cc88:	fa1f f883 	uxth.w	r8, r3
 800cc8c:	fa17 f78b 	uxtah	r7, r7, fp
 800cc90:	0c1b      	lsrs	r3, r3, #16
 800cc92:	eba7 0808 	sub.w	r8, r7, r8
 800cc96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cc9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cc9e:	fa1f f888 	uxth.w	r8, r8
 800cca2:	141f      	asrs	r7, r3, #16
 800cca4:	454d      	cmp	r5, r9
 800cca6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ccaa:	f84a 3b04 	str.w	r3, [sl], #4
 800ccae:	d8e7      	bhi.n	800cc80 <__mdiff+0x7c>
 800ccb0:	1b2b      	subs	r3, r5, r4
 800ccb2:	3b15      	subs	r3, #21
 800ccb4:	f023 0303 	bic.w	r3, r3, #3
 800ccb8:	3304      	adds	r3, #4
 800ccba:	3415      	adds	r4, #21
 800ccbc:	42a5      	cmp	r5, r4
 800ccbe:	bf38      	it	cc
 800ccc0:	2304      	movcc	r3, #4
 800ccc2:	4419      	add	r1, r3
 800ccc4:	4473      	add	r3, lr
 800ccc6:	469e      	mov	lr, r3
 800ccc8:	460d      	mov	r5, r1
 800ccca:	4565      	cmp	r5, ip
 800cccc:	d30e      	bcc.n	800ccec <__mdiff+0xe8>
 800ccce:	f10c 0203 	add.w	r2, ip, #3
 800ccd2:	1a52      	subs	r2, r2, r1
 800ccd4:	f022 0203 	bic.w	r2, r2, #3
 800ccd8:	3903      	subs	r1, #3
 800ccda:	458c      	cmp	ip, r1
 800ccdc:	bf38      	it	cc
 800ccde:	2200      	movcc	r2, #0
 800cce0:	441a      	add	r2, r3
 800cce2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cce6:	b17b      	cbz	r3, 800cd08 <__mdiff+0x104>
 800cce8:	6106      	str	r6, [r0, #16]
 800ccea:	e7a5      	b.n	800cc38 <__mdiff+0x34>
 800ccec:	f855 8b04 	ldr.w	r8, [r5], #4
 800ccf0:	fa17 f488 	uxtah	r4, r7, r8
 800ccf4:	1422      	asrs	r2, r4, #16
 800ccf6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ccfa:	b2a4      	uxth	r4, r4
 800ccfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cd00:	f84e 4b04 	str.w	r4, [lr], #4
 800cd04:	1417      	asrs	r7, r2, #16
 800cd06:	e7e0      	b.n	800ccca <__mdiff+0xc6>
 800cd08:	3e01      	subs	r6, #1
 800cd0a:	e7ea      	b.n	800cce2 <__mdiff+0xde>
 800cd0c:	0800db18 	.word	0x0800db18
 800cd10:	0800db29 	.word	0x0800db29

0800cd14 <__d2b>:
 800cd14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd18:	4689      	mov	r9, r1
 800cd1a:	2101      	movs	r1, #1
 800cd1c:	ec57 6b10 	vmov	r6, r7, d0
 800cd20:	4690      	mov	r8, r2
 800cd22:	f7ff fcd5 	bl	800c6d0 <_Balloc>
 800cd26:	4604      	mov	r4, r0
 800cd28:	b930      	cbnz	r0, 800cd38 <__d2b+0x24>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	4b25      	ldr	r3, [pc, #148]	; (800cdc4 <__d2b+0xb0>)
 800cd2e:	4826      	ldr	r0, [pc, #152]	; (800cdc8 <__d2b+0xb4>)
 800cd30:	f240 310a 	movw	r1, #778	; 0x30a
 800cd34:	f000 fb72 	bl	800d41c <__assert_func>
 800cd38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cd3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd40:	bb35      	cbnz	r5, 800cd90 <__d2b+0x7c>
 800cd42:	2e00      	cmp	r6, #0
 800cd44:	9301      	str	r3, [sp, #4]
 800cd46:	d028      	beq.n	800cd9a <__d2b+0x86>
 800cd48:	4668      	mov	r0, sp
 800cd4a:	9600      	str	r6, [sp, #0]
 800cd4c:	f7ff fd8c 	bl	800c868 <__lo0bits>
 800cd50:	9900      	ldr	r1, [sp, #0]
 800cd52:	b300      	cbz	r0, 800cd96 <__d2b+0x82>
 800cd54:	9a01      	ldr	r2, [sp, #4]
 800cd56:	f1c0 0320 	rsb	r3, r0, #32
 800cd5a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd5e:	430b      	orrs	r3, r1
 800cd60:	40c2      	lsrs	r2, r0
 800cd62:	6163      	str	r3, [r4, #20]
 800cd64:	9201      	str	r2, [sp, #4]
 800cd66:	9b01      	ldr	r3, [sp, #4]
 800cd68:	61a3      	str	r3, [r4, #24]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	bf14      	ite	ne
 800cd6e:	2202      	movne	r2, #2
 800cd70:	2201      	moveq	r2, #1
 800cd72:	6122      	str	r2, [r4, #16]
 800cd74:	b1d5      	cbz	r5, 800cdac <__d2b+0x98>
 800cd76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cd7a:	4405      	add	r5, r0
 800cd7c:	f8c9 5000 	str.w	r5, [r9]
 800cd80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cd84:	f8c8 0000 	str.w	r0, [r8]
 800cd88:	4620      	mov	r0, r4
 800cd8a:	b003      	add	sp, #12
 800cd8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd94:	e7d5      	b.n	800cd42 <__d2b+0x2e>
 800cd96:	6161      	str	r1, [r4, #20]
 800cd98:	e7e5      	b.n	800cd66 <__d2b+0x52>
 800cd9a:	a801      	add	r0, sp, #4
 800cd9c:	f7ff fd64 	bl	800c868 <__lo0bits>
 800cda0:	9b01      	ldr	r3, [sp, #4]
 800cda2:	6163      	str	r3, [r4, #20]
 800cda4:	2201      	movs	r2, #1
 800cda6:	6122      	str	r2, [r4, #16]
 800cda8:	3020      	adds	r0, #32
 800cdaa:	e7e3      	b.n	800cd74 <__d2b+0x60>
 800cdac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cdb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cdb4:	f8c9 0000 	str.w	r0, [r9]
 800cdb8:	6918      	ldr	r0, [r3, #16]
 800cdba:	f7ff fd35 	bl	800c828 <__hi0bits>
 800cdbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cdc2:	e7df      	b.n	800cd84 <__d2b+0x70>
 800cdc4:	0800db18 	.word	0x0800db18
 800cdc8:	0800db29 	.word	0x0800db29

0800cdcc <_calloc_r>:
 800cdcc:	b513      	push	{r0, r1, r4, lr}
 800cdce:	434a      	muls	r2, r1
 800cdd0:	4611      	mov	r1, r2
 800cdd2:	9201      	str	r2, [sp, #4]
 800cdd4:	f7fd fcf0 	bl	800a7b8 <_malloc_r>
 800cdd8:	4604      	mov	r4, r0
 800cdda:	b118      	cbz	r0, 800cde4 <_calloc_r+0x18>
 800cddc:	9a01      	ldr	r2, [sp, #4]
 800cdde:	2100      	movs	r1, #0
 800cde0:	f7fd fce1 	bl	800a7a6 <memset>
 800cde4:	4620      	mov	r0, r4
 800cde6:	b002      	add	sp, #8
 800cde8:	bd10      	pop	{r4, pc}
	...

0800cdec <_free_r>:
 800cdec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdee:	2900      	cmp	r1, #0
 800cdf0:	d048      	beq.n	800ce84 <_free_r+0x98>
 800cdf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdf6:	9001      	str	r0, [sp, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	f1a1 0404 	sub.w	r4, r1, #4
 800cdfe:	bfb8      	it	lt
 800ce00:	18e4      	addlt	r4, r4, r3
 800ce02:	f7ff fc59 	bl	800c6b8 <__malloc_lock>
 800ce06:	4a20      	ldr	r2, [pc, #128]	; (800ce88 <_free_r+0x9c>)
 800ce08:	9801      	ldr	r0, [sp, #4]
 800ce0a:	6813      	ldr	r3, [r2, #0]
 800ce0c:	4615      	mov	r5, r2
 800ce0e:	b933      	cbnz	r3, 800ce1e <_free_r+0x32>
 800ce10:	6063      	str	r3, [r4, #4]
 800ce12:	6014      	str	r4, [r2, #0]
 800ce14:	b003      	add	sp, #12
 800ce16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce1a:	f7ff bc53 	b.w	800c6c4 <__malloc_unlock>
 800ce1e:	42a3      	cmp	r3, r4
 800ce20:	d90b      	bls.n	800ce3a <_free_r+0x4e>
 800ce22:	6821      	ldr	r1, [r4, #0]
 800ce24:	1862      	adds	r2, r4, r1
 800ce26:	4293      	cmp	r3, r2
 800ce28:	bf04      	itt	eq
 800ce2a:	681a      	ldreq	r2, [r3, #0]
 800ce2c:	685b      	ldreq	r3, [r3, #4]
 800ce2e:	6063      	str	r3, [r4, #4]
 800ce30:	bf04      	itt	eq
 800ce32:	1852      	addeq	r2, r2, r1
 800ce34:	6022      	streq	r2, [r4, #0]
 800ce36:	602c      	str	r4, [r5, #0]
 800ce38:	e7ec      	b.n	800ce14 <_free_r+0x28>
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	b10b      	cbz	r3, 800ce44 <_free_r+0x58>
 800ce40:	42a3      	cmp	r3, r4
 800ce42:	d9fa      	bls.n	800ce3a <_free_r+0x4e>
 800ce44:	6811      	ldr	r1, [r2, #0]
 800ce46:	1855      	adds	r5, r2, r1
 800ce48:	42a5      	cmp	r5, r4
 800ce4a:	d10b      	bne.n	800ce64 <_free_r+0x78>
 800ce4c:	6824      	ldr	r4, [r4, #0]
 800ce4e:	4421      	add	r1, r4
 800ce50:	1854      	adds	r4, r2, r1
 800ce52:	42a3      	cmp	r3, r4
 800ce54:	6011      	str	r1, [r2, #0]
 800ce56:	d1dd      	bne.n	800ce14 <_free_r+0x28>
 800ce58:	681c      	ldr	r4, [r3, #0]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	6053      	str	r3, [r2, #4]
 800ce5e:	4421      	add	r1, r4
 800ce60:	6011      	str	r1, [r2, #0]
 800ce62:	e7d7      	b.n	800ce14 <_free_r+0x28>
 800ce64:	d902      	bls.n	800ce6c <_free_r+0x80>
 800ce66:	230c      	movs	r3, #12
 800ce68:	6003      	str	r3, [r0, #0]
 800ce6a:	e7d3      	b.n	800ce14 <_free_r+0x28>
 800ce6c:	6825      	ldr	r5, [r4, #0]
 800ce6e:	1961      	adds	r1, r4, r5
 800ce70:	428b      	cmp	r3, r1
 800ce72:	bf04      	itt	eq
 800ce74:	6819      	ldreq	r1, [r3, #0]
 800ce76:	685b      	ldreq	r3, [r3, #4]
 800ce78:	6063      	str	r3, [r4, #4]
 800ce7a:	bf04      	itt	eq
 800ce7c:	1949      	addeq	r1, r1, r5
 800ce7e:	6021      	streq	r1, [r4, #0]
 800ce80:	6054      	str	r4, [r2, #4]
 800ce82:	e7c7      	b.n	800ce14 <_free_r+0x28>
 800ce84:	b003      	add	sp, #12
 800ce86:	bd30      	pop	{r4, r5, pc}
 800ce88:	20004c5c 	.word	0x20004c5c

0800ce8c <__ssputs_r>:
 800ce8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce90:	688e      	ldr	r6, [r1, #8]
 800ce92:	429e      	cmp	r6, r3
 800ce94:	4682      	mov	sl, r0
 800ce96:	460c      	mov	r4, r1
 800ce98:	4690      	mov	r8, r2
 800ce9a:	461f      	mov	r7, r3
 800ce9c:	d838      	bhi.n	800cf10 <__ssputs_r+0x84>
 800ce9e:	898a      	ldrh	r2, [r1, #12]
 800cea0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cea4:	d032      	beq.n	800cf0c <__ssputs_r+0x80>
 800cea6:	6825      	ldr	r5, [r4, #0]
 800cea8:	6909      	ldr	r1, [r1, #16]
 800ceaa:	eba5 0901 	sub.w	r9, r5, r1
 800ceae:	6965      	ldr	r5, [r4, #20]
 800ceb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ceb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ceb8:	3301      	adds	r3, #1
 800ceba:	444b      	add	r3, r9
 800cebc:	106d      	asrs	r5, r5, #1
 800cebe:	429d      	cmp	r5, r3
 800cec0:	bf38      	it	cc
 800cec2:	461d      	movcc	r5, r3
 800cec4:	0553      	lsls	r3, r2, #21
 800cec6:	d531      	bpl.n	800cf2c <__ssputs_r+0xa0>
 800cec8:	4629      	mov	r1, r5
 800ceca:	f7fd fc75 	bl	800a7b8 <_malloc_r>
 800cece:	4606      	mov	r6, r0
 800ced0:	b950      	cbnz	r0, 800cee8 <__ssputs_r+0x5c>
 800ced2:	230c      	movs	r3, #12
 800ced4:	f8ca 3000 	str.w	r3, [sl]
 800ced8:	89a3      	ldrh	r3, [r4, #12]
 800ceda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cede:	81a3      	strh	r3, [r4, #12]
 800cee0:	f04f 30ff 	mov.w	r0, #4294967295
 800cee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee8:	6921      	ldr	r1, [r4, #16]
 800ceea:	464a      	mov	r2, r9
 800ceec:	f7fd fc4d 	bl	800a78a <memcpy>
 800cef0:	89a3      	ldrh	r3, [r4, #12]
 800cef2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cefa:	81a3      	strh	r3, [r4, #12]
 800cefc:	6126      	str	r6, [r4, #16]
 800cefe:	6165      	str	r5, [r4, #20]
 800cf00:	444e      	add	r6, r9
 800cf02:	eba5 0509 	sub.w	r5, r5, r9
 800cf06:	6026      	str	r6, [r4, #0]
 800cf08:	60a5      	str	r5, [r4, #8]
 800cf0a:	463e      	mov	r6, r7
 800cf0c:	42be      	cmp	r6, r7
 800cf0e:	d900      	bls.n	800cf12 <__ssputs_r+0x86>
 800cf10:	463e      	mov	r6, r7
 800cf12:	4632      	mov	r2, r6
 800cf14:	6820      	ldr	r0, [r4, #0]
 800cf16:	4641      	mov	r1, r8
 800cf18:	f000 fae4 	bl	800d4e4 <memmove>
 800cf1c:	68a3      	ldr	r3, [r4, #8]
 800cf1e:	6822      	ldr	r2, [r4, #0]
 800cf20:	1b9b      	subs	r3, r3, r6
 800cf22:	4432      	add	r2, r6
 800cf24:	60a3      	str	r3, [r4, #8]
 800cf26:	6022      	str	r2, [r4, #0]
 800cf28:	2000      	movs	r0, #0
 800cf2a:	e7db      	b.n	800cee4 <__ssputs_r+0x58>
 800cf2c:	462a      	mov	r2, r5
 800cf2e:	f000 faf3 	bl	800d518 <_realloc_r>
 800cf32:	4606      	mov	r6, r0
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d1e1      	bne.n	800cefc <__ssputs_r+0x70>
 800cf38:	6921      	ldr	r1, [r4, #16]
 800cf3a:	4650      	mov	r0, sl
 800cf3c:	f7ff ff56 	bl	800cdec <_free_r>
 800cf40:	e7c7      	b.n	800ced2 <__ssputs_r+0x46>
	...

0800cf44 <_svfiprintf_r>:
 800cf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf48:	4698      	mov	r8, r3
 800cf4a:	898b      	ldrh	r3, [r1, #12]
 800cf4c:	061b      	lsls	r3, r3, #24
 800cf4e:	b09d      	sub	sp, #116	; 0x74
 800cf50:	4607      	mov	r7, r0
 800cf52:	460d      	mov	r5, r1
 800cf54:	4614      	mov	r4, r2
 800cf56:	d50e      	bpl.n	800cf76 <_svfiprintf_r+0x32>
 800cf58:	690b      	ldr	r3, [r1, #16]
 800cf5a:	b963      	cbnz	r3, 800cf76 <_svfiprintf_r+0x32>
 800cf5c:	2140      	movs	r1, #64	; 0x40
 800cf5e:	f7fd fc2b 	bl	800a7b8 <_malloc_r>
 800cf62:	6028      	str	r0, [r5, #0]
 800cf64:	6128      	str	r0, [r5, #16]
 800cf66:	b920      	cbnz	r0, 800cf72 <_svfiprintf_r+0x2e>
 800cf68:	230c      	movs	r3, #12
 800cf6a:	603b      	str	r3, [r7, #0]
 800cf6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf70:	e0d1      	b.n	800d116 <_svfiprintf_r+0x1d2>
 800cf72:	2340      	movs	r3, #64	; 0x40
 800cf74:	616b      	str	r3, [r5, #20]
 800cf76:	2300      	movs	r3, #0
 800cf78:	9309      	str	r3, [sp, #36]	; 0x24
 800cf7a:	2320      	movs	r3, #32
 800cf7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf80:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf84:	2330      	movs	r3, #48	; 0x30
 800cf86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d130 <_svfiprintf_r+0x1ec>
 800cf8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf8e:	f04f 0901 	mov.w	r9, #1
 800cf92:	4623      	mov	r3, r4
 800cf94:	469a      	mov	sl, r3
 800cf96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf9a:	b10a      	cbz	r2, 800cfa0 <_svfiprintf_r+0x5c>
 800cf9c:	2a25      	cmp	r2, #37	; 0x25
 800cf9e:	d1f9      	bne.n	800cf94 <_svfiprintf_r+0x50>
 800cfa0:	ebba 0b04 	subs.w	fp, sl, r4
 800cfa4:	d00b      	beq.n	800cfbe <_svfiprintf_r+0x7a>
 800cfa6:	465b      	mov	r3, fp
 800cfa8:	4622      	mov	r2, r4
 800cfaa:	4629      	mov	r1, r5
 800cfac:	4638      	mov	r0, r7
 800cfae:	f7ff ff6d 	bl	800ce8c <__ssputs_r>
 800cfb2:	3001      	adds	r0, #1
 800cfb4:	f000 80aa 	beq.w	800d10c <_svfiprintf_r+0x1c8>
 800cfb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfba:	445a      	add	r2, fp
 800cfbc:	9209      	str	r2, [sp, #36]	; 0x24
 800cfbe:	f89a 3000 	ldrb.w	r3, [sl]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f000 80a2 	beq.w	800d10c <_svfiprintf_r+0x1c8>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	f04f 32ff 	mov.w	r2, #4294967295
 800cfce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfd2:	f10a 0a01 	add.w	sl, sl, #1
 800cfd6:	9304      	str	r3, [sp, #16]
 800cfd8:	9307      	str	r3, [sp, #28]
 800cfda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfde:	931a      	str	r3, [sp, #104]	; 0x68
 800cfe0:	4654      	mov	r4, sl
 800cfe2:	2205      	movs	r2, #5
 800cfe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfe8:	4851      	ldr	r0, [pc, #324]	; (800d130 <_svfiprintf_r+0x1ec>)
 800cfea:	f7f3 f901 	bl	80001f0 <memchr>
 800cfee:	9a04      	ldr	r2, [sp, #16]
 800cff0:	b9d8      	cbnz	r0, 800d02a <_svfiprintf_r+0xe6>
 800cff2:	06d0      	lsls	r0, r2, #27
 800cff4:	bf44      	itt	mi
 800cff6:	2320      	movmi	r3, #32
 800cff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cffc:	0711      	lsls	r1, r2, #28
 800cffe:	bf44      	itt	mi
 800d000:	232b      	movmi	r3, #43	; 0x2b
 800d002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d006:	f89a 3000 	ldrb.w	r3, [sl]
 800d00a:	2b2a      	cmp	r3, #42	; 0x2a
 800d00c:	d015      	beq.n	800d03a <_svfiprintf_r+0xf6>
 800d00e:	9a07      	ldr	r2, [sp, #28]
 800d010:	4654      	mov	r4, sl
 800d012:	2000      	movs	r0, #0
 800d014:	f04f 0c0a 	mov.w	ip, #10
 800d018:	4621      	mov	r1, r4
 800d01a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d01e:	3b30      	subs	r3, #48	; 0x30
 800d020:	2b09      	cmp	r3, #9
 800d022:	d94e      	bls.n	800d0c2 <_svfiprintf_r+0x17e>
 800d024:	b1b0      	cbz	r0, 800d054 <_svfiprintf_r+0x110>
 800d026:	9207      	str	r2, [sp, #28]
 800d028:	e014      	b.n	800d054 <_svfiprintf_r+0x110>
 800d02a:	eba0 0308 	sub.w	r3, r0, r8
 800d02e:	fa09 f303 	lsl.w	r3, r9, r3
 800d032:	4313      	orrs	r3, r2
 800d034:	9304      	str	r3, [sp, #16]
 800d036:	46a2      	mov	sl, r4
 800d038:	e7d2      	b.n	800cfe0 <_svfiprintf_r+0x9c>
 800d03a:	9b03      	ldr	r3, [sp, #12]
 800d03c:	1d19      	adds	r1, r3, #4
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	9103      	str	r1, [sp, #12]
 800d042:	2b00      	cmp	r3, #0
 800d044:	bfbb      	ittet	lt
 800d046:	425b      	neglt	r3, r3
 800d048:	f042 0202 	orrlt.w	r2, r2, #2
 800d04c:	9307      	strge	r3, [sp, #28]
 800d04e:	9307      	strlt	r3, [sp, #28]
 800d050:	bfb8      	it	lt
 800d052:	9204      	strlt	r2, [sp, #16]
 800d054:	7823      	ldrb	r3, [r4, #0]
 800d056:	2b2e      	cmp	r3, #46	; 0x2e
 800d058:	d10c      	bne.n	800d074 <_svfiprintf_r+0x130>
 800d05a:	7863      	ldrb	r3, [r4, #1]
 800d05c:	2b2a      	cmp	r3, #42	; 0x2a
 800d05e:	d135      	bne.n	800d0cc <_svfiprintf_r+0x188>
 800d060:	9b03      	ldr	r3, [sp, #12]
 800d062:	1d1a      	adds	r2, r3, #4
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	9203      	str	r2, [sp, #12]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	bfb8      	it	lt
 800d06c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d070:	3402      	adds	r4, #2
 800d072:	9305      	str	r3, [sp, #20]
 800d074:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d140 <_svfiprintf_r+0x1fc>
 800d078:	7821      	ldrb	r1, [r4, #0]
 800d07a:	2203      	movs	r2, #3
 800d07c:	4650      	mov	r0, sl
 800d07e:	f7f3 f8b7 	bl	80001f0 <memchr>
 800d082:	b140      	cbz	r0, 800d096 <_svfiprintf_r+0x152>
 800d084:	2340      	movs	r3, #64	; 0x40
 800d086:	eba0 000a 	sub.w	r0, r0, sl
 800d08a:	fa03 f000 	lsl.w	r0, r3, r0
 800d08e:	9b04      	ldr	r3, [sp, #16]
 800d090:	4303      	orrs	r3, r0
 800d092:	3401      	adds	r4, #1
 800d094:	9304      	str	r3, [sp, #16]
 800d096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d09a:	4826      	ldr	r0, [pc, #152]	; (800d134 <_svfiprintf_r+0x1f0>)
 800d09c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0a0:	2206      	movs	r2, #6
 800d0a2:	f7f3 f8a5 	bl	80001f0 <memchr>
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d038      	beq.n	800d11c <_svfiprintf_r+0x1d8>
 800d0aa:	4b23      	ldr	r3, [pc, #140]	; (800d138 <_svfiprintf_r+0x1f4>)
 800d0ac:	bb1b      	cbnz	r3, 800d0f6 <_svfiprintf_r+0x1b2>
 800d0ae:	9b03      	ldr	r3, [sp, #12]
 800d0b0:	3307      	adds	r3, #7
 800d0b2:	f023 0307 	bic.w	r3, r3, #7
 800d0b6:	3308      	adds	r3, #8
 800d0b8:	9303      	str	r3, [sp, #12]
 800d0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0bc:	4433      	add	r3, r6
 800d0be:	9309      	str	r3, [sp, #36]	; 0x24
 800d0c0:	e767      	b.n	800cf92 <_svfiprintf_r+0x4e>
 800d0c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0c6:	460c      	mov	r4, r1
 800d0c8:	2001      	movs	r0, #1
 800d0ca:	e7a5      	b.n	800d018 <_svfiprintf_r+0xd4>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	3401      	adds	r4, #1
 800d0d0:	9305      	str	r3, [sp, #20]
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	f04f 0c0a 	mov.w	ip, #10
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0de:	3a30      	subs	r2, #48	; 0x30
 800d0e0:	2a09      	cmp	r2, #9
 800d0e2:	d903      	bls.n	800d0ec <_svfiprintf_r+0x1a8>
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d0c5      	beq.n	800d074 <_svfiprintf_r+0x130>
 800d0e8:	9105      	str	r1, [sp, #20]
 800d0ea:	e7c3      	b.n	800d074 <_svfiprintf_r+0x130>
 800d0ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0f0:	4604      	mov	r4, r0
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e7f0      	b.n	800d0d8 <_svfiprintf_r+0x194>
 800d0f6:	ab03      	add	r3, sp, #12
 800d0f8:	9300      	str	r3, [sp, #0]
 800d0fa:	462a      	mov	r2, r5
 800d0fc:	4b0f      	ldr	r3, [pc, #60]	; (800d13c <_svfiprintf_r+0x1f8>)
 800d0fe:	a904      	add	r1, sp, #16
 800d100:	4638      	mov	r0, r7
 800d102:	f7fd fc53 	bl	800a9ac <_printf_float>
 800d106:	1c42      	adds	r2, r0, #1
 800d108:	4606      	mov	r6, r0
 800d10a:	d1d6      	bne.n	800d0ba <_svfiprintf_r+0x176>
 800d10c:	89ab      	ldrh	r3, [r5, #12]
 800d10e:	065b      	lsls	r3, r3, #25
 800d110:	f53f af2c 	bmi.w	800cf6c <_svfiprintf_r+0x28>
 800d114:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d116:	b01d      	add	sp, #116	; 0x74
 800d118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d11c:	ab03      	add	r3, sp, #12
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	462a      	mov	r2, r5
 800d122:	4b06      	ldr	r3, [pc, #24]	; (800d13c <_svfiprintf_r+0x1f8>)
 800d124:	a904      	add	r1, sp, #16
 800d126:	4638      	mov	r0, r7
 800d128:	f7fd fee4 	bl	800aef4 <_printf_i>
 800d12c:	e7eb      	b.n	800d106 <_svfiprintf_r+0x1c2>
 800d12e:	bf00      	nop
 800d130:	0800dc8c 	.word	0x0800dc8c
 800d134:	0800dc96 	.word	0x0800dc96
 800d138:	0800a9ad 	.word	0x0800a9ad
 800d13c:	0800ce8d 	.word	0x0800ce8d
 800d140:	0800dc92 	.word	0x0800dc92

0800d144 <__sfputc_r>:
 800d144:	6893      	ldr	r3, [r2, #8]
 800d146:	3b01      	subs	r3, #1
 800d148:	2b00      	cmp	r3, #0
 800d14a:	b410      	push	{r4}
 800d14c:	6093      	str	r3, [r2, #8]
 800d14e:	da08      	bge.n	800d162 <__sfputc_r+0x1e>
 800d150:	6994      	ldr	r4, [r2, #24]
 800d152:	42a3      	cmp	r3, r4
 800d154:	db01      	blt.n	800d15a <__sfputc_r+0x16>
 800d156:	290a      	cmp	r1, #10
 800d158:	d103      	bne.n	800d162 <__sfputc_r+0x1e>
 800d15a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d15e:	f7fe ba0d 	b.w	800b57c <__swbuf_r>
 800d162:	6813      	ldr	r3, [r2, #0]
 800d164:	1c58      	adds	r0, r3, #1
 800d166:	6010      	str	r0, [r2, #0]
 800d168:	7019      	strb	r1, [r3, #0]
 800d16a:	4608      	mov	r0, r1
 800d16c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d170:	4770      	bx	lr

0800d172 <__sfputs_r>:
 800d172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d174:	4606      	mov	r6, r0
 800d176:	460f      	mov	r7, r1
 800d178:	4614      	mov	r4, r2
 800d17a:	18d5      	adds	r5, r2, r3
 800d17c:	42ac      	cmp	r4, r5
 800d17e:	d101      	bne.n	800d184 <__sfputs_r+0x12>
 800d180:	2000      	movs	r0, #0
 800d182:	e007      	b.n	800d194 <__sfputs_r+0x22>
 800d184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d188:	463a      	mov	r2, r7
 800d18a:	4630      	mov	r0, r6
 800d18c:	f7ff ffda 	bl	800d144 <__sfputc_r>
 800d190:	1c43      	adds	r3, r0, #1
 800d192:	d1f3      	bne.n	800d17c <__sfputs_r+0xa>
 800d194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d198 <_vfiprintf_r>:
 800d198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d19c:	460d      	mov	r5, r1
 800d19e:	b09d      	sub	sp, #116	; 0x74
 800d1a0:	4614      	mov	r4, r2
 800d1a2:	4698      	mov	r8, r3
 800d1a4:	4606      	mov	r6, r0
 800d1a6:	b118      	cbz	r0, 800d1b0 <_vfiprintf_r+0x18>
 800d1a8:	6983      	ldr	r3, [r0, #24]
 800d1aa:	b90b      	cbnz	r3, 800d1b0 <_vfiprintf_r+0x18>
 800d1ac:	f7fd fa28 	bl	800a600 <__sinit>
 800d1b0:	4b89      	ldr	r3, [pc, #548]	; (800d3d8 <_vfiprintf_r+0x240>)
 800d1b2:	429d      	cmp	r5, r3
 800d1b4:	d11b      	bne.n	800d1ee <_vfiprintf_r+0x56>
 800d1b6:	6875      	ldr	r5, [r6, #4]
 800d1b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1ba:	07d9      	lsls	r1, r3, #31
 800d1bc:	d405      	bmi.n	800d1ca <_vfiprintf_r+0x32>
 800d1be:	89ab      	ldrh	r3, [r5, #12]
 800d1c0:	059a      	lsls	r2, r3, #22
 800d1c2:	d402      	bmi.n	800d1ca <_vfiprintf_r+0x32>
 800d1c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1c6:	f7fd fade 	bl	800a786 <__retarget_lock_acquire_recursive>
 800d1ca:	89ab      	ldrh	r3, [r5, #12]
 800d1cc:	071b      	lsls	r3, r3, #28
 800d1ce:	d501      	bpl.n	800d1d4 <_vfiprintf_r+0x3c>
 800d1d0:	692b      	ldr	r3, [r5, #16]
 800d1d2:	b9eb      	cbnz	r3, 800d210 <_vfiprintf_r+0x78>
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	f7fe fa34 	bl	800b644 <__swsetup_r>
 800d1dc:	b1c0      	cbz	r0, 800d210 <_vfiprintf_r+0x78>
 800d1de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1e0:	07dc      	lsls	r4, r3, #31
 800d1e2:	d50e      	bpl.n	800d202 <_vfiprintf_r+0x6a>
 800d1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e8:	b01d      	add	sp, #116	; 0x74
 800d1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ee:	4b7b      	ldr	r3, [pc, #492]	; (800d3dc <_vfiprintf_r+0x244>)
 800d1f0:	429d      	cmp	r5, r3
 800d1f2:	d101      	bne.n	800d1f8 <_vfiprintf_r+0x60>
 800d1f4:	68b5      	ldr	r5, [r6, #8]
 800d1f6:	e7df      	b.n	800d1b8 <_vfiprintf_r+0x20>
 800d1f8:	4b79      	ldr	r3, [pc, #484]	; (800d3e0 <_vfiprintf_r+0x248>)
 800d1fa:	429d      	cmp	r5, r3
 800d1fc:	bf08      	it	eq
 800d1fe:	68f5      	ldreq	r5, [r6, #12]
 800d200:	e7da      	b.n	800d1b8 <_vfiprintf_r+0x20>
 800d202:	89ab      	ldrh	r3, [r5, #12]
 800d204:	0598      	lsls	r0, r3, #22
 800d206:	d4ed      	bmi.n	800d1e4 <_vfiprintf_r+0x4c>
 800d208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d20a:	f7fd fabd 	bl	800a788 <__retarget_lock_release_recursive>
 800d20e:	e7e9      	b.n	800d1e4 <_vfiprintf_r+0x4c>
 800d210:	2300      	movs	r3, #0
 800d212:	9309      	str	r3, [sp, #36]	; 0x24
 800d214:	2320      	movs	r3, #32
 800d216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d21a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d21e:	2330      	movs	r3, #48	; 0x30
 800d220:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d3e4 <_vfiprintf_r+0x24c>
 800d224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d228:	f04f 0901 	mov.w	r9, #1
 800d22c:	4623      	mov	r3, r4
 800d22e:	469a      	mov	sl, r3
 800d230:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d234:	b10a      	cbz	r2, 800d23a <_vfiprintf_r+0xa2>
 800d236:	2a25      	cmp	r2, #37	; 0x25
 800d238:	d1f9      	bne.n	800d22e <_vfiprintf_r+0x96>
 800d23a:	ebba 0b04 	subs.w	fp, sl, r4
 800d23e:	d00b      	beq.n	800d258 <_vfiprintf_r+0xc0>
 800d240:	465b      	mov	r3, fp
 800d242:	4622      	mov	r2, r4
 800d244:	4629      	mov	r1, r5
 800d246:	4630      	mov	r0, r6
 800d248:	f7ff ff93 	bl	800d172 <__sfputs_r>
 800d24c:	3001      	adds	r0, #1
 800d24e:	f000 80aa 	beq.w	800d3a6 <_vfiprintf_r+0x20e>
 800d252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d254:	445a      	add	r2, fp
 800d256:	9209      	str	r2, [sp, #36]	; 0x24
 800d258:	f89a 3000 	ldrb.w	r3, [sl]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f000 80a2 	beq.w	800d3a6 <_vfiprintf_r+0x20e>
 800d262:	2300      	movs	r3, #0
 800d264:	f04f 32ff 	mov.w	r2, #4294967295
 800d268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d26c:	f10a 0a01 	add.w	sl, sl, #1
 800d270:	9304      	str	r3, [sp, #16]
 800d272:	9307      	str	r3, [sp, #28]
 800d274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d278:	931a      	str	r3, [sp, #104]	; 0x68
 800d27a:	4654      	mov	r4, sl
 800d27c:	2205      	movs	r2, #5
 800d27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d282:	4858      	ldr	r0, [pc, #352]	; (800d3e4 <_vfiprintf_r+0x24c>)
 800d284:	f7f2 ffb4 	bl	80001f0 <memchr>
 800d288:	9a04      	ldr	r2, [sp, #16]
 800d28a:	b9d8      	cbnz	r0, 800d2c4 <_vfiprintf_r+0x12c>
 800d28c:	06d1      	lsls	r1, r2, #27
 800d28e:	bf44      	itt	mi
 800d290:	2320      	movmi	r3, #32
 800d292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d296:	0713      	lsls	r3, r2, #28
 800d298:	bf44      	itt	mi
 800d29a:	232b      	movmi	r3, #43	; 0x2b
 800d29c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d2a4:	2b2a      	cmp	r3, #42	; 0x2a
 800d2a6:	d015      	beq.n	800d2d4 <_vfiprintf_r+0x13c>
 800d2a8:	9a07      	ldr	r2, [sp, #28]
 800d2aa:	4654      	mov	r4, sl
 800d2ac:	2000      	movs	r0, #0
 800d2ae:	f04f 0c0a 	mov.w	ip, #10
 800d2b2:	4621      	mov	r1, r4
 800d2b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2b8:	3b30      	subs	r3, #48	; 0x30
 800d2ba:	2b09      	cmp	r3, #9
 800d2bc:	d94e      	bls.n	800d35c <_vfiprintf_r+0x1c4>
 800d2be:	b1b0      	cbz	r0, 800d2ee <_vfiprintf_r+0x156>
 800d2c0:	9207      	str	r2, [sp, #28]
 800d2c2:	e014      	b.n	800d2ee <_vfiprintf_r+0x156>
 800d2c4:	eba0 0308 	sub.w	r3, r0, r8
 800d2c8:	fa09 f303 	lsl.w	r3, r9, r3
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	9304      	str	r3, [sp, #16]
 800d2d0:	46a2      	mov	sl, r4
 800d2d2:	e7d2      	b.n	800d27a <_vfiprintf_r+0xe2>
 800d2d4:	9b03      	ldr	r3, [sp, #12]
 800d2d6:	1d19      	adds	r1, r3, #4
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	9103      	str	r1, [sp, #12]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	bfbb      	ittet	lt
 800d2e0:	425b      	neglt	r3, r3
 800d2e2:	f042 0202 	orrlt.w	r2, r2, #2
 800d2e6:	9307      	strge	r3, [sp, #28]
 800d2e8:	9307      	strlt	r3, [sp, #28]
 800d2ea:	bfb8      	it	lt
 800d2ec:	9204      	strlt	r2, [sp, #16]
 800d2ee:	7823      	ldrb	r3, [r4, #0]
 800d2f0:	2b2e      	cmp	r3, #46	; 0x2e
 800d2f2:	d10c      	bne.n	800d30e <_vfiprintf_r+0x176>
 800d2f4:	7863      	ldrb	r3, [r4, #1]
 800d2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800d2f8:	d135      	bne.n	800d366 <_vfiprintf_r+0x1ce>
 800d2fa:	9b03      	ldr	r3, [sp, #12]
 800d2fc:	1d1a      	adds	r2, r3, #4
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	9203      	str	r2, [sp, #12]
 800d302:	2b00      	cmp	r3, #0
 800d304:	bfb8      	it	lt
 800d306:	f04f 33ff 	movlt.w	r3, #4294967295
 800d30a:	3402      	adds	r4, #2
 800d30c:	9305      	str	r3, [sp, #20]
 800d30e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d3f4 <_vfiprintf_r+0x25c>
 800d312:	7821      	ldrb	r1, [r4, #0]
 800d314:	2203      	movs	r2, #3
 800d316:	4650      	mov	r0, sl
 800d318:	f7f2 ff6a 	bl	80001f0 <memchr>
 800d31c:	b140      	cbz	r0, 800d330 <_vfiprintf_r+0x198>
 800d31e:	2340      	movs	r3, #64	; 0x40
 800d320:	eba0 000a 	sub.w	r0, r0, sl
 800d324:	fa03 f000 	lsl.w	r0, r3, r0
 800d328:	9b04      	ldr	r3, [sp, #16]
 800d32a:	4303      	orrs	r3, r0
 800d32c:	3401      	adds	r4, #1
 800d32e:	9304      	str	r3, [sp, #16]
 800d330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d334:	482c      	ldr	r0, [pc, #176]	; (800d3e8 <_vfiprintf_r+0x250>)
 800d336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d33a:	2206      	movs	r2, #6
 800d33c:	f7f2 ff58 	bl	80001f0 <memchr>
 800d340:	2800      	cmp	r0, #0
 800d342:	d03f      	beq.n	800d3c4 <_vfiprintf_r+0x22c>
 800d344:	4b29      	ldr	r3, [pc, #164]	; (800d3ec <_vfiprintf_r+0x254>)
 800d346:	bb1b      	cbnz	r3, 800d390 <_vfiprintf_r+0x1f8>
 800d348:	9b03      	ldr	r3, [sp, #12]
 800d34a:	3307      	adds	r3, #7
 800d34c:	f023 0307 	bic.w	r3, r3, #7
 800d350:	3308      	adds	r3, #8
 800d352:	9303      	str	r3, [sp, #12]
 800d354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d356:	443b      	add	r3, r7
 800d358:	9309      	str	r3, [sp, #36]	; 0x24
 800d35a:	e767      	b.n	800d22c <_vfiprintf_r+0x94>
 800d35c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d360:	460c      	mov	r4, r1
 800d362:	2001      	movs	r0, #1
 800d364:	e7a5      	b.n	800d2b2 <_vfiprintf_r+0x11a>
 800d366:	2300      	movs	r3, #0
 800d368:	3401      	adds	r4, #1
 800d36a:	9305      	str	r3, [sp, #20]
 800d36c:	4619      	mov	r1, r3
 800d36e:	f04f 0c0a 	mov.w	ip, #10
 800d372:	4620      	mov	r0, r4
 800d374:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d378:	3a30      	subs	r2, #48	; 0x30
 800d37a:	2a09      	cmp	r2, #9
 800d37c:	d903      	bls.n	800d386 <_vfiprintf_r+0x1ee>
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d0c5      	beq.n	800d30e <_vfiprintf_r+0x176>
 800d382:	9105      	str	r1, [sp, #20]
 800d384:	e7c3      	b.n	800d30e <_vfiprintf_r+0x176>
 800d386:	fb0c 2101 	mla	r1, ip, r1, r2
 800d38a:	4604      	mov	r4, r0
 800d38c:	2301      	movs	r3, #1
 800d38e:	e7f0      	b.n	800d372 <_vfiprintf_r+0x1da>
 800d390:	ab03      	add	r3, sp, #12
 800d392:	9300      	str	r3, [sp, #0]
 800d394:	462a      	mov	r2, r5
 800d396:	4b16      	ldr	r3, [pc, #88]	; (800d3f0 <_vfiprintf_r+0x258>)
 800d398:	a904      	add	r1, sp, #16
 800d39a:	4630      	mov	r0, r6
 800d39c:	f7fd fb06 	bl	800a9ac <_printf_float>
 800d3a0:	4607      	mov	r7, r0
 800d3a2:	1c78      	adds	r0, r7, #1
 800d3a4:	d1d6      	bne.n	800d354 <_vfiprintf_r+0x1bc>
 800d3a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3a8:	07d9      	lsls	r1, r3, #31
 800d3aa:	d405      	bmi.n	800d3b8 <_vfiprintf_r+0x220>
 800d3ac:	89ab      	ldrh	r3, [r5, #12]
 800d3ae:	059a      	lsls	r2, r3, #22
 800d3b0:	d402      	bmi.n	800d3b8 <_vfiprintf_r+0x220>
 800d3b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3b4:	f7fd f9e8 	bl	800a788 <__retarget_lock_release_recursive>
 800d3b8:	89ab      	ldrh	r3, [r5, #12]
 800d3ba:	065b      	lsls	r3, r3, #25
 800d3bc:	f53f af12 	bmi.w	800d1e4 <_vfiprintf_r+0x4c>
 800d3c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3c2:	e711      	b.n	800d1e8 <_vfiprintf_r+0x50>
 800d3c4:	ab03      	add	r3, sp, #12
 800d3c6:	9300      	str	r3, [sp, #0]
 800d3c8:	462a      	mov	r2, r5
 800d3ca:	4b09      	ldr	r3, [pc, #36]	; (800d3f0 <_vfiprintf_r+0x258>)
 800d3cc:	a904      	add	r1, sp, #16
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	f7fd fd90 	bl	800aef4 <_printf_i>
 800d3d4:	e7e4      	b.n	800d3a0 <_vfiprintf_r+0x208>
 800d3d6:	bf00      	nop
 800d3d8:	0800d91c 	.word	0x0800d91c
 800d3dc:	0800d93c 	.word	0x0800d93c
 800d3e0:	0800d8fc 	.word	0x0800d8fc
 800d3e4:	0800dc8c 	.word	0x0800dc8c
 800d3e8:	0800dc96 	.word	0x0800dc96
 800d3ec:	0800a9ad 	.word	0x0800a9ad
 800d3f0:	0800d173 	.word	0x0800d173
 800d3f4:	0800dc92 	.word	0x0800dc92

0800d3f8 <_read_r>:
 800d3f8:	b538      	push	{r3, r4, r5, lr}
 800d3fa:	4d07      	ldr	r5, [pc, #28]	; (800d418 <_read_r+0x20>)
 800d3fc:	4604      	mov	r4, r0
 800d3fe:	4608      	mov	r0, r1
 800d400:	4611      	mov	r1, r2
 800d402:	2200      	movs	r2, #0
 800d404:	602a      	str	r2, [r5, #0]
 800d406:	461a      	mov	r2, r3
 800d408:	f7f6 f820 	bl	800344c <_read>
 800d40c:	1c43      	adds	r3, r0, #1
 800d40e:	d102      	bne.n	800d416 <_read_r+0x1e>
 800d410:	682b      	ldr	r3, [r5, #0]
 800d412:	b103      	cbz	r3, 800d416 <_read_r+0x1e>
 800d414:	6023      	str	r3, [r4, #0]
 800d416:	bd38      	pop	{r3, r4, r5, pc}
 800d418:	20005228 	.word	0x20005228

0800d41c <__assert_func>:
 800d41c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d41e:	4614      	mov	r4, r2
 800d420:	461a      	mov	r2, r3
 800d422:	4b09      	ldr	r3, [pc, #36]	; (800d448 <__assert_func+0x2c>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4605      	mov	r5, r0
 800d428:	68d8      	ldr	r0, [r3, #12]
 800d42a:	b14c      	cbz	r4, 800d440 <__assert_func+0x24>
 800d42c:	4b07      	ldr	r3, [pc, #28]	; (800d44c <__assert_func+0x30>)
 800d42e:	9100      	str	r1, [sp, #0]
 800d430:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d434:	4906      	ldr	r1, [pc, #24]	; (800d450 <__assert_func+0x34>)
 800d436:	462b      	mov	r3, r5
 800d438:	f000 f80e 	bl	800d458 <fiprintf>
 800d43c:	f000 f89f 	bl	800d57e <abort>
 800d440:	4b04      	ldr	r3, [pc, #16]	; (800d454 <__assert_func+0x38>)
 800d442:	461c      	mov	r4, r3
 800d444:	e7f3      	b.n	800d42e <__assert_func+0x12>
 800d446:	bf00      	nop
 800d448:	2000005c 	.word	0x2000005c
 800d44c:	0800dc9d 	.word	0x0800dc9d
 800d450:	0800dcaa 	.word	0x0800dcaa
 800d454:	0800dcd8 	.word	0x0800dcd8

0800d458 <fiprintf>:
 800d458:	b40e      	push	{r1, r2, r3}
 800d45a:	b503      	push	{r0, r1, lr}
 800d45c:	4601      	mov	r1, r0
 800d45e:	ab03      	add	r3, sp, #12
 800d460:	4805      	ldr	r0, [pc, #20]	; (800d478 <fiprintf+0x20>)
 800d462:	f853 2b04 	ldr.w	r2, [r3], #4
 800d466:	6800      	ldr	r0, [r0, #0]
 800d468:	9301      	str	r3, [sp, #4]
 800d46a:	f7ff fe95 	bl	800d198 <_vfiprintf_r>
 800d46e:	b002      	add	sp, #8
 800d470:	f85d eb04 	ldr.w	lr, [sp], #4
 800d474:	b003      	add	sp, #12
 800d476:	4770      	bx	lr
 800d478:	2000005c 	.word	0x2000005c

0800d47c <_fstat_r>:
 800d47c:	b538      	push	{r3, r4, r5, lr}
 800d47e:	4d07      	ldr	r5, [pc, #28]	; (800d49c <_fstat_r+0x20>)
 800d480:	2300      	movs	r3, #0
 800d482:	4604      	mov	r4, r0
 800d484:	4608      	mov	r0, r1
 800d486:	4611      	mov	r1, r2
 800d488:	602b      	str	r3, [r5, #0]
 800d48a:	f7f6 f824 	bl	80034d6 <_fstat>
 800d48e:	1c43      	adds	r3, r0, #1
 800d490:	d102      	bne.n	800d498 <_fstat_r+0x1c>
 800d492:	682b      	ldr	r3, [r5, #0]
 800d494:	b103      	cbz	r3, 800d498 <_fstat_r+0x1c>
 800d496:	6023      	str	r3, [r4, #0]
 800d498:	bd38      	pop	{r3, r4, r5, pc}
 800d49a:	bf00      	nop
 800d49c:	20005228 	.word	0x20005228

0800d4a0 <_isatty_r>:
 800d4a0:	b538      	push	{r3, r4, r5, lr}
 800d4a2:	4d06      	ldr	r5, [pc, #24]	; (800d4bc <_isatty_r+0x1c>)
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	4608      	mov	r0, r1
 800d4aa:	602b      	str	r3, [r5, #0]
 800d4ac:	f7f6 f823 	bl	80034f6 <_isatty>
 800d4b0:	1c43      	adds	r3, r0, #1
 800d4b2:	d102      	bne.n	800d4ba <_isatty_r+0x1a>
 800d4b4:	682b      	ldr	r3, [r5, #0]
 800d4b6:	b103      	cbz	r3, 800d4ba <_isatty_r+0x1a>
 800d4b8:	6023      	str	r3, [r4, #0]
 800d4ba:	bd38      	pop	{r3, r4, r5, pc}
 800d4bc:	20005228 	.word	0x20005228

0800d4c0 <__ascii_mbtowc>:
 800d4c0:	b082      	sub	sp, #8
 800d4c2:	b901      	cbnz	r1, 800d4c6 <__ascii_mbtowc+0x6>
 800d4c4:	a901      	add	r1, sp, #4
 800d4c6:	b142      	cbz	r2, 800d4da <__ascii_mbtowc+0x1a>
 800d4c8:	b14b      	cbz	r3, 800d4de <__ascii_mbtowc+0x1e>
 800d4ca:	7813      	ldrb	r3, [r2, #0]
 800d4cc:	600b      	str	r3, [r1, #0]
 800d4ce:	7812      	ldrb	r2, [r2, #0]
 800d4d0:	1e10      	subs	r0, r2, #0
 800d4d2:	bf18      	it	ne
 800d4d4:	2001      	movne	r0, #1
 800d4d6:	b002      	add	sp, #8
 800d4d8:	4770      	bx	lr
 800d4da:	4610      	mov	r0, r2
 800d4dc:	e7fb      	b.n	800d4d6 <__ascii_mbtowc+0x16>
 800d4de:	f06f 0001 	mvn.w	r0, #1
 800d4e2:	e7f8      	b.n	800d4d6 <__ascii_mbtowc+0x16>

0800d4e4 <memmove>:
 800d4e4:	4288      	cmp	r0, r1
 800d4e6:	b510      	push	{r4, lr}
 800d4e8:	eb01 0402 	add.w	r4, r1, r2
 800d4ec:	d902      	bls.n	800d4f4 <memmove+0x10>
 800d4ee:	4284      	cmp	r4, r0
 800d4f0:	4623      	mov	r3, r4
 800d4f2:	d807      	bhi.n	800d504 <memmove+0x20>
 800d4f4:	1e43      	subs	r3, r0, #1
 800d4f6:	42a1      	cmp	r1, r4
 800d4f8:	d008      	beq.n	800d50c <memmove+0x28>
 800d4fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d502:	e7f8      	b.n	800d4f6 <memmove+0x12>
 800d504:	4402      	add	r2, r0
 800d506:	4601      	mov	r1, r0
 800d508:	428a      	cmp	r2, r1
 800d50a:	d100      	bne.n	800d50e <memmove+0x2a>
 800d50c:	bd10      	pop	{r4, pc}
 800d50e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d516:	e7f7      	b.n	800d508 <memmove+0x24>

0800d518 <_realloc_r>:
 800d518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d51a:	4607      	mov	r7, r0
 800d51c:	4614      	mov	r4, r2
 800d51e:	460e      	mov	r6, r1
 800d520:	b921      	cbnz	r1, 800d52c <_realloc_r+0x14>
 800d522:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d526:	4611      	mov	r1, r2
 800d528:	f7fd b946 	b.w	800a7b8 <_malloc_r>
 800d52c:	b922      	cbnz	r2, 800d538 <_realloc_r+0x20>
 800d52e:	f7ff fc5d 	bl	800cdec <_free_r>
 800d532:	4625      	mov	r5, r4
 800d534:	4628      	mov	r0, r5
 800d536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d538:	f000 f828 	bl	800d58c <_malloc_usable_size_r>
 800d53c:	42a0      	cmp	r0, r4
 800d53e:	d20f      	bcs.n	800d560 <_realloc_r+0x48>
 800d540:	4621      	mov	r1, r4
 800d542:	4638      	mov	r0, r7
 800d544:	f7fd f938 	bl	800a7b8 <_malloc_r>
 800d548:	4605      	mov	r5, r0
 800d54a:	2800      	cmp	r0, #0
 800d54c:	d0f2      	beq.n	800d534 <_realloc_r+0x1c>
 800d54e:	4631      	mov	r1, r6
 800d550:	4622      	mov	r2, r4
 800d552:	f7fd f91a 	bl	800a78a <memcpy>
 800d556:	4631      	mov	r1, r6
 800d558:	4638      	mov	r0, r7
 800d55a:	f7ff fc47 	bl	800cdec <_free_r>
 800d55e:	e7e9      	b.n	800d534 <_realloc_r+0x1c>
 800d560:	4635      	mov	r5, r6
 800d562:	e7e7      	b.n	800d534 <_realloc_r+0x1c>

0800d564 <__ascii_wctomb>:
 800d564:	b149      	cbz	r1, 800d57a <__ascii_wctomb+0x16>
 800d566:	2aff      	cmp	r2, #255	; 0xff
 800d568:	bf85      	ittet	hi
 800d56a:	238a      	movhi	r3, #138	; 0x8a
 800d56c:	6003      	strhi	r3, [r0, #0]
 800d56e:	700a      	strbls	r2, [r1, #0]
 800d570:	f04f 30ff 	movhi.w	r0, #4294967295
 800d574:	bf98      	it	ls
 800d576:	2001      	movls	r0, #1
 800d578:	4770      	bx	lr
 800d57a:	4608      	mov	r0, r1
 800d57c:	4770      	bx	lr

0800d57e <abort>:
 800d57e:	b508      	push	{r3, lr}
 800d580:	2006      	movs	r0, #6
 800d582:	f000 f833 	bl	800d5ec <raise>
 800d586:	2001      	movs	r0, #1
 800d588:	f7f5 ff56 	bl	8003438 <_exit>

0800d58c <_malloc_usable_size_r>:
 800d58c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d590:	1f18      	subs	r0, r3, #4
 800d592:	2b00      	cmp	r3, #0
 800d594:	bfbc      	itt	lt
 800d596:	580b      	ldrlt	r3, [r1, r0]
 800d598:	18c0      	addlt	r0, r0, r3
 800d59a:	4770      	bx	lr

0800d59c <_raise_r>:
 800d59c:	291f      	cmp	r1, #31
 800d59e:	b538      	push	{r3, r4, r5, lr}
 800d5a0:	4604      	mov	r4, r0
 800d5a2:	460d      	mov	r5, r1
 800d5a4:	d904      	bls.n	800d5b0 <_raise_r+0x14>
 800d5a6:	2316      	movs	r3, #22
 800d5a8:	6003      	str	r3, [r0, #0]
 800d5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ae:	bd38      	pop	{r3, r4, r5, pc}
 800d5b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d5b2:	b112      	cbz	r2, 800d5ba <_raise_r+0x1e>
 800d5b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5b8:	b94b      	cbnz	r3, 800d5ce <_raise_r+0x32>
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	f000 f830 	bl	800d620 <_getpid_r>
 800d5c0:	462a      	mov	r2, r5
 800d5c2:	4601      	mov	r1, r0
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5ca:	f000 b817 	b.w	800d5fc <_kill_r>
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d00a      	beq.n	800d5e8 <_raise_r+0x4c>
 800d5d2:	1c59      	adds	r1, r3, #1
 800d5d4:	d103      	bne.n	800d5de <_raise_r+0x42>
 800d5d6:	2316      	movs	r3, #22
 800d5d8:	6003      	str	r3, [r0, #0]
 800d5da:	2001      	movs	r0, #1
 800d5dc:	e7e7      	b.n	800d5ae <_raise_r+0x12>
 800d5de:	2400      	movs	r4, #0
 800d5e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	4798      	blx	r3
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	e7e0      	b.n	800d5ae <_raise_r+0x12>

0800d5ec <raise>:
 800d5ec:	4b02      	ldr	r3, [pc, #8]	; (800d5f8 <raise+0xc>)
 800d5ee:	4601      	mov	r1, r0
 800d5f0:	6818      	ldr	r0, [r3, #0]
 800d5f2:	f7ff bfd3 	b.w	800d59c <_raise_r>
 800d5f6:	bf00      	nop
 800d5f8:	2000005c 	.word	0x2000005c

0800d5fc <_kill_r>:
 800d5fc:	b538      	push	{r3, r4, r5, lr}
 800d5fe:	4d07      	ldr	r5, [pc, #28]	; (800d61c <_kill_r+0x20>)
 800d600:	2300      	movs	r3, #0
 800d602:	4604      	mov	r4, r0
 800d604:	4608      	mov	r0, r1
 800d606:	4611      	mov	r1, r2
 800d608:	602b      	str	r3, [r5, #0]
 800d60a:	f7f5 ff05 	bl	8003418 <_kill>
 800d60e:	1c43      	adds	r3, r0, #1
 800d610:	d102      	bne.n	800d618 <_kill_r+0x1c>
 800d612:	682b      	ldr	r3, [r5, #0]
 800d614:	b103      	cbz	r3, 800d618 <_kill_r+0x1c>
 800d616:	6023      	str	r3, [r4, #0]
 800d618:	bd38      	pop	{r3, r4, r5, pc}
 800d61a:	bf00      	nop
 800d61c:	20005228 	.word	0x20005228

0800d620 <_getpid_r>:
 800d620:	f7f5 bef2 	b.w	8003408 <_getpid>

0800d624 <_init>:
 800d624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d626:	bf00      	nop
 800d628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d62a:	bc08      	pop	{r3}
 800d62c:	469e      	mov	lr, r3
 800d62e:	4770      	bx	lr

0800d630 <_fini>:
 800d630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d632:	bf00      	nop
 800d634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d636:	bc08      	pop	{r3}
 800d638:	469e      	mov	lr, r3
 800d63a:	4770      	bx	lr
