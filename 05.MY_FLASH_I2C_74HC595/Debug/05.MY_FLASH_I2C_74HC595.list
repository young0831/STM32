
05.MY_FLASH_I2C_74HC595.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b55c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  0800b700  0800b700  0001b700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bccc  0800bccc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bccc  0800bccc  0001bccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcd4  0800bcd4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcd4  0800bcd4  0001bcd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcd8  0800bcd8  0001bcd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800bcdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f3c  200001e8  0800bec4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005124  0800bec4  00025124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026cee  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dc1  00000000  00000000  00046f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af0  00000000  00000000  0004bcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001950  00000000  00000000  0004d7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a051  00000000  00000000  0004f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f784  00000000  00000000  00069159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d472  00000000  00000000  000888dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00125d4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008318  00000000  00000000  00125da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b6e4 	.word	0x0800b6e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800b6e4 	.word	0x0800b6e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <button_led_toggle_test>:

void button_led_toggle_test(void);
int get_button( GPIO_TypeDef *GPIO, int GPIO_Pin, int button_num);

void button_led_toggle_test(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	GPIOC->PUPDR |= 0x55; // 하위 4개 핀(Pin 0~3) PUPDR 각각 01 설정 → Pull-up 활성화
 8000eb4:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <button_led_toggle_test+0x90>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	4a21      	ldr	r2, [pc, #132]	; (8000f40 <button_led_toggle_test+0x90>)
 8000eba:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000ebe:	60d3      	str	r3, [r2, #12]
	if(get_button( GPIOC, GPIO_PIN_0, BTN0 ) == BUTTON_PRESS)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	481e      	ldr	r0, [pc, #120]	; (8000f40 <button_led_toggle_test+0x90>)
 8000ec6:	f000 f841 	bl	8000f4c <get_button>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d103      	bne.n	8000ed8 <button_led_toggle_test+0x28>
	{
		HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_0 );
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	481c      	ldr	r0, [pc, #112]	; (8000f44 <button_led_toggle_test+0x94>)
 8000ed4:	f002 f93b 	bl	800314e <HAL_GPIO_TogglePin>
	}
	if(get_button( GPIOC, GPIO_PIN_1, BTN1 ) == BUTTON_PRESS)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2102      	movs	r1, #2
 8000edc:	4818      	ldr	r0, [pc, #96]	; (8000f40 <button_led_toggle_test+0x90>)
 8000ede:	f000 f835 	bl	8000f4c <get_button>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d103      	bne.n	8000ef0 <button_led_toggle_test+0x40>
	{
		HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_1 );
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4816      	ldr	r0, [pc, #88]	; (8000f44 <button_led_toggle_test+0x94>)
 8000eec:	f002 f92f 	bl	800314e <HAL_GPIO_TogglePin>
	}
	if(get_button( GPIOC, GPIO_PIN_2, BTN2 ) == BUTTON_PRESS)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	4812      	ldr	r0, [pc, #72]	; (8000f40 <button_led_toggle_test+0x90>)
 8000ef6:	f000 f829 	bl	8000f4c <get_button>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d103      	bne.n	8000f08 <button_led_toggle_test+0x58>
	{
		HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_2 );
 8000f00:	2104      	movs	r1, #4
 8000f02:	4810      	ldr	r0, [pc, #64]	; (8000f44 <button_led_toggle_test+0x94>)
 8000f04:	f002 f923 	bl	800314e <HAL_GPIO_TogglePin>
	}
	if(get_button( GPIOC, GPIO_PIN_3, BTN3 ) == BUTTON_PRESS)
 8000f08:	2203      	movs	r2, #3
 8000f0a:	2108      	movs	r1, #8
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <button_led_toggle_test+0x90>)
 8000f0e:	f000 f81d 	bl	8000f4c <get_button>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d103      	bne.n	8000f20 <button_led_toggle_test+0x70>
	{
		HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_3 );
 8000f18:	2108      	movs	r1, #8
 8000f1a:	480a      	ldr	r0, [pc, #40]	; (8000f44 <button_led_toggle_test+0x94>)
 8000f1c:	f002 f917 	bl	800314e <HAL_GPIO_TogglePin>
	}
	if(get_button( GPIOC, GPIO_PIN_13, BTN4 ) == BUTTON_PRESS) //Demo blue button
 8000f20:	2204      	movs	r2, #4
 8000f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <button_led_toggle_test+0x90>)
 8000f28:	f000 f810 	bl	8000f4c <get_button>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d103      	bne.n	8000f3a <button_led_toggle_test+0x8a>
	{
		HAL_GPIO_TogglePin( GPIOA, GPIO_PIN_5 );
 8000f32:	2120      	movs	r1, #32
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <button_led_toggle_test+0x98>)
 8000f36:	f002 f90a 	bl	800314e <HAL_GPIO_TogglePin>
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40020800 	.word	0x40020800
 8000f44:	40020400 	.word	0x40020400
 8000f48:	40020000 	.word	0x40020000

08000f4c <get_button>:

int get_button( GPIO_TypeDef *GPIO, int GPIO_Pin, int button_num)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE};
	// 	지역 변수에 static을 쓰면 전역 변수처럼 함수를 빠져 나갔다 다시 들어 와도 값을 유지 한다.
	int currtn_state;

	currtn_state = HAL_GPIO_ReadPin(GPIO, GPIO_Pin);   // 버튼을 읽는다.
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f002 f8c4 	bl	80030ec <HAL_GPIO_ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	617b      	str	r3, [r7, #20]
	if (currtn_state == BUTTON_PRESS && button_status[button_num] == BUTTON_RELEASE)  // 버튼이 처음 눌려진 noise high
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10f      	bne.n	8000f8e <get_button+0x42>
 8000f6e:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <get_button+0x74>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d109      	bne.n	8000f8e <get_button+0x42>
	{
		HAL_Delay(60);   // noise가 지나가기를 기다린다.
 8000f7a:	203c      	movs	r0, #60	; 0x3c
 8000f7c:	f001 faa6 	bl	80024cc <HAL_Delay>
		button_status[button_num] = BUTTON_PRESS;   // noise가 지나간 상태의 High 상태
 8000f80:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <get_button+0x74>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
		return BUTTON_RELEASE;   // 아직은 완전히 눌렸다 떼어진 상태가 아니다.
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e013      	b.n	8000fb6 <get_button+0x6a>
	}
	else if (currtn_state== BUTTON_RELEASE && button_status[button_num] == BUTTON_PRESS)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d10f      	bne.n	8000fb4 <get_button+0x68>
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <get_button+0x74>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d109      	bne.n	8000fb4 <get_button+0x68>
	{
		HAL_Delay(60);
 8000fa0:	203c      	movs	r0, #60	; 0x3c
 8000fa2:	f001 fa93 	bl	80024cc <HAL_Delay>
		button_status[button_num] = BUTTON_RELEASE;   // 다음 버튼 체크를 위해서 초기화
 8000fa6:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <get_button+0x74>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
		return BUTTON_PRESS;   // 완전히 1번 눌렸다 떼어진 상태로 인정
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e000      	b.n	8000fb6 <get_button+0x6a>
	}

	return BUTTON_RELEASE;   // 버튼이 open상태
 8000fb4:	2301      	movs	r3, #1
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000000 	.word	0x20000000

08000fc4 <ds1302_main>:

uint8_t alarm_hour = 0, alarm_min = 0, alarm_sec = 0;
t_ds1302 ds1302;
uint8_t blink_flag = 0;
void ds1302_main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
    i2c_lcd_init();
 8000fc8:	f000 fc8e 	bl	80018e8 <i2c_lcd_init>
    flash_set_time();
 8000fcc:	f000 fb2e 	bl	800162c <flash_set_time>
    init_gpio_ds1302();
 8000fd0:	f000 fa66 	bl	80014a0 <init_gpio_ds1302>
    init_ds1302();
 8000fd4:	f000 f994 	bl	8001300 <init_ds1302>
    while(1)
    {
    	GPIOC->PUPDR |= 0x55; // 하위 4개 핀(Pin 0~3) PUPDR 각각 01 설정 → Pull-up 활성화
 8000fd8:	4b64      	ldr	r3, [pc, #400]	; (800116c <ds1302_main+0x1a8>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	4a63      	ldr	r2, [pc, #396]	; (800116c <ds1302_main+0x1a8>)
 8000fde:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000fe2:	60d3      	str	r3, [r2, #12]

        if(get_button(GPIOC, GPIO_PIN_0, BTN0) == BUTTON_PRESS)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4860      	ldr	r0, [pc, #384]	; (800116c <ds1302_main+0x1a8>)
 8000fea:	f7ff ffaf 	bl	8000f4c <get_button>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d113      	bne.n	800101c <ds1302_main+0x58>
        {
            lcd_command(CLEAR_DISPLAY);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f000 fc0f 	bl	8001818 <lcd_command>
            if(displayMode == MODE_ALARM)
 8000ffa:	4b5d      	ldr	r3, [pc, #372]	; (8001170 <ds1302_main+0x1ac>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d10c      	bne.n	800101c <ds1302_main+0x58>
            {
                alarmState = (alarmState + 1) % 4;
 8001002:	4b5c      	ldr	r3, [pc, #368]	; (8001174 <ds1302_main+0x1b0>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	425a      	negs	r2, r3
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	f002 0203 	and.w	r2, r2, #3
 8001012:	bf58      	it	pl
 8001014:	4253      	negpl	r3, r2
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b56      	ldr	r3, [pc, #344]	; (8001174 <ds1302_main+0x1b0>)
 800101a:	701a      	strb	r2, [r3, #0]
            }
        }

		if(get_button(GPIOC, GPIO_PIN_1, BTN1) == BUTTON_PRESS){
 800101c:	2201      	movs	r2, #1
 800101e:	2102      	movs	r1, #2
 8001020:	4852      	ldr	r0, [pc, #328]	; (800116c <ds1302_main+0x1a8>)
 8001022:	f7ff ff93 	bl	8000f4c <get_button>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d159      	bne.n	80010e0 <ds1302_main+0x11c>
			lcd_command(CLEAR_DISPLAY);
 800102c:	2001      	movs	r0, #1
 800102e:	f000 fbf3 	bl	8001818 <lcd_command>
			if(alarmState == ALARM_SET){
 8001032:	4b50      	ldr	r3, [pc, #320]	; (8001174 <ds1302_main+0x1b0>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10f      	bne.n	800105a <ds1302_main+0x96>
				displayMode ^= 1; // MODE_CLOCK <-> MODE_ALARM 토글
 800103a:	4b4d      	ldr	r3, [pc, #308]	; (8001170 <ds1302_main+0x1ac>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	f083 0301 	eor.w	r3, r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b4a      	ldr	r3, [pc, #296]	; (8001170 <ds1302_main+0x1ac>)
 8001046:	701a      	strb	r2, [r3, #0]

				if(TIM11_1ms_counter >= 1000)
 8001048:	4b4b      	ldr	r3, [pc, #300]	; (8001178 <ds1302_main+0x1b4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001050:	db46      	blt.n	80010e0 <ds1302_main+0x11c>
				{
					TIM11_1ms_counter = 0;
 8001052:	4b49      	ldr	r3, [pc, #292]	; (8001178 <ds1302_main+0x1b4>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	e042      	b.n	80010e0 <ds1302_main+0x11c>
				}
			} else if(alarmState == ALARM_SET_HOUR){
 800105a:	4b46      	ldr	r3, [pc, #280]	; (8001174 <ds1302_main+0x1b0>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d111      	bne.n	8001086 <ds1302_main+0xc2>
				alarm_hour = (alarm_hour + 1) % 24;
 8001062:	4b46      	ldr	r3, [pc, #280]	; (800117c <ds1302_main+0x1b8>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	4b45      	ldr	r3, [pc, #276]	; (8001180 <ds1302_main+0x1bc>)
 800106a:	fb83 1302 	smull	r1, r3, r3, r2
 800106e:	1099      	asrs	r1, r3, #2
 8001070:	17d3      	asrs	r3, r2, #31
 8001072:	1ac9      	subs	r1, r1, r3
 8001074:	460b      	mov	r3, r1
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	440b      	add	r3, r1
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	1ad1      	subs	r1, r2, r3
 800107e:	b2ca      	uxtb	r2, r1
 8001080:	4b3e      	ldr	r3, [pc, #248]	; (800117c <ds1302_main+0x1b8>)
 8001082:	701a      	strb	r2, [r3, #0]
 8001084:	e02c      	b.n	80010e0 <ds1302_main+0x11c>
			} else if(alarmState == ALARM_SET_MIN){
 8001086:	4b3b      	ldr	r3, [pc, #236]	; (8001174 <ds1302_main+0x1b0>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d112      	bne.n	80010b4 <ds1302_main+0xf0>
				alarm_min = (alarm_min + 1) % 60;
 800108e:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <ds1302_main+0x1c0>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	4b3c      	ldr	r3, [pc, #240]	; (8001188 <ds1302_main+0x1c4>)
 8001096:	fb83 1302 	smull	r1, r3, r3, r2
 800109a:	4413      	add	r3, r2
 800109c:	1159      	asrs	r1, r3, #5
 800109e:	17d3      	asrs	r3, r2, #31
 80010a0:	1ac9      	subs	r1, r1, r3
 80010a2:	460b      	mov	r3, r1
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	1a5b      	subs	r3, r3, r1
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	1ad1      	subs	r1, r2, r3
 80010ac:	b2ca      	uxtb	r2, r1
 80010ae:	4b35      	ldr	r3, [pc, #212]	; (8001184 <ds1302_main+0x1c0>)
 80010b0:	701a      	strb	r2, [r3, #0]
 80010b2:	e015      	b.n	80010e0 <ds1302_main+0x11c>
			} else if(alarmState == ALARM_SET_SEC){
 80010b4:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <ds1302_main+0x1b0>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d111      	bne.n	80010e0 <ds1302_main+0x11c>
				alarm_sec = (alarm_sec + 1) % 60;
 80010bc:	4b33      	ldr	r3, [pc, #204]	; (800118c <ds1302_main+0x1c8>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	4b31      	ldr	r3, [pc, #196]	; (8001188 <ds1302_main+0x1c4>)
 80010c4:	fb83 1302 	smull	r1, r3, r3, r2
 80010c8:	4413      	add	r3, r2
 80010ca:	1159      	asrs	r1, r3, #5
 80010cc:	17d3      	asrs	r3, r2, #31
 80010ce:	1ac9      	subs	r1, r1, r3
 80010d0:	460b      	mov	r3, r1
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	1a5b      	subs	r3, r3, r1
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	1ad1      	subs	r1, r2, r3
 80010da:	b2ca      	uxtb	r2, r1
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <ds1302_main+0x1c8>)
 80010de:	701a      	strb	r2, [r3, #0]
			}
		}

        if(get_button(GPIOC, GPIO_PIN_2, BTN2) == BUTTON_PRESS && alarmState == ALARM_SET_MIN){
 80010e0:	2202      	movs	r2, #2
 80010e2:	2104      	movs	r1, #4
 80010e4:	4821      	ldr	r0, [pc, #132]	; (800116c <ds1302_main+0x1a8>)
 80010e6:	f7ff ff31 	bl	8000f4c <get_button>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d118      	bne.n	8001122 <ds1302_main+0x15e>
 80010f0:	4b20      	ldr	r3, [pc, #128]	; (8001174 <ds1302_main+0x1b0>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d114      	bne.n	8001122 <ds1302_main+0x15e>
            lcd_command(CLEAR_DISPLAY);
 80010f8:	2001      	movs	r0, #1
 80010fa:	f000 fb8d 	bl	8001818 <lcd_command>
            alarm_min = (alarm_min + 1) % 60;
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <ds1302_main+0x1c0>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	4b20      	ldr	r3, [pc, #128]	; (8001188 <ds1302_main+0x1c4>)
 8001106:	fb83 1302 	smull	r1, r3, r3, r2
 800110a:	4413      	add	r3, r2
 800110c:	1159      	asrs	r1, r3, #5
 800110e:	17d3      	asrs	r3, r2, #31
 8001110:	1ac9      	subs	r1, r1, r3
 8001112:	460b      	mov	r3, r1
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	1a5b      	subs	r3, r3, r1
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	1ad1      	subs	r1, r2, r3
 800111c:	b2ca      	uxtb	r2, r1
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <ds1302_main+0x1c0>)
 8001120:	701a      	strb	r2, [r3, #0]
        }

        if(get_button(GPIOC, GPIO_PIN_3, BTN3) == BUTTON_PRESS && alarmState == ALARM_SET_SEC){
 8001122:	2203      	movs	r2, #3
 8001124:	2108      	movs	r1, #8
 8001126:	4811      	ldr	r0, [pc, #68]	; (800116c <ds1302_main+0x1a8>)
 8001128:	f7ff ff10 	bl	8000f4c <get_button>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d118      	bne.n	8001164 <ds1302_main+0x1a0>
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <ds1302_main+0x1b0>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b03      	cmp	r3, #3
 8001138:	d114      	bne.n	8001164 <ds1302_main+0x1a0>
            lcd_command(CLEAR_DISPLAY);
 800113a:	2001      	movs	r0, #1
 800113c:	f000 fb6c 	bl	8001818 <lcd_command>
            alarm_sec = (alarm_sec + 1) % 60;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <ds1302_main+0x1c8>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <ds1302_main+0x1c4>)
 8001148:	fb83 1302 	smull	r1, r3, r3, r2
 800114c:	4413      	add	r3, r2
 800114e:	1159      	asrs	r1, r3, #5
 8001150:	17d3      	asrs	r3, r2, #31
 8001152:	1ac9      	subs	r1, r1, r3
 8001154:	460b      	mov	r3, r1
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	1a5b      	subs	r3, r3, r1
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	1ad1      	subs	r1, r2, r3
 800115e:	b2ca      	uxtb	r2, r1
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <ds1302_main+0x1c8>)
 8001162:	701a      	strb	r2, [r3, #0]
        }
        lcd_update();
 8001164:	f000 f9d6 	bl	8001514 <lcd_update>
    {
 8001168:	e736      	b.n	8000fd8 <ds1302_main+0x14>
 800116a:	bf00      	nop
 800116c:	40020800 	.word	0x40020800
 8001170:	20000204 	.word	0x20000204
 8001174:	20000205 	.word	0x20000205
 8001178:	20000210 	.word	0x20000210
 800117c:	20000206 	.word	0x20000206
 8001180:	2aaaaaab 	.word	0x2aaaaaab
 8001184:	20000207 	.word	0x20000207
 8001188:	88888889 	.word	0x88888889
 800118c:	20000208 	.word	0x20000208

08001190 <read_time_ds1302>:
//		}
//   }
//}

void read_time_ds1302(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
   ds1302.seconds = read_ds1302(ADDR_SECONDS);
 8001194:	2080      	movs	r0, #128	; 0x80
 8001196:	f000 f817 	bl	80011c8 <read_ds1302>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <read_time_ds1302+0x34>)
 80011a0:	711a      	strb	r2, [r3, #4]
   ds1302.minutes = read_ds1302(ADDR_MINUTES);
 80011a2:	2082      	movs	r0, #130	; 0x82
 80011a4:	f000 f810 	bl	80011c8 <read_ds1302>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <read_time_ds1302+0x34>)
 80011ae:	715a      	strb	r2, [r3, #5]
   ds1302.hours = read_ds1302(ADDR_HOURS);
 80011b0:	2084      	movs	r0, #132	; 0x84
 80011b2:	f000 f809 	bl	80011c8 <read_ds1302>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b02      	ldr	r3, [pc, #8]	; (80011c4 <read_time_ds1302+0x34>)
 80011bc:	719a      	strb	r2, [r3, #6]
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20004bf4 	.word	0x20004bf4

080011c8 <read_ds1302>:
   ds1302.dayofweek = read_ds1302(ADDR_DAYOFWEEK);
   ds1302.year = read_ds1302(ADDR_YEAR);
}

uint8_t read_ds1302(uint8_t addr)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
   unsigned char data8bits = 0;   // 1bits 씩 넘어온 것을 담을 그릇 (변수)
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
   // 1. CE high
   HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 1);
 80011d6:	2201      	movs	r2, #1
 80011d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011dc:	480e      	ldr	r0, [pc, #56]	; (8001218 <read_ds1302+0x50>)
 80011de:	f001 ff9d 	bl	800311c <HAL_GPIO_WritePin>
   // 2. send addr
   tx_ds1302(addr + 1);         // read addr
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	3301      	adds	r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f8df 	bl	80013ac <tx_ds1302>
   // 3. read data
   rx_ds1302(&data8bits);
 80011ee:	f107 030f 	add.w	r3, r7, #15
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f852 	bl	800129c <rx_ds1302>
   // 4. CE low
   HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <read_ds1302+0x50>)
 8001200:	f001 ff8c 	bl	800311c <HAL_GPIO_WritePin>
   // 5. return bcd to dec
   return bcd2dec(data8bits);
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f82c 	bl	8001264 <bcd2dec>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40020000 	.word	0x40020000

0800121c <dec2bcd>:
// =====================
//        25

//dec -> bcd
uint8_t dec2bcd(uint8_t dec)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
   uint8_t high, low;

   high = (dec / 10) << 4;
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <dec2bcd+0x44>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	08db      	lsrs	r3, r3, #3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	73fb      	strb	r3, [r7, #15]
   low = dec % 10;
 8001236:	79fa      	ldrb	r2, [r7, #7]
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <dec2bcd+0x44>)
 800123a:	fba3 1302 	umull	r1, r3, r3, r2
 800123e:	08d9      	lsrs	r1, r3, #3
 8001240:	460b      	mov	r3, r1
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	73bb      	strb	r3, [r7, #14]

   return (high + low);
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	7bbb      	ldrb	r3, [r7, #14]
 8001250:	4413      	add	r3, r2
 8001252:	b2db      	uxtb	r3, r3
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	cccccccd 	.word	0xcccccccd

08001264 <bcd2dec>:

//bcd -> dec
uint8_t bcd2dec(uint8_t bcd)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
   uint8_t high, low;

   low = bcd & 0x0f;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	73fb      	strb	r3, [r7, #15]
   high = (bcd >> 4) * 10;         // 0010 0101 >> 4 = 0000 0100 * 10
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	b2db      	uxtb	r3, r3
 800127c:	461a      	mov	r2, r3
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4413      	add	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	73bb      	strb	r3, [r7, #14]

   return (high + low);
 8001286:	7bba      	ldrb	r2, [r7, #14]
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	4413      	add	r3, r2
 800128c:	b2db      	uxtb	r3, r3
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <rx_ds1302>:

void rx_ds1302(unsigned char *pdata)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
   // IO 포트를 입력 모드로 전환
   input_dataline_ds1302();
 80012a4:	f000 f8ce 	bl	8001444 <input_dataline_ds1302>
   uint8_t temp = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]
   // DS1302로부터 들어온 bit 를 LSB부터 bit를 받아서 temp 변수에 저장
   for(int i = 0; i < 8 ; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	e019      	b.n	80012e6 <rx_ds1302+0x4a>
   {
      if(HAL_GPIO_ReadPin(GPIOA, IO_DS1302_Pin))
 80012b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b6:	4811      	ldr	r0, [pc, #68]	; (80012fc <rx_ds1302+0x60>)
 80012b8:	f001 ff18 	bl	80030ec <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d009      	beq.n	80012d6 <rx_ds1302+0x3a>
         {
            temp |= 1 << i;
 80012c2:	2201      	movs	r2, #1
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	b25a      	sxtb	r2, r3
 80012cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	73fb      	strb	r3, [r7, #15]
         }
      if (i != 7)
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2b07      	cmp	r3, #7
 80012da:	d001      	beq.n	80012e0 <rx_ds1302+0x44>
         {
         clock_ds1302();
 80012dc:	f000 f8ce 	bl	800147c <clock_ds1302>
   for(int i = 0; i < 8 ; i++)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	3301      	adds	r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	2b07      	cmp	r3, #7
 80012ea:	dde2      	ble.n	80012b2 <rx_ds1302+0x16>
         }
   }
   *pdata = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	701a      	strb	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40020000 	.word	0x40020000

08001300 <init_ds1302>:

void init_ds1302(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
   write_ds1302(ADDR_SECONDS, ds1302.seconds);
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <init_ds1302+0x5c>)
 8001306:	791b      	ldrb	r3, [r3, #4]
 8001308:	4619      	mov	r1, r3
 800130a:	2080      	movs	r0, #128	; 0x80
 800130c:	f000 f828 	bl	8001360 <write_ds1302>
   write_ds1302(ADDR_MINUTES, ds1302.minutes);
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <init_ds1302+0x5c>)
 8001312:	795b      	ldrb	r3, [r3, #5]
 8001314:	4619      	mov	r1, r3
 8001316:	2082      	movs	r0, #130	; 0x82
 8001318:	f000 f822 	bl	8001360 <write_ds1302>
   write_ds1302(ADDR_HOURS, ds1302.hours);
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <init_ds1302+0x5c>)
 800131e:	799b      	ldrb	r3, [r3, #6]
 8001320:	4619      	mov	r1, r3
 8001322:	2084      	movs	r0, #132	; 0x84
 8001324:	f000 f81c 	bl	8001360 <write_ds1302>
   write_ds1302(ADDR_DATE, ds1302.date);
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <init_ds1302+0x5c>)
 800132a:	79db      	ldrb	r3, [r3, #7]
 800132c:	4619      	mov	r1, r3
 800132e:	2086      	movs	r0, #134	; 0x86
 8001330:	f000 f816 	bl	8001360 <write_ds1302>
   write_ds1302(ADDR_MONTH, ds1302.month);
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <init_ds1302+0x5c>)
 8001336:	7a1b      	ldrb	r3, [r3, #8]
 8001338:	4619      	mov	r1, r3
 800133a:	2088      	movs	r0, #136	; 0x88
 800133c:	f000 f810 	bl	8001360 <write_ds1302>
   write_ds1302(ADDR_DAYOFWEEK, ds1302.dayofweek);
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <init_ds1302+0x5c>)
 8001342:	7a5b      	ldrb	r3, [r3, #9]
 8001344:	4619      	mov	r1, r3
 8001346:	208a      	movs	r0, #138	; 0x8a
 8001348:	f000 f80a 	bl	8001360 <write_ds1302>
   write_ds1302(ADDR_YEAR, ds1302.year);
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <init_ds1302+0x5c>)
 800134e:	7a9b      	ldrb	r3, [r3, #10]
 8001350:	4619      	mov	r1, r3
 8001352:	208c      	movs	r0, #140	; 0x8c
 8001354:	f000 f804 	bl	8001360 <write_ds1302>
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20004bf4 	.word	0x20004bf4

08001360 <write_ds1302>:

void write_ds1302(uint8_t addr, uint8_t data)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	460a      	mov	r2, r1
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	71bb      	strb	r3, [r7, #6]
   // 1. CE low --> high
   HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 1);
 8001370:	2201      	movs	r2, #1
 8001372:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001376:	480c      	ldr	r0, [pc, #48]	; (80013a8 <write_ds1302+0x48>)
 8001378:	f001 fed0 	bl	800311c <HAL_GPIO_WritePin>
   // 2. addr 전송
   tx_ds1302(addr);
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f814 	bl	80013ac <tx_ds1302>
   // 3. data 전송
   tx_ds1302(dec2bcd(data));
 8001384:	79bb      	ldrb	r3, [r7, #6]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff48 	bl	800121c <dec2bcd>
 800138c:	4603      	mov	r3, r0
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f80c 	bl	80013ac <tx_ds1302>
   // 4. CE high --> low
   HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800139a:	4803      	ldr	r0, [pc, #12]	; (80013a8 <write_ds1302+0x48>)
 800139c:	f001 febe 	bl	800311c <HAL_GPIO_WritePin>

}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40020000 	.word	0x40020000

080013ac <tx_ds1302>:

void tx_ds1302(uint8_t addr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
   output_dataline_ds1302();
 80013b6:	f000 f827 	bl	8001408 <output_dataline_ds1302>

   //     1000 0000 실제값 (B7를 전송)
   //     1000 0000 &
   //     1000 0000 -> HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 1);

   for (int i = 0; i < 8 ; i++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	e019      	b.n	80013f4 <tx_ds1302+0x48>
   {
      if (addr & (1 << i))
 80013c0:	79fa      	ldrb	r2, [r7, #7]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	fa42 f303 	asr.w	r3, r2, r3
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <tx_ds1302+0x32>
      {
         HAL_GPIO_WritePin(GPIOA, IO_DS1302_Pin, 1);
 80013d0:	2201      	movs	r2, #1
 80013d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013d6:	480b      	ldr	r0, [pc, #44]	; (8001404 <tx_ds1302+0x58>)
 80013d8:	f001 fea0 	bl	800311c <HAL_GPIO_WritePin>
 80013dc:	e005      	b.n	80013ea <tx_ds1302+0x3e>
      }
      else
      {
         HAL_GPIO_WritePin(GPIOA, IO_DS1302_Pin, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e4:	4807      	ldr	r0, [pc, #28]	; (8001404 <tx_ds1302+0x58>)
 80013e6:	f001 fe99 	bl	800311c <HAL_GPIO_WritePin>
      }
      clock_ds1302();
 80013ea:	f000 f847 	bl	800147c <clock_ds1302>
   for (int i = 0; i < 8 ; i++)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	3301      	adds	r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2b07      	cmp	r3, #7
 80013f8:	dde2      	ble.n	80013c0 <tx_ds1302+0x14>
   }
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40020000 	.word	0x40020000

08001408 <output_dataline_ds1302>:

void output_dataline_ds1302(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_init = { 0, };
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
   GPIO_init.Pin = IO_DS1302_Pin;
 800141c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001420:	607b      	str	r3, [r7, #4]
   GPIO_init.Mode = GPIO_MODE_OUTPUT_PP;   // output mode on
 8001422:	2301      	movs	r3, #1
 8001424:	60bb      	str	r3, [r7, #8]
   GPIO_init.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
   GPIO_init.Speed = GPIO_SPEED_FREQ_HIGH; // LOW : 2M  HIGH : 25 ~ 100MHz
 800142a:	2302      	movs	r3, #2
 800142c:	613b      	str	r3, [r7, #16]
   HAL_GPIO_Init(GPIOA, &GPIO_init);
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4619      	mov	r1, r3
 8001432:	4803      	ldr	r0, [pc, #12]	; (8001440 <output_dataline_ds1302+0x38>)
 8001434:	f001 fcd6 	bl	8002de4 <HAL_GPIO_Init>
}
 8001438:	bf00      	nop
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40020000 	.word	0x40020000

08001444 <input_dataline_ds1302>:

void input_dataline_ds1302(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_init = { 0, };
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
   GPIO_init.Pin = IO_DS1302_Pin;
 8001458:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800145c:	607b      	str	r3, [r7, #4]
   GPIO_init.Mode = GPIO_MODE_INPUT;      // input mode on
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
   GPIO_init.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
   HAL_GPIO_Init(GPIOA, &GPIO_init);
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4803      	ldr	r0, [pc, #12]	; (8001478 <input_dataline_ds1302+0x34>)
 800146c:	f001 fcba 	bl	8002de4 <HAL_GPIO_Init>
}
 8001470:	bf00      	nop
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40020000 	.word	0x40020000

0800147c <clock_ds1302>:

void clock_ds1302(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOA, CLK_DS1302_Pin, 1);
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <clock_ds1302+0x20>)
 8001488:	f001 fe48 	bl	800311c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA, CLK_DS1302_Pin, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001492:	4802      	ldr	r0, [pc, #8]	; (800149c <clock_ds1302+0x20>)
 8001494:	f001 fe42 	bl	800311c <HAL_GPIO_WritePin>
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40020000 	.word	0x40020000

080014a0 <init_gpio_ds1302>:

void init_gpio_ds1302(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
   // ALL LOW
   HAL_GPIO_WritePin(GPIOA, CE_DS1302_Pin, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014aa:	4808      	ldr	r0, [pc, #32]	; (80014cc <init_gpio_ds1302+0x2c>)
 80014ac:	f001 fe36 	bl	800311c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA, IO_DS1302_Pin, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <init_gpio_ds1302+0x2c>)
 80014b8:	f001 fe30 	bl	800311c <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA, CLK_DS1302_Pin, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c2:	4802      	ldr	r0, [pc, #8]	; (80014cc <init_gpio_ds1302+0x2c>)
 80014c4:	f001 fe2a 	bl	800311c <HAL_GPIO_WritePin>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40020000 	.word	0x40020000

080014d0 <init_date_time>:

void init_date_time(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
   ds1302.magic=0x55555555;  // 사용자가 임의로 설정
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <init_date_time+0x40>)
 80014d6:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 80014da:	601a      	str	r2, [r3, #0]
   ds1302.year = 25;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <init_date_time+0x40>)
 80014de:	2219      	movs	r2, #25
 80014e0:	729a      	strb	r2, [r3, #10]
   ds1302.month = 4;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <init_date_time+0x40>)
 80014e4:	2204      	movs	r2, #4
 80014e6:	721a      	strb	r2, [r3, #8]
   ds1302.date = 1;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <init_date_time+0x40>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	71da      	strb	r2, [r3, #7]
   ds1302.dayofweek = 3;      // tue
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <init_date_time+0x40>)
 80014f0:	2203      	movs	r2, #3
 80014f2:	725a      	strb	r2, [r3, #9]
   ds1302.hours = 15;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <init_date_time+0x40>)
 80014f6:	220f      	movs	r2, #15
 80014f8:	719a      	strb	r2, [r3, #6]
   ds1302.minutes = 40;
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <init_date_time+0x40>)
 80014fc:	2228      	movs	r2, #40	; 0x28
 80014fe:	715a      	strb	r2, [r3, #5]
   ds1302.seconds = 00;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <init_date_time+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	711a      	strb	r2, [r3, #4]
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	20004bf4 	.word	0x20004bf4

08001514 <lcd_update>:

    init_ds1302();
}

void lcd_update(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	; 0x30
 8001518:	af02      	add	r7, sp, #8
    char line1[17] = {0}; // LCD는 일반적으로 16자 + NULL 이므로 17로 설정
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	f107 0318 	add.w	r3, r7, #24
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	731a      	strb	r2, [r3, #12]
    char line2[17] = {0};
 800152c:	2300      	movs	r3, #0
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	731a      	strb	r2, [r3, #12]

    move_cursor(0,0);
 800153c:	2100      	movs	r1, #0
 800153e:	2000      	movs	r0, #0
 8001540:	f000 fa00 	bl	8001944 <move_cursor>

    if(displayMode == MODE_CLOCK){
 8001544:	4b30      	ldr	r3, [pc, #192]	; (8001608 <lcd_update+0xf4>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d12d      	bne.n	80015a8 <lcd_update+0x94>
        read_time_ds1302();
 800154c:	f7ff fe20 	bl	8001190 <read_time_ds1302>
        sprintf(line1,"Time:%02d:%02d:%02d", ds1302.hours, ds1302.minutes, ds1302.seconds);
 8001550:	4b2e      	ldr	r3, [pc, #184]	; (800160c <lcd_update+0xf8>)
 8001552:	799b      	ldrb	r3, [r3, #6]
 8001554:	461a      	mov	r2, r3
 8001556:	4b2d      	ldr	r3, [pc, #180]	; (800160c <lcd_update+0xf8>)
 8001558:	795b      	ldrb	r3, [r3, #5]
 800155a:	4619      	mov	r1, r3
 800155c:	4b2b      	ldr	r3, [pc, #172]	; (800160c <lcd_update+0xf8>)
 800155e:	791b      	ldrb	r3, [r3, #4]
 8001560:	f107 0014 	add.w	r0, r7, #20
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	460b      	mov	r3, r1
 8001568:	4929      	ldr	r1, [pc, #164]	; (8001610 <lcd_update+0xfc>)
 800156a:	f008 f801 	bl	8009570 <siprintf>
        lcd_string((uint8_t *)line1);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f9d1 	bl	800191a <lcd_string>
        sprintf(line2,"Date:%4d-%02d-%02d", ds1302.year+2000, ds1302.month, ds1302.date);
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <lcd_update+0xf8>)
 800157a:	7a9b      	ldrb	r3, [r3, #10]
 800157c:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <lcd_update+0xf8>)
 8001582:	7a1b      	ldrb	r3, [r3, #8]
 8001584:	4619      	mov	r1, r3
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <lcd_update+0xf8>)
 8001588:	79db      	ldrb	r3, [r3, #7]
 800158a:	4638      	mov	r0, r7
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	460b      	mov	r3, r1
 8001590:	4920      	ldr	r1, [pc, #128]	; (8001614 <lcd_update+0x100>)
 8001592:	f007 ffed 	bl	8009570 <siprintf>
        move_cursor(1,0);
 8001596:	2100      	movs	r1, #0
 8001598:	2001      	movs	r0, #1
 800159a:	f000 f9d3 	bl	8001944 <move_cursor>
        lcd_string((uint8_t *)line2);
 800159e:	463b      	mov	r3, r7
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 f9ba 	bl	800191a <lcd_string>
 80015a6:	e027      	b.n	80015f8 <lcd_update+0xe4>
    }
    else if(displayMode == MODE_ALARM){ // 알람 모드
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <lcd_update+0xf4>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d123      	bne.n	80015f8 <lcd_update+0xe4>
        snprintf(line1, sizeof(line1), "Set Alarm Time");
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4a18      	ldr	r2, [pc, #96]	; (8001618 <lcd_update+0x104>)
 80015b6:	2111      	movs	r1, #17
 80015b8:	4618      	mov	r0, r3
 80015ba:	f007 ffa5 	bl	8009508 <sniprintf>
        lcd_string((uint8_t *)line1);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f9a9 	bl	800191a <lcd_string>
        snprintf(line2, sizeof(line2), "%02d:%02d:%02d", alarm_hour, alarm_min, alarm_sec);
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <lcd_update+0x108>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <lcd_update+0x10c>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <lcd_update+0x110>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4638      	mov	r0, r7
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	9200      	str	r2, [sp, #0]
 80015de:	460b      	mov	r3, r1
 80015e0:	4a11      	ldr	r2, [pc, #68]	; (8001628 <lcd_update+0x114>)
 80015e2:	2111      	movs	r1, #17
 80015e4:	f007 ff90 	bl	8009508 <sniprintf>
        move_cursor(1,0);
 80015e8:	2100      	movs	r1, #0
 80015ea:	2001      	movs	r0, #1
 80015ec:	f000 f9aa 	bl	8001944 <move_cursor>
        lcd_string((uint8_t *)line2);
 80015f0:	463b      	mov	r3, r7
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f991 	bl	800191a <lcd_string>
    }
    delay_us(50);
 80015f8:	2032      	movs	r0, #50	; 0x32
 80015fa:	f000 fe8d 	bl	8002318 <delay_us>
}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000204 	.word	0x20000204
 800160c:	20004bf4 	.word	0x20004bf4
 8001610:	0800b700 	.word	0x0800b700
 8001614:	0800b714 	.word	0x0800b714
 8001618:	0800b728 	.word	0x0800b728
 800161c:	20000206 	.word	0x20000206
 8001620:	20000207 	.word	0x20000207
 8001624:	20000208 	.word	0x20000208
 8001628:	0800b738 	.word	0x0800b738

0800162c <flash_set_time>:
	flash_erase();

	flash_write((uint32_t *) &set_time, sizeof(set_time));
}
void flash_set_time(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
#if 1
	       t_ds1302 *read_set_time;

			flash_read_value = *(__IO uint32_t *) USER_DATA_ADDRESS;
 8001630:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <flash_set_time+0x94>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <flash_set_time+0x98>)
 8001636:	6013      	str	r3, [r2, #0]

			if (flash_read_value == FLASH_INIT_STATUS)  // 초기에 아무런 데이터도 존재 하지 않을 경우
 8001638:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <flash_set_time+0x98>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001640:	d10b      	bne.n	800165a <flash_set_time+0x2e>
			{
				flash_erase();
 8001642:	f000 f8bf 	bl	80017c4 <flash_erase>
				printf("flash EMPTY !!!!\n");
 8001646:	4820      	ldr	r0, [pc, #128]	; (80016c8 <flash_set_time+0x9c>)
 8001648:	f007 fedc 	bl	8009404 <puts>
				init_date_time();
 800164c:	f7ff ff40 	bl	80014d0 <init_date_time>
				flash_write((uint32_t *) &ds1302, sizeof(ds1302));
 8001650:	2110      	movs	r1, #16
 8001652:	481e      	ldr	r0, [pc, #120]	; (80016cc <flash_set_time+0xa0>)
 8001654:	f000 f84a 	bl	80016ec <flash_write>
			printf("Hours: %02d\n", set_time.Hours);
			printf("Minutes: %02d\n", set_time.Minutes);
			printf("Seconds: %02d\n", set_time.Seconds);
		}
#endif
}
 8001658:	e02f      	b.n	80016ba <flash_set_time+0x8e>
				flash_read((uint32_t *)&ds1302, sizeof(ds1302));
 800165a:	2110      	movs	r1, #16
 800165c:	481b      	ldr	r0, [pc, #108]	; (80016cc <flash_set_time+0xa0>)
 800165e:	f000 f889 	bl	8001774 <flash_read>
				init_ds1302();
 8001662:	f7ff fe4d 	bl	8001300 <init_ds1302>
				printf("magic: %08x\n", ds1302.magic);
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <flash_set_time+0xa0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4619      	mov	r1, r3
 800166c:	4818      	ldr	r0, [pc, #96]	; (80016d0 <flash_set_time+0xa4>)
 800166e:	f007 fe43 	bl	80092f8 <iprintf>
				printf("year: %02d\n", ds1302.year);
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <flash_set_time+0xa0>)
 8001674:	7a9b      	ldrb	r3, [r3, #10]
 8001676:	4619      	mov	r1, r3
 8001678:	4816      	ldr	r0, [pc, #88]	; (80016d4 <flash_set_time+0xa8>)
 800167a:	f007 fe3d 	bl	80092f8 <iprintf>
				printf("month: %02d\n", ds1302.month);
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <flash_set_time+0xa0>)
 8001680:	7a1b      	ldrb	r3, [r3, #8]
 8001682:	4619      	mov	r1, r3
 8001684:	4814      	ldr	r0, [pc, #80]	; (80016d8 <flash_set_time+0xac>)
 8001686:	f007 fe37 	bl	80092f8 <iprintf>
				printf("date: %02d\n", ds1302.date);
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <flash_set_time+0xa0>)
 800168c:	79db      	ldrb	r3, [r3, #7]
 800168e:	4619      	mov	r1, r3
 8001690:	4812      	ldr	r0, [pc, #72]	; (80016dc <flash_set_time+0xb0>)
 8001692:	f007 fe31 	bl	80092f8 <iprintf>
				printf("Hours: %02d\n", ds1302.hours);
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <flash_set_time+0xa0>)
 8001698:	799b      	ldrb	r3, [r3, #6]
 800169a:	4619      	mov	r1, r3
 800169c:	4810      	ldr	r0, [pc, #64]	; (80016e0 <flash_set_time+0xb4>)
 800169e:	f007 fe2b 	bl	80092f8 <iprintf>
				printf("Minutes: %02d\n", ds1302.minutes);
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <flash_set_time+0xa0>)
 80016a4:	795b      	ldrb	r3, [r3, #5]
 80016a6:	4619      	mov	r1, r3
 80016a8:	480e      	ldr	r0, [pc, #56]	; (80016e4 <flash_set_time+0xb8>)
 80016aa:	f007 fe25 	bl	80092f8 <iprintf>
				printf("Seconds: %02d\n", ds1302.seconds);
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <flash_set_time+0xa0>)
 80016b0:	791b      	ldrb	r3, [r3, #4]
 80016b2:	4619      	mov	r1, r3
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <flash_set_time+0xbc>)
 80016b6:	f007 fe1f 	bl	80092f8 <iprintf>
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	08060000 	.word	0x08060000
 80016c4:	2000020c 	.word	0x2000020c
 80016c8:	0800b748 	.word	0x0800b748
 80016cc:	20004bf4 	.word	0x20004bf4
 80016d0:	0800b77c 	.word	0x0800b77c
 80016d4:	0800b7b4 	.word	0x0800b7b4
 80016d8:	0800b7c0 	.word	0x0800b7c0
 80016dc:	0800b7d0 	.word	0x0800b7d0
 80016e0:	0800b7dc 	.word	0x0800b7dc
 80016e4:	0800b7ec 	.word	0x0800b7ec
 80016e8:	0800b7fc 	.word	0x0800b7fc

080016ec <flash_write>:
HAL_StatusTypeDef flash_write (uint32_t *data32, int size)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
	uint32_t *mem32 = data32;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	617b      	str	r3, [r7, #20]

	// mem32 = data32;

  /* Unlock to control */
  HAL_FLASH_Unlock();
 80016fa:	f001 f8d3 	bl	80028a4 <HAL_FLASH_Unlock>

  uint32_t Address = FLASH_USER_START_ADDR;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <flash_write+0x7c>)
 8001700:	613b      	str	r3, [r7, #16]

  printf("size: %d\n", size);
 8001702:	6839      	ldr	r1, [r7, #0]
 8001704:	4819      	ldr	r0, [pc, #100]	; (800176c <flash_write+0x80>)
 8001706:	f007 fdf7 	bl	80092f8 <iprintf>

  /* Writing data to flash memory */
  for (int i=0; i < size; )
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	e020      	b.n	8001752 <flash_write+0x66>
  {
	  if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, *mem32) == HAL_OK)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	6939      	ldr	r1, [r7, #16]
 800171c:	2002      	movs	r0, #2
 800171e:	f001 f86d 	bl	80027fc <HAL_FLASH_Program>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10f      	bne.n	8001748 <flash_write+0x5c>
	  {
		  printf("mem32: %0x\n", *mem32);
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	4810      	ldr	r0, [pc, #64]	; (8001770 <flash_write+0x84>)
 8001730:	f007 fde2 	bl	80092f8 <iprintf>
		  mem32++;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3304      	adds	r3, #4
 8001738:	617b      	str	r3, [r7, #20]
		  Address = Address + 4;
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	3304      	adds	r3, #4
 800173e:	613b      	str	r3, [r7, #16]
		  i += 4;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3304      	adds	r3, #4
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	e004      	b.n	8001752 <flash_write+0x66>
	  }
	  else
	  {
		  uint32_t errorcode = HAL_FLASH_GetError();
 8001748:	f001 f8de 	bl	8002908 <HAL_FLASH_GetError>
 800174c:	60b8      	str	r0, [r7, #8]
		  return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e006      	b.n	8001760 <flash_write+0x74>
  for (int i=0; i < size; )
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	dbda      	blt.n	8001710 <flash_write+0x24>
	  }
  }
  /* Lock flash control register */
  HAL_FLASH_Lock();
 800175a:	f001 f8c5 	bl	80028e8 <HAL_FLASH_Lock>

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	08060000 	.word	0x08060000
 800176c:	0800b80c 	.word	0x0800b80c
 8001770:	0800b818 	.word	0x0800b818

08001774 <flash_read>:

HAL_StatusTypeDef flash_read(uint32_t *addr32, int size)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t *data32 = addr32;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	617b      	str	r3, [r7, #20]
  uint32_t address = FLASH_USER_START_ADDR;
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <flash_read+0x4c>)
 8001784:	613b      	str	r3, [r7, #16]
  uint32_t end_address = FLASH_USER_START_ADDR + size;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800178c:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
 8001790:	60fb      	str	r3, [r7, #12]

  while(address < end_address)
 8001792:	e009      	b.n	80017a8 <flash_read+0x34>
  {
    *data32 = *(uint32_t*) address;
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	601a      	str	r2, [r3, #0]
    data32++;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3304      	adds	r3, #4
 80017a0:	617b      	str	r3, [r7, #20]
    address = address + 4;
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	3304      	adds	r3, #4
 80017a6:	613b      	str	r3, [r7, #16]
  while(address < end_address)
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d3f1      	bcc.n	8001794 <flash_read+0x20>
  }

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0

}
 80017b2:	4618      	mov	r0, r3
 80017b4:	371c      	adds	r7, #28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	08060000 	.word	0x08060000

080017c4 <flash_erase>:


HAL_StatusTypeDef flash_erase()
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
	uint32_t SectorError = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]

	/* Unlock to control */
	HAL_FLASH_Unlock();
 80017ce:	f001 f869 	bl	80028a4 <HAL_FLASH_Unlock>

	/* Calculate sector index */
	uint32_t UserSector = 7;     // sector 번호
 80017d2:	2307      	movs	r3, #7
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t NbOfSectors = 1;    // sector 수
 80017d6:	2301      	movs	r3, #1
 80017d8:	623b      	str	r3, [r7, #32]

	/* Erase sectors */
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80017de:	2302      	movs	r3, #2
 80017e0:	617b      	str	r3, [r7, #20]
	EraseInitStruct.Sector = UserSector;
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbSectors = NbOfSectors;
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	613b      	str	r3, [r7, #16]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 80017ea:	f107 0218 	add.w	r2, r7, #24
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	4611      	mov	r1, r2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 f9d4 	bl	8002ba0 <HAL_FLASHEx_Erase>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <flash_erase+0x44>
	{
		uint32_t errorcode = HAL_FLASH_GetError();
 80017fe:	f001 f883 	bl	8002908 <HAL_FLASH_GetError>
 8001802:	61f8      	str	r0, [r7, #28]
		return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e002      	b.n	800180e <flash_erase+0x4a>
	}

	/* Lock flash control register */
	HAL_FLASH_Lock();
 8001808:	f001 f86e 	bl	80028e8 <HAL_FLASH_Lock>

	return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3728      	adds	r7, #40	; 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <lcd_command>:
#endif
}

// ========================= LCD 명령어 전송 함수 =========================

void lcd_command(uint8_t command){
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af02      	add	r7, sp, #8
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
	// 고위 nibble (상위 4bit) / 저위 nibble (하위 4bit) 분리
	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];

	high_nibble = command & 0xf0;
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f023 030f 	bic.w	r3, r3, #15
 8001828:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	73bb      	strb	r3, [r7, #14]

	// en=1 -> en=0 으로 변화시 falling edge를 만들어야 LCD가 latch 함
	// rs=0 (명령어), rw=0 (쓰기), backlight=1

	i2c_buffer[0] = high_nibble | 0x04 | 0x08; // en=1
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	f043 030c 	orr.w	r3, r3, #12
 8001836:	b2db      	uxtb	r3, r3
 8001838:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; // en=0
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	f043 0308 	orr.w	r3, r3, #8
 8001840:	b2db      	uxtb	r3, r3
 8001842:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; // en=1
 8001844:	7bbb      	ldrb	r3, [r7, #14]
 8001846:	f043 030c 	orr.w	r3, r3, #12
 800184a:	b2db      	uxtb	r3, r3
 800184c:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; // en=0
 800184e:	7bbb      	ldrb	r3, [r7, #14]
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	b2db      	uxtb	r3, r3
 8001856:	72fb      	strb	r3, [r7, #11]

	// I2C 로 전송
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS, i2c_buffer, 4, 100)!=HAL_OK){
 8001858:	bf00      	nop
 800185a:	f107 0208 	add.w	r2, r7, #8
 800185e:	2364      	movs	r3, #100	; 0x64
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2304      	movs	r3, #4
 8001864:	214e      	movs	r1, #78	; 0x4e
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <lcd_command+0x64>)
 8001868:	f001 fdd0 	bl	800340c <HAL_I2C_Master_Transmit>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f3      	bne.n	800185a <lcd_command+0x42>
		// 필요하면 재시도 딜레이
	}
	return;
 8001872:	bf00      	nop
}
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20004c08 	.word	0x20004c08

08001880 <lcd_data>:

// ========================= LCD 데이터(문자) 전송 함수 =========================

void lcd_data(uint8_t data){
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af02      	add	r7, sp, #8
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];

	high_nibble = data & 0xf0;
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	f023 030f 	bic.w	r3, r3, #15
 8001890:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	011b      	lsls	r3, r3, #4
 8001896:	73bb      	strb	r3, [r7, #14]

	// rs=1 (데이터 모드), rw=0 (쓰기)
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; // en=1
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	f043 030d 	orr.w	r3, r3, #13
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; // en=0
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	f043 0309 	orr.w	r3, r3, #9
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; // en=1
 80018ac:	7bbb      	ldrb	r3, [r7, #14]
 80018ae:	f043 030d 	orr.w	r3, r3, #13
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; // en=0
 80018b6:	7bbb      	ldrb	r3, [r7, #14]
 80018b8:	f043 0309 	orr.w	r3, r3, #9
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS, i2c_buffer, 4, 100)!=HAL_OK){
 80018c0:	bf00      	nop
 80018c2:	f107 0208 	add.w	r2, r7, #8
 80018c6:	2364      	movs	r3, #100	; 0x64
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2304      	movs	r3, #4
 80018cc:	214e      	movs	r1, #78	; 0x4e
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <lcd_data+0x64>)
 80018d0:	f001 fd9c 	bl	800340c <HAL_I2C_Master_Transmit>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f3      	bne.n	80018c2 <lcd_data+0x42>
		// 필요하면 재시도 딜레이
	}
	return;
 80018da:	bf00      	nop
}
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20004c08 	.word	0x20004c08

080018e8 <i2c_lcd_init>:

// ========================= LCD 초기화 =========================

void i2c_lcd_init(void){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	lcd_command(0x33); // 초기화 과정 (데이터시트 참고)
 80018ec:	2033      	movs	r0, #51	; 0x33
 80018ee:	f7ff ff93 	bl	8001818 <lcd_command>
	lcd_command(0x32); // 4-bit 모드 설정
 80018f2:	2032      	movs	r0, #50	; 0x32
 80018f4:	f7ff ff90 	bl	8001818 <lcd_command>
	lcd_command(0x28); // Function set: 4-bit, 2-line, 5x8 dots
 80018f8:	2028      	movs	r0, #40	; 0x28
 80018fa:	f7ff ff8d 	bl	8001818 <lcd_command>
	lcd_command(DISPLAY_ON); // 화면 ON, 커서 OFF, 블링크 OFF (i2c_lcd.h 에 정의되어야 함)
 80018fe:	200c      	movs	r0, #12
 8001900:	f7ff ff8a 	bl	8001818 <lcd_command>
	lcd_command(0x06); // Entry Mode: Increment cursor
 8001904:	2006      	movs	r0, #6
 8001906:	f7ff ff87 	bl	8001818 <lcd_command>
	lcd_command(CLEAR_DISPLAY); // 화면 클리어
 800190a:	2001      	movs	r0, #1
 800190c:	f7ff ff84 	bl	8001818 <lcd_command>
	HAL_Delay(2); // LCD는 클리어 후 대기 필요
 8001910:	2002      	movs	r0, #2
 8001912:	f000 fddb 	bl	80024cc <HAL_Delay>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}

0800191a <lcd_string>:

// ========================= 문자열 출력 =========================

void lcd_string(uint8_t *str){
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
	// 문자열 끝(null 문자)까지 반복
	while(*str) lcd_data(*str++);
 8001922:	e006      	b.n	8001932 <lcd_string+0x18>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ffa7 	bl	8001880 <lcd_data>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f4      	bne.n	8001924 <lcd_string+0xa>
}
 800193a:	bf00      	nop
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <move_cursor>:

// ========================= 커서 이동 =========================

void move_cursor(uint8_t row, uint8_t column){
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	460a      	mov	r2, r1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	4613      	mov	r3, r2
 8001952:	71bb      	strb	r3, [r7, #6]
	// 커서 이동 명령어
	// 1st line : 0x80 | column
	// 2nd line : 0x80 | 0x40 | column
	lcd_command(0x80 | row<<6 | column);
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	019b      	lsls	r3, r3, #6
 8001958:	b2da      	uxtb	r2, r3
 800195a:	79bb      	ldrb	r3, [r7, #6]
 800195c:	4313      	orrs	r3, r2
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001964:	b2db      	uxtb	r3, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff56 	bl	8001818 <lcd_command>
	return;
 800196c:	bf00      	nop
}
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800197c:	1d39      	adds	r1, r7, #4
 800197e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001982:	2201      	movs	r2, #1
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <__io_putchar+0x20>)
 8001986:	f003 f982 	bl	8004c8e <HAL_UART_Transmit>

  return ch;
 800198a:	687b      	ldr	r3, [r7, #4]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20004cf8 	.word	0x20004cf8

08001998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800199c:	f000 fd54 	bl	8002448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019a0:	f000 f84e 	bl	8001a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a4:	f000 f97c 	bl	8001ca0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019a8:	f000 f950 	bl	8001c4c <MX_USART2_UART_Init>
  MX_TIM11_Init();
 80019ac:	f000 f92a 	bl	8001c04 <MX_TIM11_Init>
  MX_TIM2_Init();
 80019b0:	f000 f8dc 	bl	8001b6c <MX_TIM2_Init>
  MX_I2C1_Init();
 80019b4:	f000 f8ac 	bl	8001b10 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80019b8:	2201      	movs	r2, #1
 80019ba:	4914      	ldr	r1, [pc, #80]	; (8001a0c <main+0x74>)
 80019bc:	4814      	ldr	r0, [pc, #80]	; (8001a10 <main+0x78>)
 80019be:	f003 f9f8 	bl	8004db2 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 80019c2:	4814      	ldr	r0, [pc, #80]	; (8001a14 <main+0x7c>)
 80019c4:	f002 fd20 	bl	8004408 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);	// for make delay_us
 80019c8:	4813      	ldr	r0, [pc, #76]	; (8001a18 <main+0x80>)
 80019ca:	f002 fd1d 	bl	8004408 <HAL_TIM_Base_Start_IT>

  // i2c_lcd_main();
  ds1302_main();
 80019ce:	f7ff faf9 	bl	8000fc4 <ds1302_main>
  //led_main();
  //dht11_main();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80019d2:	f004 f91b 	bl	8005c0c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80019d6:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <main+0x84>)
 80019d8:	2100      	movs	r1, #0
 80019da:	4811      	ldr	r0, [pc, #68]	; (8001a20 <main+0x88>)
 80019dc:	f004 f960 	bl	8005ca0 <osThreadNew>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <main+0x8c>)
 80019e4:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80019e6:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <main+0x90>)
 80019e8:	2100      	movs	r1, #0
 80019ea:	4810      	ldr	r0, [pc, #64]	; (8001a2c <main+0x94>)
 80019ec:	f004 f958 	bl	8005ca0 <osThreadNew>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a0f      	ldr	r2, [pc, #60]	; (8001a30 <main+0x98>)
 80019f4:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80019f6:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <main+0x9c>)
 80019f8:	2100      	movs	r1, #0
 80019fa:	480f      	ldr	r0, [pc, #60]	; (8001a38 <main+0xa0>)
 80019fc:	f004 f950 	bl	8005ca0 <osThreadNew>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <main+0xa4>)
 8001a04:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a06:	f004 f925 	bl	8005c54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <main+0x72>
 8001a0c:	20004ca8 	.word	0x20004ca8
 8001a10:	20004cf8 	.word	0x20004cf8
 8001a14:	20004c5c 	.word	0x20004c5c
 8001a18:	20004cb0 	.word	0x20004cb0
 8001a1c:	0800b860 	.word	0x0800b860
 8001a20:	08001dc5 	.word	0x08001dc5
 8001a24:	20004c04 	.word	0x20004c04
 8001a28:	0800b884 	.word	0x0800b884
 8001a2c:	08001de1 	.word	0x08001de1
 8001a30:	20004ca4 	.word	0x20004ca4
 8001a34:	0800b8a8 	.word	0x0800b8a8
 8001a38:	08001df5 	.word	0x08001df5
 8001a3c:	20004cac 	.word	0x20004cac

08001a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b094      	sub	sp, #80	; 0x50
 8001a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a46:	f107 0320 	add.w	r3, r7, #32
 8001a4a:	2230      	movs	r2, #48	; 0x30
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f006 ff85 	bl	800895e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a64:	2300      	movs	r3, #0
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <SystemClock_Config+0xc8>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	4a26      	ldr	r2, [pc, #152]	; (8001b08 <SystemClock_Config+0xc8>)
 8001a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a72:	6413      	str	r3, [r2, #64]	; 0x40
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <SystemClock_Config+0xc8>)
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a80:	2300      	movs	r3, #0
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <SystemClock_Config+0xcc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a20      	ldr	r2, [pc, #128]	; (8001b0c <SystemClock_Config+0xcc>)
 8001a8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <SystemClock_Config+0xcc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aa4:	2310      	movs	r3, #16
 8001aa6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aac:	2300      	movs	r3, #0
 8001aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001ab4:	2354      	movs	r3, #84	; 0x54
 8001ab6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001abc:	2304      	movs	r3, #4
 8001abe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac0:	f107 0320 	add.w	r3, r7, #32
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 ffa9 	bl	8003a1c <HAL_RCC_OscConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ad0:	f000 f9b8 	bl	8001e44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	2102      	movs	r1, #2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fa0b 	bl	8003f0c <HAL_RCC_ClockConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001afc:	f000 f9a2 	bl	8001e44 <Error_Handler>
  }
}
 8001b00:	bf00      	nop
 8001b02:	3750      	adds	r7, #80	; 0x50
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000

08001b10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b16:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <MX_I2C1_Init+0x54>)
 8001b18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b1c:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <MX_I2C1_Init+0x58>)
 8001b1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b4e:	f001 fb19 	bl	8003184 <HAL_I2C_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b58:	f000 f974 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20004c08 	.word	0x20004c08
 8001b64:	40005400 	.word	0x40005400
 8001b68:	000186a0 	.word	0x000186a0

08001b6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	463b      	mov	r3, r7
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001b8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001b92:	2253      	movs	r2, #83	; 0x53
 8001b94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba4:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bb0:	4813      	ldr	r0, [pc, #76]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001bb2:	f002 fbd9 	bl	8004368 <HAL_TIM_Base_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bbc:	f000 f942 	bl	8001e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bc6:	f107 0308 	add.w	r3, r7, #8
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001bce:	f002 fd85 	bl	80046dc <HAL_TIM_ConfigClockSource>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bd8:	f000 f934 	bl	8001e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be4:	463b      	mov	r3, r7
 8001be6:	4619      	mov	r1, r3
 8001be8:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_TIM2_Init+0x94>)
 8001bea:	f002 ff81 	bl	8004af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bf4:	f000 f926 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20004cb0 	.word	0x20004cb0

08001c04 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001c08:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_TIM11_Init+0x40>)
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <MX_TIM11_Init+0x44>)
 8001c0c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <MX_TIM11_Init+0x40>)
 8001c10:	2253      	movs	r2, #83	; 0x53
 8001c12:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <MX_TIM11_Init+0x40>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <MX_TIM11_Init+0x40>)
 8001c1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c20:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <MX_TIM11_Init+0x40>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_TIM11_Init+0x40>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_TIM11_Init+0x40>)
 8001c30:	f002 fb9a 	bl	8004368 <HAL_TIM_Base_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001c3a:	f000 f903 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20004c5c 	.word	0x20004c5c
 8001c48:	40014800 	.word	0x40014800

08001c4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <MX_USART2_UART_Init+0x50>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c72:	220c      	movs	r2, #12
 8001c74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c84:	f002 ffb6 	bl	8004bf4 <HAL_UART_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c8e:	f000 f8d9 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20004cf8 	.word	0x20004cf8
 8001c9c:	40004400 	.word	0x40004400

08001ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b3e      	ldr	r3, [pc, #248]	; (8001db4 <MX_GPIO_Init+0x114>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a3d      	ldr	r2, [pc, #244]	; (8001db4 <MX_GPIO_Init+0x114>)
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <MX_GPIO_Init+0x114>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <MX_GPIO_Init+0x114>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a36      	ldr	r2, [pc, #216]	; (8001db4 <MX_GPIO_Init+0x114>)
 8001cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <MX_GPIO_Init+0x114>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <MX_GPIO_Init+0x114>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a2f      	ldr	r2, [pc, #188]	; (8001db4 <MX_GPIO_Init+0x114>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <MX_GPIO_Init+0x114>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	4b29      	ldr	r3, [pc, #164]	; (8001db4 <MX_GPIO_Init+0x114>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a28      	ldr	r2, [pc, #160]	; (8001db4 <MX_GPIO_Init+0x114>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <MX_GPIO_Init+0x114>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT11_Pin|LD2_Pin|CE_DS1302_Pin|IO_DS1302_Pin
 8001d26:	2200      	movs	r2, #0
 8001d28:	f641 4121 	movw	r1, #7201	; 0x1c21
 8001d2c:	4822      	ldr	r0, [pc, #136]	; (8001db8 <MX_GPIO_Init+0x118>)
 8001d2e:	f001 f9f5 	bl	800311c <HAL_GPIO_WritePin>
                          |CLK_DS1302_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001d32:	2200      	movs	r2, #0
 8001d34:	21ff      	movs	r1, #255	; 0xff
 8001d36:	4821      	ldr	r0, [pc, #132]	; (8001dbc <MX_GPIO_Init+0x11c>)
 8001d38:	f001 f9f0 	bl	800311c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	481b      	ldr	r0, [pc, #108]	; (8001dc0 <MX_GPIO_Init+0x120>)
 8001d54:	f001 f846 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001d58:	230f      	movs	r3, #15
 8001d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4815      	ldr	r0, [pc, #84]	; (8001dc0 <MX_GPIO_Init+0x120>)
 8001d6c:	f001 f83a 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT11_Pin LD2_Pin CE_DS1302_Pin IO_DS1302_Pin
                           CLK_DS1302_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin|LD2_Pin|CE_DS1302_Pin|IO_DS1302_Pin
 8001d70:	f641 4321 	movw	r3, #7201	; 0x1c21
 8001d74:	617b      	str	r3, [r7, #20]
                          |CLK_DS1302_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	480b      	ldr	r0, [pc, #44]	; (8001db8 <MX_GPIO_Init+0x118>)
 8001d8a:	f001 f82b 	bl	8002de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001d8e:	23ff      	movs	r3, #255	; 0xff
 8001d90:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d92:	2301      	movs	r3, #1
 8001d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	; (8001dbc <MX_GPIO_Init+0x11c>)
 8001da6:	f001 f81d 	bl	8002de4 <HAL_GPIO_Init>

}
 8001daa:	bf00      	nop
 8001dac:	3728      	adds	r7, #40	; 0x28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	40020800 	.word	0x40020800

08001dc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001dcc:	2120      	movs	r1, #32
 8001dce:	4803      	ldr	r0, [pc, #12]	; (8001ddc <StartDefaultTask+0x18>)
 8001dd0:	f001 f9bd 	bl	800314e <HAL_GPIO_TogglePin>
	  osDelay(50); //
 8001dd4:	2032      	movs	r0, #50	; 0x32
 8001dd6:	f003 fff5 	bl	8005dc4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001dda:	e7f7      	b.n	8001dcc <StartDefaultTask+0x8>
 8001ddc:	40020000 	.word	0x40020000

08001de0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  button_led_toggle_test();
 8001de8:	f7ff f862 	bl	8000eb0 <button_led_toggle_test>
	  osDelay(1);
 8001dec:	2001      	movs	r0, #1
 8001dee:	f003 ffe9 	bl	8005dc4 <osDelay>
	  button_led_toggle_test();
 8001df2:	e7f9      	b.n	8001de8 <StartTask02+0x8>

08001df4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f003 ffe1 	bl	8005dc4 <osDelay>
 8001e02:	e7fb      	b.n	8001dfc <StartTask03+0x8>

08001e04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e16:	f000 fb39 	bl	800248c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM11)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d104      	bne.n	8001e2e <HAL_TIM_PeriodElapsedCallback+0x2a>
  {
	  TIM11_1ms_counter++;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001e2c:	6013      	str	r3, [r2, #0]

  }
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40014400 	.word	0x40014400
 8001e3c:	40014800 	.word	0x40014800
 8001e40:	20000210 	.word	0x20000210

08001e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e48:	b672      	cpsid	i
}
 8001e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <Error_Handler+0x8>
	...

08001e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_MspInit+0x54>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	4a11      	ldr	r2, [pc, #68]	; (8001ea4 <HAL_MspInit+0x54>)
 8001e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e64:	6453      	str	r3, [r2, #68]	; 0x44
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <HAL_MspInit+0x54>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_MspInit+0x54>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <HAL_MspInit+0x54>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <HAL_MspInit+0x54>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	210f      	movs	r1, #15
 8001e92:	f06f 0001 	mvn.w	r0, #1
 8001e96:	f000 fbf5 	bl	8002684 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a19      	ldr	r2, [pc, #100]	; (8001f2c <HAL_I2C_MspInit+0x84>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d12c      	bne.n	8001f24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_I2C_MspInit+0x88>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a17      	ldr	r2, [pc, #92]	; (8001f30 <HAL_I2C_MspInit+0x88>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_I2C_MspInit+0x88>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ee6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eec:	2312      	movs	r3, #18
 8001eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	4619      	mov	r1, r3
 8001f02:	480c      	ldr	r0, [pc, #48]	; (8001f34 <HAL_I2C_MspInit+0x8c>)
 8001f04:	f000 ff6e 	bl	8002de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_I2C_MspInit+0x88>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_I2C_MspInit+0x88>)
 8001f12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f16:	6413      	str	r3, [r2, #64]	; 0x40
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_I2C_MspInit+0x88>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f24:	bf00      	nop
 8001f26:	3728      	adds	r7, #40	; 0x28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40005400 	.word	0x40005400
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020400 	.word	0x40020400

08001f38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <HAL_TIM_Base_MspInit+0x70>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	4a15      	ldr	r2, [pc, #84]	; (8001fa8 <HAL_TIM_Base_MspInit+0x70>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_TIM_Base_MspInit+0x70>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001f66:	e01a      	b.n	8001f9e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <HAL_TIM_Base_MspInit+0x74>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d115      	bne.n	8001f9e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_TIM_Base_MspInit+0x70>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <HAL_TIM_Base_MspInit+0x70>)
 8001f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f80:	6453      	str	r3, [r2, #68]	; 0x44
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_TIM_Base_MspInit+0x70>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2105      	movs	r1, #5
 8001f92:	201a      	movs	r0, #26
 8001f94:	f000 fb76 	bl	8002684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f98:	201a      	movs	r0, #26
 8001f9a:	f000 fb8f 	bl	80026bc <HAL_NVIC_EnableIRQ>
}
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40014800 	.word	0x40014800

08001fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	; (8002044 <HAL_UART_MspInit+0x94>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d133      	bne.n	800203a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <HAL_UART_MspInit+0x98>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <HAL_UART_MspInit+0x98>)
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe2:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_UART_MspInit+0x98>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_UART_MspInit+0x98>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a14      	ldr	r2, [pc, #80]	; (8002048 <HAL_UART_MspInit+0x98>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_UART_MspInit+0x98>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800200a:	230c      	movs	r3, #12
 800200c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800201a:	2307      	movs	r3, #7
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	4809      	ldr	r0, [pc, #36]	; (800204c <HAL_UART_MspInit+0x9c>)
 8002026:	f000 fedd 	bl	8002de4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2105      	movs	r1, #5
 800202e:	2026      	movs	r0, #38	; 0x26
 8002030:	f000 fb28 	bl	8002684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002034:	2026      	movs	r0, #38	; 0x26
 8002036:	f000 fb41 	bl	80026bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800203a:	bf00      	nop
 800203c:	3728      	adds	r7, #40	; 0x28
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40004400 	.word	0x40004400
 8002048:	40023800 	.word	0x40023800
 800204c:	40020000 	.word	0x40020000

08002050 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08c      	sub	sp, #48	; 0x30
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002060:	2200      	movs	r2, #0
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	2019      	movs	r0, #25
 8002066:	f000 fb0d 	bl	8002684 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800206a:	2019      	movs	r0, #25
 800206c:	f000 fb26 	bl	80026bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <HAL_InitTick+0xa0>)
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	4a1d      	ldr	r2, [pc, #116]	; (80020f0 <HAL_InitTick+0xa0>)
 800207a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207e:	6453      	str	r3, [r2, #68]	; 0x44
 8002080:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <HAL_InitTick+0xa0>)
 8002082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800208c:	f107 0210 	add.w	r2, r7, #16
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f002 f934 	bl	8004304 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800209c:	f002 f91e 	bl	80042dc <HAL_RCC_GetPCLK2Freq>
 80020a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a4:	4a13      	ldr	r2, [pc, #76]	; (80020f4 <HAL_InitTick+0xa4>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	0c9b      	lsrs	r3, r3, #18
 80020ac:	3b01      	subs	r3, #1
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_InitTick+0xa8>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <HAL_InitTick+0xac>)
 80020b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_InitTick+0xa8>)
 80020b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020bc:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80020be:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <HAL_InitTick+0xa8>)
 80020c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <HAL_InitTick+0xa8>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_InitTick+0xa8>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80020d0:	4809      	ldr	r0, [pc, #36]	; (80020f8 <HAL_InitTick+0xa8>)
 80020d2:	f002 f949 	bl	8004368 <HAL_TIM_Base_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d104      	bne.n	80020e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80020dc:	4806      	ldr	r0, [pc, #24]	; (80020f8 <HAL_InitTick+0xa8>)
 80020de:	f002 f993 	bl	8004408 <HAL_TIM_Base_Start_IT>
 80020e2:	4603      	mov	r3, r0
 80020e4:	e000      	b.n	80020e8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3730      	adds	r7, #48	; 0x30
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	431bde83 	.word	0x431bde83
 80020f8:	20004d3c 	.word	0x20004d3c
 80020fc:	40014400 	.word	0x40014400

08002100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002104:	e7fe      	b.n	8002104 <NMI_Handler+0x4>

08002106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210a:	e7fe      	b.n	800210a <HardFault_Handler+0x4>

0800210c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <MemManage_Handler+0x4>

08002112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <BusFault_Handler+0x4>

08002118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <UsageFault_Handler+0x4>

0800211e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002132:	f002 f9cb 	bl	80044cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20004d3c 	.word	0x20004d3c

08002140 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002146:	f002 f9c1 	bl	80044cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20004c5c 	.word	0x20004c5c

08002154 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <USART2_IRQHandler+0x10>)
 800215a:	f002 fe5b 	bl	8004e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20004cf8 	.word	0x20004cf8

08002168 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
	return 1;
 800216c:	2301      	movs	r3, #1
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <_kill>:

int _kill(int pid, int sig)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002182:	f006 fabb 	bl	80086fc <__errno>
 8002186:	4603      	mov	r3, r0
 8002188:	2216      	movs	r2, #22
 800218a:	601a      	str	r2, [r3, #0]
	return -1;
 800218c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <_exit>:

void _exit (int status)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ffe7 	bl	8002178 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021aa:	e7fe      	b.n	80021aa <_exit+0x12>

080021ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	e00a      	b.n	80021d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021be:	f3af 8000 	nop.w
 80021c2:	4601      	mov	r1, r0
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	60ba      	str	r2, [r7, #8]
 80021ca:	b2ca      	uxtb	r2, r1
 80021cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3301      	adds	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	dbf0      	blt.n	80021be <_read+0x12>
	}

return len;
 80021dc:	687b      	ldr	r3, [r7, #4]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	e009      	b.n	800220c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	60ba      	str	r2, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fbb7 	bl	8001974 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3301      	adds	r3, #1
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	429a      	cmp	r2, r3
 8002212:	dbf1      	blt.n	80021f8 <_write+0x12>
	}
	return len;
 8002214:	687b      	ldr	r3, [r7, #4]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <_close>:

int _close(int file)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
	return -1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002246:	605a      	str	r2, [r3, #4]
	return 0;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <_isatty>:

int _isatty(int file)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
	return 1;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
	return 0;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002290:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <_sbrk+0x5c>)
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <_sbrk+0x60>)
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800229c:	4b13      	ldr	r3, [pc, #76]	; (80022ec <_sbrk+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <_sbrk+0x64>)
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <_sbrk+0x68>)
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <_sbrk+0x64>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d207      	bcs.n	80022c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b8:	f006 fa20 	bl	80086fc <__errno>
 80022bc:	4603      	mov	r3, r0
 80022be:	220c      	movs	r2, #12
 80022c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
 80022c6:	e009      	b.n	80022dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <_sbrk+0x64>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <_sbrk+0x64>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <_sbrk+0x64>)
 80022d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022da:	68fb      	ldr	r3, [r7, #12]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20020000 	.word	0x20020000
 80022e8:	00000400 	.word	0x00000400
 80022ec:	20000214 	.word	0x20000214
 80022f0:	20005128 	.word	0x20005128

080022f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <SystemInit+0x20>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fe:	4a05      	ldr	r2, [pc, #20]	; (8002314 <SystemInit+0x20>)
 8002300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <delay_us>:
//delay_us(10)
// 1MHz의 주파수가 TIM2에 공급
// t=1/F 1/1000000Hz ==> 0.000001sec(1us) 1개의 펄스 소요 시간
// 1us * 1000 ==> 1ms
void delay_us(int us)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	// 1. timer 2번의 counter reset
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <delay_us+0x2c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2200      	movs	r2, #0
 8002326:	625a      	str	r2, [r3, #36]	; 0x24
	// 2. 사용자가 지정한 시간만큼 wait
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8002328:	bf00      	nop
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <delay_us+0x2c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d3f9      	bcc.n	800232a <delay_us+0x12>
			;	// no operation
}
 8002336:	bf00      	nop
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	20004cb0 	.word	0x20004cb0

08002348 <HAL_UART_RxCpltCallback>:
  * 예) comportmaster로 부터 1char를 수신하면 HAL_UART_RxCpltCallback으로 진입
  * 	9600bps인 경우 RxCpltCallback를 수행 후 1ms이내에는 빠져 나가야 한다.
  * 	115200bps 						   86us
   */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	volatile static int i = 0;	// buffer의 index


	if (huart == &huart2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a22      	ldr	r2, [pc, #136]	; (80023dc <HAL_UART_RxCpltCallback+0x94>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d13d      	bne.n	80023d4 <HAL_UART_RxCpltCallback+0x8c>
	{
		if(rx_data == '\n')
 8002358:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <HAL_UART_RxCpltCallback+0x98>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b0a      	cmp	r3, #10
 800235e:	d122      	bne.n	80023a6 <HAL_UART_RxCpltCallback+0x5e>
		{
			rx_buff[rear++][i] = 0; // 문장의 끝은 항상 0
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_UART_RxCpltCallback+0x9c>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	1c53      	adds	r3, r2, #1
 8002366:	491f      	ldr	r1, [pc, #124]	; (80023e4 <HAL_UART_RxCpltCallback+0x9c>)
 8002368:	600b      	str	r3, [r1, #0]
 800236a:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <HAL_UART_RxCpltCallback+0xa0>)
 800236c:	6819      	ldr	r1, [r3, #0]
 800236e:	481f      	ldr	r0, [pc, #124]	; (80023ec <HAL_UART_RxCpltCallback+0xa4>)
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4403      	add	r3, r0
 800237a:	440b      	add	r3, r1
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
			rear %= COMMAND_NUMBER; // 원형큐
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <HAL_UART_RxCpltCallback+0x9c>)
 8002382:	6819      	ldr	r1, [r3, #0]
 8002384:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <HAL_UART_RxCpltCallback+0xa8>)
 8002386:	fb83 2301 	smull	r2, r3, r3, r1
 800238a:	10da      	asrs	r2, r3, #3
 800238c:	17cb      	asrs	r3, r1, #31
 800238e:	1ad2      	subs	r2, r2, r3
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	1aca      	subs	r2, r1, r3
 800239a:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_UART_RxCpltCallback+0x9c>)
 800239c:	601a      	str	r2, [r3, #0]
			i = 0; // 새로오는건 버퍼에 새로우 채워야함 (다른 메시지니치!)
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_UART_RxCpltCallback+0xa0>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	e011      	b.n	80023ca <HAL_UART_RxCpltCallback+0x82>
			// 큐 full 여부 확인
		}
		else
		{
			// 그래야 버퍼에 넣기 (push)
			rx_buff[rear][i++] = rx_data;
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <HAL_UART_RxCpltCallback+0x9c>)
 80023a8:	6819      	ldr	r1, [r3, #0]
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <HAL_UART_RxCpltCallback+0xa0>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	1c53      	adds	r3, r2, #1
 80023b0:	480d      	ldr	r0, [pc, #52]	; (80023e8 <HAL_UART_RxCpltCallback+0xa0>)
 80023b2:	6003      	str	r3, [r0, #0]
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_UART_RxCpltCallback+0x98>)
 80023b6:	781c      	ldrb	r4, [r3, #0]
 80023b8:	480c      	ldr	r0, [pc, #48]	; (80023ec <HAL_UART_RxCpltCallback+0xa4>)
 80023ba:	460b      	mov	r3, r1
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4403      	add	r3, r0
 80023c4:	4413      	add	r3, r2
 80023c6:	4622      	mov	r2, r4
 80023c8:	701a      	strb	r2, [r3, #0]
			// command length 확인
		}
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);	// 주의 : 반드시 집어 넣어야 다음 INT가 발생
 80023ca:	2201      	movs	r2, #1
 80023cc:	4904      	ldr	r1, [pc, #16]	; (80023e0 <HAL_UART_RxCpltCallback+0x98>)
 80023ce:	4803      	ldr	r0, [pc, #12]	; (80023dc <HAL_UART_RxCpltCallback+0x94>)
 80023d0:	f002 fcef 	bl	8004db2 <HAL_UART_Receive_IT>
	}
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd90      	pop	{r4, r7, pc}
 80023dc:	20004cf8 	.word	0x20004cf8
 80023e0:	20004ca8 	.word	0x20004ca8
 80023e4:	20004d84 	.word	0x20004d84
 80023e8:	20000218 	.word	0x20000218
 80023ec:	20004d88 	.word	0x20004d88
 80023f0:	66666667 	.word	0x66666667

080023f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800242c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023fa:	490e      	ldr	r1, [pc, #56]	; (8002434 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023fc:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002400:	e002      	b.n	8002408 <LoopCopyDataInit>

08002402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002406:	3304      	adds	r3, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800240c:	d3f9      	bcc.n	8002402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002410:	4c0b      	ldr	r4, [pc, #44]	; (8002440 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002414:	e001      	b.n	800241a <LoopFillZerobss>

08002416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002418:	3204      	adds	r2, #4

0800241a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800241c:	d3fb      	bcc.n	8002416 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800241e:	f7ff ff69 	bl	80022f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002422:	f006 fa67 	bl	80088f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002426:	f7ff fab7 	bl	8001998 <main>
  bx  lr    
 800242a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800242c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002434:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002438:	0800bcdc 	.word	0x0800bcdc
  ldr r2, =_sbss
 800243c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002440:	20005124 	.word	0x20005124

08002444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002444:	e7fe      	b.n	8002444 <ADC_IRQHandler>
	...

08002448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <HAL_Init+0x40>)
 8002452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002456:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_Init+0x40>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <HAL_Init+0x40>)
 800245e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002462:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a07      	ldr	r2, [pc, #28]	; (8002488 <HAL_Init+0x40>)
 800246a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002470:	2003      	movs	r0, #3
 8002472:	f000 f8fc 	bl	800266e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002476:	200f      	movs	r0, #15
 8002478:	f7ff fdea 	bl	8002050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800247c:	f7ff fce8 	bl	8001e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023c00 	.word	0x40023c00

0800248c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_IncTick+0x20>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_IncTick+0x24>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4413      	add	r3, r2
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <HAL_IncTick+0x24>)
 800249e:	6013      	str	r3, [r2, #0]
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	20000010 	.word	0x20000010
 80024b0:	200050b0 	.word	0x200050b0

080024b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return uwTick;
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <HAL_GetTick+0x14>)
 80024ba:	681b      	ldr	r3, [r3, #0]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	200050b0 	.word	0x200050b0

080024cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d4:	f7ff ffee 	bl	80024b4 <HAL_GetTick>
 80024d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d005      	beq.n	80024f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <HAL_Delay+0x44>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4413      	add	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024f2:	bf00      	nop
 80024f4:	f7ff ffde 	bl	80024b4 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	429a      	cmp	r2, r3
 8002502:	d8f7      	bhi.n	80024f4 <HAL_Delay+0x28>
  {
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000010 	.word	0x20000010

08002514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002530:	4013      	ands	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800253c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002546:	4a04      	ldr	r2, [pc, #16]	; (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	60d3      	str	r3, [r2, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002560:	4b04      	ldr	r3, [pc, #16]	; (8002574 <__NVIC_GetPriorityGrouping+0x18>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0307 	and.w	r3, r3, #7
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	db0b      	blt.n	80025a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	4907      	ldr	r1, [pc, #28]	; (80025b0 <__NVIC_EnableIRQ+0x38>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2001      	movs	r0, #1
 800259a:	fa00 f202 	lsl.w	r2, r0, r2
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e100 	.word	0xe000e100

080025b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	db0a      	blt.n	80025de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	490c      	ldr	r1, [pc, #48]	; (8002600 <__NVIC_SetPriority+0x4c>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	0112      	lsls	r2, r2, #4
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	440b      	add	r3, r1
 80025d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025dc:	e00a      	b.n	80025f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4908      	ldr	r1, [pc, #32]	; (8002604 <__NVIC_SetPriority+0x50>)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	3b04      	subs	r3, #4
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	440b      	add	r3, r1
 80025f2:	761a      	strb	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000e100 	.word	0xe000e100
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f1c3 0307 	rsb	r3, r3, #7
 8002622:	2b04      	cmp	r3, #4
 8002624:	bf28      	it	cs
 8002626:	2304      	movcs	r3, #4
 8002628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3304      	adds	r3, #4
 800262e:	2b06      	cmp	r3, #6
 8002630:	d902      	bls.n	8002638 <NVIC_EncodePriority+0x30>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3b03      	subs	r3, #3
 8002636:	e000      	b.n	800263a <NVIC_EncodePriority+0x32>
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	f04f 32ff 	mov.w	r2, #4294967295
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	401a      	ands	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002650:	f04f 31ff 	mov.w	r1, #4294967295
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43d9      	mvns	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	4313      	orrs	r3, r2
         );
}
 8002662:	4618      	mov	r0, r3
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff ff4c 	bl	8002514 <__NVIC_SetPriorityGrouping>
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002696:	f7ff ff61 	bl	800255c <__NVIC_GetPriorityGrouping>
 800269a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	6978      	ldr	r0, [r7, #20]
 80026a2:	f7ff ffb1 	bl	8002608 <NVIC_EncodePriority>
 80026a6:	4602      	mov	r2, r0
 80026a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ac:	4611      	mov	r1, r2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff80 	bl	80025b4 <__NVIC_SetPriority>
}
 80026b4:	bf00      	nop
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ff54 	bl	8002578 <__NVIC_EnableIRQ>
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026e6:	f7ff fee5 	bl	80024b4 <HAL_GetTick>
 80026ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d008      	beq.n	800270a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e052      	b.n	80027b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0216 	bic.w	r2, r2, #22
 8002718:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002728:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d103      	bne.n	800273a <HAL_DMA_Abort+0x62>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0208 	bic.w	r2, r2, #8
 8002748:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800275a:	e013      	b.n	8002784 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800275c:	f7ff feaa 	bl	80024b4 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b05      	cmp	r3, #5
 8002768:	d90c      	bls.n	8002784 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2203      	movs	r2, #3
 8002774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e015      	b.n	80027b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1e4      	bne.n	800275c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002796:	223f      	movs	r2, #63	; 0x3f
 8002798:	409a      	lsls	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d004      	beq.n	80027d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2280      	movs	r2, #128	; 0x80
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00c      	b.n	80027f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2205      	movs	r2, #5
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800280e:	4b23      	ldr	r3, [pc, #140]	; (800289c <HAL_FLASH_Program+0xa0>)
 8002810:	7e1b      	ldrb	r3, [r3, #24]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_FLASH_Program+0x1e>
 8002816:	2302      	movs	r3, #2
 8002818:	e03b      	b.n	8002892 <HAL_FLASH_Program+0x96>
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_FLASH_Program+0xa0>)
 800281c:	2201      	movs	r2, #1
 800281e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002820:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002824:	f000 f87c 	bl	8002920 <FLASH_WaitForLastOperation>
 8002828:	4603      	mov	r3, r0
 800282a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800282c:	7dfb      	ldrb	r3, [r7, #23]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d12b      	bne.n	800288a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d105      	bne.n	8002844 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002838:	783b      	ldrb	r3, [r7, #0]
 800283a:	4619      	mov	r1, r3
 800283c:	68b8      	ldr	r0, [r7, #8]
 800283e:	f000 f927 	bl	8002a90 <FLASH_Program_Byte>
 8002842:	e016      	b.n	8002872 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d105      	bne.n	8002856 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800284a:	883b      	ldrh	r3, [r7, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	68b8      	ldr	r0, [r7, #8]
 8002850:	f000 f8fa 	bl	8002a48 <FLASH_Program_HalfWord>
 8002854:	e00d      	b.n	8002872 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d105      	bne.n	8002868 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	4619      	mov	r1, r3
 8002860:	68b8      	ldr	r0, [r7, #8]
 8002862:	f000 f8cf 	bl	8002a04 <FLASH_Program_Word>
 8002866:	e004      	b.n	8002872 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800286c:	68b8      	ldr	r0, [r7, #8]
 800286e:	f000 f897 	bl	80029a0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002872:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002876:	f000 f853 	bl	8002920 <FLASH_WaitForLastOperation>
 800287a:	4603      	mov	r3, r0
 800287c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800287e:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <HAL_FLASH_Program+0xa4>)
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <HAL_FLASH_Program+0xa4>)
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800288a:	4b04      	ldr	r3, [pc, #16]	; (800289c <HAL_FLASH_Program+0xa0>)
 800288c:	2200      	movs	r2, #0
 800288e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002890:	7dfb      	ldrb	r3, [r7, #23]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200050b4 	.word	0x200050b4
 80028a0:	40023c00 	.word	0x40023c00

080028a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_FLASH_Unlock+0x38>)
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	da0b      	bge.n	80028ce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_FLASH_Unlock+0x38>)
 80028b8:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <HAL_FLASH_Unlock+0x3c>)
 80028ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80028bc:	4b07      	ldr	r3, [pc, #28]	; (80028dc <HAL_FLASH_Unlock+0x38>)
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <HAL_FLASH_Unlock+0x40>)
 80028c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_FLASH_Unlock+0x38>)
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	da01      	bge.n	80028ce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80028ce:	79fb      	ldrb	r3, [r7, #7]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	40023c00 	.word	0x40023c00
 80028e0:	45670123 	.word	0x45670123
 80028e4:	cdef89ab 	.word	0xcdef89ab

080028e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_FLASH_Lock+0x1c>)
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	4a04      	ldr	r2, [pc, #16]	; (8002904 <HAL_FLASH_Lock+0x1c>)
 80028f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028f6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	40023c00 	.word	0x40023c00

08002908 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <HAL_FLASH_GetError+0x14>)
 800290e:	69db      	ldr	r3, [r3, #28]
}  
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	200050b4 	.word	0x200050b4

08002920 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800292c:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <FLASH_WaitForLastOperation+0x78>)
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002932:	f7ff fdbf 	bl	80024b4 <HAL_GetTick>
 8002936:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002938:	e010      	b.n	800295c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d00c      	beq.n	800295c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <FLASH_WaitForLastOperation+0x38>
 8002948:	f7ff fdb4 	bl	80024b4 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	d201      	bcs.n	800295c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e019      	b.n	8002990 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <FLASH_WaitForLastOperation+0x7c>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1e8      	bne.n	800293a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <FLASH_WaitForLastOperation+0x7c>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <FLASH_WaitForLastOperation+0x7c>)
 8002976:	2201      	movs	r2, #1
 8002978:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <FLASH_WaitForLastOperation+0x7c>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002986:	f000 f8a5 	bl	8002ad4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
  
}  
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	200050b4 	.word	0x200050b4
 800299c:	40023c00 	.word	0x40023c00

080029a0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029ac:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <FLASH_Program_DoubleWord+0x60>)
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <FLASH_Program_DoubleWord+0x60>)
 80029b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <FLASH_Program_DoubleWord+0x60>)
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	4a10      	ldr	r2, [pc, #64]	; (8002a00 <FLASH_Program_DoubleWord+0x60>)
 80029be:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80029c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029c4:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <FLASH_Program_DoubleWord+0x60>)
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <FLASH_Program_DoubleWord+0x60>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80029d6:	f3bf 8f6f 	isb	sy
}
 80029da:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80029dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	000a      	movs	r2, r1
 80029ea:	2300      	movs	r3, #0
 80029ec:	68f9      	ldr	r1, [r7, #12]
 80029ee:	3104      	adds	r1, #4
 80029f0:	4613      	mov	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	40023c00 	.word	0x40023c00

08002a04 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <FLASH_Program_Word+0x40>)
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <FLASH_Program_Word+0x40>)
 8002a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <FLASH_Program_Word+0x40>)
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <FLASH_Program_Word+0x40>)
 8002a20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a26:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <FLASH_Program_Word+0x40>)
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	4a06      	ldr	r2, [pc, #24]	; (8002a44 <FLASH_Program_Word+0x40>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	601a      	str	r2, [r3, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	40023c00 	.word	0x40023c00

08002a48 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a54:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <FLASH_Program_HalfWord+0x44>)
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	4a0c      	ldr	r2, [pc, #48]	; (8002a8c <FLASH_Program_HalfWord+0x44>)
 8002a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <FLASH_Program_HalfWord+0x44>)
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <FLASH_Program_HalfWord+0x44>)
 8002a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a6c:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <FLASH_Program_HalfWord+0x44>)
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	4a06      	ldr	r2, [pc, #24]	; (8002a8c <FLASH_Program_HalfWord+0x44>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	801a      	strh	r2, [r3, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40023c00 	.word	0x40023c00

08002a90 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <FLASH_Program_Byte+0x40>)
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	4a0b      	ldr	r2, [pc, #44]	; (8002ad0 <FLASH_Program_Byte+0x40>)
 8002aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <FLASH_Program_Byte+0x40>)
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <FLASH_Program_Byte+0x40>)
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <FLASH_Program_Byte+0x40>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	4a06      	ldr	r2, [pc, #24]	; (8002ad0 <FLASH_Program_Byte+0x40>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	701a      	strb	r2, [r3, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40023c00 	.word	0x40023c00

08002ad4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002ad8:	4b2f      	ldr	r3, [pc, #188]	; (8002b98 <FLASH_SetErrorCode+0xc4>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <FLASH_SetErrorCode+0xc8>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f043 0310 	orr.w	r3, r3, #16
 8002aec:	4a2b      	ldr	r2, [pc, #172]	; (8002b9c <FLASH_SetErrorCode+0xc8>)
 8002aee:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002af0:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <FLASH_SetErrorCode+0xc4>)
 8002af2:	2210      	movs	r2, #16
 8002af4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002af6:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <FLASH_SetErrorCode+0xc4>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002b02:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <FLASH_SetErrorCode+0xc8>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f043 0308 	orr.w	r3, r3, #8
 8002b0a:	4a24      	ldr	r2, [pc, #144]	; (8002b9c <FLASH_SetErrorCode+0xc8>)
 8002b0c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002b0e:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <FLASH_SetErrorCode+0xc4>)
 8002b10:	2220      	movs	r2, #32
 8002b12:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002b14:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <FLASH_SetErrorCode+0xc4>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002b20:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <FLASH_SetErrorCode+0xc8>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	4a1c      	ldr	r2, [pc, #112]	; (8002b9c <FLASH_SetErrorCode+0xc8>)
 8002b2a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <FLASH_SetErrorCode+0xc4>)
 8002b2e:	2240      	movs	r2, #64	; 0x40
 8002b30:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002b32:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <FLASH_SetErrorCode+0xc4>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002b3e:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <FLASH_SetErrorCode+0xc8>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f043 0302 	orr.w	r3, r3, #2
 8002b46:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <FLASH_SetErrorCode+0xc8>)
 8002b48:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <FLASH_SetErrorCode+0xc4>)
 8002b4c:	2280      	movs	r2, #128	; 0x80
 8002b4e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <FLASH_SetErrorCode+0xc4>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d009      	beq.n	8002b70 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <FLASH_SetErrorCode+0xc8>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	4a0d      	ldr	r2, [pc, #52]	; (8002b9c <FLASH_SetErrorCode+0xc8>)
 8002b66:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <FLASH_SetErrorCode+0xc4>)
 8002b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b6e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <FLASH_SetErrorCode+0xc4>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <FLASH_SetErrorCode+0xc8>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	f043 0320 	orr.w	r3, r3, #32
 8002b84:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <FLASH_SetErrorCode+0xc8>)
 8002b86:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <FLASH_SetErrorCode+0xc4>)
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	60da      	str	r2, [r3, #12]
  }
}
 8002b8e:	bf00      	nop
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	40023c00 	.word	0x40023c00
 8002b9c:	200050b4 	.word	0x200050b4

08002ba0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002bb2:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <HAL_FLASHEx_Erase+0xd8>)
 8002bb4:	7e1b      	ldrb	r3, [r3, #24]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_FLASHEx_Erase+0x1e>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e058      	b.n	8002c70 <HAL_FLASHEx_Erase+0xd0>
 8002bbe:	4b2e      	ldr	r3, [pc, #184]	; (8002c78 <HAL_FLASHEx_Erase+0xd8>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bc8:	f7ff feaa 	bl	8002920 <FLASH_WaitForLastOperation>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d148      	bne.n	8002c68 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bdc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d115      	bne.n	8002c12 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	f000 f844 	bl	8002c80 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bf8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bfc:	f7ff fe90 	bl	8002920 <FLASH_WaitForLastOperation>
 8002c00:	4603      	mov	r3, r0
 8002c02:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002c04:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_FLASHEx_Erase+0xdc>)
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <HAL_FLASHEx_Erase+0xdc>)
 8002c0a:	f023 0304 	bic.w	r3, r3, #4
 8002c0e:	6113      	str	r3, [r2, #16]
 8002c10:	e028      	b.n	8002c64 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	e01c      	b.n	8002c54 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	4619      	mov	r1, r3
 8002c22:	68b8      	ldr	r0, [r7, #8]
 8002c24:	f000 f850 	bl	8002cc8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c2c:	f7ff fe78 	bl	8002920 <FLASH_WaitForLastOperation>
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <HAL_FLASHEx_Erase+0xdc>)
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	4a10      	ldr	r2, [pc, #64]	; (8002c7c <HAL_FLASHEx_Erase+0xdc>)
 8002c3a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002c3e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	601a      	str	r2, [r3, #0]
          break;
 8002c4c:	e00a      	b.n	8002c64 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	3301      	adds	r3, #1
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d3da      	bcc.n	8002c1a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002c64:	f000 f878 	bl	8002d58 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_FLASHEx_Erase+0xd8>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	761a      	strb	r2, [r3, #24]

  return status;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	200050b4 	.word	0x200050b4
 8002c7c:	40023c00 	.word	0x40023c00

08002c80 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	6039      	str	r1, [r7, #0]
 8002c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c8c:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <FLASH_MassErase+0x44>)
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	4a0c      	ldr	r2, [pc, #48]	; (8002cc4 <FLASH_MassErase+0x44>)
 8002c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002c98:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <FLASH_MassErase+0x44>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <FLASH_MassErase+0x44>)
 8002c9e:	f043 0304 	orr.w	r3, r3, #4
 8002ca2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002ca4:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <FLASH_MassErase+0x44>)
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	4313      	orrs	r3, r2
 8002cae:	4a05      	ldr	r2, [pc, #20]	; (8002cc4 <FLASH_MassErase+0x44>)
 8002cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb4:	6113      	str	r3, [r2, #16]
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40023c00 	.word	0x40023c00

08002cc8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	e010      	b.n	8002d06 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d103      	bne.n	8002cf2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	e009      	b.n	8002d06 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d103      	bne.n	8002d00 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	e002      	b.n	8002d06 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002d00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d04:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <FLASH_Erase_Sector+0x8c>)
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <FLASH_Erase_Sector+0x8c>)
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <FLASH_Erase_Sector+0x8c>)
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	490f      	ldr	r1, [pc, #60]	; (8002d54 <FLASH_Erase_Sector+0x8c>)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <FLASH_Erase_Sector+0x8c>)
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	4a0c      	ldr	r2, [pc, #48]	; (8002d54 <FLASH_Erase_Sector+0x8c>)
 8002d24:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <FLASH_Erase_Sector+0x8c>)
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4313      	orrs	r3, r2
 8002d34:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <FLASH_Erase_Sector+0x8c>)
 8002d36:	f043 0302 	orr.w	r3, r3, #2
 8002d3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <FLASH_Erase_Sector+0x8c>)
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <FLASH_Erase_Sector+0x8c>)
 8002d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d46:	6113      	str	r3, [r2, #16]
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	40023c00 	.word	0x40023c00

08002d58 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002d5c:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d017      	beq.n	8002d98 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002d68:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002d6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d72:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002d74:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002d7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a16      	ldr	r2, [pc, #88]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002d86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d8a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d8c:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d96:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d017      	beq.n	8002dd4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dae:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002db6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dc6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <FLASH_FlushCaches+0x88>)
 8002dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dd2:	6013      	str	r3, [r2, #0]
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40023c00 	.word	0x40023c00

08002de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b089      	sub	sp, #36	; 0x24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	e159      	b.n	80030b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e00:	2201      	movs	r2, #1
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	f040 8148 	bne.w	80030ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d005      	beq.n	8002e36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d130      	bne.n	8002e98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	2203      	movs	r2, #3
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 0201 	and.w	r2, r3, #1
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d017      	beq.n	8002ed4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	2203      	movs	r2, #3
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d123      	bne.n	8002f28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	08da      	lsrs	r2, r3, #3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3208      	adds	r2, #8
 8002ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	220f      	movs	r2, #15
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	08da      	lsrs	r2, r3, #3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3208      	adds	r2, #8
 8002f22:	69b9      	ldr	r1, [r7, #24]
 8002f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	2203      	movs	r2, #3
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0203 	and.w	r2, r3, #3
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80a2 	beq.w	80030ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	4b57      	ldr	r3, [pc, #348]	; (80030cc <HAL_GPIO_Init+0x2e8>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	4a56      	ldr	r2, [pc, #344]	; (80030cc <HAL_GPIO_Init+0x2e8>)
 8002f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f78:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7a:	4b54      	ldr	r3, [pc, #336]	; (80030cc <HAL_GPIO_Init+0x2e8>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f86:	4a52      	ldr	r2, [pc, #328]	; (80030d0 <HAL_GPIO_Init+0x2ec>)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	220f      	movs	r2, #15
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a49      	ldr	r2, [pc, #292]	; (80030d4 <HAL_GPIO_Init+0x2f0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d019      	beq.n	8002fe6 <HAL_GPIO_Init+0x202>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a48      	ldr	r2, [pc, #288]	; (80030d8 <HAL_GPIO_Init+0x2f4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <HAL_GPIO_Init+0x1fe>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a47      	ldr	r2, [pc, #284]	; (80030dc <HAL_GPIO_Init+0x2f8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00d      	beq.n	8002fde <HAL_GPIO_Init+0x1fa>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a46      	ldr	r2, [pc, #280]	; (80030e0 <HAL_GPIO_Init+0x2fc>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <HAL_GPIO_Init+0x1f6>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a45      	ldr	r2, [pc, #276]	; (80030e4 <HAL_GPIO_Init+0x300>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d101      	bne.n	8002fd6 <HAL_GPIO_Init+0x1f2>
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	e008      	b.n	8002fe8 <HAL_GPIO_Init+0x204>
 8002fd6:	2307      	movs	r3, #7
 8002fd8:	e006      	b.n	8002fe8 <HAL_GPIO_Init+0x204>
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e004      	b.n	8002fe8 <HAL_GPIO_Init+0x204>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e002      	b.n	8002fe8 <HAL_GPIO_Init+0x204>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_GPIO_Init+0x204>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	f002 0203 	and.w	r2, r2, #3
 8002fee:	0092      	lsls	r2, r2, #2
 8002ff0:	4093      	lsls	r3, r2
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ff8:	4935      	ldr	r1, [pc, #212]	; (80030d0 <HAL_GPIO_Init+0x2ec>)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	089b      	lsrs	r3, r3, #2
 8002ffe:	3302      	adds	r3, #2
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003006:	4b38      	ldr	r3, [pc, #224]	; (80030e8 <HAL_GPIO_Init+0x304>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800302a:	4a2f      	ldr	r2, [pc, #188]	; (80030e8 <HAL_GPIO_Init+0x304>)
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003030:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <HAL_GPIO_Init+0x304>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003054:	4a24      	ldr	r2, [pc, #144]	; (80030e8 <HAL_GPIO_Init+0x304>)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800305a:	4b23      	ldr	r3, [pc, #140]	; (80030e8 <HAL_GPIO_Init+0x304>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800307e:	4a1a      	ldr	r2, [pc, #104]	; (80030e8 <HAL_GPIO_Init+0x304>)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003084:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <HAL_GPIO_Init+0x304>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030a8:	4a0f      	ldr	r2, [pc, #60]	; (80030e8 <HAL_GPIO_Init+0x304>)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3301      	adds	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b0f      	cmp	r3, #15
 80030b8:	f67f aea2 	bls.w	8002e00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	3724      	adds	r7, #36	; 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40013800 	.word	0x40013800
 80030d4:	40020000 	.word	0x40020000
 80030d8:	40020400 	.word	0x40020400
 80030dc:	40020800 	.word	0x40020800
 80030e0:	40020c00 	.word	0x40020c00
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40013c00 	.word	0x40013c00

080030ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	887b      	ldrh	r3, [r7, #2]
 80030fe:	4013      	ands	r3, r2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	e001      	b.n	800310e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800310a:	2300      	movs	r3, #0
 800310c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800310e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	807b      	strh	r3, [r7, #2]
 8003128:	4613      	mov	r3, r2
 800312a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800312c:	787b      	ldrb	r3, [r7, #1]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003132:	887a      	ldrh	r2, [r7, #2]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003138:	e003      	b.n	8003142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800313a:	887b      	ldrh	r3, [r7, #2]
 800313c:	041a      	lsls	r2, r3, #16
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	619a      	str	r2, [r3, #24]
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800314e:	b480      	push	{r7}
 8003150:	b085      	sub	sp, #20
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003160:	887a      	ldrh	r2, [r7, #2]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4013      	ands	r3, r2
 8003166:	041a      	lsls	r2, r3, #16
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	43d9      	mvns	r1, r3
 800316c:	887b      	ldrh	r3, [r7, #2]
 800316e:	400b      	ands	r3, r1
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	619a      	str	r2, [r3, #24]
}
 8003176:	bf00      	nop
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e12b      	b.n	80033ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fe fe7c 	bl	8001ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2224      	movs	r2, #36	; 0x24
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0201 	bic.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031e8:	f001 f864 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 80031ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4a81      	ldr	r2, [pc, #516]	; (80033f8 <HAL_I2C_Init+0x274>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d807      	bhi.n	8003208 <HAL_I2C_Init+0x84>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4a80      	ldr	r2, [pc, #512]	; (80033fc <HAL_I2C_Init+0x278>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	bf94      	ite	ls
 8003200:	2301      	movls	r3, #1
 8003202:	2300      	movhi	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	e006      	b.n	8003216 <HAL_I2C_Init+0x92>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4a7d      	ldr	r2, [pc, #500]	; (8003400 <HAL_I2C_Init+0x27c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	bf94      	ite	ls
 8003210:	2301      	movls	r3, #1
 8003212:	2300      	movhi	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0e7      	b.n	80033ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4a78      	ldr	r2, [pc, #480]	; (8003404 <HAL_I2C_Init+0x280>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	0c9b      	lsrs	r3, r3, #18
 8003228:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	430a      	orrs	r2, r1
 800323c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a6a      	ldr	r2, [pc, #424]	; (80033f8 <HAL_I2C_Init+0x274>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d802      	bhi.n	8003258 <HAL_I2C_Init+0xd4>
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3301      	adds	r3, #1
 8003256:	e009      	b.n	800326c <HAL_I2C_Init+0xe8>
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	4a69      	ldr	r2, [pc, #420]	; (8003408 <HAL_I2C_Init+0x284>)
 8003264:	fba2 2303 	umull	r2, r3, r2, r3
 8003268:	099b      	lsrs	r3, r3, #6
 800326a:	3301      	adds	r3, #1
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	430b      	orrs	r3, r1
 8003272:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800327e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	495c      	ldr	r1, [pc, #368]	; (80033f8 <HAL_I2C_Init+0x274>)
 8003288:	428b      	cmp	r3, r1
 800328a:	d819      	bhi.n	80032c0 <HAL_I2C_Init+0x13c>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e59      	subs	r1, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	fbb1 f3f3 	udiv	r3, r1, r3
 800329a:	1c59      	adds	r1, r3, #1
 800329c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032a0:	400b      	ands	r3, r1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_I2C_Init+0x138>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1e59      	subs	r1, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b4:	3301      	adds	r3, #1
 80032b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ba:	e051      	b.n	8003360 <HAL_I2C_Init+0x1dc>
 80032bc:	2304      	movs	r3, #4
 80032be:	e04f      	b.n	8003360 <HAL_I2C_Init+0x1dc>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d111      	bne.n	80032ec <HAL_I2C_Init+0x168>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1e58      	subs	r0, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	440b      	add	r3, r1
 80032d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	e012      	b.n	8003312 <HAL_I2C_Init+0x18e>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1e58      	subs	r0, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	0099      	lsls	r1, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003302:	3301      	adds	r3, #1
 8003304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf0c      	ite	eq
 800330c:	2301      	moveq	r3, #1
 800330e:	2300      	movne	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_I2C_Init+0x196>
 8003316:	2301      	movs	r3, #1
 8003318:	e022      	b.n	8003360 <HAL_I2C_Init+0x1dc>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10e      	bne.n	8003340 <HAL_I2C_Init+0x1bc>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1e58      	subs	r0, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6859      	ldr	r1, [r3, #4]
 800332a:	460b      	mov	r3, r1
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	440b      	add	r3, r1
 8003330:	fbb0 f3f3 	udiv	r3, r0, r3
 8003334:	3301      	adds	r3, #1
 8003336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800333a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800333e:	e00f      	b.n	8003360 <HAL_I2C_Init+0x1dc>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1e58      	subs	r0, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	0099      	lsls	r1, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	fbb0 f3f3 	udiv	r3, r0, r3
 8003356:	3301      	adds	r3, #1
 8003358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	6809      	ldr	r1, [r1, #0]
 8003364:	4313      	orrs	r3, r2
 8003366:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69da      	ldr	r2, [r3, #28]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800338e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6911      	ldr	r1, [r2, #16]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68d2      	ldr	r2, [r2, #12]
 800339a:	4311      	orrs	r1, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	000186a0 	.word	0x000186a0
 80033fc:	001e847f 	.word	0x001e847f
 8003400:	003d08ff 	.word	0x003d08ff
 8003404:	431bde83 	.word	0x431bde83
 8003408:	10624dd3 	.word	0x10624dd3

0800340c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	461a      	mov	r2, r3
 8003418:	460b      	mov	r3, r1
 800341a:	817b      	strh	r3, [r7, #10]
 800341c:	4613      	mov	r3, r2
 800341e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003420:	f7ff f848 	bl	80024b4 <HAL_GetTick>
 8003424:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b20      	cmp	r3, #32
 8003430:	f040 80e0 	bne.w	80035f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	2319      	movs	r3, #25
 800343a:	2201      	movs	r2, #1
 800343c:	4970      	ldr	r1, [pc, #448]	; (8003600 <HAL_I2C_Master_Transmit+0x1f4>)
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f964 	bl	800370c <I2C_WaitOnFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800344a:	2302      	movs	r3, #2
 800344c:	e0d3      	b.n	80035f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_I2C_Master_Transmit+0x50>
 8003458:	2302      	movs	r3, #2
 800345a:	e0cc      	b.n	80035f6 <HAL_I2C_Master_Transmit+0x1ea>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b01      	cmp	r3, #1
 8003470:	d007      	beq.n	8003482 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003490:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2221      	movs	r2, #33	; 0x21
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2210      	movs	r2, #16
 800349e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	893a      	ldrh	r2, [r7, #8]
 80034b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a50      	ldr	r2, [pc, #320]	; (8003604 <HAL_I2C_Master_Transmit+0x1f8>)
 80034c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034c4:	8979      	ldrh	r1, [r7, #10]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	6a3a      	ldr	r2, [r7, #32]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f89c 	bl	8003608 <I2C_MasterRequestWrite>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e08d      	b.n	80035f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034f0:	e066      	b.n	80035c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	6a39      	ldr	r1, [r7, #32]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f9de 	bl	80038b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00d      	beq.n	800351e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	2b04      	cmp	r3, #4
 8003508:	d107      	bne.n	800351a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003518:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e06b      	b.n	80035f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b04      	cmp	r3, #4
 800355a:	d11b      	bne.n	8003594 <HAL_I2C_Master_Transmit+0x188>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003560:	2b00      	cmp	r3, #0
 8003562:	d017      	beq.n	8003594 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	781a      	ldrb	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	6a39      	ldr	r1, [r7, #32]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f9ce 	bl	800393a <I2C_WaitOnBTFFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00d      	beq.n	80035c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d107      	bne.n	80035bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e01a      	b.n	80035f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d194      	bne.n	80034f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	00100002 	.word	0x00100002
 8003604:	ffff0000 	.word	0xffff0000

08003608 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	460b      	mov	r3, r1
 8003616:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d006      	beq.n	8003632 <I2C_MasterRequestWrite+0x2a>
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d003      	beq.n	8003632 <I2C_MasterRequestWrite+0x2a>
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003630:	d108      	bne.n	8003644 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e00b      	b.n	800365c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	2b12      	cmp	r3, #18
 800364a:	d107      	bne.n	800365c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800365a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f84f 	bl	800370c <I2C_WaitOnFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00d      	beq.n	8003690 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003682:	d103      	bne.n	800368c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800368a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e035      	b.n	80036fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003698:	d108      	bne.n	80036ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800369a:	897b      	ldrh	r3, [r7, #10]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036a8:	611a      	str	r2, [r3, #16]
 80036aa:	e01b      	b.n	80036e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036ac:	897b      	ldrh	r3, [r7, #10]
 80036ae:	11db      	asrs	r3, r3, #7
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f003 0306 	and.w	r3, r3, #6
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f063 030f 	orn	r3, r3, #15
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	490e      	ldr	r1, [pc, #56]	; (8003704 <I2C_MasterRequestWrite+0xfc>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f875 	bl	80037ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e010      	b.n	80036fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036da:	897b      	ldrh	r3, [r7, #10]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	4907      	ldr	r1, [pc, #28]	; (8003708 <I2C_MasterRequestWrite+0x100>)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f865 	bl	80037ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	00010008 	.word	0x00010008
 8003708:	00010002 	.word	0x00010002

0800370c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800371c:	e025      	b.n	800376a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d021      	beq.n	800376a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003726:	f7fe fec5 	bl	80024b4 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d302      	bcc.n	800373c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d116      	bne.n	800376a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f043 0220 	orr.w	r2, r3, #32
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e023      	b.n	80037b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	0c1b      	lsrs	r3, r3, #16
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b01      	cmp	r3, #1
 8003772:	d10d      	bne.n	8003790 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	43da      	mvns	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4013      	ands	r3, r2
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	e00c      	b.n	80037aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	43da      	mvns	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4013      	ands	r3, r2
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d0b6      	beq.n	800371e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
 80037c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037c8:	e051      	b.n	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d8:	d123      	bne.n	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f043 0204 	orr.w	r2, r3, #4
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e046      	b.n	80038b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d021      	beq.n	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382a:	f7fe fe43 	bl	80024b4 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	429a      	cmp	r2, r3
 8003838:	d302      	bcc.n	8003840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d116      	bne.n	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f043 0220 	orr.w	r2, r3, #32
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e020      	b.n	80038b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	0c1b      	lsrs	r3, r3, #16
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d10c      	bne.n	8003892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	43da      	mvns	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf14      	ite	ne
 800388a:	2301      	movne	r3, #1
 800388c:	2300      	moveq	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	e00b      	b.n	80038aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	43da      	mvns	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4013      	ands	r3, r2
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d18d      	bne.n	80037ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038c4:	e02d      	b.n	8003922 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f878 	bl	80039bc <I2C_IsAcknowledgeFailed>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e02d      	b.n	8003932 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d021      	beq.n	8003922 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038de:	f7fe fde9 	bl	80024b4 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d116      	bne.n	8003922 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f043 0220 	orr.w	r2, r3, #32
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e007      	b.n	8003932 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392c:	2b80      	cmp	r3, #128	; 0x80
 800392e:	d1ca      	bne.n	80038c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003946:	e02d      	b.n	80039a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f837 	bl	80039bc <I2C_IsAcknowledgeFailed>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e02d      	b.n	80039b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395e:	d021      	beq.n	80039a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003960:	f7fe fda8 	bl	80024b4 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	429a      	cmp	r2, r3
 800396e:	d302      	bcc.n	8003976 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d116      	bne.n	80039a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f043 0220 	orr.w	r2, r3, #32
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e007      	b.n	80039b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d1ca      	bne.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d2:	d11b      	bne.n	8003a0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	f043 0204 	orr.w	r2, r3, #4
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e264      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d075      	beq.n	8003b26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a3a:	4ba3      	ldr	r3, [pc, #652]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d00c      	beq.n	8003a60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a46:	4ba0      	ldr	r3, [pc, #640]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d112      	bne.n	8003a78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a52:	4b9d      	ldr	r3, [pc, #628]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a5e:	d10b      	bne.n	8003a78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a60:	4b99      	ldr	r3, [pc, #612]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d05b      	beq.n	8003b24 <HAL_RCC_OscConfig+0x108>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d157      	bne.n	8003b24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e23f      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a80:	d106      	bne.n	8003a90 <HAL_RCC_OscConfig+0x74>
 8003a82:	4b91      	ldr	r3, [pc, #580]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a90      	ldr	r2, [pc, #576]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e01d      	b.n	8003acc <HAL_RCC_OscConfig+0xb0>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x98>
 8003a9a:	4b8b      	ldr	r3, [pc, #556]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a8a      	ldr	r2, [pc, #552]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	4b88      	ldr	r3, [pc, #544]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a87      	ldr	r2, [pc, #540]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e00b      	b.n	8003acc <HAL_RCC_OscConfig+0xb0>
 8003ab4:	4b84      	ldr	r3, [pc, #528]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a83      	ldr	r2, [pc, #524]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	4b81      	ldr	r3, [pc, #516]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a80      	ldr	r2, [pc, #512]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d013      	beq.n	8003afc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fcee 	bl	80024b4 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003adc:	f7fe fcea 	bl	80024b4 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b64      	cmp	r3, #100	; 0x64
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e204      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aee:	4b76      	ldr	r3, [pc, #472]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0xc0>
 8003afa:	e014      	b.n	8003b26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7fe fcda 	bl	80024b4 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fe fcd6 	bl	80024b4 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e1f0      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b16:	4b6c      	ldr	r3, [pc, #432]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0xe8>
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d063      	beq.n	8003bfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b32:	4b65      	ldr	r3, [pc, #404]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3e:	4b62      	ldr	r3, [pc, #392]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d11c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4a:	4b5f      	ldr	r3, [pc, #380]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d116      	bne.n	8003b84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b56:	4b5c      	ldr	r3, [pc, #368]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_RCC_OscConfig+0x152>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d001      	beq.n	8003b6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e1c4      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6e:	4b56      	ldr	r3, [pc, #344]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4952      	ldr	r1, [pc, #328]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b82:	e03a      	b.n	8003bfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d020      	beq.n	8003bce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <HAL_RCC_OscConfig+0x2b0>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b92:	f7fe fc8f 	bl	80024b4 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b9a:	f7fe fc8b 	bl	80024b4 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e1a5      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bac:	4b46      	ldr	r3, [pc, #280]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb8:	4b43      	ldr	r3, [pc, #268]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4940      	ldr	r1, [pc, #256]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	600b      	str	r3, [r1, #0]
 8003bcc:	e015      	b.n	8003bfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bce:	4b3f      	ldr	r3, [pc, #252]	; (8003ccc <HAL_RCC_OscConfig+0x2b0>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fc6e 	bl	80024b4 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bdc:	f7fe fc6a 	bl	80024b4 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e184      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bee:	4b36      	ldr	r3, [pc, #216]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d030      	beq.n	8003c68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d016      	beq.n	8003c3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0e:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <HAL_RCC_OscConfig+0x2b4>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c14:	f7fe fc4e 	bl	80024b4 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c1c:	f7fe fc4a 	bl	80024b4 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e164      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCC_OscConfig+0x200>
 8003c3a:	e015      	b.n	8003c68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c3c:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <HAL_RCC_OscConfig+0x2b4>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c42:	f7fe fc37 	bl	80024b4 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c4a:	f7fe fc33 	bl	80024b4 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e14d      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5c:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f0      	bne.n	8003c4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80a0 	beq.w	8003db6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c76:	2300      	movs	r3, #0
 8003c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c7a:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10f      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	4a0e      	ldr	r2, [pc, #56]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c94:	6413      	str	r3, [r2, #64]	; 0x40
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_RCC_OscConfig+0x2b8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d121      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <HAL_RCC_OscConfig+0x2b8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a07      	ldr	r2, [pc, #28]	; (8003cd4 <HAL_RCC_OscConfig+0x2b8>)
 8003cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cbe:	f7fe fbf9 	bl	80024b4 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc4:	e011      	b.n	8003cea <HAL_RCC_OscConfig+0x2ce>
 8003cc6:	bf00      	nop
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	42470000 	.word	0x42470000
 8003cd0:	42470e80 	.word	0x42470e80
 8003cd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd8:	f7fe fbec 	bl	80024b4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e106      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cea:	4b85      	ldr	r3, [pc, #532]	; (8003f00 <HAL_RCC_OscConfig+0x4e4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d106      	bne.n	8003d0c <HAL_RCC_OscConfig+0x2f0>
 8003cfe:	4b81      	ldr	r3, [pc, #516]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	4a80      	ldr	r2, [pc, #512]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0a:	e01c      	b.n	8003d46 <HAL_RCC_OscConfig+0x32a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b05      	cmp	r3, #5
 8003d12:	d10c      	bne.n	8003d2e <HAL_RCC_OscConfig+0x312>
 8003d14:	4b7b      	ldr	r3, [pc, #492]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	4a7a      	ldr	r2, [pc, #488]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d1a:	f043 0304 	orr.w	r3, r3, #4
 8003d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d20:	4b78      	ldr	r3, [pc, #480]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	4a77      	ldr	r2, [pc, #476]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2c:	e00b      	b.n	8003d46 <HAL_RCC_OscConfig+0x32a>
 8003d2e:	4b75      	ldr	r3, [pc, #468]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	4a74      	ldr	r2, [pc, #464]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3a:	4b72      	ldr	r3, [pc, #456]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	4a71      	ldr	r2, [pc, #452]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d40:	f023 0304 	bic.w	r3, r3, #4
 8003d44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d015      	beq.n	8003d7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4e:	f7fe fbb1 	bl	80024b4 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d54:	e00a      	b.n	8003d6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d56:	f7fe fbad 	bl	80024b4 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e0c5      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6c:	4b65      	ldr	r3, [pc, #404]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0ee      	beq.n	8003d56 <HAL_RCC_OscConfig+0x33a>
 8003d78:	e014      	b.n	8003da4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7a:	f7fe fb9b 	bl	80024b4 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d80:	e00a      	b.n	8003d98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d82:	f7fe fb97 	bl	80024b4 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e0af      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d98:	4b5a      	ldr	r3, [pc, #360]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1ee      	bne.n	8003d82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d105      	bne.n	8003db6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003daa:	4b56      	ldr	r3, [pc, #344]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	4a55      	ldr	r2, [pc, #340]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 809b 	beq.w	8003ef6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dc0:	4b50      	ldr	r3, [pc, #320]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 030c 	and.w	r3, r3, #12
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d05c      	beq.n	8003e86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d141      	bne.n	8003e58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd4:	4b4c      	ldr	r3, [pc, #304]	; (8003f08 <HAL_RCC_OscConfig+0x4ec>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dda:	f7fe fb6b 	bl	80024b4 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de2:	f7fe fb67 	bl	80024b4 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e081      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df4:	4b43      	ldr	r3, [pc, #268]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1f0      	bne.n	8003de2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	019b      	lsls	r3, r3, #6
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	041b      	lsls	r3, r3, #16
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	061b      	lsls	r3, r3, #24
 8003e24:	4937      	ldr	r1, [pc, #220]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e2a:	4b37      	ldr	r3, [pc, #220]	; (8003f08 <HAL_RCC_OscConfig+0x4ec>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e30:	f7fe fb40 	bl	80024b4 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fe fb3c 	bl	80024b4 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e056      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4a:	4b2e      	ldr	r3, [pc, #184]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x41c>
 8003e56:	e04e      	b.n	8003ef6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e58:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <HAL_RCC_OscConfig+0x4ec>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5e:	f7fe fb29 	bl	80024b4 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e66:	f7fe fb25 	bl	80024b4 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e03f      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e78:	4b22      	ldr	r3, [pc, #136]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f0      	bne.n	8003e66 <HAL_RCC_OscConfig+0x44a>
 8003e84:	e037      	b.n	8003ef6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e032      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e92:	4b1c      	ldr	r3, [pc, #112]	; (8003f04 <HAL_RCC_OscConfig+0x4e8>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d028      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d121      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d11a      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ec8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d111      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	085b      	lsrs	r3, r3, #1
 8003eda:	3b01      	subs	r3, #1
 8003edc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d107      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d001      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40007000 	.word	0x40007000
 8003f04:	40023800 	.word	0x40023800
 8003f08:	42470060 	.word	0x42470060

08003f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0cc      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f20:	4b68      	ldr	r3, [pc, #416]	; (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d90c      	bls.n	8003f48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b65      	ldr	r3, [pc, #404]	; (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f36:	4b63      	ldr	r3, [pc, #396]	; (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0b8      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d020      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f60:	4b59      	ldr	r3, [pc, #356]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	4a58      	ldr	r2, [pc, #352]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f78:	4b53      	ldr	r3, [pc, #332]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	4a52      	ldr	r2, [pc, #328]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f84:	4b50      	ldr	r3, [pc, #320]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	494d      	ldr	r1, [pc, #308]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d044      	beq.n	800402c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d107      	bne.n	8003fba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003faa:	4b47      	ldr	r3, [pc, #284]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d119      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e07f      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d003      	beq.n	8003fca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d107      	bne.n	8003fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fca:	4b3f      	ldr	r3, [pc, #252]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e06f      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fda:	4b3b      	ldr	r3, [pc, #236]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e067      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fea:	4b37      	ldr	r3, [pc, #220]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f023 0203 	bic.w	r2, r3, #3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4934      	ldr	r1, [pc, #208]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ffc:	f7fe fa5a 	bl	80024b4 <HAL_GetTick>
 8004000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	e00a      	b.n	800401a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004004:	f7fe fa56 	bl	80024b4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e04f      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401a:	4b2b      	ldr	r3, [pc, #172]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 020c 	and.w	r2, r3, #12
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	429a      	cmp	r2, r3
 800402a:	d1eb      	bne.n	8004004 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800402c:	4b25      	ldr	r3, [pc, #148]	; (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d20c      	bcs.n	8004054 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403a:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004042:	4b20      	ldr	r3, [pc, #128]	; (80040c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d001      	beq.n	8004054 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e032      	b.n	80040ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004060:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4916      	ldr	r1, [pc, #88]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	4313      	orrs	r3, r2
 8004070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800407e:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	490e      	ldr	r1, [pc, #56]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	4313      	orrs	r3, r2
 8004090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004092:	f000 f821 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 8004096:	4602      	mov	r2, r0
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	490a      	ldr	r1, [pc, #40]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 80040a4:	5ccb      	ldrb	r3, [r1, r3]
 80040a6:	fa22 f303 	lsr.w	r3, r2, r3
 80040aa:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040ae:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <HAL_RCC_ClockConfig+0x1c8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fd ffcc 	bl	8002050 <HAL_InitTick>

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40023c00 	.word	0x40023c00
 80040c8:	40023800 	.word	0x40023800
 80040cc:	0800b8cc 	.word	0x0800b8cc
 80040d0:	20000008 	.word	0x20000008
 80040d4:	2000000c 	.word	0x2000000c

080040d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	607b      	str	r3, [r7, #4]
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	2300      	movs	r3, #0
 80040ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040f0:	4b67      	ldr	r3, [pc, #412]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 030c 	and.w	r3, r3, #12
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d00d      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0x40>
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	f200 80bd 	bhi.w	800427c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x34>
 8004106:	2b04      	cmp	r3, #4
 8004108:	d003      	beq.n	8004112 <HAL_RCC_GetSysClockFreq+0x3a>
 800410a:	e0b7      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800410c:	4b61      	ldr	r3, [pc, #388]	; (8004294 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800410e:	60bb      	str	r3, [r7, #8]
       break;
 8004110:	e0b7      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004112:	4b61      	ldr	r3, [pc, #388]	; (8004298 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004114:	60bb      	str	r3, [r7, #8]
      break;
 8004116:	e0b4      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004118:	4b5d      	ldr	r3, [pc, #372]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004120:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004122:	4b5b      	ldr	r3, [pc, #364]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d04d      	beq.n	80041ca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800412e:	4b58      	ldr	r3, [pc, #352]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	099b      	lsrs	r3, r3, #6
 8004134:	461a      	mov	r2, r3
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800413e:	f04f 0100 	mov.w	r1, #0
 8004142:	ea02 0800 	and.w	r8, r2, r0
 8004146:	ea03 0901 	and.w	r9, r3, r1
 800414a:	4640      	mov	r0, r8
 800414c:	4649      	mov	r1, r9
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	014b      	lsls	r3, r1, #5
 8004158:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800415c:	0142      	lsls	r2, r0, #5
 800415e:	4610      	mov	r0, r2
 8004160:	4619      	mov	r1, r3
 8004162:	ebb0 0008 	subs.w	r0, r0, r8
 8004166:	eb61 0109 	sbc.w	r1, r1, r9
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	018b      	lsls	r3, r1, #6
 8004174:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004178:	0182      	lsls	r2, r0, #6
 800417a:	1a12      	subs	r2, r2, r0
 800417c:	eb63 0301 	sbc.w	r3, r3, r1
 8004180:	f04f 0000 	mov.w	r0, #0
 8004184:	f04f 0100 	mov.w	r1, #0
 8004188:	00d9      	lsls	r1, r3, #3
 800418a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800418e:	00d0      	lsls	r0, r2, #3
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	eb12 0208 	adds.w	r2, r2, r8
 8004198:	eb43 0309 	adc.w	r3, r3, r9
 800419c:	f04f 0000 	mov.w	r0, #0
 80041a0:	f04f 0100 	mov.w	r1, #0
 80041a4:	0259      	lsls	r1, r3, #9
 80041a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80041aa:	0250      	lsls	r0, r2, #9
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4610      	mov	r0, r2
 80041b2:	4619      	mov	r1, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	461a      	mov	r2, r3
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	f7fc fcfc 	bl	8000bb8 <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4613      	mov	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	e04a      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ca:	4b31      	ldr	r3, [pc, #196]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	099b      	lsrs	r3, r3, #6
 80041d0:	461a      	mov	r2, r3
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041da:	f04f 0100 	mov.w	r1, #0
 80041de:	ea02 0400 	and.w	r4, r2, r0
 80041e2:	ea03 0501 	and.w	r5, r3, r1
 80041e6:	4620      	mov	r0, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	014b      	lsls	r3, r1, #5
 80041f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041f8:	0142      	lsls	r2, r0, #5
 80041fa:	4610      	mov	r0, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	1b00      	subs	r0, r0, r4
 8004200:	eb61 0105 	sbc.w	r1, r1, r5
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	018b      	lsls	r3, r1, #6
 800420e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004212:	0182      	lsls	r2, r0, #6
 8004214:	1a12      	subs	r2, r2, r0
 8004216:	eb63 0301 	sbc.w	r3, r3, r1
 800421a:	f04f 0000 	mov.w	r0, #0
 800421e:	f04f 0100 	mov.w	r1, #0
 8004222:	00d9      	lsls	r1, r3, #3
 8004224:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004228:	00d0      	lsls	r0, r2, #3
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	1912      	adds	r2, r2, r4
 8004230:	eb45 0303 	adc.w	r3, r5, r3
 8004234:	f04f 0000 	mov.w	r0, #0
 8004238:	f04f 0100 	mov.w	r1, #0
 800423c:	0299      	lsls	r1, r3, #10
 800423e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004242:	0290      	lsls	r0, r2, #10
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4610      	mov	r0, r2
 800424a:	4619      	mov	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	461a      	mov	r2, r3
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	f7fc fcb0 	bl	8000bb8 <__aeabi_uldivmod>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4613      	mov	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	3301      	adds	r3, #1
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	60bb      	str	r3, [r7, #8]
      break;
 800427a:	e002      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800427e:	60bb      	str	r3, [r7, #8]
      break;
 8004280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004282:	68bb      	ldr	r3, [r7, #8]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800428e:	bf00      	nop
 8004290:	40023800 	.word	0x40023800
 8004294:	00f42400 	.word	0x00f42400
 8004298:	007a1200 	.word	0x007a1200

0800429c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a0:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042a2:	681b      	ldr	r3, [r3, #0]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000008 	.word	0x20000008

080042b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042b8:	f7ff fff0 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	0a9b      	lsrs	r3, r3, #10
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	4903      	ldr	r1, [pc, #12]	; (80042d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ca:	5ccb      	ldrb	r3, [r1, r3]
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40023800 	.word	0x40023800
 80042d8:	0800b8dc 	.word	0x0800b8dc

080042dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042e0:	f7ff ffdc 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042e4:	4602      	mov	r2, r0
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	0b5b      	lsrs	r3, r3, #13
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	4903      	ldr	r1, [pc, #12]	; (8004300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f2:	5ccb      	ldrb	r3, [r1, r3]
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40023800 	.word	0x40023800
 8004300:	0800b8dc 	.word	0x0800b8dc

08004304 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	220f      	movs	r2, #15
 8004312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004314:	4b12      	ldr	r3, [pc, #72]	; (8004360 <HAL_RCC_GetClockConfig+0x5c>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0203 	and.w	r2, r3, #3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <HAL_RCC_GetClockConfig+0x5c>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800432c:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <HAL_RCC_GetClockConfig+0x5c>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_RCC_GetClockConfig+0x5c>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	08db      	lsrs	r3, r3, #3
 800433e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004346:	4b07      	ldr	r3, [pc, #28]	; (8004364 <HAL_RCC_GetClockConfig+0x60>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0207 	and.w	r2, r3, #7
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	601a      	str	r2, [r3, #0]
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800
 8004364:	40023c00 	.word	0x40023c00

08004368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e041      	b.n	80043fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fd fdd2 	bl	8001f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f000 fa88 	bl	80048bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d001      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e044      	b.n	80044aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1e      	ldr	r2, [pc, #120]	; (80044b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d018      	beq.n	8004474 <HAL_TIM_Base_Start_IT+0x6c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444a:	d013      	beq.n	8004474 <HAL_TIM_Base_Start_IT+0x6c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1a      	ldr	r2, [pc, #104]	; (80044bc <HAL_TIM_Base_Start_IT+0xb4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00e      	beq.n	8004474 <HAL_TIM_Base_Start_IT+0x6c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a19      	ldr	r2, [pc, #100]	; (80044c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_TIM_Base_Start_IT+0x6c>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_TIM_Base_Start_IT+0x6c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d111      	bne.n	8004498 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b06      	cmp	r3, #6
 8004484:	d010      	beq.n	80044a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004496:	e007      	b.n	80044a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40014000 	.word	0x40014000

080044cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d122      	bne.n	8004528 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d11b      	bne.n	8004528 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0202 	mvn.w	r2, #2
 80044f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f9b5 	bl	800487e <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f9a7 	bl	800486a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f9b8 	bl	8004892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b04      	cmp	r3, #4
 8004534:	d122      	bne.n	800457c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b04      	cmp	r3, #4
 8004542:	d11b      	bne.n	800457c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0204 	mvn.w	r2, #4
 800454c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f98b 	bl	800487e <HAL_TIM_IC_CaptureCallback>
 8004568:	e005      	b.n	8004576 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f97d 	bl	800486a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f98e 	bl	8004892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b08      	cmp	r3, #8
 8004588:	d122      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b08      	cmp	r3, #8
 8004596:	d11b      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0208 	mvn.w	r2, #8
 80045a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2204      	movs	r2, #4
 80045a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f961 	bl	800487e <HAL_TIM_IC_CaptureCallback>
 80045bc:	e005      	b.n	80045ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f953 	bl	800486a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f964 	bl	8004892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b10      	cmp	r3, #16
 80045dc:	d122      	bne.n	8004624 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	d11b      	bne.n	8004624 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0210 	mvn.w	r2, #16
 80045f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2208      	movs	r2, #8
 80045fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f937 	bl	800487e <HAL_TIM_IC_CaptureCallback>
 8004610:	e005      	b.n	800461e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f929 	bl	800486a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f93a 	bl	8004892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b01      	cmp	r3, #1
 8004630:	d10e      	bne.n	8004650 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d107      	bne.n	8004650 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0201 	mvn.w	r2, #1
 8004648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fd fbda 	bl	8001e04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465a:	2b80      	cmp	r3, #128	; 0x80
 800465c:	d10e      	bne.n	800467c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	2b80      	cmp	r3, #128	; 0x80
 800466a:	d107      	bne.n	800467c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fab2 	bl	8004be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004686:	2b40      	cmp	r3, #64	; 0x40
 8004688:	d10e      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b40      	cmp	r3, #64	; 0x40
 8004696:	d107      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f8ff 	bl	80048a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d10e      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d107      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0220 	mvn.w	r2, #32
 80046cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fa7c 	bl	8004bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_TIM_ConfigClockSource+0x1c>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e0b4      	b.n	8004862 <HAL_TIM_ConfigClockSource+0x186>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800471e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004730:	d03e      	beq.n	80047b0 <HAL_TIM_ConfigClockSource+0xd4>
 8004732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004736:	f200 8087 	bhi.w	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 800473a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473e:	f000 8086 	beq.w	800484e <HAL_TIM_ConfigClockSource+0x172>
 8004742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004746:	d87f      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004748:	2b70      	cmp	r3, #112	; 0x70
 800474a:	d01a      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0xa6>
 800474c:	2b70      	cmp	r3, #112	; 0x70
 800474e:	d87b      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004750:	2b60      	cmp	r3, #96	; 0x60
 8004752:	d050      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0x11a>
 8004754:	2b60      	cmp	r3, #96	; 0x60
 8004756:	d877      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004758:	2b50      	cmp	r3, #80	; 0x50
 800475a:	d03c      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0xfa>
 800475c:	2b50      	cmp	r3, #80	; 0x50
 800475e:	d873      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d058      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x13a>
 8004764:	2b40      	cmp	r3, #64	; 0x40
 8004766:	d86f      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b30      	cmp	r3, #48	; 0x30
 800476a:	d064      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x15a>
 800476c:	2b30      	cmp	r3, #48	; 0x30
 800476e:	d86b      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b20      	cmp	r3, #32
 8004772:	d060      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x15a>
 8004774:	2b20      	cmp	r3, #32
 8004776:	d867      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d05c      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x15a>
 800477c:	2b10      	cmp	r3, #16
 800477e:	d05a      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x15a>
 8004780:	e062      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6899      	ldr	r1, [r3, #8]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f000 f98d 	bl	8004ab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	609a      	str	r2, [r3, #8]
      break;
 80047ae:	e04f      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6899      	ldr	r1, [r3, #8]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f000 f976 	bl	8004ab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047d2:	609a      	str	r2, [r3, #8]
      break;
 80047d4:	e03c      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6859      	ldr	r1, [r3, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	461a      	mov	r2, r3
 80047e4:	f000 f8ea 	bl	80049bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2150      	movs	r1, #80	; 0x50
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 f943 	bl	8004a7a <TIM_ITRx_SetConfig>
      break;
 80047f4:	e02c      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6859      	ldr	r1, [r3, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	461a      	mov	r2, r3
 8004804:	f000 f909 	bl	8004a1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2160      	movs	r1, #96	; 0x60
 800480e:	4618      	mov	r0, r3
 8004810:	f000 f933 	bl	8004a7a <TIM_ITRx_SetConfig>
      break;
 8004814:	e01c      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	461a      	mov	r2, r3
 8004824:	f000 f8ca 	bl	80049bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2140      	movs	r1, #64	; 0x40
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f923 	bl	8004a7a <TIM_ITRx_SetConfig>
      break;
 8004834:	e00c      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f000 f91a 	bl	8004a7a <TIM_ITRx_SetConfig>
      break;
 8004846:	e003      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	73fb      	strb	r3, [r7, #15]
      break;
 800484c:	e000      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800484e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004860:	7bfb      	ldrb	r3, [r7, #15]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a34      	ldr	r2, [pc, #208]	; (80049a0 <TIM_Base_SetConfig+0xe4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00f      	beq.n	80048f4 <TIM_Base_SetConfig+0x38>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048da:	d00b      	beq.n	80048f4 <TIM_Base_SetConfig+0x38>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a31      	ldr	r2, [pc, #196]	; (80049a4 <TIM_Base_SetConfig+0xe8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d007      	beq.n	80048f4 <TIM_Base_SetConfig+0x38>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a30      	ldr	r2, [pc, #192]	; (80049a8 <TIM_Base_SetConfig+0xec>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d003      	beq.n	80048f4 <TIM_Base_SetConfig+0x38>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a2f      	ldr	r2, [pc, #188]	; (80049ac <TIM_Base_SetConfig+0xf0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d108      	bne.n	8004906 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a25      	ldr	r2, [pc, #148]	; (80049a0 <TIM_Base_SetConfig+0xe4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01b      	beq.n	8004946 <TIM_Base_SetConfig+0x8a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004914:	d017      	beq.n	8004946 <TIM_Base_SetConfig+0x8a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a22      	ldr	r2, [pc, #136]	; (80049a4 <TIM_Base_SetConfig+0xe8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <TIM_Base_SetConfig+0x8a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a21      	ldr	r2, [pc, #132]	; (80049a8 <TIM_Base_SetConfig+0xec>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00f      	beq.n	8004946 <TIM_Base_SetConfig+0x8a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a20      	ldr	r2, [pc, #128]	; (80049ac <TIM_Base_SetConfig+0xf0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00b      	beq.n	8004946 <TIM_Base_SetConfig+0x8a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a1f      	ldr	r2, [pc, #124]	; (80049b0 <TIM_Base_SetConfig+0xf4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d007      	beq.n	8004946 <TIM_Base_SetConfig+0x8a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a1e      	ldr	r2, [pc, #120]	; (80049b4 <TIM_Base_SetConfig+0xf8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_Base_SetConfig+0x8a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a1d      	ldr	r2, [pc, #116]	; (80049b8 <TIM_Base_SetConfig+0xfc>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d108      	bne.n	8004958 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a08      	ldr	r2, [pc, #32]	; (80049a0 <TIM_Base_SetConfig+0xe4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d103      	bne.n	800498c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	615a      	str	r2, [r3, #20]
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40010000 	.word	0x40010000
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000c00 	.word	0x40000c00
 80049b0:	40014000 	.word	0x40014000
 80049b4:	40014400 	.word	0x40014400
 80049b8:	40014800 	.word	0x40014800

080049bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f023 0201 	bic.w	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f023 030a 	bic.w	r3, r3, #10
 80049f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	621a      	str	r2, [r3, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b087      	sub	sp, #28
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	f023 0210 	bic.w	r2, r3, #16
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	031b      	lsls	r3, r3, #12
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	621a      	str	r2, [r3, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f043 0307 	orr.w	r3, r3, #7
 8004a9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	609a      	str	r2, [r3, #8]
}
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	021a      	lsls	r2, r3, #8
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	609a      	str	r2, [r3, #8]
}
 8004ae4:	bf00      	nop
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e050      	b.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1c      	ldr	r2, [pc, #112]	; (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d018      	beq.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b54:	d013      	beq.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00e      	beq.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a16      	ldr	r2, [pc, #88]	; (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d009      	beq.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a15      	ldr	r2, [pc, #84]	; (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d004      	beq.n	8004b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d10c      	bne.n	8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40010000 	.word	0x40010000
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40000800 	.word	0x40000800
 8004bc4:	40000c00 	.word	0x40000c00
 8004bc8:	40014000 	.word	0x40014000

08004bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e03f      	b.n	8004c86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fd f9c8 	bl	8001fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2224      	movs	r2, #36	; 0x24
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fddb 	bl	80057f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695a      	ldr	r2, [r3, #20]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b08a      	sub	sp, #40	; 0x28
 8004c92:	af02      	add	r7, sp, #8
 8004c94:	60f8      	str	r0, [r7, #12]
 8004c96:	60b9      	str	r1, [r7, #8]
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d17c      	bne.n	8004da8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_UART_Transmit+0x2c>
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e075      	b.n	8004daa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_UART_Transmit+0x3e>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e06e      	b.n	8004daa <HAL_UART_Transmit+0x11c>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2221      	movs	r2, #33	; 0x21
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ce2:	f7fd fbe7 	bl	80024b4 <HAL_GetTick>
 8004ce6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	88fa      	ldrh	r2, [r7, #6]
 8004cec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	88fa      	ldrh	r2, [r7, #6]
 8004cf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfc:	d108      	bne.n	8004d10 <HAL_UART_Transmit+0x82>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d104      	bne.n	8004d10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	e003      	b.n	8004d18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d20:	e02a      	b.n	8004d78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2180      	movs	r1, #128	; 0x80
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 fb1f 	bl	8005370 <UART_WaitOnFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e036      	b.n	8004daa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10b      	bne.n	8004d5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	3302      	adds	r3, #2
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	e007      	b.n	8004d6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	3301      	adds	r3, #1
 8004d68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1cf      	bne.n	8004d22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2140      	movs	r1, #64	; 0x40
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 faef 	bl	8005370 <UART_WaitOnFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e006      	b.n	8004daa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	e000      	b.n	8004daa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004da8:	2302      	movs	r3, #2
  }
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3720      	adds	r7, #32
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d11d      	bne.n	8004e08 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_UART_Receive_IT+0x26>
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e016      	b.n	8004e0a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_UART_Receive_IT+0x38>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e00f      	b.n	8004e0a <HAL_UART_Receive_IT+0x58>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004df8:	88fb      	ldrh	r3, [r7, #6]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fb24 	bl	800544c <UART_Start_Receive_IT>
 8004e04:	4603      	mov	r3, r0
 8004e06:	e000      	b.n	8004e0a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e08:	2302      	movs	r3, #2
  }
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b0ba      	sub	sp, #232	; 0xe8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10f      	bne.n	8004e7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d009      	beq.n	8004e7a <HAL_UART_IRQHandler+0x66>
 8004e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fc03 	bl	800567e <UART_Receive_IT>
      return;
 8004e78:	e256      	b.n	8005328 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 80de 	beq.w	8005040 <HAL_UART_IRQHandler+0x22c>
 8004e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d106      	bne.n	8004e9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80d1 	beq.w	8005040 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00b      	beq.n	8004ec2 <HAL_UART_IRQHandler+0xae>
 8004eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f043 0201 	orr.w	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <HAL_UART_IRQHandler+0xd2>
 8004ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	f043 0202 	orr.w	r2, r3, #2
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00b      	beq.n	8004f0a <HAL_UART_IRQHandler+0xf6>
 8004ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d005      	beq.n	8004f0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f043 0204 	orr.w	r2, r3, #4
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d011      	beq.n	8004f3a <HAL_UART_IRQHandler+0x126>
 8004f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d105      	bne.n	8004f2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f043 0208 	orr.w	r2, r3, #8
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 81ed 	beq.w	800531e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_UART_IRQHandler+0x14e>
 8004f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fb8e 	bl	800567e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6c:	2b40      	cmp	r3, #64	; 0x40
 8004f6e:	bf0c      	ite	eq
 8004f70:	2301      	moveq	r3, #1
 8004f72:	2300      	movne	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d103      	bne.n	8004f8e <HAL_UART_IRQHandler+0x17a>
 8004f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d04f      	beq.n	800502e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fa96 	bl	80054c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d141      	bne.n	8005026 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3314      	adds	r3, #20
 8004fa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3314      	adds	r3, #20
 8004fca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004fe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1d9      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d013      	beq.n	800501e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	4a7d      	ldr	r2, [pc, #500]	; (80051f0 <HAL_UART_IRQHandler+0x3dc>)
 8004ffc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	4618      	mov	r0, r3
 8005004:	f7fd fbd8 	bl	80027b8 <HAL_DMA_Abort_IT>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d016      	beq.n	800503c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005018:	4610      	mov	r0, r2
 800501a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800501c:	e00e      	b.n	800503c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f990 	bl	8005344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005024:	e00a      	b.n	800503c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f98c 	bl	8005344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800502c:	e006      	b.n	800503c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f988 	bl	8005344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800503a:	e170      	b.n	800531e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503c:	bf00      	nop
    return;
 800503e:	e16e      	b.n	800531e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	2b01      	cmp	r3, #1
 8005046:	f040 814a 	bne.w	80052de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800504a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 8143 	beq.w	80052de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 813c 	beq.w	80052de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005066:	2300      	movs	r3, #0
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60bb      	str	r3, [r7, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	2b40      	cmp	r3, #64	; 0x40
 8005088:	f040 80b4 	bne.w	80051f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005098:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 8140 	beq.w	8005322 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050aa:	429a      	cmp	r2, r3
 80050ac:	f080 8139 	bcs.w	8005322 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c2:	f000 8088 	beq.w	80051d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	330c      	adds	r3, #12
 80050cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	330c      	adds	r3, #12
 80050ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80050f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800510a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1d9      	bne.n	80050c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3314      	adds	r3, #20
 8005118:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005124:	f023 0301 	bic.w	r3, r3, #1
 8005128:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3314      	adds	r3, #20
 8005132:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005136:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800513a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800513e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e1      	bne.n	8005112 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3314      	adds	r3, #20
 8005154:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800515e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005164:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3314      	adds	r3, #20
 800516e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005172:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005174:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005178:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e3      	bne.n	800514e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	330c      	adds	r3, #12
 800519a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519e:	e853 3f00 	ldrex	r3, [r3]
 80051a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a6:	f023 0310 	bic.w	r3, r3, #16
 80051aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	330c      	adds	r3, #12
 80051b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80051b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80051ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e3      	bne.n	8005194 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fd fa81 	bl	80026d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051de:	b29b      	uxth	r3, r3
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	4619      	mov	r1, r3
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f8b6 	bl	8005358 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051ec:	e099      	b.n	8005322 <HAL_UART_IRQHandler+0x50e>
 80051ee:	bf00      	nop
 80051f0:	08005587 	.word	0x08005587
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 808b 	beq.w	8005326 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 8086 	beq.w	8005326 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	330c      	adds	r3, #12
 8005220:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	e853 3f00 	ldrex	r3, [r3]
 8005228:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800522a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005230:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	330c      	adds	r3, #12
 800523a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800523e:	647a      	str	r2, [r7, #68]	; 0x44
 8005240:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005244:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800524c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e3      	bne.n	800521a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3314      	adds	r3, #20
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	623b      	str	r3, [r7, #32]
   return(result);
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	f023 0301 	bic.w	r3, r3, #1
 8005268:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3314      	adds	r3, #20
 8005272:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005276:	633a      	str	r2, [r7, #48]	; 0x30
 8005278:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800527c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e3      	bne.n	8005252 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0310 	bic.w	r3, r3, #16
 80052ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	330c      	adds	r3, #12
 80052b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80052bc:	61fa      	str	r2, [r7, #28]
 80052be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	69b9      	ldr	r1, [r7, #24]
 80052c2:	69fa      	ldr	r2, [r7, #28]
 80052c4:	e841 2300 	strex	r3, r2, [r1]
 80052c8:	617b      	str	r3, [r7, #20]
   return(result);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e3      	bne.n	8005298 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052d4:	4619      	mov	r1, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f83e 	bl	8005358 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052dc:	e023      	b.n	8005326 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <HAL_UART_IRQHandler+0x4ea>
 80052ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f959 	bl	80055ae <UART_Transmit_IT>
    return;
 80052fc:	e014      	b.n	8005328 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00e      	beq.n	8005328 <HAL_UART_IRQHandler+0x514>
 800530a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f999 	bl	800564e <UART_EndTransmit_IT>
    return;
 800531c:	e004      	b.n	8005328 <HAL_UART_IRQHandler+0x514>
    return;
 800531e:	bf00      	nop
 8005320:	e002      	b.n	8005328 <HAL_UART_IRQHandler+0x514>
      return;
 8005322:	bf00      	nop
 8005324:	e000      	b.n	8005328 <HAL_UART_IRQHandler+0x514>
      return;
 8005326:	bf00      	nop
  }
}
 8005328:	37e8      	adds	r7, #232	; 0xe8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop

08005330 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b090      	sub	sp, #64	; 0x40
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	4613      	mov	r3, r2
 800537e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005380:	e050      	b.n	8005424 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005388:	d04c      	beq.n	8005424 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800538a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005390:	f7fd f890 	bl	80024b4 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800539c:	429a      	cmp	r2, r3
 800539e:	d241      	bcs.n	8005424 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	330c      	adds	r3, #12
 80053a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053aa:	e853 3f00 	ldrex	r3, [r3]
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	330c      	adds	r3, #12
 80053be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053c0:	637a      	str	r2, [r7, #52]	; 0x34
 80053c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e5      	bne.n	80053a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3314      	adds	r3, #20
 80053da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	e853 3f00 	ldrex	r3, [r3]
 80053e2:	613b      	str	r3, [r7, #16]
   return(result);
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f023 0301 	bic.w	r3, r3, #1
 80053ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3314      	adds	r3, #20
 80053f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053f4:	623a      	str	r2, [r7, #32]
 80053f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	69f9      	ldr	r1, [r7, #28]
 80053fa:	6a3a      	ldr	r2, [r7, #32]
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	61bb      	str	r3, [r7, #24]
   return(result);
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e5      	bne.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e00f      	b.n	8005444 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4013      	ands	r3, r2
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	429a      	cmp	r2, r3
 8005432:	bf0c      	ite	eq
 8005434:	2301      	moveq	r3, #1
 8005436:	2300      	movne	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	429a      	cmp	r2, r3
 8005440:	d09f      	beq.n	8005382 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3740      	adds	r7, #64	; 0x40
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	4613      	mov	r3, r2
 8005458:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	88fa      	ldrh	r2, [r7, #6]
 8005464:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	88fa      	ldrh	r2, [r7, #6]
 800546a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2222      	movs	r2, #34	; 0x22
 8005476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005490:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695a      	ldr	r2, [r3, #20]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0201 	orr.w	r2, r2, #1
 80054a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0220 	orr.w	r2, r2, #32
 80054b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b095      	sub	sp, #84	; 0x54
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	330c      	adds	r3, #12
 80054ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	330c      	adds	r3, #12
 80054e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054e8:	643a      	str	r2, [r7, #64]	; 0x40
 80054ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e5      	bne.n	80054c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3314      	adds	r3, #20
 8005502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	61fb      	str	r3, [r7, #28]
   return(result);
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	64bb      	str	r3, [r7, #72]	; 0x48
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3314      	adds	r3, #20
 800551a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800551c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800551e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e5      	bne.n	80054fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005534:	2b01      	cmp	r3, #1
 8005536:	d119      	bne.n	800556c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	330c      	adds	r3, #12
 800553e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	60bb      	str	r3, [r7, #8]
   return(result);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f023 0310 	bic.w	r3, r3, #16
 800554e:	647b      	str	r3, [r7, #68]	; 0x44
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	330c      	adds	r3, #12
 8005556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005558:	61ba      	str	r2, [r7, #24]
 800555a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	6979      	ldr	r1, [r7, #20]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	e841 2300 	strex	r3, r2, [r1]
 8005564:	613b      	str	r3, [r7, #16]
   return(result);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e5      	bne.n	8005538 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
}
 800557a:	bf00      	nop
 800557c:	3754      	adds	r7, #84	; 0x54
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f7ff fecf 	bl	8005344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055a6:	bf00      	nop
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b21      	cmp	r3, #33	; 0x21
 80055c0:	d13e      	bne.n	8005640 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ca:	d114      	bne.n	80055f6 <UART_Transmit_IT+0x48>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d110      	bne.n	80055f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	1c9a      	adds	r2, r3, #2
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	621a      	str	r2, [r3, #32]
 80055f4:	e008      	b.n	8005608 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	1c59      	adds	r1, r3, #1
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6211      	str	r1, [r2, #32]
 8005600:	781a      	ldrb	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800560c:	b29b      	uxth	r3, r3
 800560e:	3b01      	subs	r3, #1
 8005610:	b29b      	uxth	r3, r3
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	4619      	mov	r1, r3
 8005616:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10f      	bne.n	800563c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800562a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800563a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	e000      	b.n	8005642 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005640:	2302      	movs	r3, #2
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005664:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff fe5e 	bl	8005330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b08c      	sub	sp, #48	; 0x30
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b22      	cmp	r3, #34	; 0x22
 8005690:	f040 80ab 	bne.w	80057ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569c:	d117      	bne.n	80056ce <UART_Receive_IT+0x50>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d113      	bne.n	80056ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056bc:	b29a      	uxth	r2, r3
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	1c9a      	adds	r2, r3, #2
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	629a      	str	r2, [r3, #40]	; 0x28
 80056cc:	e026      	b.n	800571c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80056d4:	2300      	movs	r3, #0
 80056d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e0:	d007      	beq.n	80056f2 <UART_Receive_IT+0x74>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <UART_Receive_IT+0x82>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	e008      	b.n	8005712 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800570c:	b2da      	uxtb	r2, r3
 800570e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005710:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005720:	b29b      	uxth	r3, r3
 8005722:	3b01      	subs	r3, #1
 8005724:	b29b      	uxth	r3, r3
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	4619      	mov	r1, r3
 800572a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800572c:	2b00      	cmp	r3, #0
 800572e:	d15a      	bne.n	80057e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0220 	bic.w	r2, r2, #32
 800573e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800574e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695a      	ldr	r2, [r3, #20]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0201 	bic.w	r2, r2, #1
 800575e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	2b01      	cmp	r3, #1
 800576e:	d135      	bne.n	80057dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	330c      	adds	r3, #12
 800577c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	e853 3f00 	ldrex	r3, [r3]
 8005784:	613b      	str	r3, [r7, #16]
   return(result);
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f023 0310 	bic.w	r3, r3, #16
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005796:	623a      	str	r2, [r7, #32]
 8005798:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	69f9      	ldr	r1, [r7, #28]
 800579c:	6a3a      	ldr	r2, [r7, #32]
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e5      	bne.n	8005776 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d10a      	bne.n	80057ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057d2:	4619      	mov	r1, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff fdbf 	bl	8005358 <HAL_UARTEx_RxEventCallback>
 80057da:	e002      	b.n	80057e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7fc fdb3 	bl	8002348 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	e002      	b.n	80057ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e000      	b.n	80057ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80057ea:	2302      	movs	r3, #2
  }
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3730      	adds	r7, #48	; 0x30
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f8:	b09f      	sub	sp, #124	; 0x7c
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800580a:	68d9      	ldr	r1, [r3, #12]
 800580c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	ea40 0301 	orr.w	r3, r0, r1
 8005814:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	431a      	orrs	r2, r3
 8005820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	431a      	orrs	r2, r3
 8005826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	4313      	orrs	r3, r2
 800582c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800582e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005838:	f021 010c 	bic.w	r1, r1, #12
 800583c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005842:	430b      	orrs	r3, r1
 8005844:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005852:	6999      	ldr	r1, [r3, #24]
 8005854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	ea40 0301 	orr.w	r3, r0, r1
 800585c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800585e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	4bc5      	ldr	r3, [pc, #788]	; (8005b78 <UART_SetConfig+0x384>)
 8005864:	429a      	cmp	r2, r3
 8005866:	d004      	beq.n	8005872 <UART_SetConfig+0x7e>
 8005868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	4bc3      	ldr	r3, [pc, #780]	; (8005b7c <UART_SetConfig+0x388>)
 800586e:	429a      	cmp	r2, r3
 8005870:	d103      	bne.n	800587a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005872:	f7fe fd33 	bl	80042dc <HAL_RCC_GetPCLK2Freq>
 8005876:	6778      	str	r0, [r7, #116]	; 0x74
 8005878:	e002      	b.n	8005880 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800587a:	f7fe fd1b 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 800587e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005888:	f040 80b6 	bne.w	80059f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800588c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800588e:	461c      	mov	r4, r3
 8005890:	f04f 0500 	mov.w	r5, #0
 8005894:	4622      	mov	r2, r4
 8005896:	462b      	mov	r3, r5
 8005898:	1891      	adds	r1, r2, r2
 800589a:	6439      	str	r1, [r7, #64]	; 0x40
 800589c:	415b      	adcs	r3, r3
 800589e:	647b      	str	r3, [r7, #68]	; 0x44
 80058a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058a4:	1912      	adds	r2, r2, r4
 80058a6:	eb45 0303 	adc.w	r3, r5, r3
 80058aa:	f04f 0000 	mov.w	r0, #0
 80058ae:	f04f 0100 	mov.w	r1, #0
 80058b2:	00d9      	lsls	r1, r3, #3
 80058b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058b8:	00d0      	lsls	r0, r2, #3
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	1911      	adds	r1, r2, r4
 80058c0:	6639      	str	r1, [r7, #96]	; 0x60
 80058c2:	416b      	adcs	r3, r5
 80058c4:	667b      	str	r3, [r7, #100]	; 0x64
 80058c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	1891      	adds	r1, r2, r2
 80058d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80058d4:	415b      	adcs	r3, r3
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80058e0:	f7fb f96a 	bl	8000bb8 <__aeabi_uldivmod>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	4ba5      	ldr	r3, [pc, #660]	; (8005b80 <UART_SetConfig+0x38c>)
 80058ea:	fba3 2302 	umull	r2, r3, r3, r2
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	011e      	lsls	r6, r3, #4
 80058f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058f4:	461c      	mov	r4, r3
 80058f6:	f04f 0500 	mov.w	r5, #0
 80058fa:	4622      	mov	r2, r4
 80058fc:	462b      	mov	r3, r5
 80058fe:	1891      	adds	r1, r2, r2
 8005900:	6339      	str	r1, [r7, #48]	; 0x30
 8005902:	415b      	adcs	r3, r3
 8005904:	637b      	str	r3, [r7, #52]	; 0x34
 8005906:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800590a:	1912      	adds	r2, r2, r4
 800590c:	eb45 0303 	adc.w	r3, r5, r3
 8005910:	f04f 0000 	mov.w	r0, #0
 8005914:	f04f 0100 	mov.w	r1, #0
 8005918:	00d9      	lsls	r1, r3, #3
 800591a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800591e:	00d0      	lsls	r0, r2, #3
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	1911      	adds	r1, r2, r4
 8005926:	65b9      	str	r1, [r7, #88]	; 0x58
 8005928:	416b      	adcs	r3, r5
 800592a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800592c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	461a      	mov	r2, r3
 8005932:	f04f 0300 	mov.w	r3, #0
 8005936:	1891      	adds	r1, r2, r2
 8005938:	62b9      	str	r1, [r7, #40]	; 0x28
 800593a:	415b      	adcs	r3, r3
 800593c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800593e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005942:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005946:	f7fb f937 	bl	8000bb8 <__aeabi_uldivmod>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4b8c      	ldr	r3, [pc, #560]	; (8005b80 <UART_SetConfig+0x38c>)
 8005950:	fba3 1302 	umull	r1, r3, r3, r2
 8005954:	095b      	lsrs	r3, r3, #5
 8005956:	2164      	movs	r1, #100	; 0x64
 8005958:	fb01 f303 	mul.w	r3, r1, r3
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	3332      	adds	r3, #50	; 0x32
 8005962:	4a87      	ldr	r2, [pc, #540]	; (8005b80 <UART_SetConfig+0x38c>)
 8005964:	fba2 2303 	umull	r2, r3, r2, r3
 8005968:	095b      	lsrs	r3, r3, #5
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005970:	441e      	add	r6, r3
 8005972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005974:	4618      	mov	r0, r3
 8005976:	f04f 0100 	mov.w	r1, #0
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	1894      	adds	r4, r2, r2
 8005980:	623c      	str	r4, [r7, #32]
 8005982:	415b      	adcs	r3, r3
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
 8005986:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800598a:	1812      	adds	r2, r2, r0
 800598c:	eb41 0303 	adc.w	r3, r1, r3
 8005990:	f04f 0400 	mov.w	r4, #0
 8005994:	f04f 0500 	mov.w	r5, #0
 8005998:	00dd      	lsls	r5, r3, #3
 800599a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800599e:	00d4      	lsls	r4, r2, #3
 80059a0:	4622      	mov	r2, r4
 80059a2:	462b      	mov	r3, r5
 80059a4:	1814      	adds	r4, r2, r0
 80059a6:	653c      	str	r4, [r7, #80]	; 0x50
 80059a8:	414b      	adcs	r3, r1
 80059aa:	657b      	str	r3, [r7, #84]	; 0x54
 80059ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	461a      	mov	r2, r3
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	1891      	adds	r1, r2, r2
 80059b8:	61b9      	str	r1, [r7, #24]
 80059ba:	415b      	adcs	r3, r3
 80059bc:	61fb      	str	r3, [r7, #28]
 80059be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80059c6:	f7fb f8f7 	bl	8000bb8 <__aeabi_uldivmod>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4b6c      	ldr	r3, [pc, #432]	; (8005b80 <UART_SetConfig+0x38c>)
 80059d0:	fba3 1302 	umull	r1, r3, r3, r2
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	2164      	movs	r1, #100	; 0x64
 80059d8:	fb01 f303 	mul.w	r3, r1, r3
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	3332      	adds	r3, #50	; 0x32
 80059e2:	4a67      	ldr	r2, [pc, #412]	; (8005b80 <UART_SetConfig+0x38c>)
 80059e4:	fba2 2303 	umull	r2, r3, r2, r3
 80059e8:	095b      	lsrs	r3, r3, #5
 80059ea:	f003 0207 	and.w	r2, r3, #7
 80059ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4432      	add	r2, r6
 80059f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059f6:	e0b9      	b.n	8005b6c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059fa:	461c      	mov	r4, r3
 80059fc:	f04f 0500 	mov.w	r5, #0
 8005a00:	4622      	mov	r2, r4
 8005a02:	462b      	mov	r3, r5
 8005a04:	1891      	adds	r1, r2, r2
 8005a06:	6139      	str	r1, [r7, #16]
 8005a08:	415b      	adcs	r3, r3
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a10:	1912      	adds	r2, r2, r4
 8005a12:	eb45 0303 	adc.w	r3, r5, r3
 8005a16:	f04f 0000 	mov.w	r0, #0
 8005a1a:	f04f 0100 	mov.w	r1, #0
 8005a1e:	00d9      	lsls	r1, r3, #3
 8005a20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a24:	00d0      	lsls	r0, r2, #3
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	eb12 0804 	adds.w	r8, r2, r4
 8005a2e:	eb43 0905 	adc.w	r9, r3, r5
 8005a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f04f 0100 	mov.w	r1, #0
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	008b      	lsls	r3, r1, #2
 8005a46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a4a:	0082      	lsls	r2, r0, #2
 8005a4c:	4640      	mov	r0, r8
 8005a4e:	4649      	mov	r1, r9
 8005a50:	f7fb f8b2 	bl	8000bb8 <__aeabi_uldivmod>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4b49      	ldr	r3, [pc, #292]	; (8005b80 <UART_SetConfig+0x38c>)
 8005a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	011e      	lsls	r6, r3, #4
 8005a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a64:	4618      	mov	r0, r3
 8005a66:	f04f 0100 	mov.w	r1, #0
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	1894      	adds	r4, r2, r2
 8005a70:	60bc      	str	r4, [r7, #8]
 8005a72:	415b      	adcs	r3, r3
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a7a:	1812      	adds	r2, r2, r0
 8005a7c:	eb41 0303 	adc.w	r3, r1, r3
 8005a80:	f04f 0400 	mov.w	r4, #0
 8005a84:	f04f 0500 	mov.w	r5, #0
 8005a88:	00dd      	lsls	r5, r3, #3
 8005a8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a8e:	00d4      	lsls	r4, r2, #3
 8005a90:	4622      	mov	r2, r4
 8005a92:	462b      	mov	r3, r5
 8005a94:	1814      	adds	r4, r2, r0
 8005a96:	64bc      	str	r4, [r7, #72]	; 0x48
 8005a98:	414b      	adcs	r3, r1
 8005a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f04f 0100 	mov.w	r1, #0
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	008b      	lsls	r3, r1, #2
 8005ab0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ab4:	0082      	lsls	r2, r0, #2
 8005ab6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005aba:	f7fb f87d 	bl	8000bb8 <__aeabi_uldivmod>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4b2f      	ldr	r3, [pc, #188]	; (8005b80 <UART_SetConfig+0x38c>)
 8005ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	2164      	movs	r1, #100	; 0x64
 8005acc:	fb01 f303 	mul.w	r3, r1, r3
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	3332      	adds	r3, #50	; 0x32
 8005ad6:	4a2a      	ldr	r2, [pc, #168]	; (8005b80 <UART_SetConfig+0x38c>)
 8005ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8005adc:	095b      	lsrs	r3, r3, #5
 8005ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ae2:	441e      	add	r6, r3
 8005ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f04f 0100 	mov.w	r1, #0
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	1894      	adds	r4, r2, r2
 8005af2:	603c      	str	r4, [r7, #0]
 8005af4:	415b      	adcs	r3, r3
 8005af6:	607b      	str	r3, [r7, #4]
 8005af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005afc:	1812      	adds	r2, r2, r0
 8005afe:	eb41 0303 	adc.w	r3, r1, r3
 8005b02:	f04f 0400 	mov.w	r4, #0
 8005b06:	f04f 0500 	mov.w	r5, #0
 8005b0a:	00dd      	lsls	r5, r3, #3
 8005b0c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b10:	00d4      	lsls	r4, r2, #3
 8005b12:	4622      	mov	r2, r4
 8005b14:	462b      	mov	r3, r5
 8005b16:	eb12 0a00 	adds.w	sl, r2, r0
 8005b1a:	eb43 0b01 	adc.w	fp, r3, r1
 8005b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f04f 0100 	mov.w	r1, #0
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	008b      	lsls	r3, r1, #2
 8005b32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b36:	0082      	lsls	r2, r0, #2
 8005b38:	4650      	mov	r0, sl
 8005b3a:	4659      	mov	r1, fp
 8005b3c:	f7fb f83c 	bl	8000bb8 <__aeabi_uldivmod>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <UART_SetConfig+0x38c>)
 8005b46:	fba3 1302 	umull	r1, r3, r3, r2
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	2164      	movs	r1, #100	; 0x64
 8005b4e:	fb01 f303 	mul.w	r3, r1, r3
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	3332      	adds	r3, #50	; 0x32
 8005b58:	4a09      	ldr	r2, [pc, #36]	; (8005b80 <UART_SetConfig+0x38c>)
 8005b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	f003 020f 	and.w	r2, r3, #15
 8005b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4432      	add	r2, r6
 8005b6a:	609a      	str	r2, [r3, #8]
}
 8005b6c:	bf00      	nop
 8005b6e:	377c      	adds	r7, #124	; 0x7c
 8005b70:	46bd      	mov	sp, r7
 8005b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b76:	bf00      	nop
 8005b78:	40011000 	.word	0x40011000
 8005b7c:	40011400 	.word	0x40011400
 8005b80:	51eb851f 	.word	0x51eb851f

08005b84 <__NVIC_SetPriority>:
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	db0a      	blt.n	8005bae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	490c      	ldr	r1, [pc, #48]	; (8005bd0 <__NVIC_SetPriority+0x4c>)
 8005b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba2:	0112      	lsls	r2, r2, #4
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005bac:	e00a      	b.n	8005bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	4908      	ldr	r1, [pc, #32]	; (8005bd4 <__NVIC_SetPriority+0x50>)
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	3b04      	subs	r3, #4
 8005bbc:	0112      	lsls	r2, r2, #4
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	761a      	strb	r2, [r3, #24]
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	e000e100 	.word	0xe000e100
 8005bd4:	e000ed00 	.word	0xe000ed00

08005bd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005bdc:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <SysTick_Handler+0x1c>)
 8005bde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005be0:	f001 fd28 	bl	8007634 <xTaskGetSchedulerState>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d001      	beq.n	8005bee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005bea:	f002 fb0d 	bl	8008208 <xPortSysTickHandler>
  }
}
 8005bee:	bf00      	nop
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	e000e010 	.word	0xe000e010

08005bf8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	f06f 0004 	mvn.w	r0, #4
 8005c02:	f7ff ffbf 	bl	8005b84 <__NVIC_SetPriority>
#endif
}
 8005c06:	bf00      	nop
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c12:	f3ef 8305 	mrs	r3, IPSR
 8005c16:	603b      	str	r3, [r7, #0]
  return(result);
 8005c18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005c1e:	f06f 0305 	mvn.w	r3, #5
 8005c22:	607b      	str	r3, [r7, #4]
 8005c24:	e00c      	b.n	8005c40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c26:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <osKernelInitialize+0x44>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d105      	bne.n	8005c3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005c2e:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <osKernelInitialize+0x44>)
 8005c30:	2201      	movs	r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	607b      	str	r3, [r7, #4]
 8005c38:	e002      	b.n	8005c40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c40:	687b      	ldr	r3, [r7, #4]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	2000021c 	.word	0x2000021c

08005c54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c5a:	f3ef 8305 	mrs	r3, IPSR
 8005c5e:	603b      	str	r3, [r7, #0]
  return(result);
 8005c60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005c66:	f06f 0305 	mvn.w	r3, #5
 8005c6a:	607b      	str	r3, [r7, #4]
 8005c6c:	e010      	b.n	8005c90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c6e:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <osKernelStart+0x48>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d109      	bne.n	8005c8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c76:	f7ff ffbf 	bl	8005bf8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c7a:	4b08      	ldr	r3, [pc, #32]	; (8005c9c <osKernelStart+0x48>)
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c80:	f001 f87c 	bl	8006d7c <vTaskStartScheduler>
      stat = osOK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	607b      	str	r3, [r7, #4]
 8005c88:	e002      	b.n	8005c90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c90:	687b      	ldr	r3, [r7, #4]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	2000021c 	.word	0x2000021c

08005ca0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08e      	sub	sp, #56	; 0x38
 8005ca4:	af04      	add	r7, sp, #16
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cb0:	f3ef 8305 	mrs	r3, IPSR
 8005cb4:	617b      	str	r3, [r7, #20]
  return(result);
 8005cb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d17e      	bne.n	8005dba <osThreadNew+0x11a>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d07b      	beq.n	8005dba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005cc2:	2380      	movs	r3, #128	; 0x80
 8005cc4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005cc6:	2318      	movs	r3, #24
 8005cc8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005cce:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d045      	beq.n	8005d66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <osThreadNew+0x48>
        name = attr->name;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <osThreadNew+0x6e>
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	2b38      	cmp	r3, #56	; 0x38
 8005d00:	d805      	bhi.n	8005d0e <osThreadNew+0x6e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <osThreadNew+0x72>
        return (NULL);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e054      	b.n	8005dbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	089b      	lsrs	r3, r3, #2
 8005d20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00e      	beq.n	8005d48 <osThreadNew+0xa8>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	2bbb      	cmp	r3, #187	; 0xbb
 8005d30:	d90a      	bls.n	8005d48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d006      	beq.n	8005d48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <osThreadNew+0xa8>
        mem = 1;
 8005d42:	2301      	movs	r3, #1
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	e010      	b.n	8005d6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10c      	bne.n	8005d6a <osThreadNew+0xca>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d108      	bne.n	8005d6a <osThreadNew+0xca>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d104      	bne.n	8005d6a <osThreadNew+0xca>
          mem = 0;
 8005d60:	2300      	movs	r3, #0
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	e001      	b.n	8005d6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d110      	bne.n	8005d92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d78:	9202      	str	r2, [sp, #8]
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6a3a      	ldr	r2, [r7, #32]
 8005d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 fe0c 	bl	80069a4 <xTaskCreateStatic>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	613b      	str	r3, [r7, #16]
 8005d90:	e013      	b.n	8005dba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d110      	bne.n	8005dba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f107 0310 	add.w	r3, r7, #16
 8005da0:	9301      	str	r3, [sp, #4]
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 fe57 	bl	8006a5e <xTaskCreate>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d001      	beq.n	8005dba <osThreadNew+0x11a>
            hTask = NULL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005dba:	693b      	ldr	r3, [r7, #16]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3728      	adds	r7, #40	; 0x28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dcc:	f3ef 8305 	mrs	r3, IPSR
 8005dd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <osDelay+0x1c>
    stat = osErrorISR;
 8005dd8:	f06f 0305 	mvn.w	r3, #5
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e007      	b.n	8005df0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 ff92 	bl	8006d14 <vTaskDelay>
    }
  }

  return (stat);
 8005df0:	68fb      	ldr	r3, [r7, #12]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4a07      	ldr	r2, [pc, #28]	; (8005e28 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	4a06      	ldr	r2, [pc, #24]	; (8005e2c <vApplicationGetIdleTaskMemory+0x30>)
 8005e12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2280      	movs	r2, #128	; 0x80
 8005e18:	601a      	str	r2, [r3, #0]
}
 8005e1a:	bf00      	nop
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	20000220 	.word	0x20000220
 8005e2c:	200002dc 	.word	0x200002dc

08005e30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4a07      	ldr	r2, [pc, #28]	; (8005e5c <vApplicationGetTimerTaskMemory+0x2c>)
 8005e40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	4a06      	ldr	r2, [pc, #24]	; (8005e60 <vApplicationGetTimerTaskMemory+0x30>)
 8005e46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e4e:	601a      	str	r2, [r3, #0]
}
 8005e50:	bf00      	nop
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	200004dc 	.word	0x200004dc
 8005e60:	20000598 	.word	0x20000598

08005e64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f103 0208 	add.w	r2, r3, #8
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f103 0208 	add.w	r2, r3, #8
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f103 0208 	add.w	r2, r3, #8
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	601a      	str	r2, [r3, #0]
}
 8005efa:	bf00      	nop
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1c:	d103      	bne.n	8005f26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	e00c      	b.n	8005f40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3308      	adds	r3, #8
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	e002      	b.n	8005f34 <vListInsert+0x2e>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d2f6      	bcs.n	8005f2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	601a      	str	r2, [r3, #0]
}
 8005f6c:	bf00      	nop
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6892      	ldr	r2, [r2, #8]
 8005f8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6852      	ldr	r2, [r2, #4]
 8005f98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d103      	bne.n	8005fac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	1e5a      	subs	r2, r3, #1
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ff6:	f002 f875 	bl	80080e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006002:	68f9      	ldr	r1, [r7, #12]
 8006004:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006006:	fb01 f303 	mul.w	r3, r1, r3
 800600a:	441a      	add	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006026:	3b01      	subs	r3, #1
 8006028:	68f9      	ldr	r1, [r7, #12]
 800602a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800602c:	fb01 f303 	mul.w	r3, r1, r3
 8006030:	441a      	add	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	22ff      	movs	r2, #255	; 0xff
 800603a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	22ff      	movs	r2, #255	; 0xff
 8006042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d114      	bne.n	8006076 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01a      	beq.n	800608a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3310      	adds	r3, #16
 8006058:	4618      	mov	r0, r3
 800605a:	f001 f929 	bl	80072b0 <xTaskRemoveFromEventList>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d012      	beq.n	800608a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006064:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <xQueueGenericReset+0xcc>)
 8006066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	e009      	b.n	800608a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	3310      	adds	r3, #16
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff fef2 	bl	8005e64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3324      	adds	r3, #36	; 0x24
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff feed 	bl	8005e64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800608a:	f002 f85b 	bl	8008144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800608e:	2301      	movs	r3, #1
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	e000ed04 	.word	0xe000ed04

0800609c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08e      	sub	sp, #56	; 0x38
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <xQueueGenericCreateStatic+0x52>
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <xQueueGenericCreateStatic+0x56>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <xQueueGenericCreateStatic+0x58>
 80060f2:	2300      	movs	r3, #0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	623b      	str	r3, [r7, #32]
}
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <xQueueGenericCreateStatic+0x7e>
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <xQueueGenericCreateStatic+0x82>
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <xQueueGenericCreateStatic+0x84>
 800611e:	2300      	movs	r3, #0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	61fb      	str	r3, [r7, #28]
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800613a:	2350      	movs	r3, #80	; 0x50
 800613c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b50      	cmp	r3, #80	; 0x50
 8006142:	d00a      	beq.n	800615a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	61bb      	str	r3, [r7, #24]
}
 8006156:	bf00      	nop
 8006158:	e7fe      	b.n	8006158 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800615a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00d      	beq.n	8006182 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800616e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	4613      	mov	r3, r2
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f805 	bl	800618c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006184:	4618      	mov	r0, r3
 8006186:	3730      	adds	r7, #48	; 0x30
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d103      	bne.n	80061a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e002      	b.n	80061ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061ba:	2101      	movs	r1, #1
 80061bc:	69b8      	ldr	r0, [r7, #24]
 80061be:	f7ff ff05 	bl	8005fcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80061ca:	bf00      	nop
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08e      	sub	sp, #56	; 0x38
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061e2:	2300      	movs	r3, #0
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <xQueueGenericSend+0x32>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006202:	bf00      	nop
 8006204:	e7fe      	b.n	8006204 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d103      	bne.n	8006214 <xQueueGenericSend+0x40>
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <xQueueGenericSend+0x44>
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <xQueueGenericSend+0x46>
 8006218:	2300      	movs	r3, #0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <xQueueGenericSend+0x60>
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006230:	bf00      	nop
 8006232:	e7fe      	b.n	8006232 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d103      	bne.n	8006242 <xQueueGenericSend+0x6e>
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <xQueueGenericSend+0x72>
 8006242:	2301      	movs	r3, #1
 8006244:	e000      	b.n	8006248 <xQueueGenericSend+0x74>
 8006246:	2300      	movs	r3, #0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <xQueueGenericSend+0x8e>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	623b      	str	r3, [r7, #32]
}
 800625e:	bf00      	nop
 8006260:	e7fe      	b.n	8006260 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006262:	f001 f9e7 	bl	8007634 <xTaskGetSchedulerState>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d102      	bne.n	8006272 <xQueueGenericSend+0x9e>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <xQueueGenericSend+0xa2>
 8006272:	2301      	movs	r3, #1
 8006274:	e000      	b.n	8006278 <xQueueGenericSend+0xa4>
 8006276:	2300      	movs	r3, #0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <xQueueGenericSend+0xbe>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	61fb      	str	r3, [r7, #28]
}
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006292:	f001 ff27 	bl	80080e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629e:	429a      	cmp	r2, r3
 80062a0:	d302      	bcc.n	80062a8 <xQueueGenericSend+0xd4>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d129      	bne.n	80062fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	68b9      	ldr	r1, [r7, #8]
 80062ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062ae:	f000 fa0b 	bl	80066c8 <prvCopyDataToQueue>
 80062b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d010      	beq.n	80062de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	3324      	adds	r3, #36	; 0x24
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 fff5 	bl	80072b0 <xTaskRemoveFromEventList>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d013      	beq.n	80062f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80062cc:	4b3f      	ldr	r3, [pc, #252]	; (80063cc <xQueueGenericSend+0x1f8>)
 80062ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	e00a      	b.n	80062f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d007      	beq.n	80062f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062e4:	4b39      	ldr	r3, [pc, #228]	; (80063cc <xQueueGenericSend+0x1f8>)
 80062e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062f4:	f001 ff26 	bl	8008144 <vPortExitCritical>
				return pdPASS;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e063      	b.n	80063c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d103      	bne.n	800630a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006302:	f001 ff1f 	bl	8008144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006306:	2300      	movs	r3, #0
 8006308:	e05c      	b.n	80063c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800630a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800630c:	2b00      	cmp	r3, #0
 800630e:	d106      	bne.n	800631e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006310:	f107 0314 	add.w	r3, r7, #20
 8006314:	4618      	mov	r0, r3
 8006316:	f001 f82f 	bl	8007378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800631a:	2301      	movs	r3, #1
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800631e:	f001 ff11 	bl	8008144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006322:	f000 fd9b 	bl	8006e5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006326:	f001 fedd 	bl	80080e4 <vPortEnterCritical>
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006330:	b25b      	sxtb	r3, r3
 8006332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006336:	d103      	bne.n	8006340 <xQueueGenericSend+0x16c>
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006346:	b25b      	sxtb	r3, r3
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634c:	d103      	bne.n	8006356 <xQueueGenericSend+0x182>
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006356:	f001 fef5 	bl	8008144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800635a:	1d3a      	adds	r2, r7, #4
 800635c:	f107 0314 	add.w	r3, r7, #20
 8006360:	4611      	mov	r1, r2
 8006362:	4618      	mov	r0, r3
 8006364:	f001 f81e 	bl	80073a4 <xTaskCheckForTimeOut>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d124      	bne.n	80063b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800636e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006370:	f000 faa2 	bl	80068b8 <prvIsQueueFull>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d018      	beq.n	80063ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	3310      	adds	r3, #16
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	4611      	mov	r1, r2
 8006382:	4618      	mov	r0, r3
 8006384:	f000 ff44 	bl	8007210 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800638a:	f000 fa2d 	bl	80067e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800638e:	f000 fd73 	bl	8006e78 <xTaskResumeAll>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	f47f af7c 	bne.w	8006292 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800639a:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <xQueueGenericSend+0x1f8>)
 800639c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	e772      	b.n	8006292 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80063ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ae:	f000 fa1b 	bl	80067e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063b2:	f000 fd61 	bl	8006e78 <xTaskResumeAll>
 80063b6:	e76c      	b.n	8006292 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80063b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ba:	f000 fa15 	bl	80067e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063be:	f000 fd5b 	bl	8006e78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80063c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3738      	adds	r7, #56	; 0x38
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	e000ed04 	.word	0xe000ed04

080063d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b090      	sub	sp, #64	; 0x40
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80063e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10a      	bne.n	80063fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80063e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063fa:	bf00      	nop
 80063fc:	e7fe      	b.n	80063fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d103      	bne.n	800640c <xQueueGenericSendFromISR+0x3c>
 8006404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <xQueueGenericSendFromISR+0x40>
 800640c:	2301      	movs	r3, #1
 800640e:	e000      	b.n	8006412 <xQueueGenericSendFromISR+0x42>
 8006410:	2300      	movs	r3, #0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10a      	bne.n	800642c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006428:	bf00      	nop
 800642a:	e7fe      	b.n	800642a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b02      	cmp	r3, #2
 8006430:	d103      	bne.n	800643a <xQueueGenericSendFromISR+0x6a>
 8006432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	2b01      	cmp	r3, #1
 8006438:	d101      	bne.n	800643e <xQueueGenericSendFromISR+0x6e>
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <xQueueGenericSendFromISR+0x70>
 800643e:	2300      	movs	r3, #0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	623b      	str	r3, [r7, #32]
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800645a:	f001 ff25 	bl	80082a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800645e:	f3ef 8211 	mrs	r2, BASEPRI
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	61fa      	str	r2, [r7, #28]
 8006474:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006476:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006482:	429a      	cmp	r2, r3
 8006484:	d302      	bcc.n	800648c <xQueueGenericSendFromISR+0xbc>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b02      	cmp	r3, #2
 800648a:	d12f      	bne.n	80064ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80064a2:	f000 f911 	bl	80066c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80064a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80064aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ae:	d112      	bne.n	80064d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d016      	beq.n	80064e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ba:	3324      	adds	r3, #36	; 0x24
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 fef7 	bl	80072b0 <xTaskRemoveFromEventList>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00e      	beq.n	80064e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00b      	beq.n	80064e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	e007      	b.n	80064e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064da:	3301      	adds	r3, #1
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	b25a      	sxtb	r2, r3
 80064e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80064e6:	2301      	movs	r3, #1
 80064e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80064ea:	e001      	b.n	80064f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064ec:	2300      	movs	r3, #0
 80064ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3740      	adds	r7, #64	; 0x40
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
	...

08006508 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08c      	sub	sp, #48	; 0x30
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006514:	2300      	movs	r3, #0
 8006516:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10a      	bne.n	8006538 <xQueueReceive+0x30>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	623b      	str	r3, [r7, #32]
}
 8006534:	bf00      	nop
 8006536:	e7fe      	b.n	8006536 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d103      	bne.n	8006546 <xQueueReceive+0x3e>
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <xQueueReceive+0x42>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <xQueueReceive+0x44>
 800654a:	2300      	movs	r3, #0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10a      	bne.n	8006566 <xQueueReceive+0x5e>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	61fb      	str	r3, [r7, #28]
}
 8006562:	bf00      	nop
 8006564:	e7fe      	b.n	8006564 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006566:	f001 f865 	bl	8007634 <xTaskGetSchedulerState>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d102      	bne.n	8006576 <xQueueReceive+0x6e>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <xQueueReceive+0x72>
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <xQueueReceive+0x74>
 800657a:	2300      	movs	r3, #0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10a      	bne.n	8006596 <xQueueReceive+0x8e>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	61bb      	str	r3, [r7, #24]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006596:	f001 fda5 	bl	80080e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d01f      	beq.n	80065e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065aa:	f000 f8f7 	bl	800679c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	1e5a      	subs	r2, r3, #1
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00f      	beq.n	80065de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	3310      	adds	r3, #16
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fe74 	bl	80072b0 <xTaskRemoveFromEventList>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d007      	beq.n	80065de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065ce:	4b3d      	ldr	r3, [pc, #244]	; (80066c4 <xQueueReceive+0x1bc>)
 80065d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065de:	f001 fdb1 	bl	8008144 <vPortExitCritical>
				return pdPASS;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e069      	b.n	80066ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d103      	bne.n	80065f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065ec:	f001 fdaa 	bl	8008144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065f0:	2300      	movs	r3, #0
 80065f2:	e062      	b.n	80066ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d106      	bne.n	8006608 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065fa:	f107 0310 	add.w	r3, r7, #16
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 feba 	bl	8007378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006604:	2301      	movs	r3, #1
 8006606:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006608:	f001 fd9c 	bl	8008144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800660c:	f000 fc26 	bl	8006e5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006610:	f001 fd68 	bl	80080e4 <vPortEnterCritical>
 8006614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006616:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800661a:	b25b      	sxtb	r3, r3
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d103      	bne.n	800662a <xQueueReceive+0x122>
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006630:	b25b      	sxtb	r3, r3
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d103      	bne.n	8006640 <xQueueReceive+0x138>
 8006638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006640:	f001 fd80 	bl	8008144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006644:	1d3a      	adds	r2, r7, #4
 8006646:	f107 0310 	add.w	r3, r7, #16
 800664a:	4611      	mov	r1, r2
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fea9 	bl	80073a4 <xTaskCheckForTimeOut>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d123      	bne.n	80066a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800665a:	f000 f917 	bl	800688c <prvIsQueueEmpty>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d017      	beq.n	8006694 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006666:	3324      	adds	r3, #36	; 0x24
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	4611      	mov	r1, r2
 800666c:	4618      	mov	r0, r3
 800666e:	f000 fdcf 	bl	8007210 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006674:	f000 f8b8 	bl	80067e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006678:	f000 fbfe 	bl	8006e78 <xTaskResumeAll>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d189      	bne.n	8006596 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006682:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <xQueueReceive+0x1bc>)
 8006684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	e780      	b.n	8006596 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006696:	f000 f8a7 	bl	80067e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800669a:	f000 fbed 	bl	8006e78 <xTaskResumeAll>
 800669e:	e77a      	b.n	8006596 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80066a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066a2:	f000 f8a1 	bl	80067e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066a6:	f000 fbe7 	bl	8006e78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ac:	f000 f8ee 	bl	800688c <prvIsQueueEmpty>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f43f af6f 	beq.w	8006596 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3730      	adds	r7, #48	; 0x30
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	e000ed04 	.word	0xe000ed04

080066c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066d4:	2300      	movs	r3, #0
 80066d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d14d      	bne.n	800678a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 ffbc 	bl	8007670 <xTaskPriorityDisinherit>
 80066f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	609a      	str	r2, [r3, #8]
 8006700:	e043      	b.n	800678a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d119      	bne.n	800673c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6858      	ldr	r0, [r3, #4]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	461a      	mov	r2, r3
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	f002 f915 	bl	8008942 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	441a      	add	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	429a      	cmp	r2, r3
 8006730:	d32b      	bcc.n	800678a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	605a      	str	r2, [r3, #4]
 800673a:	e026      	b.n	800678a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	68d8      	ldr	r0, [r3, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006744:	461a      	mov	r2, r3
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	f002 f8fb 	bl	8008942 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	425b      	negs	r3, r3
 8006756:	441a      	add	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d207      	bcs.n	8006778 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	425b      	negs	r3, r3
 8006772:	441a      	add	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d105      	bne.n	800678a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	3b01      	subs	r3, #1
 8006788:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006792:	697b      	ldr	r3, [r7, #20]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d018      	beq.n	80067e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	441a      	add	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d303      	bcc.n	80067d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68d9      	ldr	r1, [r3, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d8:	461a      	mov	r2, r3
 80067da:	6838      	ldr	r0, [r7, #0]
 80067dc:	f002 f8b1 	bl	8008942 <memcpy>
	}
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067f0:	f001 fc78 	bl	80080e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067fc:	e011      	b.n	8006822 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	2b00      	cmp	r3, #0
 8006804:	d012      	beq.n	800682c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	3324      	adds	r3, #36	; 0x24
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fd50 	bl	80072b0 <xTaskRemoveFromEventList>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006816:	f000 fe27 	bl	8007468 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	3b01      	subs	r3, #1
 800681e:	b2db      	uxtb	r3, r3
 8006820:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006826:	2b00      	cmp	r3, #0
 8006828:	dce9      	bgt.n	80067fe <prvUnlockQueue+0x16>
 800682a:	e000      	b.n	800682e <prvUnlockQueue+0x46>
					break;
 800682c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	22ff      	movs	r2, #255	; 0xff
 8006832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006836:	f001 fc85 	bl	8008144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800683a:	f001 fc53 	bl	80080e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006844:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006846:	e011      	b.n	800686c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d012      	beq.n	8006876 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	3310      	adds	r3, #16
 8006854:	4618      	mov	r0, r3
 8006856:	f000 fd2b 	bl	80072b0 <xTaskRemoveFromEventList>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006860:	f000 fe02 	bl	8007468 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006864:	7bbb      	ldrb	r3, [r7, #14]
 8006866:	3b01      	subs	r3, #1
 8006868:	b2db      	uxtb	r3, r3
 800686a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800686c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006870:	2b00      	cmp	r3, #0
 8006872:	dce9      	bgt.n	8006848 <prvUnlockQueue+0x60>
 8006874:	e000      	b.n	8006878 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006876:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	22ff      	movs	r2, #255	; 0xff
 800687c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006880:	f001 fc60 	bl	8008144 <vPortExitCritical>
}
 8006884:	bf00      	nop
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006894:	f001 fc26 	bl	80080e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689c:	2b00      	cmp	r3, #0
 800689e:	d102      	bne.n	80068a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068a0:	2301      	movs	r3, #1
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	e001      	b.n	80068aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068aa:	f001 fc4b 	bl	8008144 <vPortExitCritical>

	return xReturn;
 80068ae:	68fb      	ldr	r3, [r7, #12]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068c0:	f001 fc10 	bl	80080e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d102      	bne.n	80068d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068d0:	2301      	movs	r3, #1
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	e001      	b.n	80068da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068da:	f001 fc33 	bl	8008144 <vPortExitCritical>

	return xReturn;
 80068de:	68fb      	ldr	r3, [r7, #12]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068f2:	2300      	movs	r3, #0
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	e014      	b.n	8006922 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068f8:	4a0f      	ldr	r2, [pc, #60]	; (8006938 <vQueueAddToRegistry+0x50>)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10b      	bne.n	800691c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006904:	490c      	ldr	r1, [pc, #48]	; (8006938 <vQueueAddToRegistry+0x50>)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800690e:	4a0a      	ldr	r2, [pc, #40]	; (8006938 <vQueueAddToRegistry+0x50>)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	4413      	add	r3, r2
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800691a:	e006      	b.n	800692a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3301      	adds	r3, #1
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b07      	cmp	r3, #7
 8006926:	d9e7      	bls.n	80068f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	200050d4 	.word	0x200050d4

0800693c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800694c:	f001 fbca 	bl	80080e4 <vPortEnterCritical>
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006956:	b25b      	sxtb	r3, r3
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695c:	d103      	bne.n	8006966 <vQueueWaitForMessageRestricted+0x2a>
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800696c:	b25b      	sxtb	r3, r3
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006972:	d103      	bne.n	800697c <vQueueWaitForMessageRestricted+0x40>
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800697c:	f001 fbe2 	bl	8008144 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	3324      	adds	r3, #36	; 0x24
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	68b9      	ldr	r1, [r7, #8]
 8006990:	4618      	mov	r0, r3
 8006992:	f000 fc61 	bl	8007258 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006996:	6978      	ldr	r0, [r7, #20]
 8006998:	f7ff ff26 	bl	80067e8 <prvUnlockQueue>
	}
 800699c:	bf00      	nop
 800699e:	3718      	adds	r7, #24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08e      	sub	sp, #56	; 0x38
 80069a8:	af04      	add	r7, sp, #16
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	623b      	str	r3, [r7, #32]
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <xTaskCreateStatic+0x46>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	61fb      	str	r3, [r7, #28]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069ea:	23bc      	movs	r3, #188	; 0xbc
 80069ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	2bbc      	cmp	r3, #188	; 0xbc
 80069f2:	d00a      	beq.n	8006a0a <xTaskCreateStatic+0x66>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	61bb      	str	r3, [r7, #24]
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01e      	beq.n	8006a50 <xTaskCreateStatic+0xac>
 8006a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01b      	beq.n	8006a50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	9303      	str	r3, [sp, #12]
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	9302      	str	r3, [sp, #8]
 8006a32:	f107 0314 	add.w	r3, r7, #20
 8006a36:	9301      	str	r3, [sp, #4]
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f850 	bl	8006ae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a4a:	f000 f8f3 	bl	8006c34 <prvAddNewTaskToReadyList>
 8006a4e:	e001      	b.n	8006a54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a50:	2300      	movs	r3, #0
 8006a52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a54:	697b      	ldr	r3, [r7, #20]
	}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3728      	adds	r7, #40	; 0x28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b08c      	sub	sp, #48	; 0x30
 8006a62:	af04      	add	r7, sp, #16
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	603b      	str	r3, [r7, #0]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a6e:	88fb      	ldrh	r3, [r7, #6]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4618      	mov	r0, r3
 8006a74:	f001 fc58 	bl	8008328 <pvPortMalloc>
 8006a78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00e      	beq.n	8006a9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a80:	20bc      	movs	r0, #188	; 0xbc
 8006a82:	f001 fc51 	bl	8008328 <pvPortMalloc>
 8006a86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	631a      	str	r2, [r3, #48]	; 0x30
 8006a94:	e005      	b.n	8006aa2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a96:	6978      	ldr	r0, [r7, #20]
 8006a98:	f001 fd12 	bl	80084c0 <vPortFree>
 8006a9c:	e001      	b.n	8006aa2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d017      	beq.n	8006ad8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ab0:	88fa      	ldrh	r2, [r7, #6]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	9303      	str	r3, [sp, #12]
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	9302      	str	r3, [sp, #8]
 8006aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68b9      	ldr	r1, [r7, #8]
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 f80e 	bl	8006ae8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006acc:	69f8      	ldr	r0, [r7, #28]
 8006ace:	f000 f8b1 	bl	8006c34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	61bb      	str	r3, [r7, #24]
 8006ad6:	e002      	b.n	8006ade <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8006adc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ade:	69bb      	ldr	r3, [r7, #24]
	}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3720      	adds	r7, #32
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	461a      	mov	r2, r3
 8006b00:	21a5      	movs	r1, #165	; 0xa5
 8006b02:	f001 ff2c 	bl	800895e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b10:	3b01      	subs	r3, #1
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	f023 0307 	bic.w	r3, r3, #7
 8006b1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	617b      	str	r3, [r7, #20]
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01f      	beq.n	8006b86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b46:	2300      	movs	r3, #0
 8006b48:	61fb      	str	r3, [r7, #28]
 8006b4a:	e012      	b.n	8006b72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	7819      	ldrb	r1, [r3, #0]
 8006b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	3334      	adds	r3, #52	; 0x34
 8006b5c:	460a      	mov	r2, r1
 8006b5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d006      	beq.n	8006b7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	61fb      	str	r3, [r7, #28]
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	2b0f      	cmp	r3, #15
 8006b76:	d9e9      	bls.n	8006b4c <prvInitialiseNewTask+0x64>
 8006b78:	e000      	b.n	8006b7c <prvInitialiseNewTask+0x94>
			{
				break;
 8006b7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b84:	e003      	b.n	8006b8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	2b37      	cmp	r3, #55	; 0x37
 8006b92:	d901      	bls.n	8006b98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b94:	2337      	movs	r3, #55	; 0x37
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	3304      	adds	r3, #4
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff f978 	bl	8005ea4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	3318      	adds	r3, #24
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff f973 	bl	8005ea4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	3354      	adds	r3, #84	; 0x54
 8006be8:	2260      	movs	r2, #96	; 0x60
 8006bea:	2100      	movs	r1, #0
 8006bec:	4618      	mov	r0, r3
 8006bee:	f001 feb6 	bl	800895e <memset>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	4a0c      	ldr	r2, [pc, #48]	; (8006c28 <prvInitialiseNewTask+0x140>)
 8006bf6:	659a      	str	r2, [r3, #88]	; 0x58
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	4a0c      	ldr	r2, [pc, #48]	; (8006c2c <prvInitialiseNewTask+0x144>)
 8006bfc:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	4a0b      	ldr	r2, [pc, #44]	; (8006c30 <prvInitialiseNewTask+0x148>)
 8006c02:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	68f9      	ldr	r1, [r7, #12]
 8006c08:	69b8      	ldr	r0, [r7, #24]
 8006c0a:	f001 f941 	bl	8007e90 <pxPortInitialiseStack>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c20:	bf00      	nop
 8006c22:	3720      	adds	r7, #32
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	0800b904 	.word	0x0800b904
 8006c2c:	0800b924 	.word	0x0800b924
 8006c30:	0800b8e4 	.word	0x0800b8e4

08006c34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c3c:	f001 fa52 	bl	80080e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c40:	4b2d      	ldr	r3, [pc, #180]	; (8006cf8 <prvAddNewTaskToReadyList+0xc4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3301      	adds	r3, #1
 8006c46:	4a2c      	ldr	r2, [pc, #176]	; (8006cf8 <prvAddNewTaskToReadyList+0xc4>)
 8006c48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c4a:	4b2c      	ldr	r3, [pc, #176]	; (8006cfc <prvAddNewTaskToReadyList+0xc8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d109      	bne.n	8006c66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c52:	4a2a      	ldr	r2, [pc, #168]	; (8006cfc <prvAddNewTaskToReadyList+0xc8>)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c58:	4b27      	ldr	r3, [pc, #156]	; (8006cf8 <prvAddNewTaskToReadyList+0xc4>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d110      	bne.n	8006c82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c60:	f000 fc26 	bl	80074b0 <prvInitialiseTaskLists>
 8006c64:	e00d      	b.n	8006c82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c66:	4b26      	ldr	r3, [pc, #152]	; (8006d00 <prvAddNewTaskToReadyList+0xcc>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d109      	bne.n	8006c82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c6e:	4b23      	ldr	r3, [pc, #140]	; (8006cfc <prvAddNewTaskToReadyList+0xc8>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d802      	bhi.n	8006c82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c7c:	4a1f      	ldr	r2, [pc, #124]	; (8006cfc <prvAddNewTaskToReadyList+0xc8>)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c82:	4b20      	ldr	r3, [pc, #128]	; (8006d04 <prvAddNewTaskToReadyList+0xd0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3301      	adds	r3, #1
 8006c88:	4a1e      	ldr	r2, [pc, #120]	; (8006d04 <prvAddNewTaskToReadyList+0xd0>)
 8006c8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c8c:	4b1d      	ldr	r3, [pc, #116]	; (8006d04 <prvAddNewTaskToReadyList+0xd0>)
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c98:	4b1b      	ldr	r3, [pc, #108]	; (8006d08 <prvAddNewTaskToReadyList+0xd4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d903      	bls.n	8006ca8 <prvAddNewTaskToReadyList+0x74>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	4a18      	ldr	r2, [pc, #96]	; (8006d08 <prvAddNewTaskToReadyList+0xd4>)
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cac:	4613      	mov	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4a15      	ldr	r2, [pc, #84]	; (8006d0c <prvAddNewTaskToReadyList+0xd8>)
 8006cb6:	441a      	add	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	3304      	adds	r3, #4
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	f7ff f8fd 	bl	8005ebe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cc4:	f001 fa3e 	bl	8008144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cc8:	4b0d      	ldr	r3, [pc, #52]	; (8006d00 <prvAddNewTaskToReadyList+0xcc>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00e      	beq.n	8006cee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <prvAddNewTaskToReadyList+0xc8>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d207      	bcs.n	8006cee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cde:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <prvAddNewTaskToReadyList+0xdc>)
 8006ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cee:	bf00      	nop
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20000e6c 	.word	0x20000e6c
 8006cfc:	20000998 	.word	0x20000998
 8006d00:	20000e78 	.word	0x20000e78
 8006d04:	20000e88 	.word	0x20000e88
 8006d08:	20000e74 	.word	0x20000e74
 8006d0c:	2000099c 	.word	0x2000099c
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d017      	beq.n	8006d56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d26:	4b13      	ldr	r3, [pc, #76]	; (8006d74 <vTaskDelay+0x60>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <vTaskDelay+0x30>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	60bb      	str	r3, [r7, #8]
}
 8006d40:	bf00      	nop
 8006d42:	e7fe      	b.n	8006d42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d44:	f000 f88a 	bl	8006e5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d48:	2100      	movs	r1, #0
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fcfe 	bl	800774c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d50:	f000 f892 	bl	8006e78 <xTaskResumeAll>
 8006d54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d107      	bne.n	8006d6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d5c:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <vTaskDelay+0x64>)
 8006d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d6c:	bf00      	nop
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20000e94 	.word	0x20000e94
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08a      	sub	sp, #40	; 0x28
 8006d80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d8a:	463a      	mov	r2, r7
 8006d8c:	1d39      	adds	r1, r7, #4
 8006d8e:	f107 0308 	add.w	r3, r7, #8
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff f832 	bl	8005dfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	9202      	str	r2, [sp, #8]
 8006da0:	9301      	str	r3, [sp, #4]
 8006da2:	2300      	movs	r3, #0
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	2300      	movs	r3, #0
 8006da8:	460a      	mov	r2, r1
 8006daa:	4924      	ldr	r1, [pc, #144]	; (8006e3c <vTaskStartScheduler+0xc0>)
 8006dac:	4824      	ldr	r0, [pc, #144]	; (8006e40 <vTaskStartScheduler+0xc4>)
 8006dae:	f7ff fdf9 	bl	80069a4 <xTaskCreateStatic>
 8006db2:	4603      	mov	r3, r0
 8006db4:	4a23      	ldr	r2, [pc, #140]	; (8006e44 <vTaskStartScheduler+0xc8>)
 8006db6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006db8:	4b22      	ldr	r3, [pc, #136]	; (8006e44 <vTaskStartScheduler+0xc8>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	e001      	b.n	8006dca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d102      	bne.n	8006dd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006dd0:	f000 fd10 	bl	80077f4 <xTimerCreateTimerTask>
 8006dd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d11b      	bne.n	8006e14 <vTaskStartScheduler+0x98>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	613b      	str	r3, [r7, #16]
}
 8006dee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006df0:	4b15      	ldr	r3, [pc, #84]	; (8006e48 <vTaskStartScheduler+0xcc>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3354      	adds	r3, #84	; 0x54
 8006df6:	4a15      	ldr	r2, [pc, #84]	; (8006e4c <vTaskStartScheduler+0xd0>)
 8006df8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dfa:	4b15      	ldr	r3, [pc, #84]	; (8006e50 <vTaskStartScheduler+0xd4>)
 8006dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8006e00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e02:	4b14      	ldr	r3, [pc, #80]	; (8006e54 <vTaskStartScheduler+0xd8>)
 8006e04:	2201      	movs	r2, #1
 8006e06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e08:	4b13      	ldr	r3, [pc, #76]	; (8006e58 <vTaskStartScheduler+0xdc>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e0e:	f001 f8c7 	bl	8007fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e12:	e00e      	b.n	8006e32 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1a:	d10a      	bne.n	8006e32 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	60fb      	str	r3, [r7, #12]
}
 8006e2e:	bf00      	nop
 8006e30:	e7fe      	b.n	8006e30 <vTaskStartScheduler+0xb4>
}
 8006e32:	bf00      	nop
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	0800b848 	.word	0x0800b848
 8006e40:	08007481 	.word	0x08007481
 8006e44:	20000e90 	.word	0x20000e90
 8006e48:	20000998 	.word	0x20000998
 8006e4c:	20000018 	.word	0x20000018
 8006e50:	20000e8c 	.word	0x20000e8c
 8006e54:	20000e78 	.word	0x20000e78
 8006e58:	20000e70 	.word	0x20000e70

08006e5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e60:	4b04      	ldr	r3, [pc, #16]	; (8006e74 <vTaskSuspendAll+0x18>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	4a03      	ldr	r2, [pc, #12]	; (8006e74 <vTaskSuspendAll+0x18>)
 8006e68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e6a:	bf00      	nop
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr
 8006e74:	20000e94 	.word	0x20000e94

08006e78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e82:	2300      	movs	r3, #0
 8006e84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e86:	4b42      	ldr	r3, [pc, #264]	; (8006f90 <xTaskResumeAll+0x118>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	603b      	str	r3, [r7, #0]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ea4:	f001 f91e 	bl	80080e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ea8:	4b39      	ldr	r3, [pc, #228]	; (8006f90 <xTaskResumeAll+0x118>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	4a38      	ldr	r2, [pc, #224]	; (8006f90 <xTaskResumeAll+0x118>)
 8006eb0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eb2:	4b37      	ldr	r3, [pc, #220]	; (8006f90 <xTaskResumeAll+0x118>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d162      	bne.n	8006f80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eba:	4b36      	ldr	r3, [pc, #216]	; (8006f94 <xTaskResumeAll+0x11c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d05e      	beq.n	8006f80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ec2:	e02f      	b.n	8006f24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec4:	4b34      	ldr	r3, [pc, #208]	; (8006f98 <xTaskResumeAll+0x120>)
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3318      	adds	r3, #24
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff f851 	bl	8005f78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7ff f84c 	bl	8005f78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee4:	4b2d      	ldr	r3, [pc, #180]	; (8006f9c <xTaskResumeAll+0x124>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d903      	bls.n	8006ef4 <xTaskResumeAll+0x7c>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	4a2a      	ldr	r2, [pc, #168]	; (8006f9c <xTaskResumeAll+0x124>)
 8006ef2:	6013      	str	r3, [r2, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef8:	4613      	mov	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4a27      	ldr	r2, [pc, #156]	; (8006fa0 <xTaskResumeAll+0x128>)
 8006f02:	441a      	add	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	f7fe ffd7 	bl	8005ebe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f14:	4b23      	ldr	r3, [pc, #140]	; (8006fa4 <xTaskResumeAll+0x12c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d302      	bcc.n	8006f24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f1e:	4b22      	ldr	r3, [pc, #136]	; (8006fa8 <xTaskResumeAll+0x130>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f24:	4b1c      	ldr	r3, [pc, #112]	; (8006f98 <xTaskResumeAll+0x120>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1cb      	bne.n	8006ec4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f32:	f000 fb5f 	bl	80075f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f36:	4b1d      	ldr	r3, [pc, #116]	; (8006fac <xTaskResumeAll+0x134>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d010      	beq.n	8006f64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f42:	f000 f847 	bl	8006fd4 <xTaskIncrementTick>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f4c:	4b16      	ldr	r3, [pc, #88]	; (8006fa8 <xTaskResumeAll+0x130>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1f1      	bne.n	8006f42 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f5e:	4b13      	ldr	r3, [pc, #76]	; (8006fac <xTaskResumeAll+0x134>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f64:	4b10      	ldr	r3, [pc, #64]	; (8006fa8 <xTaskResumeAll+0x130>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d009      	beq.n	8006f80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f70:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <xTaskResumeAll+0x138>)
 8006f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f80:	f001 f8e0 	bl	8008144 <vPortExitCritical>

	return xAlreadyYielded;
 8006f84:	68bb      	ldr	r3, [r7, #8]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000e94 	.word	0x20000e94
 8006f94:	20000e6c 	.word	0x20000e6c
 8006f98:	20000e2c 	.word	0x20000e2c
 8006f9c:	20000e74 	.word	0x20000e74
 8006fa0:	2000099c 	.word	0x2000099c
 8006fa4:	20000998 	.word	0x20000998
 8006fa8:	20000e80 	.word	0x20000e80
 8006fac:	20000e7c 	.word	0x20000e7c
 8006fb0:	e000ed04 	.word	0xe000ed04

08006fb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006fba:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <xTaskGetTickCount+0x1c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fc0:	687b      	ldr	r3, [r7, #4]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	20000e70 	.word	0x20000e70

08006fd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fde:	4b4f      	ldr	r3, [pc, #316]	; (800711c <xTaskIncrementTick+0x148>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f040 808f 	bne.w	8007106 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fe8:	4b4d      	ldr	r3, [pc, #308]	; (8007120 <xTaskIncrementTick+0x14c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3301      	adds	r3, #1
 8006fee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ff0:	4a4b      	ldr	r2, [pc, #300]	; (8007120 <xTaskIncrementTick+0x14c>)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d120      	bne.n	800703e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ffc:	4b49      	ldr	r3, [pc, #292]	; (8007124 <xTaskIncrementTick+0x150>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <xTaskIncrementTick+0x48>
	__asm volatile
 8007006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	603b      	str	r3, [r7, #0]
}
 8007018:	bf00      	nop
 800701a:	e7fe      	b.n	800701a <xTaskIncrementTick+0x46>
 800701c:	4b41      	ldr	r3, [pc, #260]	; (8007124 <xTaskIncrementTick+0x150>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	4b41      	ldr	r3, [pc, #260]	; (8007128 <xTaskIncrementTick+0x154>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a3f      	ldr	r2, [pc, #252]	; (8007124 <xTaskIncrementTick+0x150>)
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	4a3f      	ldr	r2, [pc, #252]	; (8007128 <xTaskIncrementTick+0x154>)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	4b3e      	ldr	r3, [pc, #248]	; (800712c <xTaskIncrementTick+0x158>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3301      	adds	r3, #1
 8007036:	4a3d      	ldr	r2, [pc, #244]	; (800712c <xTaskIncrementTick+0x158>)
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	f000 fadb 	bl	80075f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800703e:	4b3c      	ldr	r3, [pc, #240]	; (8007130 <xTaskIncrementTick+0x15c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	429a      	cmp	r2, r3
 8007046:	d349      	bcc.n	80070dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007048:	4b36      	ldr	r3, [pc, #216]	; (8007124 <xTaskIncrementTick+0x150>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d104      	bne.n	800705c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007052:	4b37      	ldr	r3, [pc, #220]	; (8007130 <xTaskIncrementTick+0x15c>)
 8007054:	f04f 32ff 	mov.w	r2, #4294967295
 8007058:	601a      	str	r2, [r3, #0]
					break;
 800705a:	e03f      	b.n	80070dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800705c:	4b31      	ldr	r3, [pc, #196]	; (8007124 <xTaskIncrementTick+0x150>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	429a      	cmp	r2, r3
 8007072:	d203      	bcs.n	800707c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007074:	4a2e      	ldr	r2, [pc, #184]	; (8007130 <xTaskIncrementTick+0x15c>)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800707a:	e02f      	b.n	80070dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	3304      	adds	r3, #4
 8007080:	4618      	mov	r0, r3
 8007082:	f7fe ff79 	bl	8005f78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708a:	2b00      	cmp	r3, #0
 800708c:	d004      	beq.n	8007098 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	3318      	adds	r3, #24
 8007092:	4618      	mov	r0, r3
 8007094:	f7fe ff70 	bl	8005f78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709c:	4b25      	ldr	r3, [pc, #148]	; (8007134 <xTaskIncrementTick+0x160>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d903      	bls.n	80070ac <xTaskIncrementTick+0xd8>
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	4a22      	ldr	r2, [pc, #136]	; (8007134 <xTaskIncrementTick+0x160>)
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b0:	4613      	mov	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4a1f      	ldr	r2, [pc, #124]	; (8007138 <xTaskIncrementTick+0x164>)
 80070ba:	441a      	add	r2, r3
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	3304      	adds	r3, #4
 80070c0:	4619      	mov	r1, r3
 80070c2:	4610      	mov	r0, r2
 80070c4:	f7fe fefb 	bl	8005ebe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070cc:	4b1b      	ldr	r3, [pc, #108]	; (800713c <xTaskIncrementTick+0x168>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d3b8      	bcc.n	8007048 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80070d6:	2301      	movs	r3, #1
 80070d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070da:	e7b5      	b.n	8007048 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070dc:	4b17      	ldr	r3, [pc, #92]	; (800713c <xTaskIncrementTick+0x168>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e2:	4915      	ldr	r1, [pc, #84]	; (8007138 <xTaskIncrementTick+0x164>)
 80070e4:	4613      	mov	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	440b      	add	r3, r1
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d901      	bls.n	80070f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80070f4:	2301      	movs	r3, #1
 80070f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070f8:	4b11      	ldr	r3, [pc, #68]	; (8007140 <xTaskIncrementTick+0x16c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d007      	beq.n	8007110 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007100:	2301      	movs	r3, #1
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	e004      	b.n	8007110 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007106:	4b0f      	ldr	r3, [pc, #60]	; (8007144 <xTaskIncrementTick+0x170>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3301      	adds	r3, #1
 800710c:	4a0d      	ldr	r2, [pc, #52]	; (8007144 <xTaskIncrementTick+0x170>)
 800710e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007110:	697b      	ldr	r3, [r7, #20]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20000e94 	.word	0x20000e94
 8007120:	20000e70 	.word	0x20000e70
 8007124:	20000e24 	.word	0x20000e24
 8007128:	20000e28 	.word	0x20000e28
 800712c:	20000e84 	.word	0x20000e84
 8007130:	20000e8c 	.word	0x20000e8c
 8007134:	20000e74 	.word	0x20000e74
 8007138:	2000099c 	.word	0x2000099c
 800713c:	20000998 	.word	0x20000998
 8007140:	20000e80 	.word	0x20000e80
 8007144:	20000e7c 	.word	0x20000e7c

08007148 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800714e:	4b2a      	ldr	r3, [pc, #168]	; (80071f8 <vTaskSwitchContext+0xb0>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007156:	4b29      	ldr	r3, [pc, #164]	; (80071fc <vTaskSwitchContext+0xb4>)
 8007158:	2201      	movs	r2, #1
 800715a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800715c:	e046      	b.n	80071ec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800715e:	4b27      	ldr	r3, [pc, #156]	; (80071fc <vTaskSwitchContext+0xb4>)
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007164:	4b26      	ldr	r3, [pc, #152]	; (8007200 <vTaskSwitchContext+0xb8>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	60fb      	str	r3, [r7, #12]
 800716a:	e010      	b.n	800718e <vTaskSwitchContext+0x46>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10a      	bne.n	8007188 <vTaskSwitchContext+0x40>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	607b      	str	r3, [r7, #4]
}
 8007184:	bf00      	nop
 8007186:	e7fe      	b.n	8007186 <vTaskSwitchContext+0x3e>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3b01      	subs	r3, #1
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	491d      	ldr	r1, [pc, #116]	; (8007204 <vTaskSwitchContext+0xbc>)
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0e4      	beq.n	800716c <vTaskSwitchContext+0x24>
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4a15      	ldr	r2, [pc, #84]	; (8007204 <vTaskSwitchContext+0xbc>)
 80071ae:	4413      	add	r3, r2
 80071b0:	60bb      	str	r3, [r7, #8]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	605a      	str	r2, [r3, #4]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	3308      	adds	r3, #8
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d104      	bne.n	80071d2 <vTaskSwitchContext+0x8a>
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	605a      	str	r2, [r3, #4]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	4a0b      	ldr	r2, [pc, #44]	; (8007208 <vTaskSwitchContext+0xc0>)
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	4a08      	ldr	r2, [pc, #32]	; (8007200 <vTaskSwitchContext+0xb8>)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071e2:	4b09      	ldr	r3, [pc, #36]	; (8007208 <vTaskSwitchContext+0xc0>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3354      	adds	r3, #84	; 0x54
 80071e8:	4a08      	ldr	r2, [pc, #32]	; (800720c <vTaskSwitchContext+0xc4>)
 80071ea:	6013      	str	r3, [r2, #0]
}
 80071ec:	bf00      	nop
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	20000e94 	.word	0x20000e94
 80071fc:	20000e80 	.word	0x20000e80
 8007200:	20000e74 	.word	0x20000e74
 8007204:	2000099c 	.word	0x2000099c
 8007208:	20000998 	.word	0x20000998
 800720c:	20000018 	.word	0x20000018

08007210 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10a      	bne.n	8007236 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	60fb      	str	r3, [r7, #12]
}
 8007232:	bf00      	nop
 8007234:	e7fe      	b.n	8007234 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007236:	4b07      	ldr	r3, [pc, #28]	; (8007254 <vTaskPlaceOnEventList+0x44>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3318      	adds	r3, #24
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7fe fe61 	bl	8005f06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007244:	2101      	movs	r1, #1
 8007246:	6838      	ldr	r0, [r7, #0]
 8007248:	f000 fa80 	bl	800774c <prvAddCurrentTaskToDelayedList>
}
 800724c:	bf00      	nop
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	20000998 	.word	0x20000998

08007258 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	617b      	str	r3, [r7, #20]
}
 800727c:	bf00      	nop
 800727e:	e7fe      	b.n	800727e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007280:	4b0a      	ldr	r3, [pc, #40]	; (80072ac <vTaskPlaceOnEventListRestricted+0x54>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3318      	adds	r3, #24
 8007286:	4619      	mov	r1, r3
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f7fe fe18 	bl	8005ebe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007294:	f04f 33ff 	mov.w	r3, #4294967295
 8007298:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800729a:	6879      	ldr	r1, [r7, #4]
 800729c:	68b8      	ldr	r0, [r7, #8]
 800729e:	f000 fa55 	bl	800774c <prvAddCurrentTaskToDelayedList>
	}
 80072a2:	bf00      	nop
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20000998 	.word	0x20000998

080072b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	60fb      	str	r3, [r7, #12]
}
 80072d8:	bf00      	nop
 80072da:	e7fe      	b.n	80072da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	3318      	adds	r3, #24
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fe fe49 	bl	8005f78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072e6:	4b1e      	ldr	r3, [pc, #120]	; (8007360 <xTaskRemoveFromEventList+0xb0>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d11d      	bne.n	800732a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	3304      	adds	r3, #4
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fe fe40 	bl	8005f78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fc:	4b19      	ldr	r3, [pc, #100]	; (8007364 <xTaskRemoveFromEventList+0xb4>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	429a      	cmp	r2, r3
 8007302:	d903      	bls.n	800730c <xTaskRemoveFromEventList+0x5c>
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007308:	4a16      	ldr	r2, [pc, #88]	; (8007364 <xTaskRemoveFromEventList+0xb4>)
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4a13      	ldr	r2, [pc, #76]	; (8007368 <xTaskRemoveFromEventList+0xb8>)
 800731a:	441a      	add	r2, r3
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	3304      	adds	r3, #4
 8007320:	4619      	mov	r1, r3
 8007322:	4610      	mov	r0, r2
 8007324:	f7fe fdcb 	bl	8005ebe <vListInsertEnd>
 8007328:	e005      	b.n	8007336 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	3318      	adds	r3, #24
 800732e:	4619      	mov	r1, r3
 8007330:	480e      	ldr	r0, [pc, #56]	; (800736c <xTaskRemoveFromEventList+0xbc>)
 8007332:	f7fe fdc4 	bl	8005ebe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733a:	4b0d      	ldr	r3, [pc, #52]	; (8007370 <xTaskRemoveFromEventList+0xc0>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	429a      	cmp	r2, r3
 8007342:	d905      	bls.n	8007350 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007344:	2301      	movs	r3, #1
 8007346:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007348:	4b0a      	ldr	r3, [pc, #40]	; (8007374 <xTaskRemoveFromEventList+0xc4>)
 800734a:	2201      	movs	r2, #1
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	e001      	b.n	8007354 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007350:	2300      	movs	r3, #0
 8007352:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007354:	697b      	ldr	r3, [r7, #20]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000e94 	.word	0x20000e94
 8007364:	20000e74 	.word	0x20000e74
 8007368:	2000099c 	.word	0x2000099c
 800736c:	20000e2c 	.word	0x20000e2c
 8007370:	20000998 	.word	0x20000998
 8007374:	20000e80 	.word	0x20000e80

08007378 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007380:	4b06      	ldr	r3, [pc, #24]	; (800739c <vTaskInternalSetTimeOutState+0x24>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007388:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <vTaskInternalSetTimeOutState+0x28>)
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	605a      	str	r2, [r3, #4]
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	20000e84 	.word	0x20000e84
 80073a0:	20000e70 	.word	0x20000e70

080073a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b088      	sub	sp, #32
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10a      	bne.n	80073ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	613b      	str	r3, [r7, #16]
}
 80073c6:	bf00      	nop
 80073c8:	e7fe      	b.n	80073c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	60fb      	str	r3, [r7, #12]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80073e6:	f000 fe7d 	bl	80080e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073ea:	4b1d      	ldr	r3, [pc, #116]	; (8007460 <xTaskCheckForTimeOut+0xbc>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007402:	d102      	bne.n	800740a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007404:	2300      	movs	r3, #0
 8007406:	61fb      	str	r3, [r7, #28]
 8007408:	e023      	b.n	8007452 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	4b15      	ldr	r3, [pc, #84]	; (8007464 <xTaskCheckForTimeOut+0xc0>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d007      	beq.n	8007426 <xTaskCheckForTimeOut+0x82>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	429a      	cmp	r2, r3
 800741e:	d302      	bcc.n	8007426 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007420:	2301      	movs	r3, #1
 8007422:	61fb      	str	r3, [r7, #28]
 8007424:	e015      	b.n	8007452 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	429a      	cmp	r2, r3
 800742e:	d20b      	bcs.n	8007448 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	1ad2      	subs	r2, r2, r3
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff ff9b 	bl	8007378 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007442:	2300      	movs	r3, #0
 8007444:	61fb      	str	r3, [r7, #28]
 8007446:	e004      	b.n	8007452 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2200      	movs	r2, #0
 800744c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800744e:	2301      	movs	r3, #1
 8007450:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007452:	f000 fe77 	bl	8008144 <vPortExitCritical>

	return xReturn;
 8007456:	69fb      	ldr	r3, [r7, #28]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3720      	adds	r7, #32
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	20000e70 	.word	0x20000e70
 8007464:	20000e84 	.word	0x20000e84

08007468 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800746c:	4b03      	ldr	r3, [pc, #12]	; (800747c <vTaskMissedYield+0x14>)
 800746e:	2201      	movs	r2, #1
 8007470:	601a      	str	r2, [r3, #0]
}
 8007472:	bf00      	nop
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	20000e80 	.word	0x20000e80

08007480 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007488:	f000 f852 	bl	8007530 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800748c:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <prvIdleTask+0x28>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d9f9      	bls.n	8007488 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007494:	4b05      	ldr	r3, [pc, #20]	; (80074ac <prvIdleTask+0x2c>)
 8007496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074a4:	e7f0      	b.n	8007488 <prvIdleTask+0x8>
 80074a6:	bf00      	nop
 80074a8:	2000099c 	.word	0x2000099c
 80074ac:	e000ed04 	.word	0xe000ed04

080074b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074b6:	2300      	movs	r3, #0
 80074b8:	607b      	str	r3, [r7, #4]
 80074ba:	e00c      	b.n	80074d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4a12      	ldr	r2, [pc, #72]	; (8007510 <prvInitialiseTaskLists+0x60>)
 80074c8:	4413      	add	r3, r2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fe fcca 	bl	8005e64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3301      	adds	r3, #1
 80074d4:	607b      	str	r3, [r7, #4]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b37      	cmp	r3, #55	; 0x37
 80074da:	d9ef      	bls.n	80074bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074dc:	480d      	ldr	r0, [pc, #52]	; (8007514 <prvInitialiseTaskLists+0x64>)
 80074de:	f7fe fcc1 	bl	8005e64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074e2:	480d      	ldr	r0, [pc, #52]	; (8007518 <prvInitialiseTaskLists+0x68>)
 80074e4:	f7fe fcbe 	bl	8005e64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074e8:	480c      	ldr	r0, [pc, #48]	; (800751c <prvInitialiseTaskLists+0x6c>)
 80074ea:	f7fe fcbb 	bl	8005e64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074ee:	480c      	ldr	r0, [pc, #48]	; (8007520 <prvInitialiseTaskLists+0x70>)
 80074f0:	f7fe fcb8 	bl	8005e64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074f4:	480b      	ldr	r0, [pc, #44]	; (8007524 <prvInitialiseTaskLists+0x74>)
 80074f6:	f7fe fcb5 	bl	8005e64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074fa:	4b0b      	ldr	r3, [pc, #44]	; (8007528 <prvInitialiseTaskLists+0x78>)
 80074fc:	4a05      	ldr	r2, [pc, #20]	; (8007514 <prvInitialiseTaskLists+0x64>)
 80074fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007500:	4b0a      	ldr	r3, [pc, #40]	; (800752c <prvInitialiseTaskLists+0x7c>)
 8007502:	4a05      	ldr	r2, [pc, #20]	; (8007518 <prvInitialiseTaskLists+0x68>)
 8007504:	601a      	str	r2, [r3, #0]
}
 8007506:	bf00      	nop
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	2000099c 	.word	0x2000099c
 8007514:	20000dfc 	.word	0x20000dfc
 8007518:	20000e10 	.word	0x20000e10
 800751c:	20000e2c 	.word	0x20000e2c
 8007520:	20000e40 	.word	0x20000e40
 8007524:	20000e58 	.word	0x20000e58
 8007528:	20000e24 	.word	0x20000e24
 800752c:	20000e28 	.word	0x20000e28

08007530 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007536:	e019      	b.n	800756c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007538:	f000 fdd4 	bl	80080e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800753c:	4b10      	ldr	r3, [pc, #64]	; (8007580 <prvCheckTasksWaitingTermination+0x50>)
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3304      	adds	r3, #4
 8007548:	4618      	mov	r0, r3
 800754a:	f7fe fd15 	bl	8005f78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800754e:	4b0d      	ldr	r3, [pc, #52]	; (8007584 <prvCheckTasksWaitingTermination+0x54>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3b01      	subs	r3, #1
 8007554:	4a0b      	ldr	r2, [pc, #44]	; (8007584 <prvCheckTasksWaitingTermination+0x54>)
 8007556:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007558:	4b0b      	ldr	r3, [pc, #44]	; (8007588 <prvCheckTasksWaitingTermination+0x58>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3b01      	subs	r3, #1
 800755e:	4a0a      	ldr	r2, [pc, #40]	; (8007588 <prvCheckTasksWaitingTermination+0x58>)
 8007560:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007562:	f000 fdef 	bl	8008144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f810 	bl	800758c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800756c:	4b06      	ldr	r3, [pc, #24]	; (8007588 <prvCheckTasksWaitingTermination+0x58>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e1      	bne.n	8007538 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20000e40 	.word	0x20000e40
 8007584:	20000e6c 	.word	0x20000e6c
 8007588:	20000e54 	.word	0x20000e54

0800758c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3354      	adds	r3, #84	; 0x54
 8007598:	4618      	mov	r0, r3
 800759a:	f001 ff49 	bl	8009430 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d108      	bne.n	80075ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 ff87 	bl	80084c0 <vPortFree>
				vPortFree( pxTCB );
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 ff84 	bl	80084c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075b8:	e018      	b.n	80075ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d103      	bne.n	80075cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 ff7b 	bl	80084c0 <vPortFree>
	}
 80075ca:	e00f      	b.n	80075ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d00a      	beq.n	80075ec <prvDeleteTCB+0x60>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	60fb      	str	r3, [r7, #12]
}
 80075e8:	bf00      	nop
 80075ea:	e7fe      	b.n	80075ea <prvDeleteTCB+0x5e>
	}
 80075ec:	bf00      	nop
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075fa:	4b0c      	ldr	r3, [pc, #48]	; (800762c <prvResetNextTaskUnblockTime+0x38>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d104      	bne.n	800760e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007604:	4b0a      	ldr	r3, [pc, #40]	; (8007630 <prvResetNextTaskUnblockTime+0x3c>)
 8007606:	f04f 32ff 	mov.w	r2, #4294967295
 800760a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800760c:	e008      	b.n	8007620 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800760e:	4b07      	ldr	r3, [pc, #28]	; (800762c <prvResetNextTaskUnblockTime+0x38>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	4a04      	ldr	r2, [pc, #16]	; (8007630 <prvResetNextTaskUnblockTime+0x3c>)
 800761e:	6013      	str	r3, [r2, #0]
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	20000e24 	.word	0x20000e24
 8007630:	20000e8c 	.word	0x20000e8c

08007634 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800763a:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <xTaskGetSchedulerState+0x34>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d102      	bne.n	8007648 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007642:	2301      	movs	r3, #1
 8007644:	607b      	str	r3, [r7, #4]
 8007646:	e008      	b.n	800765a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007648:	4b08      	ldr	r3, [pc, #32]	; (800766c <xTaskGetSchedulerState+0x38>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d102      	bne.n	8007656 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007650:	2302      	movs	r3, #2
 8007652:	607b      	str	r3, [r7, #4]
 8007654:	e001      	b.n	800765a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007656:	2300      	movs	r3, #0
 8007658:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800765a:	687b      	ldr	r3, [r7, #4]
	}
 800765c:	4618      	mov	r0, r3
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	20000e78 	.word	0x20000e78
 800766c:	20000e94 	.word	0x20000e94

08007670 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d056      	beq.n	8007734 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007686:	4b2e      	ldr	r3, [pc, #184]	; (8007740 <xTaskPriorityDisinherit+0xd0>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	429a      	cmp	r2, r3
 800768e:	d00a      	beq.n	80076a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	60fb      	str	r3, [r7, #12]
}
 80076a2:	bf00      	nop
 80076a4:	e7fe      	b.n	80076a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10a      	bne.n	80076c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	60bb      	str	r3, [r7, #8]
}
 80076c0:	bf00      	nop
 80076c2:	e7fe      	b.n	80076c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c8:	1e5a      	subs	r2, r3, #1
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d02c      	beq.n	8007734 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d128      	bne.n	8007734 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	3304      	adds	r3, #4
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe fc46 	bl	8005f78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007704:	4b0f      	ldr	r3, [pc, #60]	; (8007744 <xTaskPriorityDisinherit+0xd4>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	429a      	cmp	r2, r3
 800770a:	d903      	bls.n	8007714 <xTaskPriorityDisinherit+0xa4>
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007710:	4a0c      	ldr	r2, [pc, #48]	; (8007744 <xTaskPriorityDisinherit+0xd4>)
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4a09      	ldr	r2, [pc, #36]	; (8007748 <xTaskPriorityDisinherit+0xd8>)
 8007722:	441a      	add	r2, r3
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	3304      	adds	r3, #4
 8007728:	4619      	mov	r1, r3
 800772a:	4610      	mov	r0, r2
 800772c:	f7fe fbc7 	bl	8005ebe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007730:	2301      	movs	r3, #1
 8007732:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007734:	697b      	ldr	r3, [r7, #20]
	}
 8007736:	4618      	mov	r0, r3
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20000998 	.word	0x20000998
 8007744:	20000e74 	.word	0x20000e74
 8007748:	2000099c 	.word	0x2000099c

0800774c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007756:	4b21      	ldr	r3, [pc, #132]	; (80077dc <prvAddCurrentTaskToDelayedList+0x90>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800775c:	4b20      	ldr	r3, [pc, #128]	; (80077e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3304      	adds	r3, #4
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe fc08 	bl	8005f78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776e:	d10a      	bne.n	8007786 <prvAddCurrentTaskToDelayedList+0x3a>
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d007      	beq.n	8007786 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007776:	4b1a      	ldr	r3, [pc, #104]	; (80077e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3304      	adds	r3, #4
 800777c:	4619      	mov	r1, r3
 800777e:	4819      	ldr	r0, [pc, #100]	; (80077e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007780:	f7fe fb9d 	bl	8005ebe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007784:	e026      	b.n	80077d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4413      	add	r3, r2
 800778c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800778e:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	429a      	cmp	r2, r3
 800779c:	d209      	bcs.n	80077b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800779e:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3304      	adds	r3, #4
 80077a8:	4619      	mov	r1, r3
 80077aa:	4610      	mov	r0, r2
 80077ac:	f7fe fbab 	bl	8005f06 <vListInsert>
}
 80077b0:	e010      	b.n	80077d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077b2:	4b0e      	ldr	r3, [pc, #56]	; (80077ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4619      	mov	r1, r3
 80077be:	4610      	mov	r0, r2
 80077c0:	f7fe fba1 	bl	8005f06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077c4:	4b0a      	ldr	r3, [pc, #40]	; (80077f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d202      	bcs.n	80077d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077ce:	4a08      	ldr	r2, [pc, #32]	; (80077f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	6013      	str	r3, [r2, #0]
}
 80077d4:	bf00      	nop
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	20000e70 	.word	0x20000e70
 80077e0:	20000998 	.word	0x20000998
 80077e4:	20000e58 	.word	0x20000e58
 80077e8:	20000e28 	.word	0x20000e28
 80077ec:	20000e24 	.word	0x20000e24
 80077f0:	20000e8c 	.word	0x20000e8c

080077f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08a      	sub	sp, #40	; 0x28
 80077f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80077fe:	f000 fb07 	bl	8007e10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007802:	4b1c      	ldr	r3, [pc, #112]	; (8007874 <xTimerCreateTimerTask+0x80>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d021      	beq.n	800784e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800780e:	2300      	movs	r3, #0
 8007810:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007812:	1d3a      	adds	r2, r7, #4
 8007814:	f107 0108 	add.w	r1, r7, #8
 8007818:	f107 030c 	add.w	r3, r7, #12
 800781c:	4618      	mov	r0, r3
 800781e:	f7fe fb07 	bl	8005e30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	9202      	str	r2, [sp, #8]
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	2302      	movs	r3, #2
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	2300      	movs	r3, #0
 8007832:	460a      	mov	r2, r1
 8007834:	4910      	ldr	r1, [pc, #64]	; (8007878 <xTimerCreateTimerTask+0x84>)
 8007836:	4811      	ldr	r0, [pc, #68]	; (800787c <xTimerCreateTimerTask+0x88>)
 8007838:	f7ff f8b4 	bl	80069a4 <xTaskCreateStatic>
 800783c:	4603      	mov	r3, r0
 800783e:	4a10      	ldr	r2, [pc, #64]	; (8007880 <xTimerCreateTimerTask+0x8c>)
 8007840:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007842:	4b0f      	ldr	r3, [pc, #60]	; (8007880 <xTimerCreateTimerTask+0x8c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800784a:	2301      	movs	r3, #1
 800784c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10a      	bne.n	800786a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	613b      	str	r3, [r7, #16]
}
 8007866:	bf00      	nop
 8007868:	e7fe      	b.n	8007868 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800786a:	697b      	ldr	r3, [r7, #20]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	20000ec8 	.word	0x20000ec8
 8007878:	0800b850 	.word	0x0800b850
 800787c:	080079b9 	.word	0x080079b9
 8007880:	20000ecc 	.word	0x20000ecc

08007884 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b08a      	sub	sp, #40	; 0x28
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
 8007890:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007892:	2300      	movs	r3, #0
 8007894:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10a      	bne.n	80078b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	623b      	str	r3, [r7, #32]
}
 80078ae:	bf00      	nop
 80078b0:	e7fe      	b.n	80078b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078b2:	4b1a      	ldr	r3, [pc, #104]	; (800791c <xTimerGenericCommand+0x98>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d02a      	beq.n	8007910 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b05      	cmp	r3, #5
 80078ca:	dc18      	bgt.n	80078fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078cc:	f7ff feb2 	bl	8007634 <xTaskGetSchedulerState>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d109      	bne.n	80078ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078d6:	4b11      	ldr	r3, [pc, #68]	; (800791c <xTimerGenericCommand+0x98>)
 80078d8:	6818      	ldr	r0, [r3, #0]
 80078da:	f107 0110 	add.w	r1, r7, #16
 80078de:	2300      	movs	r3, #0
 80078e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078e2:	f7fe fc77 	bl	80061d4 <xQueueGenericSend>
 80078e6:	6278      	str	r0, [r7, #36]	; 0x24
 80078e8:	e012      	b.n	8007910 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078ea:	4b0c      	ldr	r3, [pc, #48]	; (800791c <xTimerGenericCommand+0x98>)
 80078ec:	6818      	ldr	r0, [r3, #0]
 80078ee:	f107 0110 	add.w	r1, r7, #16
 80078f2:	2300      	movs	r3, #0
 80078f4:	2200      	movs	r2, #0
 80078f6:	f7fe fc6d 	bl	80061d4 <xQueueGenericSend>
 80078fa:	6278      	str	r0, [r7, #36]	; 0x24
 80078fc:	e008      	b.n	8007910 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078fe:	4b07      	ldr	r3, [pc, #28]	; (800791c <xTimerGenericCommand+0x98>)
 8007900:	6818      	ldr	r0, [r3, #0]
 8007902:	f107 0110 	add.w	r1, r7, #16
 8007906:	2300      	movs	r3, #0
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	f7fe fd61 	bl	80063d0 <xQueueGenericSendFromISR>
 800790e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007912:	4618      	mov	r0, r3
 8007914:	3728      	adds	r7, #40	; 0x28
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	20000ec8 	.word	0x20000ec8

08007920 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af02      	add	r7, sp, #8
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800792a:	4b22      	ldr	r3, [pc, #136]	; (80079b4 <prvProcessExpiredTimer+0x94>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	3304      	adds	r3, #4
 8007938:	4618      	mov	r0, r3
 800793a:	f7fe fb1d 	bl	8005f78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d022      	beq.n	8007992 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	699a      	ldr	r2, [r3, #24]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	18d1      	adds	r1, r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	6978      	ldr	r0, [r7, #20]
 800795a:	f000 f8d1 	bl	8007b00 <prvInsertTimerInActiveList>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d01f      	beq.n	80079a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007964:	2300      	movs	r3, #0
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	2300      	movs	r3, #0
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	2100      	movs	r1, #0
 800796e:	6978      	ldr	r0, [r7, #20]
 8007970:	f7ff ff88 	bl	8007884 <xTimerGenericCommand>
 8007974:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d113      	bne.n	80079a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	60fb      	str	r3, [r7, #12]
}
 800798e:	bf00      	nop
 8007990:	e7fe      	b.n	8007990 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007998:	f023 0301 	bic.w	r3, r3, #1
 800799c:	b2da      	uxtb	r2, r3
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	6a1b      	ldr	r3, [r3, #32]
 80079a8:	6978      	ldr	r0, [r7, #20]
 80079aa:	4798      	blx	r3
}
 80079ac:	bf00      	nop
 80079ae:	3718      	adds	r7, #24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	20000ec0 	.word	0x20000ec0

080079b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079c0:	f107 0308 	add.w	r3, r7, #8
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 f857 	bl	8007a78 <prvGetNextExpireTime>
 80079ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	4619      	mov	r1, r3
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 f803 	bl	80079dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079d6:	f000 f8d5 	bl	8007b84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079da:	e7f1      	b.n	80079c0 <prvTimerTask+0x8>

080079dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079e6:	f7ff fa39 	bl	8006e5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079ea:	f107 0308 	add.w	r3, r7, #8
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 f866 	bl	8007ac0 <prvSampleTimeNow>
 80079f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d130      	bne.n	8007a5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10a      	bne.n	8007a18 <prvProcessTimerOrBlockTask+0x3c>
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d806      	bhi.n	8007a18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a0a:	f7ff fa35 	bl	8006e78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a0e:	68f9      	ldr	r1, [r7, #12]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7ff ff85 	bl	8007920 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a16:	e024      	b.n	8007a62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d008      	beq.n	8007a30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a1e:	4b13      	ldr	r3, [pc, #76]	; (8007a6c <prvProcessTimerOrBlockTask+0x90>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <prvProcessTimerOrBlockTask+0x50>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e000      	b.n	8007a2e <prvProcessTimerOrBlockTask+0x52>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a30:	4b0f      	ldr	r3, [pc, #60]	; (8007a70 <prvProcessTimerOrBlockTask+0x94>)
 8007a32:	6818      	ldr	r0, [r3, #0]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	f7fe ff7d 	bl	800693c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a42:	f7ff fa19 	bl	8006e78 <xTaskResumeAll>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10a      	bne.n	8007a62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a4c:	4b09      	ldr	r3, [pc, #36]	; (8007a74 <prvProcessTimerOrBlockTask+0x98>)
 8007a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	f3bf 8f6f 	isb	sy
}
 8007a5c:	e001      	b.n	8007a62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a5e:	f7ff fa0b 	bl	8006e78 <xTaskResumeAll>
}
 8007a62:	bf00      	nop
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000ec4 	.word	0x20000ec4
 8007a70:	20000ec8 	.word	0x20000ec8
 8007a74:	e000ed04 	.word	0xe000ed04

08007a78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a80:	4b0e      	ldr	r3, [pc, #56]	; (8007abc <prvGetNextExpireTime+0x44>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <prvGetNextExpireTime+0x16>
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	e000      	b.n	8007a90 <prvGetNextExpireTime+0x18>
 8007a8e:	2200      	movs	r2, #0
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d105      	bne.n	8007aa8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a9c:	4b07      	ldr	r3, [pc, #28]	; (8007abc <prvGetNextExpireTime+0x44>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	60fb      	str	r3, [r7, #12]
 8007aa6:	e001      	b.n	8007aac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007aac:	68fb      	ldr	r3, [r7, #12]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	20000ec0 	.word	0x20000ec0

08007ac0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ac8:	f7ff fa74 	bl	8006fb4 <xTaskGetTickCount>
 8007acc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ace:	4b0b      	ldr	r3, [pc, #44]	; (8007afc <prvSampleTimeNow+0x3c>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d205      	bcs.n	8007ae4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ad8:	f000 f936 	bl	8007d48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]
 8007ae2:	e002      	b.n	8007aea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007aea:	4a04      	ldr	r2, [pc, #16]	; (8007afc <prvSampleTimeNow+0x3c>)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007af0:	68fb      	ldr	r3, [r7, #12]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	20000ed0 	.word	0x20000ed0

08007b00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
 8007b0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d812      	bhi.n	8007b4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	1ad2      	subs	r2, r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d302      	bcc.n	8007b3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b34:	2301      	movs	r3, #1
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	e01b      	b.n	8007b72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b3a:	4b10      	ldr	r3, [pc, #64]	; (8007b7c <prvInsertTimerInActiveList+0x7c>)
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3304      	adds	r3, #4
 8007b42:	4619      	mov	r1, r3
 8007b44:	4610      	mov	r0, r2
 8007b46:	f7fe f9de 	bl	8005f06 <vListInsert>
 8007b4a:	e012      	b.n	8007b72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d206      	bcs.n	8007b62 <prvInsertTimerInActiveList+0x62>
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d302      	bcc.n	8007b62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	e007      	b.n	8007b72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b62:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <prvInsertTimerInActiveList+0x80>)
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	f7fe f9ca 	bl	8005f06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b72:	697b      	ldr	r3, [r7, #20]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	20000ec4 	.word	0x20000ec4
 8007b80:	20000ec0 	.word	0x20000ec0

08007b84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08e      	sub	sp, #56	; 0x38
 8007b88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b8a:	e0ca      	b.n	8007d22 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	da18      	bge.n	8007bc4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b92:	1d3b      	adds	r3, r7, #4
 8007b94:	3304      	adds	r3, #4
 8007b96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10a      	bne.n	8007bb4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	61fb      	str	r3, [r7, #28]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bba:	6850      	ldr	r0, [r2, #4]
 8007bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bbe:	6892      	ldr	r2, [r2, #8]
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f2c0 80aa 	blt.w	8007d20 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d004      	beq.n	8007be2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	3304      	adds	r3, #4
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fe f9cb 	bl	8005f78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007be2:	463b      	mov	r3, r7
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff ff6b 	bl	8007ac0 <prvSampleTimeNow>
 8007bea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b09      	cmp	r3, #9
 8007bf0:	f200 8097 	bhi.w	8007d22 <prvProcessReceivedCommands+0x19e>
 8007bf4:	a201      	add	r2, pc, #4	; (adr r2, 8007bfc <prvProcessReceivedCommands+0x78>)
 8007bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfa:	bf00      	nop
 8007bfc:	08007c25 	.word	0x08007c25
 8007c00:	08007c25 	.word	0x08007c25
 8007c04:	08007c25 	.word	0x08007c25
 8007c08:	08007c99 	.word	0x08007c99
 8007c0c:	08007cad 	.word	0x08007cad
 8007c10:	08007cf7 	.word	0x08007cf7
 8007c14:	08007c25 	.word	0x08007c25
 8007c18:	08007c25 	.word	0x08007c25
 8007c1c:	08007c99 	.word	0x08007c99
 8007c20:	08007cad 	.word	0x08007cad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c2a:	f043 0301 	orr.w	r3, r3, #1
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	18d1      	adds	r1, r2, r3
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c44:	f7ff ff5c 	bl	8007b00 <prvInsertTimerInActiveList>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d069      	beq.n	8007d22 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d05e      	beq.n	8007d22 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	441a      	add	r2, r3
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	2300      	movs	r3, #0
 8007c72:	2100      	movs	r1, #0
 8007c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c76:	f7ff fe05 	bl	8007884 <xTimerGenericCommand>
 8007c7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d14f      	bne.n	8007d22 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	61bb      	str	r3, [r7, #24]
}
 8007c94:	bf00      	nop
 8007c96:	e7fe      	b.n	8007c96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c9e:	f023 0301 	bic.w	r3, r3, #1
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007caa:	e03a      	b.n	8007d22 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cb2:	f043 0301 	orr.w	r3, r3, #1
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10a      	bne.n	8007ce2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	617b      	str	r3, [r7, #20]
}
 8007cde:	bf00      	nop
 8007ce0:	e7fe      	b.n	8007ce0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce4:	699a      	ldr	r2, [r3, #24]
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce8:	18d1      	adds	r1, r2, r3
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf0:	f7ff ff06 	bl	8007b00 <prvInsertTimerInActiveList>
					break;
 8007cf4:	e015      	b.n	8007d22 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d103      	bne.n	8007d0c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d06:	f000 fbdb 	bl	80084c0 <vPortFree>
 8007d0a:	e00a      	b.n	8007d22 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d12:	f023 0301 	bic.w	r3, r3, #1
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d1e:	e000      	b.n	8007d22 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d22:	4b08      	ldr	r3, [pc, #32]	; (8007d44 <prvProcessReceivedCommands+0x1c0>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	1d39      	adds	r1, r7, #4
 8007d28:	2200      	movs	r2, #0
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe fbec 	bl	8006508 <xQueueReceive>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f47f af2a 	bne.w	8007b8c <prvProcessReceivedCommands+0x8>
	}
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	3730      	adds	r7, #48	; 0x30
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20000ec8 	.word	0x20000ec8

08007d48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b088      	sub	sp, #32
 8007d4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d4e:	e048      	b.n	8007de2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d50:	4b2d      	ldr	r3, [pc, #180]	; (8007e08 <prvSwitchTimerLists+0xc0>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d5a:	4b2b      	ldr	r3, [pc, #172]	; (8007e08 <prvSwitchTimerLists+0xc0>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3304      	adds	r3, #4
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fe f905 	bl	8005f78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d02e      	beq.n	8007de2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d90e      	bls.n	8007db4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007da2:	4b19      	ldr	r3, [pc, #100]	; (8007e08 <prvSwitchTimerLists+0xc0>)
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3304      	adds	r3, #4
 8007daa:	4619      	mov	r1, r3
 8007dac:	4610      	mov	r0, r2
 8007dae:	f7fe f8aa 	bl	8005f06 <vListInsert>
 8007db2:	e016      	b.n	8007de2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007db4:	2300      	movs	r3, #0
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	2300      	movs	r3, #0
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f7ff fd60 	bl	8007884 <xTimerGenericCommand>
 8007dc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	603b      	str	r3, [r7, #0]
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007de2:	4b09      	ldr	r3, [pc, #36]	; (8007e08 <prvSwitchTimerLists+0xc0>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1b1      	bne.n	8007d50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007dec:	4b06      	ldr	r3, [pc, #24]	; (8007e08 <prvSwitchTimerLists+0xc0>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007df2:	4b06      	ldr	r3, [pc, #24]	; (8007e0c <prvSwitchTimerLists+0xc4>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a04      	ldr	r2, [pc, #16]	; (8007e08 <prvSwitchTimerLists+0xc0>)
 8007df8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007dfa:	4a04      	ldr	r2, [pc, #16]	; (8007e0c <prvSwitchTimerLists+0xc4>)
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	6013      	str	r3, [r2, #0]
}
 8007e00:	bf00      	nop
 8007e02:	3718      	adds	r7, #24
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	20000ec0 	.word	0x20000ec0
 8007e0c:	20000ec4 	.word	0x20000ec4

08007e10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e16:	f000 f965 	bl	80080e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e1a:	4b15      	ldr	r3, [pc, #84]	; (8007e70 <prvCheckForValidListAndQueue+0x60>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d120      	bne.n	8007e64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e22:	4814      	ldr	r0, [pc, #80]	; (8007e74 <prvCheckForValidListAndQueue+0x64>)
 8007e24:	f7fe f81e 	bl	8005e64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e28:	4813      	ldr	r0, [pc, #76]	; (8007e78 <prvCheckForValidListAndQueue+0x68>)
 8007e2a:	f7fe f81b 	bl	8005e64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e2e:	4b13      	ldr	r3, [pc, #76]	; (8007e7c <prvCheckForValidListAndQueue+0x6c>)
 8007e30:	4a10      	ldr	r2, [pc, #64]	; (8007e74 <prvCheckForValidListAndQueue+0x64>)
 8007e32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e34:	4b12      	ldr	r3, [pc, #72]	; (8007e80 <prvCheckForValidListAndQueue+0x70>)
 8007e36:	4a10      	ldr	r2, [pc, #64]	; (8007e78 <prvCheckForValidListAndQueue+0x68>)
 8007e38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	4b11      	ldr	r3, [pc, #68]	; (8007e84 <prvCheckForValidListAndQueue+0x74>)
 8007e40:	4a11      	ldr	r2, [pc, #68]	; (8007e88 <prvCheckForValidListAndQueue+0x78>)
 8007e42:	2110      	movs	r1, #16
 8007e44:	200a      	movs	r0, #10
 8007e46:	f7fe f929 	bl	800609c <xQueueGenericCreateStatic>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	4a08      	ldr	r2, [pc, #32]	; (8007e70 <prvCheckForValidListAndQueue+0x60>)
 8007e4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e50:	4b07      	ldr	r3, [pc, #28]	; (8007e70 <prvCheckForValidListAndQueue+0x60>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d005      	beq.n	8007e64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e58:	4b05      	ldr	r3, [pc, #20]	; (8007e70 <prvCheckForValidListAndQueue+0x60>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	490b      	ldr	r1, [pc, #44]	; (8007e8c <prvCheckForValidListAndQueue+0x7c>)
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe fd42 	bl	80068e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e64:	f000 f96e 	bl	8008144 <vPortExitCritical>
}
 8007e68:	bf00      	nop
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	20000ec8 	.word	0x20000ec8
 8007e74:	20000e98 	.word	0x20000e98
 8007e78:	20000eac 	.word	0x20000eac
 8007e7c:	20000ec0 	.word	0x20000ec0
 8007e80:	20000ec4 	.word	0x20000ec4
 8007e84:	20000f74 	.word	0x20000f74
 8007e88:	20000ed4 	.word	0x20000ed4
 8007e8c:	0800b858 	.word	0x0800b858

08007e90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3b04      	subs	r3, #4
 8007ea0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3b04      	subs	r3, #4
 8007eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f023 0201 	bic.w	r2, r3, #1
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3b04      	subs	r3, #4
 8007ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ec0:	4a0c      	ldr	r2, [pc, #48]	; (8007ef4 <pxPortInitialiseStack+0x64>)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3b14      	subs	r3, #20
 8007eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3b04      	subs	r3, #4
 8007ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f06f 0202 	mvn.w	r2, #2
 8007ede:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	3b20      	subs	r3, #32
 8007ee4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	08007ef9 	.word	0x08007ef9

08007ef8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007efe:	2300      	movs	r3, #0
 8007f00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f02:	4b12      	ldr	r3, [pc, #72]	; (8007f4c <prvTaskExitError+0x54>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0a:	d00a      	beq.n	8007f22 <prvTaskExitError+0x2a>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	60fb      	str	r3, [r7, #12]
}
 8007f1e:	bf00      	nop
 8007f20:	e7fe      	b.n	8007f20 <prvTaskExitError+0x28>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	60bb      	str	r3, [r7, #8]
}
 8007f34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f36:	bf00      	nop
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d0fc      	beq.n	8007f38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f3e:	bf00      	nop
 8007f40:	bf00      	nop
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	20000014 	.word	0x20000014

08007f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f50:	4b07      	ldr	r3, [pc, #28]	; (8007f70 <pxCurrentTCBConst2>)
 8007f52:	6819      	ldr	r1, [r3, #0]
 8007f54:	6808      	ldr	r0, [r1, #0]
 8007f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5a:	f380 8809 	msr	PSP, r0
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f04f 0000 	mov.w	r0, #0
 8007f66:	f380 8811 	msr	BASEPRI, r0
 8007f6a:	4770      	bx	lr
 8007f6c:	f3af 8000 	nop.w

08007f70 <pxCurrentTCBConst2>:
 8007f70:	20000998 	.word	0x20000998
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f74:	bf00      	nop
 8007f76:	bf00      	nop

08007f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f78:	4808      	ldr	r0, [pc, #32]	; (8007f9c <prvPortStartFirstTask+0x24>)
 8007f7a:	6800      	ldr	r0, [r0, #0]
 8007f7c:	6800      	ldr	r0, [r0, #0]
 8007f7e:	f380 8808 	msr	MSP, r0
 8007f82:	f04f 0000 	mov.w	r0, #0
 8007f86:	f380 8814 	msr	CONTROL, r0
 8007f8a:	b662      	cpsie	i
 8007f8c:	b661      	cpsie	f
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	df00      	svc	0
 8007f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f9a:	bf00      	nop
 8007f9c:	e000ed08 	.word	0xe000ed08

08007fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fa6:	4b46      	ldr	r3, [pc, #280]	; (80080c0 <xPortStartScheduler+0x120>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a46      	ldr	r2, [pc, #280]	; (80080c4 <xPortStartScheduler+0x124>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d10a      	bne.n	8007fc6 <xPortStartScheduler+0x26>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	613b      	str	r3, [r7, #16]
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fc6:	4b3e      	ldr	r3, [pc, #248]	; (80080c0 <xPortStartScheduler+0x120>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a3f      	ldr	r2, [pc, #252]	; (80080c8 <xPortStartScheduler+0x128>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d10a      	bne.n	8007fe6 <xPortStartScheduler+0x46>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	60fb      	str	r3, [r7, #12]
}
 8007fe2:	bf00      	nop
 8007fe4:	e7fe      	b.n	8007fe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fe6:	4b39      	ldr	r3, [pc, #228]	; (80080cc <xPortStartScheduler+0x12c>)
 8007fe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	22ff      	movs	r2, #255	; 0xff
 8007ff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008008:	b2da      	uxtb	r2, r3
 800800a:	4b31      	ldr	r3, [pc, #196]	; (80080d0 <xPortStartScheduler+0x130>)
 800800c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800800e:	4b31      	ldr	r3, [pc, #196]	; (80080d4 <xPortStartScheduler+0x134>)
 8008010:	2207      	movs	r2, #7
 8008012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008014:	e009      	b.n	800802a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008016:	4b2f      	ldr	r3, [pc, #188]	; (80080d4 <xPortStartScheduler+0x134>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3b01      	subs	r3, #1
 800801c:	4a2d      	ldr	r2, [pc, #180]	; (80080d4 <xPortStartScheduler+0x134>)
 800801e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	005b      	lsls	r3, r3, #1
 8008026:	b2db      	uxtb	r3, r3
 8008028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800802a:	78fb      	ldrb	r3, [r7, #3]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008032:	2b80      	cmp	r3, #128	; 0x80
 8008034:	d0ef      	beq.n	8008016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008036:	4b27      	ldr	r3, [pc, #156]	; (80080d4 <xPortStartScheduler+0x134>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f1c3 0307 	rsb	r3, r3, #7
 800803e:	2b04      	cmp	r3, #4
 8008040:	d00a      	beq.n	8008058 <xPortStartScheduler+0xb8>
	__asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	60bb      	str	r3, [r7, #8]
}
 8008054:	bf00      	nop
 8008056:	e7fe      	b.n	8008056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008058:	4b1e      	ldr	r3, [pc, #120]	; (80080d4 <xPortStartScheduler+0x134>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	021b      	lsls	r3, r3, #8
 800805e:	4a1d      	ldr	r2, [pc, #116]	; (80080d4 <xPortStartScheduler+0x134>)
 8008060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008062:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <xPortStartScheduler+0x134>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800806a:	4a1a      	ldr	r2, [pc, #104]	; (80080d4 <xPortStartScheduler+0x134>)
 800806c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	b2da      	uxtb	r2, r3
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008076:	4b18      	ldr	r3, [pc, #96]	; (80080d8 <xPortStartScheduler+0x138>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a17      	ldr	r2, [pc, #92]	; (80080d8 <xPortStartScheduler+0x138>)
 800807c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008082:	4b15      	ldr	r3, [pc, #84]	; (80080d8 <xPortStartScheduler+0x138>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a14      	ldr	r2, [pc, #80]	; (80080d8 <xPortStartScheduler+0x138>)
 8008088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800808c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800808e:	f000 f8dd 	bl	800824c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008092:	4b12      	ldr	r3, [pc, #72]	; (80080dc <xPortStartScheduler+0x13c>)
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008098:	f000 f8fc 	bl	8008294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800809c:	4b10      	ldr	r3, [pc, #64]	; (80080e0 <xPortStartScheduler+0x140>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a0f      	ldr	r2, [pc, #60]	; (80080e0 <xPortStartScheduler+0x140>)
 80080a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80080a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080a8:	f7ff ff66 	bl	8007f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080ac:	f7ff f84c 	bl	8007148 <vTaskSwitchContext>
	prvTaskExitError();
 80080b0:	f7ff ff22 	bl	8007ef8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	e000ed00 	.word	0xe000ed00
 80080c4:	410fc271 	.word	0x410fc271
 80080c8:	410fc270 	.word	0x410fc270
 80080cc:	e000e400 	.word	0xe000e400
 80080d0:	20000fc4 	.word	0x20000fc4
 80080d4:	20000fc8 	.word	0x20000fc8
 80080d8:	e000ed20 	.word	0xe000ed20
 80080dc:	20000014 	.word	0x20000014
 80080e0:	e000ef34 	.word	0xe000ef34

080080e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
	__asm volatile
 80080ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	607b      	str	r3, [r7, #4]
}
 80080fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080fe:	4b0f      	ldr	r3, [pc, #60]	; (800813c <vPortEnterCritical+0x58>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3301      	adds	r3, #1
 8008104:	4a0d      	ldr	r2, [pc, #52]	; (800813c <vPortEnterCritical+0x58>)
 8008106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008108:	4b0c      	ldr	r3, [pc, #48]	; (800813c <vPortEnterCritical+0x58>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d10f      	bne.n	8008130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008110:	4b0b      	ldr	r3, [pc, #44]	; (8008140 <vPortEnterCritical+0x5c>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <vPortEnterCritical+0x4c>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	603b      	str	r3, [r7, #0]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <vPortEnterCritical+0x4a>
	}
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	20000014 	.word	0x20000014
 8008140:	e000ed04 	.word	0xe000ed04

08008144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800814a:	4b12      	ldr	r3, [pc, #72]	; (8008194 <vPortExitCritical+0x50>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10a      	bne.n	8008168 <vPortExitCritical+0x24>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	607b      	str	r3, [r7, #4]
}
 8008164:	bf00      	nop
 8008166:	e7fe      	b.n	8008166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008168:	4b0a      	ldr	r3, [pc, #40]	; (8008194 <vPortExitCritical+0x50>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3b01      	subs	r3, #1
 800816e:	4a09      	ldr	r2, [pc, #36]	; (8008194 <vPortExitCritical+0x50>)
 8008170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008172:	4b08      	ldr	r3, [pc, #32]	; (8008194 <vPortExitCritical+0x50>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d105      	bne.n	8008186 <vPortExitCritical+0x42>
 800817a:	2300      	movs	r3, #0
 800817c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	f383 8811 	msr	BASEPRI, r3
}
 8008184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008186:	bf00      	nop
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	20000014 	.word	0x20000014
	...

080081a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081a0:	f3ef 8009 	mrs	r0, PSP
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	4b15      	ldr	r3, [pc, #84]	; (8008200 <pxCurrentTCBConst>)
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	f01e 0f10 	tst.w	lr, #16
 80081b0:	bf08      	it	eq
 80081b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ba:	6010      	str	r0, [r2, #0]
 80081bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081c4:	f380 8811 	msr	BASEPRI, r0
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f7fe ffba 	bl	8007148 <vTaskSwitchContext>
 80081d4:	f04f 0000 	mov.w	r0, #0
 80081d8:	f380 8811 	msr	BASEPRI, r0
 80081dc:	bc09      	pop	{r0, r3}
 80081de:	6819      	ldr	r1, [r3, #0]
 80081e0:	6808      	ldr	r0, [r1, #0]
 80081e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e6:	f01e 0f10 	tst.w	lr, #16
 80081ea:	bf08      	it	eq
 80081ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081f0:	f380 8809 	msr	PSP, r0
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	f3af 8000 	nop.w

08008200 <pxCurrentTCBConst>:
 8008200:	20000998 	.word	0x20000998
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop

08008208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	607b      	str	r3, [r7, #4]
}
 8008220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008222:	f7fe fed7 	bl	8006fd4 <xTaskIncrementTick>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d003      	beq.n	8008234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800822c:	4b06      	ldr	r3, [pc, #24]	; (8008248 <xPortSysTickHandler+0x40>)
 800822e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	2300      	movs	r3, #0
 8008236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	f383 8811 	msr	BASEPRI, r3
}
 800823e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008240:	bf00      	nop
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	e000ed04 	.word	0xe000ed04

0800824c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008250:	4b0b      	ldr	r3, [pc, #44]	; (8008280 <vPortSetupTimerInterrupt+0x34>)
 8008252:	2200      	movs	r2, #0
 8008254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008256:	4b0b      	ldr	r3, [pc, #44]	; (8008284 <vPortSetupTimerInterrupt+0x38>)
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800825c:	4b0a      	ldr	r3, [pc, #40]	; (8008288 <vPortSetupTimerInterrupt+0x3c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a0a      	ldr	r2, [pc, #40]	; (800828c <vPortSetupTimerInterrupt+0x40>)
 8008262:	fba2 2303 	umull	r2, r3, r2, r3
 8008266:	099b      	lsrs	r3, r3, #6
 8008268:	4a09      	ldr	r2, [pc, #36]	; (8008290 <vPortSetupTimerInterrupt+0x44>)
 800826a:	3b01      	subs	r3, #1
 800826c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800826e:	4b04      	ldr	r3, [pc, #16]	; (8008280 <vPortSetupTimerInterrupt+0x34>)
 8008270:	2207      	movs	r2, #7
 8008272:	601a      	str	r2, [r3, #0]
}
 8008274:	bf00      	nop
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	e000e010 	.word	0xe000e010
 8008284:	e000e018 	.word	0xe000e018
 8008288:	20000008 	.word	0x20000008
 800828c:	10624dd3 	.word	0x10624dd3
 8008290:	e000e014 	.word	0xe000e014

08008294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80082a4 <vPortEnableVFP+0x10>
 8008298:	6801      	ldr	r1, [r0, #0]
 800829a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800829e:	6001      	str	r1, [r0, #0]
 80082a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082a2:	bf00      	nop
 80082a4:	e000ed88 	.word	0xe000ed88

080082a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082ae:	f3ef 8305 	mrs	r3, IPSR
 80082b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b0f      	cmp	r3, #15
 80082b8:	d914      	bls.n	80082e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082ba:	4a17      	ldr	r2, [pc, #92]	; (8008318 <vPortValidateInterruptPriority+0x70>)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4413      	add	r3, r2
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082c4:	4b15      	ldr	r3, [pc, #84]	; (800831c <vPortValidateInterruptPriority+0x74>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	7afa      	ldrb	r2, [r7, #11]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d20a      	bcs.n	80082e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	607b      	str	r3, [r7, #4]
}
 80082e0:	bf00      	nop
 80082e2:	e7fe      	b.n	80082e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082e4:	4b0e      	ldr	r3, [pc, #56]	; (8008320 <vPortValidateInterruptPriority+0x78>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082ec:	4b0d      	ldr	r3, [pc, #52]	; (8008324 <vPortValidateInterruptPriority+0x7c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d90a      	bls.n	800830a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80082f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	603b      	str	r3, [r7, #0]
}
 8008306:	bf00      	nop
 8008308:	e7fe      	b.n	8008308 <vPortValidateInterruptPriority+0x60>
	}
 800830a:	bf00      	nop
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	e000e3f0 	.word	0xe000e3f0
 800831c:	20000fc4 	.word	0x20000fc4
 8008320:	e000ed0c 	.word	0xe000ed0c
 8008324:	20000fc8 	.word	0x20000fc8

08008328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08a      	sub	sp, #40	; 0x28
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008330:	2300      	movs	r3, #0
 8008332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008334:	f7fe fd92 	bl	8006e5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008338:	4b5b      	ldr	r3, [pc, #364]	; (80084a8 <pvPortMalloc+0x180>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008340:	f000 f920 	bl	8008584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008344:	4b59      	ldr	r3, [pc, #356]	; (80084ac <pvPortMalloc+0x184>)
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4013      	ands	r3, r2
 800834c:	2b00      	cmp	r3, #0
 800834e:	f040 8093 	bne.w	8008478 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d01d      	beq.n	8008394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008358:	2208      	movs	r2, #8
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4413      	add	r3, r2
 800835e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f003 0307 	and.w	r3, r3, #7
 8008366:	2b00      	cmp	r3, #0
 8008368:	d014      	beq.n	8008394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f023 0307 	bic.w	r3, r3, #7
 8008370:	3308      	adds	r3, #8
 8008372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00a      	beq.n	8008394 <pvPortMalloc+0x6c>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	617b      	str	r3, [r7, #20]
}
 8008390:	bf00      	nop
 8008392:	e7fe      	b.n	8008392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d06e      	beq.n	8008478 <pvPortMalloc+0x150>
 800839a:	4b45      	ldr	r3, [pc, #276]	; (80084b0 <pvPortMalloc+0x188>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d869      	bhi.n	8008478 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083a4:	4b43      	ldr	r3, [pc, #268]	; (80084b4 <pvPortMalloc+0x18c>)
 80083a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083a8:	4b42      	ldr	r3, [pc, #264]	; (80084b4 <pvPortMalloc+0x18c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083ae:	e004      	b.n	80083ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d903      	bls.n	80083cc <pvPortMalloc+0xa4>
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1f1      	bne.n	80083b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083cc:	4b36      	ldr	r3, [pc, #216]	; (80084a8 <pvPortMalloc+0x180>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d050      	beq.n	8008478 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2208      	movs	r2, #8
 80083dc:	4413      	add	r3, r2
 80083de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	1ad2      	subs	r2, r2, r3
 80083f0:	2308      	movs	r3, #8
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d91f      	bls.n	8008438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4413      	add	r3, r2
 80083fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	f003 0307 	and.w	r3, r3, #7
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <pvPortMalloc+0xf8>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	613b      	str	r3, [r7, #16]
}
 800841c:	bf00      	nop
 800841e:	e7fe      	b.n	800841e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	1ad2      	subs	r2, r2, r3
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008432:	69b8      	ldr	r0, [r7, #24]
 8008434:	f000 f908 	bl	8008648 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008438:	4b1d      	ldr	r3, [pc, #116]	; (80084b0 <pvPortMalloc+0x188>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	4a1b      	ldr	r2, [pc, #108]	; (80084b0 <pvPortMalloc+0x188>)
 8008444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008446:	4b1a      	ldr	r3, [pc, #104]	; (80084b0 <pvPortMalloc+0x188>)
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	4b1b      	ldr	r3, [pc, #108]	; (80084b8 <pvPortMalloc+0x190>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	429a      	cmp	r2, r3
 8008450:	d203      	bcs.n	800845a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008452:	4b17      	ldr	r3, [pc, #92]	; (80084b0 <pvPortMalloc+0x188>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a18      	ldr	r2, [pc, #96]	; (80084b8 <pvPortMalloc+0x190>)
 8008458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	685a      	ldr	r2, [r3, #4]
 800845e:	4b13      	ldr	r3, [pc, #76]	; (80084ac <pvPortMalloc+0x184>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	431a      	orrs	r2, r3
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	2200      	movs	r2, #0
 800846c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800846e:	4b13      	ldr	r3, [pc, #76]	; (80084bc <pvPortMalloc+0x194>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3301      	adds	r3, #1
 8008474:	4a11      	ldr	r2, [pc, #68]	; (80084bc <pvPortMalloc+0x194>)
 8008476:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008478:	f7fe fcfe 	bl	8006e78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	f003 0307 	and.w	r3, r3, #7
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <pvPortMalloc+0x174>
	__asm volatile
 8008486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	60fb      	str	r3, [r7, #12]
}
 8008498:	bf00      	nop
 800849a:	e7fe      	b.n	800849a <pvPortMalloc+0x172>
	return pvReturn;
 800849c:	69fb      	ldr	r3, [r7, #28]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3728      	adds	r7, #40	; 0x28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20004bd4 	.word	0x20004bd4
 80084ac:	20004be8 	.word	0x20004be8
 80084b0:	20004bd8 	.word	0x20004bd8
 80084b4:	20004bcc 	.word	0x20004bcc
 80084b8:	20004bdc 	.word	0x20004bdc
 80084bc:	20004be0 	.word	0x20004be0

080084c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d04d      	beq.n	800856e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084d2:	2308      	movs	r3, #8
 80084d4:	425b      	negs	r3, r3
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	4413      	add	r3, r2
 80084da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	4b24      	ldr	r3, [pc, #144]	; (8008578 <vPortFree+0xb8>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4013      	ands	r3, r2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10a      	bne.n	8008504 <vPortFree+0x44>
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	60fb      	str	r3, [r7, #12]
}
 8008500:	bf00      	nop
 8008502:	e7fe      	b.n	8008502 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00a      	beq.n	8008522 <vPortFree+0x62>
	__asm volatile
 800850c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008510:	f383 8811 	msr	BASEPRI, r3
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	f3bf 8f4f 	dsb	sy
 800851c:	60bb      	str	r3, [r7, #8]
}
 800851e:	bf00      	nop
 8008520:	e7fe      	b.n	8008520 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	4b14      	ldr	r3, [pc, #80]	; (8008578 <vPortFree+0xb8>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4013      	ands	r3, r2
 800852c:	2b00      	cmp	r3, #0
 800852e:	d01e      	beq.n	800856e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d11a      	bne.n	800856e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	4b0e      	ldr	r3, [pc, #56]	; (8008578 <vPortFree+0xb8>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	43db      	mvns	r3, r3
 8008542:	401a      	ands	r2, r3
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008548:	f7fe fc88 	bl	8006e5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	685a      	ldr	r2, [r3, #4]
 8008550:	4b0a      	ldr	r3, [pc, #40]	; (800857c <vPortFree+0xbc>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4413      	add	r3, r2
 8008556:	4a09      	ldr	r2, [pc, #36]	; (800857c <vPortFree+0xbc>)
 8008558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800855a:	6938      	ldr	r0, [r7, #16]
 800855c:	f000 f874 	bl	8008648 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008560:	4b07      	ldr	r3, [pc, #28]	; (8008580 <vPortFree+0xc0>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3301      	adds	r3, #1
 8008566:	4a06      	ldr	r2, [pc, #24]	; (8008580 <vPortFree+0xc0>)
 8008568:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800856a:	f7fe fc85 	bl	8006e78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800856e:	bf00      	nop
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	20004be8 	.word	0x20004be8
 800857c:	20004bd8 	.word	0x20004bd8
 8008580:	20004be4 	.word	0x20004be4

08008584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800858a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800858e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008590:	4b27      	ldr	r3, [pc, #156]	; (8008630 <prvHeapInit+0xac>)
 8008592:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00c      	beq.n	80085b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3307      	adds	r3, #7
 80085a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0307 	bic.w	r3, r3, #7
 80085aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	4a1f      	ldr	r2, [pc, #124]	; (8008630 <prvHeapInit+0xac>)
 80085b4:	4413      	add	r3, r2
 80085b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085bc:	4a1d      	ldr	r2, [pc, #116]	; (8008634 <prvHeapInit+0xb0>)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085c2:	4b1c      	ldr	r3, [pc, #112]	; (8008634 <prvHeapInit+0xb0>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	4413      	add	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085d0:	2208      	movs	r2, #8
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	1a9b      	subs	r3, r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f023 0307 	bic.w	r3, r3, #7
 80085de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4a15      	ldr	r2, [pc, #84]	; (8008638 <prvHeapInit+0xb4>)
 80085e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085e6:	4b14      	ldr	r3, [pc, #80]	; (8008638 <prvHeapInit+0xb4>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2200      	movs	r2, #0
 80085ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085ee:	4b12      	ldr	r3, [pc, #72]	; (8008638 <prvHeapInit+0xb4>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2200      	movs	r2, #0
 80085f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	1ad2      	subs	r2, r2, r3
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008604:	4b0c      	ldr	r3, [pc, #48]	; (8008638 <prvHeapInit+0xb4>)
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	4a0a      	ldr	r2, [pc, #40]	; (800863c <prvHeapInit+0xb8>)
 8008612:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	4a09      	ldr	r2, [pc, #36]	; (8008640 <prvHeapInit+0xbc>)
 800861a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800861c:	4b09      	ldr	r3, [pc, #36]	; (8008644 <prvHeapInit+0xc0>)
 800861e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008622:	601a      	str	r2, [r3, #0]
}
 8008624:	bf00      	nop
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	20000fcc 	.word	0x20000fcc
 8008634:	20004bcc 	.word	0x20004bcc
 8008638:	20004bd4 	.word	0x20004bd4
 800863c:	20004bdc 	.word	0x20004bdc
 8008640:	20004bd8 	.word	0x20004bd8
 8008644:	20004be8 	.word	0x20004be8

08008648 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008650:	4b28      	ldr	r3, [pc, #160]	; (80086f4 <prvInsertBlockIntoFreeList+0xac>)
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	e002      	b.n	800865c <prvInsertBlockIntoFreeList+0x14>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	429a      	cmp	r2, r3
 8008664:	d8f7      	bhi.n	8008656 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	4413      	add	r3, r2
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	429a      	cmp	r2, r3
 8008676:	d108      	bne.n	800868a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	441a      	add	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	441a      	add	r2, r3
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	429a      	cmp	r2, r3
 800869c:	d118      	bne.n	80086d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	4b15      	ldr	r3, [pc, #84]	; (80086f8 <prvInsertBlockIntoFreeList+0xb0>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d00d      	beq.n	80086c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	441a      	add	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	e008      	b.n	80086d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086c6:	4b0c      	ldr	r3, [pc, #48]	; (80086f8 <prvInsertBlockIntoFreeList+0xb0>)
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	e003      	b.n	80086d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d002      	beq.n	80086e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086e6:	bf00      	nop
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	20004bcc 	.word	0x20004bcc
 80086f8:	20004bd4 	.word	0x20004bd4

080086fc <__errno>:
 80086fc:	4b01      	ldr	r3, [pc, #4]	; (8008704 <__errno+0x8>)
 80086fe:	6818      	ldr	r0, [r3, #0]
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	20000018 	.word	0x20000018

08008708 <std>:
 8008708:	2300      	movs	r3, #0
 800870a:	b510      	push	{r4, lr}
 800870c:	4604      	mov	r4, r0
 800870e:	e9c0 3300 	strd	r3, r3, [r0]
 8008712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008716:	6083      	str	r3, [r0, #8]
 8008718:	8181      	strh	r1, [r0, #12]
 800871a:	6643      	str	r3, [r0, #100]	; 0x64
 800871c:	81c2      	strh	r2, [r0, #14]
 800871e:	6183      	str	r3, [r0, #24]
 8008720:	4619      	mov	r1, r3
 8008722:	2208      	movs	r2, #8
 8008724:	305c      	adds	r0, #92	; 0x5c
 8008726:	f000 f91a 	bl	800895e <memset>
 800872a:	4b05      	ldr	r3, [pc, #20]	; (8008740 <std+0x38>)
 800872c:	6263      	str	r3, [r4, #36]	; 0x24
 800872e:	4b05      	ldr	r3, [pc, #20]	; (8008744 <std+0x3c>)
 8008730:	62a3      	str	r3, [r4, #40]	; 0x28
 8008732:	4b05      	ldr	r3, [pc, #20]	; (8008748 <std+0x40>)
 8008734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008736:	4b05      	ldr	r3, [pc, #20]	; (800874c <std+0x44>)
 8008738:	6224      	str	r4, [r4, #32]
 800873a:	6323      	str	r3, [r4, #48]	; 0x30
 800873c:	bd10      	pop	{r4, pc}
 800873e:	bf00      	nop
 8008740:	080095b1 	.word	0x080095b1
 8008744:	080095d3 	.word	0x080095d3
 8008748:	0800960b 	.word	0x0800960b
 800874c:	0800962f 	.word	0x0800962f

08008750 <_cleanup_r>:
 8008750:	4901      	ldr	r1, [pc, #4]	; (8008758 <_cleanup_r+0x8>)
 8008752:	f000 b8af 	b.w	80088b4 <_fwalk_reent>
 8008756:	bf00      	nop
 8008758:	0800a5fd 	.word	0x0800a5fd

0800875c <__sfmoreglue>:
 800875c:	b570      	push	{r4, r5, r6, lr}
 800875e:	1e4a      	subs	r2, r1, #1
 8008760:	2568      	movs	r5, #104	; 0x68
 8008762:	4355      	muls	r5, r2
 8008764:	460e      	mov	r6, r1
 8008766:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800876a:	f000 f901 	bl	8008970 <_malloc_r>
 800876e:	4604      	mov	r4, r0
 8008770:	b140      	cbz	r0, 8008784 <__sfmoreglue+0x28>
 8008772:	2100      	movs	r1, #0
 8008774:	e9c0 1600 	strd	r1, r6, [r0]
 8008778:	300c      	adds	r0, #12
 800877a:	60a0      	str	r0, [r4, #8]
 800877c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008780:	f000 f8ed 	bl	800895e <memset>
 8008784:	4620      	mov	r0, r4
 8008786:	bd70      	pop	{r4, r5, r6, pc}

08008788 <__sfp_lock_acquire>:
 8008788:	4801      	ldr	r0, [pc, #4]	; (8008790 <__sfp_lock_acquire+0x8>)
 800878a:	f000 b8d8 	b.w	800893e <__retarget_lock_acquire_recursive>
 800878e:	bf00      	nop
 8008790:	2000511c 	.word	0x2000511c

08008794 <__sfp_lock_release>:
 8008794:	4801      	ldr	r0, [pc, #4]	; (800879c <__sfp_lock_release+0x8>)
 8008796:	f000 b8d3 	b.w	8008940 <__retarget_lock_release_recursive>
 800879a:	bf00      	nop
 800879c:	2000511c 	.word	0x2000511c

080087a0 <__sinit_lock_acquire>:
 80087a0:	4801      	ldr	r0, [pc, #4]	; (80087a8 <__sinit_lock_acquire+0x8>)
 80087a2:	f000 b8cc 	b.w	800893e <__retarget_lock_acquire_recursive>
 80087a6:	bf00      	nop
 80087a8:	20005117 	.word	0x20005117

080087ac <__sinit_lock_release>:
 80087ac:	4801      	ldr	r0, [pc, #4]	; (80087b4 <__sinit_lock_release+0x8>)
 80087ae:	f000 b8c7 	b.w	8008940 <__retarget_lock_release_recursive>
 80087b2:	bf00      	nop
 80087b4:	20005117 	.word	0x20005117

080087b8 <__sinit>:
 80087b8:	b510      	push	{r4, lr}
 80087ba:	4604      	mov	r4, r0
 80087bc:	f7ff fff0 	bl	80087a0 <__sinit_lock_acquire>
 80087c0:	69a3      	ldr	r3, [r4, #24]
 80087c2:	b11b      	cbz	r3, 80087cc <__sinit+0x14>
 80087c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c8:	f7ff bff0 	b.w	80087ac <__sinit_lock_release>
 80087cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80087d0:	6523      	str	r3, [r4, #80]	; 0x50
 80087d2:	4b13      	ldr	r3, [pc, #76]	; (8008820 <__sinit+0x68>)
 80087d4:	4a13      	ldr	r2, [pc, #76]	; (8008824 <__sinit+0x6c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80087da:	42a3      	cmp	r3, r4
 80087dc:	bf04      	itt	eq
 80087de:	2301      	moveq	r3, #1
 80087e0:	61a3      	streq	r3, [r4, #24]
 80087e2:	4620      	mov	r0, r4
 80087e4:	f000 f820 	bl	8008828 <__sfp>
 80087e8:	6060      	str	r0, [r4, #4]
 80087ea:	4620      	mov	r0, r4
 80087ec:	f000 f81c 	bl	8008828 <__sfp>
 80087f0:	60a0      	str	r0, [r4, #8]
 80087f2:	4620      	mov	r0, r4
 80087f4:	f000 f818 	bl	8008828 <__sfp>
 80087f8:	2200      	movs	r2, #0
 80087fa:	60e0      	str	r0, [r4, #12]
 80087fc:	2104      	movs	r1, #4
 80087fe:	6860      	ldr	r0, [r4, #4]
 8008800:	f7ff ff82 	bl	8008708 <std>
 8008804:	68a0      	ldr	r0, [r4, #8]
 8008806:	2201      	movs	r2, #1
 8008808:	2109      	movs	r1, #9
 800880a:	f7ff ff7d 	bl	8008708 <std>
 800880e:	68e0      	ldr	r0, [r4, #12]
 8008810:	2202      	movs	r2, #2
 8008812:	2112      	movs	r1, #18
 8008814:	f7ff ff78 	bl	8008708 <std>
 8008818:	2301      	movs	r3, #1
 800881a:	61a3      	str	r3, [r4, #24]
 800881c:	e7d2      	b.n	80087c4 <__sinit+0xc>
 800881e:	bf00      	nop
 8008820:	0800b944 	.word	0x0800b944
 8008824:	08008751 	.word	0x08008751

08008828 <__sfp>:
 8008828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882a:	4607      	mov	r7, r0
 800882c:	f7ff ffac 	bl	8008788 <__sfp_lock_acquire>
 8008830:	4b1e      	ldr	r3, [pc, #120]	; (80088ac <__sfp+0x84>)
 8008832:	681e      	ldr	r6, [r3, #0]
 8008834:	69b3      	ldr	r3, [r6, #24]
 8008836:	b913      	cbnz	r3, 800883e <__sfp+0x16>
 8008838:	4630      	mov	r0, r6
 800883a:	f7ff ffbd 	bl	80087b8 <__sinit>
 800883e:	3648      	adds	r6, #72	; 0x48
 8008840:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008844:	3b01      	subs	r3, #1
 8008846:	d503      	bpl.n	8008850 <__sfp+0x28>
 8008848:	6833      	ldr	r3, [r6, #0]
 800884a:	b30b      	cbz	r3, 8008890 <__sfp+0x68>
 800884c:	6836      	ldr	r6, [r6, #0]
 800884e:	e7f7      	b.n	8008840 <__sfp+0x18>
 8008850:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008854:	b9d5      	cbnz	r5, 800888c <__sfp+0x64>
 8008856:	4b16      	ldr	r3, [pc, #88]	; (80088b0 <__sfp+0x88>)
 8008858:	60e3      	str	r3, [r4, #12]
 800885a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800885e:	6665      	str	r5, [r4, #100]	; 0x64
 8008860:	f000 f86c 	bl	800893c <__retarget_lock_init_recursive>
 8008864:	f7ff ff96 	bl	8008794 <__sfp_lock_release>
 8008868:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800886c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008870:	6025      	str	r5, [r4, #0]
 8008872:	61a5      	str	r5, [r4, #24]
 8008874:	2208      	movs	r2, #8
 8008876:	4629      	mov	r1, r5
 8008878:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800887c:	f000 f86f 	bl	800895e <memset>
 8008880:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008884:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008888:	4620      	mov	r0, r4
 800888a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800888c:	3468      	adds	r4, #104	; 0x68
 800888e:	e7d9      	b.n	8008844 <__sfp+0x1c>
 8008890:	2104      	movs	r1, #4
 8008892:	4638      	mov	r0, r7
 8008894:	f7ff ff62 	bl	800875c <__sfmoreglue>
 8008898:	4604      	mov	r4, r0
 800889a:	6030      	str	r0, [r6, #0]
 800889c:	2800      	cmp	r0, #0
 800889e:	d1d5      	bne.n	800884c <__sfp+0x24>
 80088a0:	f7ff ff78 	bl	8008794 <__sfp_lock_release>
 80088a4:	230c      	movs	r3, #12
 80088a6:	603b      	str	r3, [r7, #0]
 80088a8:	e7ee      	b.n	8008888 <__sfp+0x60>
 80088aa:	bf00      	nop
 80088ac:	0800b944 	.word	0x0800b944
 80088b0:	ffff0001 	.word	0xffff0001

080088b4 <_fwalk_reent>:
 80088b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b8:	4606      	mov	r6, r0
 80088ba:	4688      	mov	r8, r1
 80088bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088c0:	2700      	movs	r7, #0
 80088c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088c6:	f1b9 0901 	subs.w	r9, r9, #1
 80088ca:	d505      	bpl.n	80088d8 <_fwalk_reent+0x24>
 80088cc:	6824      	ldr	r4, [r4, #0]
 80088ce:	2c00      	cmp	r4, #0
 80088d0:	d1f7      	bne.n	80088c2 <_fwalk_reent+0xe>
 80088d2:	4638      	mov	r0, r7
 80088d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d8:	89ab      	ldrh	r3, [r5, #12]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d907      	bls.n	80088ee <_fwalk_reent+0x3a>
 80088de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088e2:	3301      	adds	r3, #1
 80088e4:	d003      	beq.n	80088ee <_fwalk_reent+0x3a>
 80088e6:	4629      	mov	r1, r5
 80088e8:	4630      	mov	r0, r6
 80088ea:	47c0      	blx	r8
 80088ec:	4307      	orrs	r7, r0
 80088ee:	3568      	adds	r5, #104	; 0x68
 80088f0:	e7e9      	b.n	80088c6 <_fwalk_reent+0x12>
	...

080088f4 <__libc_init_array>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	4d0d      	ldr	r5, [pc, #52]	; (800892c <__libc_init_array+0x38>)
 80088f8:	4c0d      	ldr	r4, [pc, #52]	; (8008930 <__libc_init_array+0x3c>)
 80088fa:	1b64      	subs	r4, r4, r5
 80088fc:	10a4      	asrs	r4, r4, #2
 80088fe:	2600      	movs	r6, #0
 8008900:	42a6      	cmp	r6, r4
 8008902:	d109      	bne.n	8008918 <__libc_init_array+0x24>
 8008904:	4d0b      	ldr	r5, [pc, #44]	; (8008934 <__libc_init_array+0x40>)
 8008906:	4c0c      	ldr	r4, [pc, #48]	; (8008938 <__libc_init_array+0x44>)
 8008908:	f002 feec 	bl	800b6e4 <_init>
 800890c:	1b64      	subs	r4, r4, r5
 800890e:	10a4      	asrs	r4, r4, #2
 8008910:	2600      	movs	r6, #0
 8008912:	42a6      	cmp	r6, r4
 8008914:	d105      	bne.n	8008922 <__libc_init_array+0x2e>
 8008916:	bd70      	pop	{r4, r5, r6, pc}
 8008918:	f855 3b04 	ldr.w	r3, [r5], #4
 800891c:	4798      	blx	r3
 800891e:	3601      	adds	r6, #1
 8008920:	e7ee      	b.n	8008900 <__libc_init_array+0xc>
 8008922:	f855 3b04 	ldr.w	r3, [r5], #4
 8008926:	4798      	blx	r3
 8008928:	3601      	adds	r6, #1
 800892a:	e7f2      	b.n	8008912 <__libc_init_array+0x1e>
 800892c:	0800bcd4 	.word	0x0800bcd4
 8008930:	0800bcd4 	.word	0x0800bcd4
 8008934:	0800bcd4 	.word	0x0800bcd4
 8008938:	0800bcd8 	.word	0x0800bcd8

0800893c <__retarget_lock_init_recursive>:
 800893c:	4770      	bx	lr

0800893e <__retarget_lock_acquire_recursive>:
 800893e:	4770      	bx	lr

08008940 <__retarget_lock_release_recursive>:
 8008940:	4770      	bx	lr

08008942 <memcpy>:
 8008942:	440a      	add	r2, r1
 8008944:	4291      	cmp	r1, r2
 8008946:	f100 33ff 	add.w	r3, r0, #4294967295
 800894a:	d100      	bne.n	800894e <memcpy+0xc>
 800894c:	4770      	bx	lr
 800894e:	b510      	push	{r4, lr}
 8008950:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008954:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008958:	4291      	cmp	r1, r2
 800895a:	d1f9      	bne.n	8008950 <memcpy+0xe>
 800895c:	bd10      	pop	{r4, pc}

0800895e <memset>:
 800895e:	4402      	add	r2, r0
 8008960:	4603      	mov	r3, r0
 8008962:	4293      	cmp	r3, r2
 8008964:	d100      	bne.n	8008968 <memset+0xa>
 8008966:	4770      	bx	lr
 8008968:	f803 1b01 	strb.w	r1, [r3], #1
 800896c:	e7f9      	b.n	8008962 <memset+0x4>
	...

08008970 <_malloc_r>:
 8008970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008972:	1ccd      	adds	r5, r1, #3
 8008974:	f025 0503 	bic.w	r5, r5, #3
 8008978:	3508      	adds	r5, #8
 800897a:	2d0c      	cmp	r5, #12
 800897c:	bf38      	it	cc
 800897e:	250c      	movcc	r5, #12
 8008980:	2d00      	cmp	r5, #0
 8008982:	4606      	mov	r6, r0
 8008984:	db01      	blt.n	800898a <_malloc_r+0x1a>
 8008986:	42a9      	cmp	r1, r5
 8008988:	d903      	bls.n	8008992 <_malloc_r+0x22>
 800898a:	230c      	movs	r3, #12
 800898c:	6033      	str	r3, [r6, #0]
 800898e:	2000      	movs	r0, #0
 8008990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008992:	f001 fef1 	bl	800a778 <__malloc_lock>
 8008996:	4921      	ldr	r1, [pc, #132]	; (8008a1c <_malloc_r+0xac>)
 8008998:	680a      	ldr	r2, [r1, #0]
 800899a:	4614      	mov	r4, r2
 800899c:	b99c      	cbnz	r4, 80089c6 <_malloc_r+0x56>
 800899e:	4f20      	ldr	r7, [pc, #128]	; (8008a20 <_malloc_r+0xb0>)
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	b923      	cbnz	r3, 80089ae <_malloc_r+0x3e>
 80089a4:	4621      	mov	r1, r4
 80089a6:	4630      	mov	r0, r6
 80089a8:	f000 fd9e 	bl	80094e8 <_sbrk_r>
 80089ac:	6038      	str	r0, [r7, #0]
 80089ae:	4629      	mov	r1, r5
 80089b0:	4630      	mov	r0, r6
 80089b2:	f000 fd99 	bl	80094e8 <_sbrk_r>
 80089b6:	1c43      	adds	r3, r0, #1
 80089b8:	d123      	bne.n	8008a02 <_malloc_r+0x92>
 80089ba:	230c      	movs	r3, #12
 80089bc:	6033      	str	r3, [r6, #0]
 80089be:	4630      	mov	r0, r6
 80089c0:	f001 fee0 	bl	800a784 <__malloc_unlock>
 80089c4:	e7e3      	b.n	800898e <_malloc_r+0x1e>
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	1b5b      	subs	r3, r3, r5
 80089ca:	d417      	bmi.n	80089fc <_malloc_r+0x8c>
 80089cc:	2b0b      	cmp	r3, #11
 80089ce:	d903      	bls.n	80089d8 <_malloc_r+0x68>
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	441c      	add	r4, r3
 80089d4:	6025      	str	r5, [r4, #0]
 80089d6:	e004      	b.n	80089e2 <_malloc_r+0x72>
 80089d8:	6863      	ldr	r3, [r4, #4]
 80089da:	42a2      	cmp	r2, r4
 80089dc:	bf0c      	ite	eq
 80089de:	600b      	streq	r3, [r1, #0]
 80089e0:	6053      	strne	r3, [r2, #4]
 80089e2:	4630      	mov	r0, r6
 80089e4:	f001 fece 	bl	800a784 <__malloc_unlock>
 80089e8:	f104 000b 	add.w	r0, r4, #11
 80089ec:	1d23      	adds	r3, r4, #4
 80089ee:	f020 0007 	bic.w	r0, r0, #7
 80089f2:	1ac2      	subs	r2, r0, r3
 80089f4:	d0cc      	beq.n	8008990 <_malloc_r+0x20>
 80089f6:	1a1b      	subs	r3, r3, r0
 80089f8:	50a3      	str	r3, [r4, r2]
 80089fa:	e7c9      	b.n	8008990 <_malloc_r+0x20>
 80089fc:	4622      	mov	r2, r4
 80089fe:	6864      	ldr	r4, [r4, #4]
 8008a00:	e7cc      	b.n	800899c <_malloc_r+0x2c>
 8008a02:	1cc4      	adds	r4, r0, #3
 8008a04:	f024 0403 	bic.w	r4, r4, #3
 8008a08:	42a0      	cmp	r0, r4
 8008a0a:	d0e3      	beq.n	80089d4 <_malloc_r+0x64>
 8008a0c:	1a21      	subs	r1, r4, r0
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f000 fd6a 	bl	80094e8 <_sbrk_r>
 8008a14:	3001      	adds	r0, #1
 8008a16:	d1dd      	bne.n	80089d4 <_malloc_r+0x64>
 8008a18:	e7cf      	b.n	80089ba <_malloc_r+0x4a>
 8008a1a:	bf00      	nop
 8008a1c:	20004bec 	.word	0x20004bec
 8008a20:	20004bf0 	.word	0x20004bf0

08008a24 <__cvt>:
 8008a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a28:	ec55 4b10 	vmov	r4, r5, d0
 8008a2c:	2d00      	cmp	r5, #0
 8008a2e:	460e      	mov	r6, r1
 8008a30:	4619      	mov	r1, r3
 8008a32:	462b      	mov	r3, r5
 8008a34:	bfbb      	ittet	lt
 8008a36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a3a:	461d      	movlt	r5, r3
 8008a3c:	2300      	movge	r3, #0
 8008a3e:	232d      	movlt	r3, #45	; 0x2d
 8008a40:	700b      	strb	r3, [r1, #0]
 8008a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a48:	4691      	mov	r9, r2
 8008a4a:	f023 0820 	bic.w	r8, r3, #32
 8008a4e:	bfbc      	itt	lt
 8008a50:	4622      	movlt	r2, r4
 8008a52:	4614      	movlt	r4, r2
 8008a54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a58:	d005      	beq.n	8008a66 <__cvt+0x42>
 8008a5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a5e:	d100      	bne.n	8008a62 <__cvt+0x3e>
 8008a60:	3601      	adds	r6, #1
 8008a62:	2102      	movs	r1, #2
 8008a64:	e000      	b.n	8008a68 <__cvt+0x44>
 8008a66:	2103      	movs	r1, #3
 8008a68:	ab03      	add	r3, sp, #12
 8008a6a:	9301      	str	r3, [sp, #4]
 8008a6c:	ab02      	add	r3, sp, #8
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	ec45 4b10 	vmov	d0, r4, r5
 8008a74:	4653      	mov	r3, sl
 8008a76:	4632      	mov	r2, r6
 8008a78:	f000 ff4e 	bl	8009918 <_dtoa_r>
 8008a7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a80:	4607      	mov	r7, r0
 8008a82:	d102      	bne.n	8008a8a <__cvt+0x66>
 8008a84:	f019 0f01 	tst.w	r9, #1
 8008a88:	d022      	beq.n	8008ad0 <__cvt+0xac>
 8008a8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a8e:	eb07 0906 	add.w	r9, r7, r6
 8008a92:	d110      	bne.n	8008ab6 <__cvt+0x92>
 8008a94:	783b      	ldrb	r3, [r7, #0]
 8008a96:	2b30      	cmp	r3, #48	; 0x30
 8008a98:	d10a      	bne.n	8008ab0 <__cvt+0x8c>
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	f7f8 f819 	bl	8000ad8 <__aeabi_dcmpeq>
 8008aa6:	b918      	cbnz	r0, 8008ab0 <__cvt+0x8c>
 8008aa8:	f1c6 0601 	rsb	r6, r6, #1
 8008aac:	f8ca 6000 	str.w	r6, [sl]
 8008ab0:	f8da 3000 	ldr.w	r3, [sl]
 8008ab4:	4499      	add	r9, r3
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2300      	movs	r3, #0
 8008aba:	4620      	mov	r0, r4
 8008abc:	4629      	mov	r1, r5
 8008abe:	f7f8 f80b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ac2:	b108      	cbz	r0, 8008ac8 <__cvt+0xa4>
 8008ac4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ac8:	2230      	movs	r2, #48	; 0x30
 8008aca:	9b03      	ldr	r3, [sp, #12]
 8008acc:	454b      	cmp	r3, r9
 8008ace:	d307      	bcc.n	8008ae0 <__cvt+0xbc>
 8008ad0:	9b03      	ldr	r3, [sp, #12]
 8008ad2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ad4:	1bdb      	subs	r3, r3, r7
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	b004      	add	sp, #16
 8008adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae0:	1c59      	adds	r1, r3, #1
 8008ae2:	9103      	str	r1, [sp, #12]
 8008ae4:	701a      	strb	r2, [r3, #0]
 8008ae6:	e7f0      	b.n	8008aca <__cvt+0xa6>

08008ae8 <__exponent>:
 8008ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008aea:	4603      	mov	r3, r0
 8008aec:	2900      	cmp	r1, #0
 8008aee:	bfb8      	it	lt
 8008af0:	4249      	neglt	r1, r1
 8008af2:	f803 2b02 	strb.w	r2, [r3], #2
 8008af6:	bfb4      	ite	lt
 8008af8:	222d      	movlt	r2, #45	; 0x2d
 8008afa:	222b      	movge	r2, #43	; 0x2b
 8008afc:	2909      	cmp	r1, #9
 8008afe:	7042      	strb	r2, [r0, #1]
 8008b00:	dd2a      	ble.n	8008b58 <__exponent+0x70>
 8008b02:	f10d 0407 	add.w	r4, sp, #7
 8008b06:	46a4      	mov	ip, r4
 8008b08:	270a      	movs	r7, #10
 8008b0a:	46a6      	mov	lr, r4
 8008b0c:	460a      	mov	r2, r1
 8008b0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b12:	fb07 1516 	mls	r5, r7, r6, r1
 8008b16:	3530      	adds	r5, #48	; 0x30
 8008b18:	2a63      	cmp	r2, #99	; 0x63
 8008b1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008b1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b22:	4631      	mov	r1, r6
 8008b24:	dcf1      	bgt.n	8008b0a <__exponent+0x22>
 8008b26:	3130      	adds	r1, #48	; 0x30
 8008b28:	f1ae 0502 	sub.w	r5, lr, #2
 8008b2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b30:	1c44      	adds	r4, r0, #1
 8008b32:	4629      	mov	r1, r5
 8008b34:	4561      	cmp	r1, ip
 8008b36:	d30a      	bcc.n	8008b4e <__exponent+0x66>
 8008b38:	f10d 0209 	add.w	r2, sp, #9
 8008b3c:	eba2 020e 	sub.w	r2, r2, lr
 8008b40:	4565      	cmp	r5, ip
 8008b42:	bf88      	it	hi
 8008b44:	2200      	movhi	r2, #0
 8008b46:	4413      	add	r3, r2
 8008b48:	1a18      	subs	r0, r3, r0
 8008b4a:	b003      	add	sp, #12
 8008b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b56:	e7ed      	b.n	8008b34 <__exponent+0x4c>
 8008b58:	2330      	movs	r3, #48	; 0x30
 8008b5a:	3130      	adds	r1, #48	; 0x30
 8008b5c:	7083      	strb	r3, [r0, #2]
 8008b5e:	70c1      	strb	r1, [r0, #3]
 8008b60:	1d03      	adds	r3, r0, #4
 8008b62:	e7f1      	b.n	8008b48 <__exponent+0x60>

08008b64 <_printf_float>:
 8008b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b68:	ed2d 8b02 	vpush	{d8}
 8008b6c:	b08d      	sub	sp, #52	; 0x34
 8008b6e:	460c      	mov	r4, r1
 8008b70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b74:	4616      	mov	r6, r2
 8008b76:	461f      	mov	r7, r3
 8008b78:	4605      	mov	r5, r0
 8008b7a:	f001 fd7b 	bl	800a674 <_localeconv_r>
 8008b7e:	f8d0 a000 	ldr.w	sl, [r0]
 8008b82:	4650      	mov	r0, sl
 8008b84:	f7f7 fb2c 	bl	80001e0 <strlen>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	9305      	str	r3, [sp, #20]
 8008b90:	f8d8 3000 	ldr.w	r3, [r8]
 8008b94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b98:	3307      	adds	r3, #7
 8008b9a:	f023 0307 	bic.w	r3, r3, #7
 8008b9e:	f103 0208 	add.w	r2, r3, #8
 8008ba2:	f8c8 2000 	str.w	r2, [r8]
 8008ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008baa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008bae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008bb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008bb6:	9307      	str	r3, [sp, #28]
 8008bb8:	f8cd 8018 	str.w	r8, [sp, #24]
 8008bbc:	ee08 0a10 	vmov	s16, r0
 8008bc0:	4b9f      	ldr	r3, [pc, #636]	; (8008e40 <_printf_float+0x2dc>)
 8008bc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bca:	f7f7 ffb7 	bl	8000b3c <__aeabi_dcmpun>
 8008bce:	bb88      	cbnz	r0, 8008c34 <_printf_float+0xd0>
 8008bd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bd4:	4b9a      	ldr	r3, [pc, #616]	; (8008e40 <_printf_float+0x2dc>)
 8008bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bda:	f7f7 ff91 	bl	8000b00 <__aeabi_dcmple>
 8008bde:	bb48      	cbnz	r0, 8008c34 <_printf_float+0xd0>
 8008be0:	2200      	movs	r2, #0
 8008be2:	2300      	movs	r3, #0
 8008be4:	4640      	mov	r0, r8
 8008be6:	4649      	mov	r1, r9
 8008be8:	f7f7 ff80 	bl	8000aec <__aeabi_dcmplt>
 8008bec:	b110      	cbz	r0, 8008bf4 <_printf_float+0x90>
 8008bee:	232d      	movs	r3, #45	; 0x2d
 8008bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bf4:	4b93      	ldr	r3, [pc, #588]	; (8008e44 <_printf_float+0x2e0>)
 8008bf6:	4894      	ldr	r0, [pc, #592]	; (8008e48 <_printf_float+0x2e4>)
 8008bf8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008bfc:	bf94      	ite	ls
 8008bfe:	4698      	movls	r8, r3
 8008c00:	4680      	movhi	r8, r0
 8008c02:	2303      	movs	r3, #3
 8008c04:	6123      	str	r3, [r4, #16]
 8008c06:	9b05      	ldr	r3, [sp, #20]
 8008c08:	f023 0204 	bic.w	r2, r3, #4
 8008c0c:	6022      	str	r2, [r4, #0]
 8008c0e:	f04f 0900 	mov.w	r9, #0
 8008c12:	9700      	str	r7, [sp, #0]
 8008c14:	4633      	mov	r3, r6
 8008c16:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	f000 f9d8 	bl	8008fd0 <_printf_common>
 8008c20:	3001      	adds	r0, #1
 8008c22:	f040 8090 	bne.w	8008d46 <_printf_float+0x1e2>
 8008c26:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2a:	b00d      	add	sp, #52	; 0x34
 8008c2c:	ecbd 8b02 	vpop	{d8}
 8008c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c34:	4642      	mov	r2, r8
 8008c36:	464b      	mov	r3, r9
 8008c38:	4640      	mov	r0, r8
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	f7f7 ff7e 	bl	8000b3c <__aeabi_dcmpun>
 8008c40:	b140      	cbz	r0, 8008c54 <_printf_float+0xf0>
 8008c42:	464b      	mov	r3, r9
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	bfbc      	itt	lt
 8008c48:	232d      	movlt	r3, #45	; 0x2d
 8008c4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c4e:	487f      	ldr	r0, [pc, #508]	; (8008e4c <_printf_float+0x2e8>)
 8008c50:	4b7f      	ldr	r3, [pc, #508]	; (8008e50 <_printf_float+0x2ec>)
 8008c52:	e7d1      	b.n	8008bf8 <_printf_float+0x94>
 8008c54:	6863      	ldr	r3, [r4, #4]
 8008c56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008c5a:	9206      	str	r2, [sp, #24]
 8008c5c:	1c5a      	adds	r2, r3, #1
 8008c5e:	d13f      	bne.n	8008ce0 <_printf_float+0x17c>
 8008c60:	2306      	movs	r3, #6
 8008c62:	6063      	str	r3, [r4, #4]
 8008c64:	9b05      	ldr	r3, [sp, #20]
 8008c66:	6861      	ldr	r1, [r4, #4]
 8008c68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9303      	str	r3, [sp, #12]
 8008c70:	ab0a      	add	r3, sp, #40	; 0x28
 8008c72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c76:	ab09      	add	r3, sp, #36	; 0x24
 8008c78:	ec49 8b10 	vmov	d0, r8, r9
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	6022      	str	r2, [r4, #0]
 8008c80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c84:	4628      	mov	r0, r5
 8008c86:	f7ff fecd 	bl	8008a24 <__cvt>
 8008c8a:	9b06      	ldr	r3, [sp, #24]
 8008c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c8e:	2b47      	cmp	r3, #71	; 0x47
 8008c90:	4680      	mov	r8, r0
 8008c92:	d108      	bne.n	8008ca6 <_printf_float+0x142>
 8008c94:	1cc8      	adds	r0, r1, #3
 8008c96:	db02      	blt.n	8008c9e <_printf_float+0x13a>
 8008c98:	6863      	ldr	r3, [r4, #4]
 8008c9a:	4299      	cmp	r1, r3
 8008c9c:	dd41      	ble.n	8008d22 <_printf_float+0x1be>
 8008c9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008ca2:	fa5f fb8b 	uxtb.w	fp, fp
 8008ca6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008caa:	d820      	bhi.n	8008cee <_printf_float+0x18a>
 8008cac:	3901      	subs	r1, #1
 8008cae:	465a      	mov	r2, fp
 8008cb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008cb4:	9109      	str	r1, [sp, #36]	; 0x24
 8008cb6:	f7ff ff17 	bl	8008ae8 <__exponent>
 8008cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cbc:	1813      	adds	r3, r2, r0
 8008cbe:	2a01      	cmp	r2, #1
 8008cc0:	4681      	mov	r9, r0
 8008cc2:	6123      	str	r3, [r4, #16]
 8008cc4:	dc02      	bgt.n	8008ccc <_printf_float+0x168>
 8008cc6:	6822      	ldr	r2, [r4, #0]
 8008cc8:	07d2      	lsls	r2, r2, #31
 8008cca:	d501      	bpl.n	8008cd0 <_printf_float+0x16c>
 8008ccc:	3301      	adds	r3, #1
 8008cce:	6123      	str	r3, [r4, #16]
 8008cd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d09c      	beq.n	8008c12 <_printf_float+0xae>
 8008cd8:	232d      	movs	r3, #45	; 0x2d
 8008cda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cde:	e798      	b.n	8008c12 <_printf_float+0xae>
 8008ce0:	9a06      	ldr	r2, [sp, #24]
 8008ce2:	2a47      	cmp	r2, #71	; 0x47
 8008ce4:	d1be      	bne.n	8008c64 <_printf_float+0x100>
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1bc      	bne.n	8008c64 <_printf_float+0x100>
 8008cea:	2301      	movs	r3, #1
 8008cec:	e7b9      	b.n	8008c62 <_printf_float+0xfe>
 8008cee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008cf2:	d118      	bne.n	8008d26 <_printf_float+0x1c2>
 8008cf4:	2900      	cmp	r1, #0
 8008cf6:	6863      	ldr	r3, [r4, #4]
 8008cf8:	dd0b      	ble.n	8008d12 <_printf_float+0x1ae>
 8008cfa:	6121      	str	r1, [r4, #16]
 8008cfc:	b913      	cbnz	r3, 8008d04 <_printf_float+0x1a0>
 8008cfe:	6822      	ldr	r2, [r4, #0]
 8008d00:	07d0      	lsls	r0, r2, #31
 8008d02:	d502      	bpl.n	8008d0a <_printf_float+0x1a6>
 8008d04:	3301      	adds	r3, #1
 8008d06:	440b      	add	r3, r1
 8008d08:	6123      	str	r3, [r4, #16]
 8008d0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d0c:	f04f 0900 	mov.w	r9, #0
 8008d10:	e7de      	b.n	8008cd0 <_printf_float+0x16c>
 8008d12:	b913      	cbnz	r3, 8008d1a <_printf_float+0x1b6>
 8008d14:	6822      	ldr	r2, [r4, #0]
 8008d16:	07d2      	lsls	r2, r2, #31
 8008d18:	d501      	bpl.n	8008d1e <_printf_float+0x1ba>
 8008d1a:	3302      	adds	r3, #2
 8008d1c:	e7f4      	b.n	8008d08 <_printf_float+0x1a4>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e7f2      	b.n	8008d08 <_printf_float+0x1a4>
 8008d22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d28:	4299      	cmp	r1, r3
 8008d2a:	db05      	blt.n	8008d38 <_printf_float+0x1d4>
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	6121      	str	r1, [r4, #16]
 8008d30:	07d8      	lsls	r0, r3, #31
 8008d32:	d5ea      	bpl.n	8008d0a <_printf_float+0x1a6>
 8008d34:	1c4b      	adds	r3, r1, #1
 8008d36:	e7e7      	b.n	8008d08 <_printf_float+0x1a4>
 8008d38:	2900      	cmp	r1, #0
 8008d3a:	bfd4      	ite	le
 8008d3c:	f1c1 0202 	rsble	r2, r1, #2
 8008d40:	2201      	movgt	r2, #1
 8008d42:	4413      	add	r3, r2
 8008d44:	e7e0      	b.n	8008d08 <_printf_float+0x1a4>
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	055a      	lsls	r2, r3, #21
 8008d4a:	d407      	bmi.n	8008d5c <_printf_float+0x1f8>
 8008d4c:	6923      	ldr	r3, [r4, #16]
 8008d4e:	4642      	mov	r2, r8
 8008d50:	4631      	mov	r1, r6
 8008d52:	4628      	mov	r0, r5
 8008d54:	47b8      	blx	r7
 8008d56:	3001      	adds	r0, #1
 8008d58:	d12c      	bne.n	8008db4 <_printf_float+0x250>
 8008d5a:	e764      	b.n	8008c26 <_printf_float+0xc2>
 8008d5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d60:	f240 80e0 	bls.w	8008f24 <_printf_float+0x3c0>
 8008d64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f7f7 feb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d034      	beq.n	8008dde <_printf_float+0x27a>
 8008d74:	4a37      	ldr	r2, [pc, #220]	; (8008e54 <_printf_float+0x2f0>)
 8008d76:	2301      	movs	r3, #1
 8008d78:	4631      	mov	r1, r6
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	47b8      	blx	r7
 8008d7e:	3001      	adds	r0, #1
 8008d80:	f43f af51 	beq.w	8008c26 <_printf_float+0xc2>
 8008d84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	db02      	blt.n	8008d92 <_printf_float+0x22e>
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	07d8      	lsls	r0, r3, #31
 8008d90:	d510      	bpl.n	8008db4 <_printf_float+0x250>
 8008d92:	ee18 3a10 	vmov	r3, s16
 8008d96:	4652      	mov	r2, sl
 8008d98:	4631      	mov	r1, r6
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	47b8      	blx	r7
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f43f af41 	beq.w	8008c26 <_printf_float+0xc2>
 8008da4:	f04f 0800 	mov.w	r8, #0
 8008da8:	f104 091a 	add.w	r9, r4, #26
 8008dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dae:	3b01      	subs	r3, #1
 8008db0:	4543      	cmp	r3, r8
 8008db2:	dc09      	bgt.n	8008dc8 <_printf_float+0x264>
 8008db4:	6823      	ldr	r3, [r4, #0]
 8008db6:	079b      	lsls	r3, r3, #30
 8008db8:	f100 8105 	bmi.w	8008fc6 <_printf_float+0x462>
 8008dbc:	68e0      	ldr	r0, [r4, #12]
 8008dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dc0:	4298      	cmp	r0, r3
 8008dc2:	bfb8      	it	lt
 8008dc4:	4618      	movlt	r0, r3
 8008dc6:	e730      	b.n	8008c2a <_printf_float+0xc6>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	464a      	mov	r2, r9
 8008dcc:	4631      	mov	r1, r6
 8008dce:	4628      	mov	r0, r5
 8008dd0:	47b8      	blx	r7
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	f43f af27 	beq.w	8008c26 <_printf_float+0xc2>
 8008dd8:	f108 0801 	add.w	r8, r8, #1
 8008ddc:	e7e6      	b.n	8008dac <_printf_float+0x248>
 8008dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	dc39      	bgt.n	8008e58 <_printf_float+0x2f4>
 8008de4:	4a1b      	ldr	r2, [pc, #108]	; (8008e54 <_printf_float+0x2f0>)
 8008de6:	2301      	movs	r3, #1
 8008de8:	4631      	mov	r1, r6
 8008dea:	4628      	mov	r0, r5
 8008dec:	47b8      	blx	r7
 8008dee:	3001      	adds	r0, #1
 8008df0:	f43f af19 	beq.w	8008c26 <_printf_float+0xc2>
 8008df4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	d102      	bne.n	8008e02 <_printf_float+0x29e>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	07d9      	lsls	r1, r3, #31
 8008e00:	d5d8      	bpl.n	8008db4 <_printf_float+0x250>
 8008e02:	ee18 3a10 	vmov	r3, s16
 8008e06:	4652      	mov	r2, sl
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	47b8      	blx	r7
 8008e0e:	3001      	adds	r0, #1
 8008e10:	f43f af09 	beq.w	8008c26 <_printf_float+0xc2>
 8008e14:	f04f 0900 	mov.w	r9, #0
 8008e18:	f104 0a1a 	add.w	sl, r4, #26
 8008e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e1e:	425b      	negs	r3, r3
 8008e20:	454b      	cmp	r3, r9
 8008e22:	dc01      	bgt.n	8008e28 <_printf_float+0x2c4>
 8008e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e26:	e792      	b.n	8008d4e <_printf_float+0x1ea>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	4652      	mov	r2, sl
 8008e2c:	4631      	mov	r1, r6
 8008e2e:	4628      	mov	r0, r5
 8008e30:	47b8      	blx	r7
 8008e32:	3001      	adds	r0, #1
 8008e34:	f43f aef7 	beq.w	8008c26 <_printf_float+0xc2>
 8008e38:	f109 0901 	add.w	r9, r9, #1
 8008e3c:	e7ee      	b.n	8008e1c <_printf_float+0x2b8>
 8008e3e:	bf00      	nop
 8008e40:	7fefffff 	.word	0x7fefffff
 8008e44:	0800b948 	.word	0x0800b948
 8008e48:	0800b94c 	.word	0x0800b94c
 8008e4c:	0800b954 	.word	0x0800b954
 8008e50:	0800b950 	.word	0x0800b950
 8008e54:	0800b958 	.word	0x0800b958
 8008e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	bfa8      	it	ge
 8008e60:	461a      	movge	r2, r3
 8008e62:	2a00      	cmp	r2, #0
 8008e64:	4691      	mov	r9, r2
 8008e66:	dc37      	bgt.n	8008ed8 <_printf_float+0x374>
 8008e68:	f04f 0b00 	mov.w	fp, #0
 8008e6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e70:	f104 021a 	add.w	r2, r4, #26
 8008e74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e76:	9305      	str	r3, [sp, #20]
 8008e78:	eba3 0309 	sub.w	r3, r3, r9
 8008e7c:	455b      	cmp	r3, fp
 8008e7e:	dc33      	bgt.n	8008ee8 <_printf_float+0x384>
 8008e80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e84:	429a      	cmp	r2, r3
 8008e86:	db3b      	blt.n	8008f00 <_printf_float+0x39c>
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	07da      	lsls	r2, r3, #31
 8008e8c:	d438      	bmi.n	8008f00 <_printf_float+0x39c>
 8008e8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e90:	9b05      	ldr	r3, [sp, #20]
 8008e92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	eba2 0901 	sub.w	r9, r2, r1
 8008e9a:	4599      	cmp	r9, r3
 8008e9c:	bfa8      	it	ge
 8008e9e:	4699      	movge	r9, r3
 8008ea0:	f1b9 0f00 	cmp.w	r9, #0
 8008ea4:	dc35      	bgt.n	8008f12 <_printf_float+0x3ae>
 8008ea6:	f04f 0800 	mov.w	r8, #0
 8008eaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008eae:	f104 0a1a 	add.w	sl, r4, #26
 8008eb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008eb6:	1a9b      	subs	r3, r3, r2
 8008eb8:	eba3 0309 	sub.w	r3, r3, r9
 8008ebc:	4543      	cmp	r3, r8
 8008ebe:	f77f af79 	ble.w	8008db4 <_printf_float+0x250>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	4652      	mov	r2, sl
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	4628      	mov	r0, r5
 8008eca:	47b8      	blx	r7
 8008ecc:	3001      	adds	r0, #1
 8008ece:	f43f aeaa 	beq.w	8008c26 <_printf_float+0xc2>
 8008ed2:	f108 0801 	add.w	r8, r8, #1
 8008ed6:	e7ec      	b.n	8008eb2 <_printf_float+0x34e>
 8008ed8:	4613      	mov	r3, r2
 8008eda:	4631      	mov	r1, r6
 8008edc:	4642      	mov	r2, r8
 8008ede:	4628      	mov	r0, r5
 8008ee0:	47b8      	blx	r7
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	d1c0      	bne.n	8008e68 <_printf_float+0x304>
 8008ee6:	e69e      	b.n	8008c26 <_printf_float+0xc2>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	4631      	mov	r1, r6
 8008eec:	4628      	mov	r0, r5
 8008eee:	9205      	str	r2, [sp, #20]
 8008ef0:	47b8      	blx	r7
 8008ef2:	3001      	adds	r0, #1
 8008ef4:	f43f ae97 	beq.w	8008c26 <_printf_float+0xc2>
 8008ef8:	9a05      	ldr	r2, [sp, #20]
 8008efa:	f10b 0b01 	add.w	fp, fp, #1
 8008efe:	e7b9      	b.n	8008e74 <_printf_float+0x310>
 8008f00:	ee18 3a10 	vmov	r3, s16
 8008f04:	4652      	mov	r2, sl
 8008f06:	4631      	mov	r1, r6
 8008f08:	4628      	mov	r0, r5
 8008f0a:	47b8      	blx	r7
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	d1be      	bne.n	8008e8e <_printf_float+0x32a>
 8008f10:	e689      	b.n	8008c26 <_printf_float+0xc2>
 8008f12:	9a05      	ldr	r2, [sp, #20]
 8008f14:	464b      	mov	r3, r9
 8008f16:	4442      	add	r2, r8
 8008f18:	4631      	mov	r1, r6
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	47b8      	blx	r7
 8008f1e:	3001      	adds	r0, #1
 8008f20:	d1c1      	bne.n	8008ea6 <_printf_float+0x342>
 8008f22:	e680      	b.n	8008c26 <_printf_float+0xc2>
 8008f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f26:	2a01      	cmp	r2, #1
 8008f28:	dc01      	bgt.n	8008f2e <_printf_float+0x3ca>
 8008f2a:	07db      	lsls	r3, r3, #31
 8008f2c:	d538      	bpl.n	8008fa0 <_printf_float+0x43c>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	4642      	mov	r2, r8
 8008f32:	4631      	mov	r1, r6
 8008f34:	4628      	mov	r0, r5
 8008f36:	47b8      	blx	r7
 8008f38:	3001      	adds	r0, #1
 8008f3a:	f43f ae74 	beq.w	8008c26 <_printf_float+0xc2>
 8008f3e:	ee18 3a10 	vmov	r3, s16
 8008f42:	4652      	mov	r2, sl
 8008f44:	4631      	mov	r1, r6
 8008f46:	4628      	mov	r0, r5
 8008f48:	47b8      	blx	r7
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	f43f ae6b 	beq.w	8008c26 <_printf_float+0xc2>
 8008f50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f54:	2200      	movs	r2, #0
 8008f56:	2300      	movs	r3, #0
 8008f58:	f7f7 fdbe 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f5c:	b9d8      	cbnz	r0, 8008f96 <_printf_float+0x432>
 8008f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f60:	f108 0201 	add.w	r2, r8, #1
 8008f64:	3b01      	subs	r3, #1
 8008f66:	4631      	mov	r1, r6
 8008f68:	4628      	mov	r0, r5
 8008f6a:	47b8      	blx	r7
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	d10e      	bne.n	8008f8e <_printf_float+0x42a>
 8008f70:	e659      	b.n	8008c26 <_printf_float+0xc2>
 8008f72:	2301      	movs	r3, #1
 8008f74:	4652      	mov	r2, sl
 8008f76:	4631      	mov	r1, r6
 8008f78:	4628      	mov	r0, r5
 8008f7a:	47b8      	blx	r7
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	f43f ae52 	beq.w	8008c26 <_printf_float+0xc2>
 8008f82:	f108 0801 	add.w	r8, r8, #1
 8008f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	4543      	cmp	r3, r8
 8008f8c:	dcf1      	bgt.n	8008f72 <_printf_float+0x40e>
 8008f8e:	464b      	mov	r3, r9
 8008f90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f94:	e6dc      	b.n	8008d50 <_printf_float+0x1ec>
 8008f96:	f04f 0800 	mov.w	r8, #0
 8008f9a:	f104 0a1a 	add.w	sl, r4, #26
 8008f9e:	e7f2      	b.n	8008f86 <_printf_float+0x422>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	4642      	mov	r2, r8
 8008fa4:	e7df      	b.n	8008f66 <_printf_float+0x402>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	464a      	mov	r2, r9
 8008faa:	4631      	mov	r1, r6
 8008fac:	4628      	mov	r0, r5
 8008fae:	47b8      	blx	r7
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	f43f ae38 	beq.w	8008c26 <_printf_float+0xc2>
 8008fb6:	f108 0801 	add.w	r8, r8, #1
 8008fba:	68e3      	ldr	r3, [r4, #12]
 8008fbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fbe:	1a5b      	subs	r3, r3, r1
 8008fc0:	4543      	cmp	r3, r8
 8008fc2:	dcf0      	bgt.n	8008fa6 <_printf_float+0x442>
 8008fc4:	e6fa      	b.n	8008dbc <_printf_float+0x258>
 8008fc6:	f04f 0800 	mov.w	r8, #0
 8008fca:	f104 0919 	add.w	r9, r4, #25
 8008fce:	e7f4      	b.n	8008fba <_printf_float+0x456>

08008fd0 <_printf_common>:
 8008fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd4:	4616      	mov	r6, r2
 8008fd6:	4699      	mov	r9, r3
 8008fd8:	688a      	ldr	r2, [r1, #8]
 8008fda:	690b      	ldr	r3, [r1, #16]
 8008fdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	bfb8      	it	lt
 8008fe4:	4613      	movlt	r3, r2
 8008fe6:	6033      	str	r3, [r6, #0]
 8008fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fec:	4607      	mov	r7, r0
 8008fee:	460c      	mov	r4, r1
 8008ff0:	b10a      	cbz	r2, 8008ff6 <_printf_common+0x26>
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	6033      	str	r3, [r6, #0]
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	0699      	lsls	r1, r3, #26
 8008ffa:	bf42      	ittt	mi
 8008ffc:	6833      	ldrmi	r3, [r6, #0]
 8008ffe:	3302      	addmi	r3, #2
 8009000:	6033      	strmi	r3, [r6, #0]
 8009002:	6825      	ldr	r5, [r4, #0]
 8009004:	f015 0506 	ands.w	r5, r5, #6
 8009008:	d106      	bne.n	8009018 <_printf_common+0x48>
 800900a:	f104 0a19 	add.w	sl, r4, #25
 800900e:	68e3      	ldr	r3, [r4, #12]
 8009010:	6832      	ldr	r2, [r6, #0]
 8009012:	1a9b      	subs	r3, r3, r2
 8009014:	42ab      	cmp	r3, r5
 8009016:	dc26      	bgt.n	8009066 <_printf_common+0x96>
 8009018:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800901c:	1e13      	subs	r3, r2, #0
 800901e:	6822      	ldr	r2, [r4, #0]
 8009020:	bf18      	it	ne
 8009022:	2301      	movne	r3, #1
 8009024:	0692      	lsls	r2, r2, #26
 8009026:	d42b      	bmi.n	8009080 <_printf_common+0xb0>
 8009028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800902c:	4649      	mov	r1, r9
 800902e:	4638      	mov	r0, r7
 8009030:	47c0      	blx	r8
 8009032:	3001      	adds	r0, #1
 8009034:	d01e      	beq.n	8009074 <_printf_common+0xa4>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	68e5      	ldr	r5, [r4, #12]
 800903a:	6832      	ldr	r2, [r6, #0]
 800903c:	f003 0306 	and.w	r3, r3, #6
 8009040:	2b04      	cmp	r3, #4
 8009042:	bf08      	it	eq
 8009044:	1aad      	subeq	r5, r5, r2
 8009046:	68a3      	ldr	r3, [r4, #8]
 8009048:	6922      	ldr	r2, [r4, #16]
 800904a:	bf0c      	ite	eq
 800904c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009050:	2500      	movne	r5, #0
 8009052:	4293      	cmp	r3, r2
 8009054:	bfc4      	itt	gt
 8009056:	1a9b      	subgt	r3, r3, r2
 8009058:	18ed      	addgt	r5, r5, r3
 800905a:	2600      	movs	r6, #0
 800905c:	341a      	adds	r4, #26
 800905e:	42b5      	cmp	r5, r6
 8009060:	d11a      	bne.n	8009098 <_printf_common+0xc8>
 8009062:	2000      	movs	r0, #0
 8009064:	e008      	b.n	8009078 <_printf_common+0xa8>
 8009066:	2301      	movs	r3, #1
 8009068:	4652      	mov	r2, sl
 800906a:	4649      	mov	r1, r9
 800906c:	4638      	mov	r0, r7
 800906e:	47c0      	blx	r8
 8009070:	3001      	adds	r0, #1
 8009072:	d103      	bne.n	800907c <_printf_common+0xac>
 8009074:	f04f 30ff 	mov.w	r0, #4294967295
 8009078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907c:	3501      	adds	r5, #1
 800907e:	e7c6      	b.n	800900e <_printf_common+0x3e>
 8009080:	18e1      	adds	r1, r4, r3
 8009082:	1c5a      	adds	r2, r3, #1
 8009084:	2030      	movs	r0, #48	; 0x30
 8009086:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800908a:	4422      	add	r2, r4
 800908c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009090:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009094:	3302      	adds	r3, #2
 8009096:	e7c7      	b.n	8009028 <_printf_common+0x58>
 8009098:	2301      	movs	r3, #1
 800909a:	4622      	mov	r2, r4
 800909c:	4649      	mov	r1, r9
 800909e:	4638      	mov	r0, r7
 80090a0:	47c0      	blx	r8
 80090a2:	3001      	adds	r0, #1
 80090a4:	d0e6      	beq.n	8009074 <_printf_common+0xa4>
 80090a6:	3601      	adds	r6, #1
 80090a8:	e7d9      	b.n	800905e <_printf_common+0x8e>
	...

080090ac <_printf_i>:
 80090ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090b0:	460c      	mov	r4, r1
 80090b2:	4691      	mov	r9, r2
 80090b4:	7e27      	ldrb	r7, [r4, #24]
 80090b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80090b8:	2f78      	cmp	r7, #120	; 0x78
 80090ba:	4680      	mov	r8, r0
 80090bc:	469a      	mov	sl, r3
 80090be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090c2:	d807      	bhi.n	80090d4 <_printf_i+0x28>
 80090c4:	2f62      	cmp	r7, #98	; 0x62
 80090c6:	d80a      	bhi.n	80090de <_printf_i+0x32>
 80090c8:	2f00      	cmp	r7, #0
 80090ca:	f000 80d8 	beq.w	800927e <_printf_i+0x1d2>
 80090ce:	2f58      	cmp	r7, #88	; 0x58
 80090d0:	f000 80a3 	beq.w	800921a <_printf_i+0x16e>
 80090d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090dc:	e03a      	b.n	8009154 <_printf_i+0xa8>
 80090de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090e2:	2b15      	cmp	r3, #21
 80090e4:	d8f6      	bhi.n	80090d4 <_printf_i+0x28>
 80090e6:	a001      	add	r0, pc, #4	; (adr r0, 80090ec <_printf_i+0x40>)
 80090e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80090ec:	08009145 	.word	0x08009145
 80090f0:	08009159 	.word	0x08009159
 80090f4:	080090d5 	.word	0x080090d5
 80090f8:	080090d5 	.word	0x080090d5
 80090fc:	080090d5 	.word	0x080090d5
 8009100:	080090d5 	.word	0x080090d5
 8009104:	08009159 	.word	0x08009159
 8009108:	080090d5 	.word	0x080090d5
 800910c:	080090d5 	.word	0x080090d5
 8009110:	080090d5 	.word	0x080090d5
 8009114:	080090d5 	.word	0x080090d5
 8009118:	08009265 	.word	0x08009265
 800911c:	08009189 	.word	0x08009189
 8009120:	08009247 	.word	0x08009247
 8009124:	080090d5 	.word	0x080090d5
 8009128:	080090d5 	.word	0x080090d5
 800912c:	08009287 	.word	0x08009287
 8009130:	080090d5 	.word	0x080090d5
 8009134:	08009189 	.word	0x08009189
 8009138:	080090d5 	.word	0x080090d5
 800913c:	080090d5 	.word	0x080090d5
 8009140:	0800924f 	.word	0x0800924f
 8009144:	680b      	ldr	r3, [r1, #0]
 8009146:	1d1a      	adds	r2, r3, #4
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	600a      	str	r2, [r1, #0]
 800914c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009154:	2301      	movs	r3, #1
 8009156:	e0a3      	b.n	80092a0 <_printf_i+0x1f4>
 8009158:	6825      	ldr	r5, [r4, #0]
 800915a:	6808      	ldr	r0, [r1, #0]
 800915c:	062e      	lsls	r6, r5, #24
 800915e:	f100 0304 	add.w	r3, r0, #4
 8009162:	d50a      	bpl.n	800917a <_printf_i+0xce>
 8009164:	6805      	ldr	r5, [r0, #0]
 8009166:	600b      	str	r3, [r1, #0]
 8009168:	2d00      	cmp	r5, #0
 800916a:	da03      	bge.n	8009174 <_printf_i+0xc8>
 800916c:	232d      	movs	r3, #45	; 0x2d
 800916e:	426d      	negs	r5, r5
 8009170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009174:	485e      	ldr	r0, [pc, #376]	; (80092f0 <_printf_i+0x244>)
 8009176:	230a      	movs	r3, #10
 8009178:	e019      	b.n	80091ae <_printf_i+0x102>
 800917a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800917e:	6805      	ldr	r5, [r0, #0]
 8009180:	600b      	str	r3, [r1, #0]
 8009182:	bf18      	it	ne
 8009184:	b22d      	sxthne	r5, r5
 8009186:	e7ef      	b.n	8009168 <_printf_i+0xbc>
 8009188:	680b      	ldr	r3, [r1, #0]
 800918a:	6825      	ldr	r5, [r4, #0]
 800918c:	1d18      	adds	r0, r3, #4
 800918e:	6008      	str	r0, [r1, #0]
 8009190:	0628      	lsls	r0, r5, #24
 8009192:	d501      	bpl.n	8009198 <_printf_i+0xec>
 8009194:	681d      	ldr	r5, [r3, #0]
 8009196:	e002      	b.n	800919e <_printf_i+0xf2>
 8009198:	0669      	lsls	r1, r5, #25
 800919a:	d5fb      	bpl.n	8009194 <_printf_i+0xe8>
 800919c:	881d      	ldrh	r5, [r3, #0]
 800919e:	4854      	ldr	r0, [pc, #336]	; (80092f0 <_printf_i+0x244>)
 80091a0:	2f6f      	cmp	r7, #111	; 0x6f
 80091a2:	bf0c      	ite	eq
 80091a4:	2308      	moveq	r3, #8
 80091a6:	230a      	movne	r3, #10
 80091a8:	2100      	movs	r1, #0
 80091aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091ae:	6866      	ldr	r6, [r4, #4]
 80091b0:	60a6      	str	r6, [r4, #8]
 80091b2:	2e00      	cmp	r6, #0
 80091b4:	bfa2      	ittt	ge
 80091b6:	6821      	ldrge	r1, [r4, #0]
 80091b8:	f021 0104 	bicge.w	r1, r1, #4
 80091bc:	6021      	strge	r1, [r4, #0]
 80091be:	b90d      	cbnz	r5, 80091c4 <_printf_i+0x118>
 80091c0:	2e00      	cmp	r6, #0
 80091c2:	d04d      	beq.n	8009260 <_printf_i+0x1b4>
 80091c4:	4616      	mov	r6, r2
 80091c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80091ca:	fb03 5711 	mls	r7, r3, r1, r5
 80091ce:	5dc7      	ldrb	r7, [r0, r7]
 80091d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091d4:	462f      	mov	r7, r5
 80091d6:	42bb      	cmp	r3, r7
 80091d8:	460d      	mov	r5, r1
 80091da:	d9f4      	bls.n	80091c6 <_printf_i+0x11a>
 80091dc:	2b08      	cmp	r3, #8
 80091de:	d10b      	bne.n	80091f8 <_printf_i+0x14c>
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	07df      	lsls	r7, r3, #31
 80091e4:	d508      	bpl.n	80091f8 <_printf_i+0x14c>
 80091e6:	6923      	ldr	r3, [r4, #16]
 80091e8:	6861      	ldr	r1, [r4, #4]
 80091ea:	4299      	cmp	r1, r3
 80091ec:	bfde      	ittt	le
 80091ee:	2330      	movle	r3, #48	; 0x30
 80091f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80091f8:	1b92      	subs	r2, r2, r6
 80091fa:	6122      	str	r2, [r4, #16]
 80091fc:	f8cd a000 	str.w	sl, [sp]
 8009200:	464b      	mov	r3, r9
 8009202:	aa03      	add	r2, sp, #12
 8009204:	4621      	mov	r1, r4
 8009206:	4640      	mov	r0, r8
 8009208:	f7ff fee2 	bl	8008fd0 <_printf_common>
 800920c:	3001      	adds	r0, #1
 800920e:	d14c      	bne.n	80092aa <_printf_i+0x1fe>
 8009210:	f04f 30ff 	mov.w	r0, #4294967295
 8009214:	b004      	add	sp, #16
 8009216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800921a:	4835      	ldr	r0, [pc, #212]	; (80092f0 <_printf_i+0x244>)
 800921c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	680e      	ldr	r6, [r1, #0]
 8009224:	061f      	lsls	r7, r3, #24
 8009226:	f856 5b04 	ldr.w	r5, [r6], #4
 800922a:	600e      	str	r6, [r1, #0]
 800922c:	d514      	bpl.n	8009258 <_printf_i+0x1ac>
 800922e:	07d9      	lsls	r1, r3, #31
 8009230:	bf44      	itt	mi
 8009232:	f043 0320 	orrmi.w	r3, r3, #32
 8009236:	6023      	strmi	r3, [r4, #0]
 8009238:	b91d      	cbnz	r5, 8009242 <_printf_i+0x196>
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	f023 0320 	bic.w	r3, r3, #32
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	2310      	movs	r3, #16
 8009244:	e7b0      	b.n	80091a8 <_printf_i+0xfc>
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	f043 0320 	orr.w	r3, r3, #32
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	2378      	movs	r3, #120	; 0x78
 8009250:	4828      	ldr	r0, [pc, #160]	; (80092f4 <_printf_i+0x248>)
 8009252:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009256:	e7e3      	b.n	8009220 <_printf_i+0x174>
 8009258:	065e      	lsls	r6, r3, #25
 800925a:	bf48      	it	mi
 800925c:	b2ad      	uxthmi	r5, r5
 800925e:	e7e6      	b.n	800922e <_printf_i+0x182>
 8009260:	4616      	mov	r6, r2
 8009262:	e7bb      	b.n	80091dc <_printf_i+0x130>
 8009264:	680b      	ldr	r3, [r1, #0]
 8009266:	6826      	ldr	r6, [r4, #0]
 8009268:	6960      	ldr	r0, [r4, #20]
 800926a:	1d1d      	adds	r5, r3, #4
 800926c:	600d      	str	r5, [r1, #0]
 800926e:	0635      	lsls	r5, r6, #24
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	d501      	bpl.n	8009278 <_printf_i+0x1cc>
 8009274:	6018      	str	r0, [r3, #0]
 8009276:	e002      	b.n	800927e <_printf_i+0x1d2>
 8009278:	0671      	lsls	r1, r6, #25
 800927a:	d5fb      	bpl.n	8009274 <_printf_i+0x1c8>
 800927c:	8018      	strh	r0, [r3, #0]
 800927e:	2300      	movs	r3, #0
 8009280:	6123      	str	r3, [r4, #16]
 8009282:	4616      	mov	r6, r2
 8009284:	e7ba      	b.n	80091fc <_printf_i+0x150>
 8009286:	680b      	ldr	r3, [r1, #0]
 8009288:	1d1a      	adds	r2, r3, #4
 800928a:	600a      	str	r2, [r1, #0]
 800928c:	681e      	ldr	r6, [r3, #0]
 800928e:	6862      	ldr	r2, [r4, #4]
 8009290:	2100      	movs	r1, #0
 8009292:	4630      	mov	r0, r6
 8009294:	f7f6 ffac 	bl	80001f0 <memchr>
 8009298:	b108      	cbz	r0, 800929e <_printf_i+0x1f2>
 800929a:	1b80      	subs	r0, r0, r6
 800929c:	6060      	str	r0, [r4, #4]
 800929e:	6863      	ldr	r3, [r4, #4]
 80092a0:	6123      	str	r3, [r4, #16]
 80092a2:	2300      	movs	r3, #0
 80092a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092a8:	e7a8      	b.n	80091fc <_printf_i+0x150>
 80092aa:	6923      	ldr	r3, [r4, #16]
 80092ac:	4632      	mov	r2, r6
 80092ae:	4649      	mov	r1, r9
 80092b0:	4640      	mov	r0, r8
 80092b2:	47d0      	blx	sl
 80092b4:	3001      	adds	r0, #1
 80092b6:	d0ab      	beq.n	8009210 <_printf_i+0x164>
 80092b8:	6823      	ldr	r3, [r4, #0]
 80092ba:	079b      	lsls	r3, r3, #30
 80092bc:	d413      	bmi.n	80092e6 <_printf_i+0x23a>
 80092be:	68e0      	ldr	r0, [r4, #12]
 80092c0:	9b03      	ldr	r3, [sp, #12]
 80092c2:	4298      	cmp	r0, r3
 80092c4:	bfb8      	it	lt
 80092c6:	4618      	movlt	r0, r3
 80092c8:	e7a4      	b.n	8009214 <_printf_i+0x168>
 80092ca:	2301      	movs	r3, #1
 80092cc:	4632      	mov	r2, r6
 80092ce:	4649      	mov	r1, r9
 80092d0:	4640      	mov	r0, r8
 80092d2:	47d0      	blx	sl
 80092d4:	3001      	adds	r0, #1
 80092d6:	d09b      	beq.n	8009210 <_printf_i+0x164>
 80092d8:	3501      	adds	r5, #1
 80092da:	68e3      	ldr	r3, [r4, #12]
 80092dc:	9903      	ldr	r1, [sp, #12]
 80092de:	1a5b      	subs	r3, r3, r1
 80092e0:	42ab      	cmp	r3, r5
 80092e2:	dcf2      	bgt.n	80092ca <_printf_i+0x21e>
 80092e4:	e7eb      	b.n	80092be <_printf_i+0x212>
 80092e6:	2500      	movs	r5, #0
 80092e8:	f104 0619 	add.w	r6, r4, #25
 80092ec:	e7f5      	b.n	80092da <_printf_i+0x22e>
 80092ee:	bf00      	nop
 80092f0:	0800b95a 	.word	0x0800b95a
 80092f4:	0800b96b 	.word	0x0800b96b

080092f8 <iprintf>:
 80092f8:	b40f      	push	{r0, r1, r2, r3}
 80092fa:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <iprintf+0x2c>)
 80092fc:	b513      	push	{r0, r1, r4, lr}
 80092fe:	681c      	ldr	r4, [r3, #0]
 8009300:	b124      	cbz	r4, 800930c <iprintf+0x14>
 8009302:	69a3      	ldr	r3, [r4, #24]
 8009304:	b913      	cbnz	r3, 800930c <iprintf+0x14>
 8009306:	4620      	mov	r0, r4
 8009308:	f7ff fa56 	bl	80087b8 <__sinit>
 800930c:	ab05      	add	r3, sp, #20
 800930e:	9a04      	ldr	r2, [sp, #16]
 8009310:	68a1      	ldr	r1, [r4, #8]
 8009312:	9301      	str	r3, [sp, #4]
 8009314:	4620      	mov	r0, r4
 8009316:	f001 ff9f 	bl	800b258 <_vfiprintf_r>
 800931a:	b002      	add	sp, #8
 800931c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009320:	b004      	add	sp, #16
 8009322:	4770      	bx	lr
 8009324:	20000018 	.word	0x20000018

08009328 <_puts_r>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	460e      	mov	r6, r1
 800932c:	4605      	mov	r5, r0
 800932e:	b118      	cbz	r0, 8009338 <_puts_r+0x10>
 8009330:	6983      	ldr	r3, [r0, #24]
 8009332:	b90b      	cbnz	r3, 8009338 <_puts_r+0x10>
 8009334:	f7ff fa40 	bl	80087b8 <__sinit>
 8009338:	69ab      	ldr	r3, [r5, #24]
 800933a:	68ac      	ldr	r4, [r5, #8]
 800933c:	b913      	cbnz	r3, 8009344 <_puts_r+0x1c>
 800933e:	4628      	mov	r0, r5
 8009340:	f7ff fa3a 	bl	80087b8 <__sinit>
 8009344:	4b2c      	ldr	r3, [pc, #176]	; (80093f8 <_puts_r+0xd0>)
 8009346:	429c      	cmp	r4, r3
 8009348:	d120      	bne.n	800938c <_puts_r+0x64>
 800934a:	686c      	ldr	r4, [r5, #4]
 800934c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800934e:	07db      	lsls	r3, r3, #31
 8009350:	d405      	bmi.n	800935e <_puts_r+0x36>
 8009352:	89a3      	ldrh	r3, [r4, #12]
 8009354:	0598      	lsls	r0, r3, #22
 8009356:	d402      	bmi.n	800935e <_puts_r+0x36>
 8009358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800935a:	f7ff faf0 	bl	800893e <__retarget_lock_acquire_recursive>
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	0719      	lsls	r1, r3, #28
 8009362:	d51d      	bpl.n	80093a0 <_puts_r+0x78>
 8009364:	6923      	ldr	r3, [r4, #16]
 8009366:	b1db      	cbz	r3, 80093a0 <_puts_r+0x78>
 8009368:	3e01      	subs	r6, #1
 800936a:	68a3      	ldr	r3, [r4, #8]
 800936c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009370:	3b01      	subs	r3, #1
 8009372:	60a3      	str	r3, [r4, #8]
 8009374:	bb39      	cbnz	r1, 80093c6 <_puts_r+0x9e>
 8009376:	2b00      	cmp	r3, #0
 8009378:	da38      	bge.n	80093ec <_puts_r+0xc4>
 800937a:	4622      	mov	r2, r4
 800937c:	210a      	movs	r1, #10
 800937e:	4628      	mov	r0, r5
 8009380:	f000 f95a 	bl	8009638 <__swbuf_r>
 8009384:	3001      	adds	r0, #1
 8009386:	d011      	beq.n	80093ac <_puts_r+0x84>
 8009388:	250a      	movs	r5, #10
 800938a:	e011      	b.n	80093b0 <_puts_r+0x88>
 800938c:	4b1b      	ldr	r3, [pc, #108]	; (80093fc <_puts_r+0xd4>)
 800938e:	429c      	cmp	r4, r3
 8009390:	d101      	bne.n	8009396 <_puts_r+0x6e>
 8009392:	68ac      	ldr	r4, [r5, #8]
 8009394:	e7da      	b.n	800934c <_puts_r+0x24>
 8009396:	4b1a      	ldr	r3, [pc, #104]	; (8009400 <_puts_r+0xd8>)
 8009398:	429c      	cmp	r4, r3
 800939a:	bf08      	it	eq
 800939c:	68ec      	ldreq	r4, [r5, #12]
 800939e:	e7d5      	b.n	800934c <_puts_r+0x24>
 80093a0:	4621      	mov	r1, r4
 80093a2:	4628      	mov	r0, r5
 80093a4:	f000 f9ac 	bl	8009700 <__swsetup_r>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d0dd      	beq.n	8009368 <_puts_r+0x40>
 80093ac:	f04f 35ff 	mov.w	r5, #4294967295
 80093b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093b2:	07da      	lsls	r2, r3, #31
 80093b4:	d405      	bmi.n	80093c2 <_puts_r+0x9a>
 80093b6:	89a3      	ldrh	r3, [r4, #12]
 80093b8:	059b      	lsls	r3, r3, #22
 80093ba:	d402      	bmi.n	80093c2 <_puts_r+0x9a>
 80093bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093be:	f7ff fabf 	bl	8008940 <__retarget_lock_release_recursive>
 80093c2:	4628      	mov	r0, r5
 80093c4:	bd70      	pop	{r4, r5, r6, pc}
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	da04      	bge.n	80093d4 <_puts_r+0xac>
 80093ca:	69a2      	ldr	r2, [r4, #24]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	dc06      	bgt.n	80093de <_puts_r+0xb6>
 80093d0:	290a      	cmp	r1, #10
 80093d2:	d004      	beq.n	80093de <_puts_r+0xb6>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	1c5a      	adds	r2, r3, #1
 80093d8:	6022      	str	r2, [r4, #0]
 80093da:	7019      	strb	r1, [r3, #0]
 80093dc:	e7c5      	b.n	800936a <_puts_r+0x42>
 80093de:	4622      	mov	r2, r4
 80093e0:	4628      	mov	r0, r5
 80093e2:	f000 f929 	bl	8009638 <__swbuf_r>
 80093e6:	3001      	adds	r0, #1
 80093e8:	d1bf      	bne.n	800936a <_puts_r+0x42>
 80093ea:	e7df      	b.n	80093ac <_puts_r+0x84>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	250a      	movs	r5, #10
 80093f0:	1c5a      	adds	r2, r3, #1
 80093f2:	6022      	str	r2, [r4, #0]
 80093f4:	701d      	strb	r5, [r3, #0]
 80093f6:	e7db      	b.n	80093b0 <_puts_r+0x88>
 80093f8:	0800b904 	.word	0x0800b904
 80093fc:	0800b924 	.word	0x0800b924
 8009400:	0800b8e4 	.word	0x0800b8e4

08009404 <puts>:
 8009404:	4b02      	ldr	r3, [pc, #8]	; (8009410 <puts+0xc>)
 8009406:	4601      	mov	r1, r0
 8009408:	6818      	ldr	r0, [r3, #0]
 800940a:	f7ff bf8d 	b.w	8009328 <_puts_r>
 800940e:	bf00      	nop
 8009410:	20000018 	.word	0x20000018

08009414 <cleanup_glue>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	460c      	mov	r4, r1
 8009418:	6809      	ldr	r1, [r1, #0]
 800941a:	4605      	mov	r5, r0
 800941c:	b109      	cbz	r1, 8009422 <cleanup_glue+0xe>
 800941e:	f7ff fff9 	bl	8009414 <cleanup_glue>
 8009422:	4621      	mov	r1, r4
 8009424:	4628      	mov	r0, r5
 8009426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800942a:	f001 bd3f 	b.w	800aeac <_free_r>
	...

08009430 <_reclaim_reent>:
 8009430:	4b2c      	ldr	r3, [pc, #176]	; (80094e4 <_reclaim_reent+0xb4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4283      	cmp	r3, r0
 8009436:	b570      	push	{r4, r5, r6, lr}
 8009438:	4604      	mov	r4, r0
 800943a:	d051      	beq.n	80094e0 <_reclaim_reent+0xb0>
 800943c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800943e:	b143      	cbz	r3, 8009452 <_reclaim_reent+0x22>
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d14a      	bne.n	80094dc <_reclaim_reent+0xac>
 8009446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009448:	6819      	ldr	r1, [r3, #0]
 800944a:	b111      	cbz	r1, 8009452 <_reclaim_reent+0x22>
 800944c:	4620      	mov	r0, r4
 800944e:	f001 fd2d 	bl	800aeac <_free_r>
 8009452:	6961      	ldr	r1, [r4, #20]
 8009454:	b111      	cbz	r1, 800945c <_reclaim_reent+0x2c>
 8009456:	4620      	mov	r0, r4
 8009458:	f001 fd28 	bl	800aeac <_free_r>
 800945c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800945e:	b111      	cbz	r1, 8009466 <_reclaim_reent+0x36>
 8009460:	4620      	mov	r0, r4
 8009462:	f001 fd23 	bl	800aeac <_free_r>
 8009466:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009468:	b111      	cbz	r1, 8009470 <_reclaim_reent+0x40>
 800946a:	4620      	mov	r0, r4
 800946c:	f001 fd1e 	bl	800aeac <_free_r>
 8009470:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009472:	b111      	cbz	r1, 800947a <_reclaim_reent+0x4a>
 8009474:	4620      	mov	r0, r4
 8009476:	f001 fd19 	bl	800aeac <_free_r>
 800947a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800947c:	b111      	cbz	r1, 8009484 <_reclaim_reent+0x54>
 800947e:	4620      	mov	r0, r4
 8009480:	f001 fd14 	bl	800aeac <_free_r>
 8009484:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009486:	b111      	cbz	r1, 800948e <_reclaim_reent+0x5e>
 8009488:	4620      	mov	r0, r4
 800948a:	f001 fd0f 	bl	800aeac <_free_r>
 800948e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009490:	b111      	cbz	r1, 8009498 <_reclaim_reent+0x68>
 8009492:	4620      	mov	r0, r4
 8009494:	f001 fd0a 	bl	800aeac <_free_r>
 8009498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800949a:	b111      	cbz	r1, 80094a2 <_reclaim_reent+0x72>
 800949c:	4620      	mov	r0, r4
 800949e:	f001 fd05 	bl	800aeac <_free_r>
 80094a2:	69a3      	ldr	r3, [r4, #24]
 80094a4:	b1e3      	cbz	r3, 80094e0 <_reclaim_reent+0xb0>
 80094a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80094a8:	4620      	mov	r0, r4
 80094aa:	4798      	blx	r3
 80094ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80094ae:	b1b9      	cbz	r1, 80094e0 <_reclaim_reent+0xb0>
 80094b0:	4620      	mov	r0, r4
 80094b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80094b6:	f7ff bfad 	b.w	8009414 <cleanup_glue>
 80094ba:	5949      	ldr	r1, [r1, r5]
 80094bc:	b941      	cbnz	r1, 80094d0 <_reclaim_reent+0xa0>
 80094be:	3504      	adds	r5, #4
 80094c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094c2:	2d80      	cmp	r5, #128	; 0x80
 80094c4:	68d9      	ldr	r1, [r3, #12]
 80094c6:	d1f8      	bne.n	80094ba <_reclaim_reent+0x8a>
 80094c8:	4620      	mov	r0, r4
 80094ca:	f001 fcef 	bl	800aeac <_free_r>
 80094ce:	e7ba      	b.n	8009446 <_reclaim_reent+0x16>
 80094d0:	680e      	ldr	r6, [r1, #0]
 80094d2:	4620      	mov	r0, r4
 80094d4:	f001 fcea 	bl	800aeac <_free_r>
 80094d8:	4631      	mov	r1, r6
 80094da:	e7ef      	b.n	80094bc <_reclaim_reent+0x8c>
 80094dc:	2500      	movs	r5, #0
 80094de:	e7ef      	b.n	80094c0 <_reclaim_reent+0x90>
 80094e0:	bd70      	pop	{r4, r5, r6, pc}
 80094e2:	bf00      	nop
 80094e4:	20000018 	.word	0x20000018

080094e8 <_sbrk_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4d06      	ldr	r5, [pc, #24]	; (8009504 <_sbrk_r+0x1c>)
 80094ec:	2300      	movs	r3, #0
 80094ee:	4604      	mov	r4, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	602b      	str	r3, [r5, #0]
 80094f4:	f7f8 fec8 	bl	8002288 <_sbrk>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	d102      	bne.n	8009502 <_sbrk_r+0x1a>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	b103      	cbz	r3, 8009502 <_sbrk_r+0x1a>
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	20005120 	.word	0x20005120

08009508 <sniprintf>:
 8009508:	b40c      	push	{r2, r3}
 800950a:	b530      	push	{r4, r5, lr}
 800950c:	4b17      	ldr	r3, [pc, #92]	; (800956c <sniprintf+0x64>)
 800950e:	1e0c      	subs	r4, r1, #0
 8009510:	681d      	ldr	r5, [r3, #0]
 8009512:	b09d      	sub	sp, #116	; 0x74
 8009514:	da08      	bge.n	8009528 <sniprintf+0x20>
 8009516:	238b      	movs	r3, #139	; 0x8b
 8009518:	602b      	str	r3, [r5, #0]
 800951a:	f04f 30ff 	mov.w	r0, #4294967295
 800951e:	b01d      	add	sp, #116	; 0x74
 8009520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009524:	b002      	add	sp, #8
 8009526:	4770      	bx	lr
 8009528:	f44f 7302 	mov.w	r3, #520	; 0x208
 800952c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009530:	bf14      	ite	ne
 8009532:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009536:	4623      	moveq	r3, r4
 8009538:	9304      	str	r3, [sp, #16]
 800953a:	9307      	str	r3, [sp, #28]
 800953c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009540:	9002      	str	r0, [sp, #8]
 8009542:	9006      	str	r0, [sp, #24]
 8009544:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009548:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800954a:	ab21      	add	r3, sp, #132	; 0x84
 800954c:	a902      	add	r1, sp, #8
 800954e:	4628      	mov	r0, r5
 8009550:	9301      	str	r3, [sp, #4]
 8009552:	f001 fd57 	bl	800b004 <_svfiprintf_r>
 8009556:	1c43      	adds	r3, r0, #1
 8009558:	bfbc      	itt	lt
 800955a:	238b      	movlt	r3, #139	; 0x8b
 800955c:	602b      	strlt	r3, [r5, #0]
 800955e:	2c00      	cmp	r4, #0
 8009560:	d0dd      	beq.n	800951e <sniprintf+0x16>
 8009562:	9b02      	ldr	r3, [sp, #8]
 8009564:	2200      	movs	r2, #0
 8009566:	701a      	strb	r2, [r3, #0]
 8009568:	e7d9      	b.n	800951e <sniprintf+0x16>
 800956a:	bf00      	nop
 800956c:	20000018 	.word	0x20000018

08009570 <siprintf>:
 8009570:	b40e      	push	{r1, r2, r3}
 8009572:	b500      	push	{lr}
 8009574:	b09c      	sub	sp, #112	; 0x70
 8009576:	ab1d      	add	r3, sp, #116	; 0x74
 8009578:	9002      	str	r0, [sp, #8]
 800957a:	9006      	str	r0, [sp, #24]
 800957c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009580:	4809      	ldr	r0, [pc, #36]	; (80095a8 <siprintf+0x38>)
 8009582:	9107      	str	r1, [sp, #28]
 8009584:	9104      	str	r1, [sp, #16]
 8009586:	4909      	ldr	r1, [pc, #36]	; (80095ac <siprintf+0x3c>)
 8009588:	f853 2b04 	ldr.w	r2, [r3], #4
 800958c:	9105      	str	r1, [sp, #20]
 800958e:	6800      	ldr	r0, [r0, #0]
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	a902      	add	r1, sp, #8
 8009594:	f001 fd36 	bl	800b004 <_svfiprintf_r>
 8009598:	9b02      	ldr	r3, [sp, #8]
 800959a:	2200      	movs	r2, #0
 800959c:	701a      	strb	r2, [r3, #0]
 800959e:	b01c      	add	sp, #112	; 0x70
 80095a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095a4:	b003      	add	sp, #12
 80095a6:	4770      	bx	lr
 80095a8:	20000018 	.word	0x20000018
 80095ac:	ffff0208 	.word	0xffff0208

080095b0 <__sread>:
 80095b0:	b510      	push	{r4, lr}
 80095b2:	460c      	mov	r4, r1
 80095b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b8:	f001 ff7e 	bl	800b4b8 <_read_r>
 80095bc:	2800      	cmp	r0, #0
 80095be:	bfab      	itete	ge
 80095c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095c2:	89a3      	ldrhlt	r3, [r4, #12]
 80095c4:	181b      	addge	r3, r3, r0
 80095c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095ca:	bfac      	ite	ge
 80095cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80095ce:	81a3      	strhlt	r3, [r4, #12]
 80095d0:	bd10      	pop	{r4, pc}

080095d2 <__swrite>:
 80095d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d6:	461f      	mov	r7, r3
 80095d8:	898b      	ldrh	r3, [r1, #12]
 80095da:	05db      	lsls	r3, r3, #23
 80095dc:	4605      	mov	r5, r0
 80095de:	460c      	mov	r4, r1
 80095e0:	4616      	mov	r6, r2
 80095e2:	d505      	bpl.n	80095f0 <__swrite+0x1e>
 80095e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e8:	2302      	movs	r3, #2
 80095ea:	2200      	movs	r2, #0
 80095ec:	f001 f846 	bl	800a67c <_lseek_r>
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095fa:	81a3      	strh	r3, [r4, #12]
 80095fc:	4632      	mov	r2, r6
 80095fe:	463b      	mov	r3, r7
 8009600:	4628      	mov	r0, r5
 8009602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009606:	f000 b869 	b.w	80096dc <_write_r>

0800960a <__sseek>:
 800960a:	b510      	push	{r4, lr}
 800960c:	460c      	mov	r4, r1
 800960e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009612:	f001 f833 	bl	800a67c <_lseek_r>
 8009616:	1c43      	adds	r3, r0, #1
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	bf15      	itete	ne
 800961c:	6560      	strne	r0, [r4, #84]	; 0x54
 800961e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009622:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009626:	81a3      	strheq	r3, [r4, #12]
 8009628:	bf18      	it	ne
 800962a:	81a3      	strhne	r3, [r4, #12]
 800962c:	bd10      	pop	{r4, pc}

0800962e <__sclose>:
 800962e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009632:	f000 b8d3 	b.w	80097dc <_close_r>
	...

08009638 <__swbuf_r>:
 8009638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963a:	460e      	mov	r6, r1
 800963c:	4614      	mov	r4, r2
 800963e:	4605      	mov	r5, r0
 8009640:	b118      	cbz	r0, 800964a <__swbuf_r+0x12>
 8009642:	6983      	ldr	r3, [r0, #24]
 8009644:	b90b      	cbnz	r3, 800964a <__swbuf_r+0x12>
 8009646:	f7ff f8b7 	bl	80087b8 <__sinit>
 800964a:	4b21      	ldr	r3, [pc, #132]	; (80096d0 <__swbuf_r+0x98>)
 800964c:	429c      	cmp	r4, r3
 800964e:	d12b      	bne.n	80096a8 <__swbuf_r+0x70>
 8009650:	686c      	ldr	r4, [r5, #4]
 8009652:	69a3      	ldr	r3, [r4, #24]
 8009654:	60a3      	str	r3, [r4, #8]
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	071a      	lsls	r2, r3, #28
 800965a:	d52f      	bpl.n	80096bc <__swbuf_r+0x84>
 800965c:	6923      	ldr	r3, [r4, #16]
 800965e:	b36b      	cbz	r3, 80096bc <__swbuf_r+0x84>
 8009660:	6923      	ldr	r3, [r4, #16]
 8009662:	6820      	ldr	r0, [r4, #0]
 8009664:	1ac0      	subs	r0, r0, r3
 8009666:	6963      	ldr	r3, [r4, #20]
 8009668:	b2f6      	uxtb	r6, r6
 800966a:	4283      	cmp	r3, r0
 800966c:	4637      	mov	r7, r6
 800966e:	dc04      	bgt.n	800967a <__swbuf_r+0x42>
 8009670:	4621      	mov	r1, r4
 8009672:	4628      	mov	r0, r5
 8009674:	f000 ffc2 	bl	800a5fc <_fflush_r>
 8009678:	bb30      	cbnz	r0, 80096c8 <__swbuf_r+0x90>
 800967a:	68a3      	ldr	r3, [r4, #8]
 800967c:	3b01      	subs	r3, #1
 800967e:	60a3      	str	r3, [r4, #8]
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	6022      	str	r2, [r4, #0]
 8009686:	701e      	strb	r6, [r3, #0]
 8009688:	6963      	ldr	r3, [r4, #20]
 800968a:	3001      	adds	r0, #1
 800968c:	4283      	cmp	r3, r0
 800968e:	d004      	beq.n	800969a <__swbuf_r+0x62>
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	07db      	lsls	r3, r3, #31
 8009694:	d506      	bpl.n	80096a4 <__swbuf_r+0x6c>
 8009696:	2e0a      	cmp	r6, #10
 8009698:	d104      	bne.n	80096a4 <__swbuf_r+0x6c>
 800969a:	4621      	mov	r1, r4
 800969c:	4628      	mov	r0, r5
 800969e:	f000 ffad 	bl	800a5fc <_fflush_r>
 80096a2:	b988      	cbnz	r0, 80096c8 <__swbuf_r+0x90>
 80096a4:	4638      	mov	r0, r7
 80096a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096a8:	4b0a      	ldr	r3, [pc, #40]	; (80096d4 <__swbuf_r+0x9c>)
 80096aa:	429c      	cmp	r4, r3
 80096ac:	d101      	bne.n	80096b2 <__swbuf_r+0x7a>
 80096ae:	68ac      	ldr	r4, [r5, #8]
 80096b0:	e7cf      	b.n	8009652 <__swbuf_r+0x1a>
 80096b2:	4b09      	ldr	r3, [pc, #36]	; (80096d8 <__swbuf_r+0xa0>)
 80096b4:	429c      	cmp	r4, r3
 80096b6:	bf08      	it	eq
 80096b8:	68ec      	ldreq	r4, [r5, #12]
 80096ba:	e7ca      	b.n	8009652 <__swbuf_r+0x1a>
 80096bc:	4621      	mov	r1, r4
 80096be:	4628      	mov	r0, r5
 80096c0:	f000 f81e 	bl	8009700 <__swsetup_r>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d0cb      	beq.n	8009660 <__swbuf_r+0x28>
 80096c8:	f04f 37ff 	mov.w	r7, #4294967295
 80096cc:	e7ea      	b.n	80096a4 <__swbuf_r+0x6c>
 80096ce:	bf00      	nop
 80096d0:	0800b904 	.word	0x0800b904
 80096d4:	0800b924 	.word	0x0800b924
 80096d8:	0800b8e4 	.word	0x0800b8e4

080096dc <_write_r>:
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	4d07      	ldr	r5, [pc, #28]	; (80096fc <_write_r+0x20>)
 80096e0:	4604      	mov	r4, r0
 80096e2:	4608      	mov	r0, r1
 80096e4:	4611      	mov	r1, r2
 80096e6:	2200      	movs	r2, #0
 80096e8:	602a      	str	r2, [r5, #0]
 80096ea:	461a      	mov	r2, r3
 80096ec:	f7f8 fd7b 	bl	80021e6 <_write>
 80096f0:	1c43      	adds	r3, r0, #1
 80096f2:	d102      	bne.n	80096fa <_write_r+0x1e>
 80096f4:	682b      	ldr	r3, [r5, #0]
 80096f6:	b103      	cbz	r3, 80096fa <_write_r+0x1e>
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
 80096fc:	20005120 	.word	0x20005120

08009700 <__swsetup_r>:
 8009700:	4b32      	ldr	r3, [pc, #200]	; (80097cc <__swsetup_r+0xcc>)
 8009702:	b570      	push	{r4, r5, r6, lr}
 8009704:	681d      	ldr	r5, [r3, #0]
 8009706:	4606      	mov	r6, r0
 8009708:	460c      	mov	r4, r1
 800970a:	b125      	cbz	r5, 8009716 <__swsetup_r+0x16>
 800970c:	69ab      	ldr	r3, [r5, #24]
 800970e:	b913      	cbnz	r3, 8009716 <__swsetup_r+0x16>
 8009710:	4628      	mov	r0, r5
 8009712:	f7ff f851 	bl	80087b8 <__sinit>
 8009716:	4b2e      	ldr	r3, [pc, #184]	; (80097d0 <__swsetup_r+0xd0>)
 8009718:	429c      	cmp	r4, r3
 800971a:	d10f      	bne.n	800973c <__swsetup_r+0x3c>
 800971c:	686c      	ldr	r4, [r5, #4]
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009724:	0719      	lsls	r1, r3, #28
 8009726:	d42c      	bmi.n	8009782 <__swsetup_r+0x82>
 8009728:	06dd      	lsls	r5, r3, #27
 800972a:	d411      	bmi.n	8009750 <__swsetup_r+0x50>
 800972c:	2309      	movs	r3, #9
 800972e:	6033      	str	r3, [r6, #0]
 8009730:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009734:	81a3      	strh	r3, [r4, #12]
 8009736:	f04f 30ff 	mov.w	r0, #4294967295
 800973a:	e03e      	b.n	80097ba <__swsetup_r+0xba>
 800973c:	4b25      	ldr	r3, [pc, #148]	; (80097d4 <__swsetup_r+0xd4>)
 800973e:	429c      	cmp	r4, r3
 8009740:	d101      	bne.n	8009746 <__swsetup_r+0x46>
 8009742:	68ac      	ldr	r4, [r5, #8]
 8009744:	e7eb      	b.n	800971e <__swsetup_r+0x1e>
 8009746:	4b24      	ldr	r3, [pc, #144]	; (80097d8 <__swsetup_r+0xd8>)
 8009748:	429c      	cmp	r4, r3
 800974a:	bf08      	it	eq
 800974c:	68ec      	ldreq	r4, [r5, #12]
 800974e:	e7e6      	b.n	800971e <__swsetup_r+0x1e>
 8009750:	0758      	lsls	r0, r3, #29
 8009752:	d512      	bpl.n	800977a <__swsetup_r+0x7a>
 8009754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009756:	b141      	cbz	r1, 800976a <__swsetup_r+0x6a>
 8009758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800975c:	4299      	cmp	r1, r3
 800975e:	d002      	beq.n	8009766 <__swsetup_r+0x66>
 8009760:	4630      	mov	r0, r6
 8009762:	f001 fba3 	bl	800aeac <_free_r>
 8009766:	2300      	movs	r3, #0
 8009768:	6363      	str	r3, [r4, #52]	; 0x34
 800976a:	89a3      	ldrh	r3, [r4, #12]
 800976c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009770:	81a3      	strh	r3, [r4, #12]
 8009772:	2300      	movs	r3, #0
 8009774:	6063      	str	r3, [r4, #4]
 8009776:	6923      	ldr	r3, [r4, #16]
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	f043 0308 	orr.w	r3, r3, #8
 8009780:	81a3      	strh	r3, [r4, #12]
 8009782:	6923      	ldr	r3, [r4, #16]
 8009784:	b94b      	cbnz	r3, 800979a <__swsetup_r+0x9a>
 8009786:	89a3      	ldrh	r3, [r4, #12]
 8009788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800978c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009790:	d003      	beq.n	800979a <__swsetup_r+0x9a>
 8009792:	4621      	mov	r1, r4
 8009794:	4630      	mov	r0, r6
 8009796:	f000 ffa7 	bl	800a6e8 <__smakebuf_r>
 800979a:	89a0      	ldrh	r0, [r4, #12]
 800979c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097a0:	f010 0301 	ands.w	r3, r0, #1
 80097a4:	d00a      	beq.n	80097bc <__swsetup_r+0xbc>
 80097a6:	2300      	movs	r3, #0
 80097a8:	60a3      	str	r3, [r4, #8]
 80097aa:	6963      	ldr	r3, [r4, #20]
 80097ac:	425b      	negs	r3, r3
 80097ae:	61a3      	str	r3, [r4, #24]
 80097b0:	6923      	ldr	r3, [r4, #16]
 80097b2:	b943      	cbnz	r3, 80097c6 <__swsetup_r+0xc6>
 80097b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097b8:	d1ba      	bne.n	8009730 <__swsetup_r+0x30>
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	0781      	lsls	r1, r0, #30
 80097be:	bf58      	it	pl
 80097c0:	6963      	ldrpl	r3, [r4, #20]
 80097c2:	60a3      	str	r3, [r4, #8]
 80097c4:	e7f4      	b.n	80097b0 <__swsetup_r+0xb0>
 80097c6:	2000      	movs	r0, #0
 80097c8:	e7f7      	b.n	80097ba <__swsetup_r+0xba>
 80097ca:	bf00      	nop
 80097cc:	20000018 	.word	0x20000018
 80097d0:	0800b904 	.word	0x0800b904
 80097d4:	0800b924 	.word	0x0800b924
 80097d8:	0800b8e4 	.word	0x0800b8e4

080097dc <_close_r>:
 80097dc:	b538      	push	{r3, r4, r5, lr}
 80097de:	4d06      	ldr	r5, [pc, #24]	; (80097f8 <_close_r+0x1c>)
 80097e0:	2300      	movs	r3, #0
 80097e2:	4604      	mov	r4, r0
 80097e4:	4608      	mov	r0, r1
 80097e6:	602b      	str	r3, [r5, #0]
 80097e8:	f7f8 fd19 	bl	800221e <_close>
 80097ec:	1c43      	adds	r3, r0, #1
 80097ee:	d102      	bne.n	80097f6 <_close_r+0x1a>
 80097f0:	682b      	ldr	r3, [r5, #0]
 80097f2:	b103      	cbz	r3, 80097f6 <_close_r+0x1a>
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	bd38      	pop	{r3, r4, r5, pc}
 80097f8:	20005120 	.word	0x20005120

080097fc <quorem>:
 80097fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	6903      	ldr	r3, [r0, #16]
 8009802:	690c      	ldr	r4, [r1, #16]
 8009804:	42a3      	cmp	r3, r4
 8009806:	4607      	mov	r7, r0
 8009808:	f2c0 8081 	blt.w	800990e <quorem+0x112>
 800980c:	3c01      	subs	r4, #1
 800980e:	f101 0814 	add.w	r8, r1, #20
 8009812:	f100 0514 	add.w	r5, r0, #20
 8009816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800981a:	9301      	str	r3, [sp, #4]
 800981c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009824:	3301      	adds	r3, #1
 8009826:	429a      	cmp	r2, r3
 8009828:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800982c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009830:	fbb2 f6f3 	udiv	r6, r2, r3
 8009834:	d331      	bcc.n	800989a <quorem+0x9e>
 8009836:	f04f 0e00 	mov.w	lr, #0
 800983a:	4640      	mov	r0, r8
 800983c:	46ac      	mov	ip, r5
 800983e:	46f2      	mov	sl, lr
 8009840:	f850 2b04 	ldr.w	r2, [r0], #4
 8009844:	b293      	uxth	r3, r2
 8009846:	fb06 e303 	mla	r3, r6, r3, lr
 800984a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800984e:	b29b      	uxth	r3, r3
 8009850:	ebaa 0303 	sub.w	r3, sl, r3
 8009854:	0c12      	lsrs	r2, r2, #16
 8009856:	f8dc a000 	ldr.w	sl, [ip]
 800985a:	fb06 e202 	mla	r2, r6, r2, lr
 800985e:	fa13 f38a 	uxtah	r3, r3, sl
 8009862:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009866:	fa1f fa82 	uxth.w	sl, r2
 800986a:	f8dc 2000 	ldr.w	r2, [ip]
 800986e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009872:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009876:	b29b      	uxth	r3, r3
 8009878:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800987c:	4581      	cmp	r9, r0
 800987e:	f84c 3b04 	str.w	r3, [ip], #4
 8009882:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009886:	d2db      	bcs.n	8009840 <quorem+0x44>
 8009888:	f855 300b 	ldr.w	r3, [r5, fp]
 800988c:	b92b      	cbnz	r3, 800989a <quorem+0x9e>
 800988e:	9b01      	ldr	r3, [sp, #4]
 8009890:	3b04      	subs	r3, #4
 8009892:	429d      	cmp	r5, r3
 8009894:	461a      	mov	r2, r3
 8009896:	d32e      	bcc.n	80098f6 <quorem+0xfa>
 8009898:	613c      	str	r4, [r7, #16]
 800989a:	4638      	mov	r0, r7
 800989c:	f001 f9f6 	bl	800ac8c <__mcmp>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	db24      	blt.n	80098ee <quorem+0xf2>
 80098a4:	3601      	adds	r6, #1
 80098a6:	4628      	mov	r0, r5
 80098a8:	f04f 0c00 	mov.w	ip, #0
 80098ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80098b0:	f8d0 e000 	ldr.w	lr, [r0]
 80098b4:	b293      	uxth	r3, r2
 80098b6:	ebac 0303 	sub.w	r3, ip, r3
 80098ba:	0c12      	lsrs	r2, r2, #16
 80098bc:	fa13 f38e 	uxtah	r3, r3, lr
 80098c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80098c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098ce:	45c1      	cmp	r9, r8
 80098d0:	f840 3b04 	str.w	r3, [r0], #4
 80098d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098d8:	d2e8      	bcs.n	80098ac <quorem+0xb0>
 80098da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098e2:	b922      	cbnz	r2, 80098ee <quorem+0xf2>
 80098e4:	3b04      	subs	r3, #4
 80098e6:	429d      	cmp	r5, r3
 80098e8:	461a      	mov	r2, r3
 80098ea:	d30a      	bcc.n	8009902 <quorem+0x106>
 80098ec:	613c      	str	r4, [r7, #16]
 80098ee:	4630      	mov	r0, r6
 80098f0:	b003      	add	sp, #12
 80098f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f6:	6812      	ldr	r2, [r2, #0]
 80098f8:	3b04      	subs	r3, #4
 80098fa:	2a00      	cmp	r2, #0
 80098fc:	d1cc      	bne.n	8009898 <quorem+0x9c>
 80098fe:	3c01      	subs	r4, #1
 8009900:	e7c7      	b.n	8009892 <quorem+0x96>
 8009902:	6812      	ldr	r2, [r2, #0]
 8009904:	3b04      	subs	r3, #4
 8009906:	2a00      	cmp	r2, #0
 8009908:	d1f0      	bne.n	80098ec <quorem+0xf0>
 800990a:	3c01      	subs	r4, #1
 800990c:	e7eb      	b.n	80098e6 <quorem+0xea>
 800990e:	2000      	movs	r0, #0
 8009910:	e7ee      	b.n	80098f0 <quorem+0xf4>
 8009912:	0000      	movs	r0, r0
 8009914:	0000      	movs	r0, r0
	...

08009918 <_dtoa_r>:
 8009918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	ed2d 8b02 	vpush	{d8}
 8009920:	ec57 6b10 	vmov	r6, r7, d0
 8009924:	b095      	sub	sp, #84	; 0x54
 8009926:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009928:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800992c:	9105      	str	r1, [sp, #20]
 800992e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009932:	4604      	mov	r4, r0
 8009934:	9209      	str	r2, [sp, #36]	; 0x24
 8009936:	930f      	str	r3, [sp, #60]	; 0x3c
 8009938:	b975      	cbnz	r5, 8009958 <_dtoa_r+0x40>
 800993a:	2010      	movs	r0, #16
 800993c:	f000 ff14 	bl	800a768 <malloc>
 8009940:	4602      	mov	r2, r0
 8009942:	6260      	str	r0, [r4, #36]	; 0x24
 8009944:	b920      	cbnz	r0, 8009950 <_dtoa_r+0x38>
 8009946:	4bb2      	ldr	r3, [pc, #712]	; (8009c10 <_dtoa_r+0x2f8>)
 8009948:	21ea      	movs	r1, #234	; 0xea
 800994a:	48b2      	ldr	r0, [pc, #712]	; (8009c14 <_dtoa_r+0x2fc>)
 800994c:	f001 fdc6 	bl	800b4dc <__assert_func>
 8009950:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009954:	6005      	str	r5, [r0, #0]
 8009956:	60c5      	str	r5, [r0, #12]
 8009958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800995a:	6819      	ldr	r1, [r3, #0]
 800995c:	b151      	cbz	r1, 8009974 <_dtoa_r+0x5c>
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	604a      	str	r2, [r1, #4]
 8009962:	2301      	movs	r3, #1
 8009964:	4093      	lsls	r3, r2
 8009966:	608b      	str	r3, [r1, #8]
 8009968:	4620      	mov	r0, r4
 800996a:	f000 ff51 	bl	800a810 <_Bfree>
 800996e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009970:	2200      	movs	r2, #0
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	1e3b      	subs	r3, r7, #0
 8009976:	bfb9      	ittee	lt
 8009978:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800997c:	9303      	strlt	r3, [sp, #12]
 800997e:	2300      	movge	r3, #0
 8009980:	f8c8 3000 	strge.w	r3, [r8]
 8009984:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009988:	4ba3      	ldr	r3, [pc, #652]	; (8009c18 <_dtoa_r+0x300>)
 800998a:	bfbc      	itt	lt
 800998c:	2201      	movlt	r2, #1
 800998e:	f8c8 2000 	strlt.w	r2, [r8]
 8009992:	ea33 0309 	bics.w	r3, r3, r9
 8009996:	d11b      	bne.n	80099d0 <_dtoa_r+0xb8>
 8009998:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800999a:	f242 730f 	movw	r3, #9999	; 0x270f
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099a4:	4333      	orrs	r3, r6
 80099a6:	f000 857a 	beq.w	800a49e <_dtoa_r+0xb86>
 80099aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099ac:	b963      	cbnz	r3, 80099c8 <_dtoa_r+0xb0>
 80099ae:	4b9b      	ldr	r3, [pc, #620]	; (8009c1c <_dtoa_r+0x304>)
 80099b0:	e024      	b.n	80099fc <_dtoa_r+0xe4>
 80099b2:	4b9b      	ldr	r3, [pc, #620]	; (8009c20 <_dtoa_r+0x308>)
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	3308      	adds	r3, #8
 80099b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099ba:	6013      	str	r3, [r2, #0]
 80099bc:	9800      	ldr	r0, [sp, #0]
 80099be:	b015      	add	sp, #84	; 0x54
 80099c0:	ecbd 8b02 	vpop	{d8}
 80099c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c8:	4b94      	ldr	r3, [pc, #592]	; (8009c1c <_dtoa_r+0x304>)
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	3303      	adds	r3, #3
 80099ce:	e7f3      	b.n	80099b8 <_dtoa_r+0xa0>
 80099d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099d4:	2200      	movs	r2, #0
 80099d6:	ec51 0b17 	vmov	r0, r1, d7
 80099da:	2300      	movs	r3, #0
 80099dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80099e0:	f7f7 f87a 	bl	8000ad8 <__aeabi_dcmpeq>
 80099e4:	4680      	mov	r8, r0
 80099e6:	b158      	cbz	r0, 8009a00 <_dtoa_r+0xe8>
 80099e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099ea:	2301      	movs	r3, #1
 80099ec:	6013      	str	r3, [r2, #0]
 80099ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f000 8551 	beq.w	800a498 <_dtoa_r+0xb80>
 80099f6:	488b      	ldr	r0, [pc, #556]	; (8009c24 <_dtoa_r+0x30c>)
 80099f8:	6018      	str	r0, [r3, #0]
 80099fa:	1e43      	subs	r3, r0, #1
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	e7dd      	b.n	80099bc <_dtoa_r+0xa4>
 8009a00:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009a04:	aa12      	add	r2, sp, #72	; 0x48
 8009a06:	a913      	add	r1, sp, #76	; 0x4c
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f001 f9e3 	bl	800add4 <__d2b>
 8009a0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a12:	4683      	mov	fp, r0
 8009a14:	2d00      	cmp	r5, #0
 8009a16:	d07c      	beq.n	8009b12 <_dtoa_r+0x1fa>
 8009a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a1a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009a1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a22:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009a26:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009a2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009a2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a32:	4b7d      	ldr	r3, [pc, #500]	; (8009c28 <_dtoa_r+0x310>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	4630      	mov	r0, r6
 8009a38:	4639      	mov	r1, r7
 8009a3a:	f7f6 fc2d 	bl	8000298 <__aeabi_dsub>
 8009a3e:	a36e      	add	r3, pc, #440	; (adr r3, 8009bf8 <_dtoa_r+0x2e0>)
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	f7f6 fde0 	bl	8000608 <__aeabi_dmul>
 8009a48:	a36d      	add	r3, pc, #436	; (adr r3, 8009c00 <_dtoa_r+0x2e8>)
 8009a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4e:	f7f6 fc25 	bl	800029c <__adddf3>
 8009a52:	4606      	mov	r6, r0
 8009a54:	4628      	mov	r0, r5
 8009a56:	460f      	mov	r7, r1
 8009a58:	f7f6 fd6c 	bl	8000534 <__aeabi_i2d>
 8009a5c:	a36a      	add	r3, pc, #424	; (adr r3, 8009c08 <_dtoa_r+0x2f0>)
 8009a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a62:	f7f6 fdd1 	bl	8000608 <__aeabi_dmul>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	4639      	mov	r1, r7
 8009a6e:	f7f6 fc15 	bl	800029c <__adddf3>
 8009a72:	4606      	mov	r6, r0
 8009a74:	460f      	mov	r7, r1
 8009a76:	f7f7 f877 	bl	8000b68 <__aeabi_d2iz>
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	4682      	mov	sl, r0
 8009a7e:	2300      	movs	r3, #0
 8009a80:	4630      	mov	r0, r6
 8009a82:	4639      	mov	r1, r7
 8009a84:	f7f7 f832 	bl	8000aec <__aeabi_dcmplt>
 8009a88:	b148      	cbz	r0, 8009a9e <_dtoa_r+0x186>
 8009a8a:	4650      	mov	r0, sl
 8009a8c:	f7f6 fd52 	bl	8000534 <__aeabi_i2d>
 8009a90:	4632      	mov	r2, r6
 8009a92:	463b      	mov	r3, r7
 8009a94:	f7f7 f820 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a98:	b908      	cbnz	r0, 8009a9e <_dtoa_r+0x186>
 8009a9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a9e:	f1ba 0f16 	cmp.w	sl, #22
 8009aa2:	d854      	bhi.n	8009b4e <_dtoa_r+0x236>
 8009aa4:	4b61      	ldr	r3, [pc, #388]	; (8009c2c <_dtoa_r+0x314>)
 8009aa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ab2:	f7f7 f81b 	bl	8000aec <__aeabi_dcmplt>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d04b      	beq.n	8009b52 <_dtoa_r+0x23a>
 8009aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009abe:	2300      	movs	r3, #0
 8009ac0:	930e      	str	r3, [sp, #56]	; 0x38
 8009ac2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ac4:	1b5d      	subs	r5, r3, r5
 8009ac6:	1e6b      	subs	r3, r5, #1
 8009ac8:	9304      	str	r3, [sp, #16]
 8009aca:	bf43      	ittte	mi
 8009acc:	2300      	movmi	r3, #0
 8009ace:	f1c5 0801 	rsbmi	r8, r5, #1
 8009ad2:	9304      	strmi	r3, [sp, #16]
 8009ad4:	f04f 0800 	movpl.w	r8, #0
 8009ad8:	f1ba 0f00 	cmp.w	sl, #0
 8009adc:	db3b      	blt.n	8009b56 <_dtoa_r+0x23e>
 8009ade:	9b04      	ldr	r3, [sp, #16]
 8009ae0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009ae4:	4453      	add	r3, sl
 8009ae6:	9304      	str	r3, [sp, #16]
 8009ae8:	2300      	movs	r3, #0
 8009aea:	9306      	str	r3, [sp, #24]
 8009aec:	9b05      	ldr	r3, [sp, #20]
 8009aee:	2b09      	cmp	r3, #9
 8009af0:	d869      	bhi.n	8009bc6 <_dtoa_r+0x2ae>
 8009af2:	2b05      	cmp	r3, #5
 8009af4:	bfc4      	itt	gt
 8009af6:	3b04      	subgt	r3, #4
 8009af8:	9305      	strgt	r3, [sp, #20]
 8009afa:	9b05      	ldr	r3, [sp, #20]
 8009afc:	f1a3 0302 	sub.w	r3, r3, #2
 8009b00:	bfcc      	ite	gt
 8009b02:	2500      	movgt	r5, #0
 8009b04:	2501      	movle	r5, #1
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d869      	bhi.n	8009bde <_dtoa_r+0x2c6>
 8009b0a:	e8df f003 	tbb	[pc, r3]
 8009b0e:	4e2c      	.short	0x4e2c
 8009b10:	5a4c      	.short	0x5a4c
 8009b12:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009b16:	441d      	add	r5, r3
 8009b18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b1c:	2b20      	cmp	r3, #32
 8009b1e:	bfc1      	itttt	gt
 8009b20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b24:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009b28:	fa09 f303 	lslgt.w	r3, r9, r3
 8009b2c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b30:	bfda      	itte	le
 8009b32:	f1c3 0320 	rsble	r3, r3, #32
 8009b36:	fa06 f003 	lslle.w	r0, r6, r3
 8009b3a:	4318      	orrgt	r0, r3
 8009b3c:	f7f6 fcea 	bl	8000514 <__aeabi_ui2d>
 8009b40:	2301      	movs	r3, #1
 8009b42:	4606      	mov	r6, r0
 8009b44:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009b48:	3d01      	subs	r5, #1
 8009b4a:	9310      	str	r3, [sp, #64]	; 0x40
 8009b4c:	e771      	b.n	8009a32 <_dtoa_r+0x11a>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e7b6      	b.n	8009ac0 <_dtoa_r+0x1a8>
 8009b52:	900e      	str	r0, [sp, #56]	; 0x38
 8009b54:	e7b5      	b.n	8009ac2 <_dtoa_r+0x1aa>
 8009b56:	f1ca 0300 	rsb	r3, sl, #0
 8009b5a:	9306      	str	r3, [sp, #24]
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	eba8 080a 	sub.w	r8, r8, sl
 8009b62:	930d      	str	r3, [sp, #52]	; 0x34
 8009b64:	e7c2      	b.n	8009aec <_dtoa_r+0x1d4>
 8009b66:	2300      	movs	r3, #0
 8009b68:	9308      	str	r3, [sp, #32]
 8009b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	dc39      	bgt.n	8009be4 <_dtoa_r+0x2cc>
 8009b70:	f04f 0901 	mov.w	r9, #1
 8009b74:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b78:	464b      	mov	r3, r9
 8009b7a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009b7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009b80:	2200      	movs	r2, #0
 8009b82:	6042      	str	r2, [r0, #4]
 8009b84:	2204      	movs	r2, #4
 8009b86:	f102 0614 	add.w	r6, r2, #20
 8009b8a:	429e      	cmp	r6, r3
 8009b8c:	6841      	ldr	r1, [r0, #4]
 8009b8e:	d92f      	bls.n	8009bf0 <_dtoa_r+0x2d8>
 8009b90:	4620      	mov	r0, r4
 8009b92:	f000 fdfd 	bl	800a790 <_Balloc>
 8009b96:	9000      	str	r0, [sp, #0]
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d14b      	bne.n	8009c34 <_dtoa_r+0x31c>
 8009b9c:	4b24      	ldr	r3, [pc, #144]	; (8009c30 <_dtoa_r+0x318>)
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ba4:	e6d1      	b.n	800994a <_dtoa_r+0x32>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e7de      	b.n	8009b68 <_dtoa_r+0x250>
 8009baa:	2300      	movs	r3, #0
 8009bac:	9308      	str	r3, [sp, #32]
 8009bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb0:	eb0a 0903 	add.w	r9, sl, r3
 8009bb4:	f109 0301 	add.w	r3, r9, #1
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	bfb8      	it	lt
 8009bbe:	2301      	movlt	r3, #1
 8009bc0:	e7dd      	b.n	8009b7e <_dtoa_r+0x266>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e7f2      	b.n	8009bac <_dtoa_r+0x294>
 8009bc6:	2501      	movs	r5, #1
 8009bc8:	2300      	movs	r3, #0
 8009bca:	9305      	str	r3, [sp, #20]
 8009bcc:	9508      	str	r5, [sp, #32]
 8009bce:	f04f 39ff 	mov.w	r9, #4294967295
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009bd8:	2312      	movs	r3, #18
 8009bda:	9209      	str	r2, [sp, #36]	; 0x24
 8009bdc:	e7cf      	b.n	8009b7e <_dtoa_r+0x266>
 8009bde:	2301      	movs	r3, #1
 8009be0:	9308      	str	r3, [sp, #32]
 8009be2:	e7f4      	b.n	8009bce <_dtoa_r+0x2b6>
 8009be4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009be8:	f8cd 9004 	str.w	r9, [sp, #4]
 8009bec:	464b      	mov	r3, r9
 8009bee:	e7c6      	b.n	8009b7e <_dtoa_r+0x266>
 8009bf0:	3101      	adds	r1, #1
 8009bf2:	6041      	str	r1, [r0, #4]
 8009bf4:	0052      	lsls	r2, r2, #1
 8009bf6:	e7c6      	b.n	8009b86 <_dtoa_r+0x26e>
 8009bf8:	636f4361 	.word	0x636f4361
 8009bfc:	3fd287a7 	.word	0x3fd287a7
 8009c00:	8b60c8b3 	.word	0x8b60c8b3
 8009c04:	3fc68a28 	.word	0x3fc68a28
 8009c08:	509f79fb 	.word	0x509f79fb
 8009c0c:	3fd34413 	.word	0x3fd34413
 8009c10:	0800ba8a 	.word	0x0800ba8a
 8009c14:	0800baa1 	.word	0x0800baa1
 8009c18:	7ff00000 	.word	0x7ff00000
 8009c1c:	0800ba86 	.word	0x0800ba86
 8009c20:	0800ba7d 	.word	0x0800ba7d
 8009c24:	0800b959 	.word	0x0800b959
 8009c28:	3ff80000 	.word	0x3ff80000
 8009c2c:	0800bba0 	.word	0x0800bba0
 8009c30:	0800bb00 	.word	0x0800bb00
 8009c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c36:	9a00      	ldr	r2, [sp, #0]
 8009c38:	601a      	str	r2, [r3, #0]
 8009c3a:	9b01      	ldr	r3, [sp, #4]
 8009c3c:	2b0e      	cmp	r3, #14
 8009c3e:	f200 80ad 	bhi.w	8009d9c <_dtoa_r+0x484>
 8009c42:	2d00      	cmp	r5, #0
 8009c44:	f000 80aa 	beq.w	8009d9c <_dtoa_r+0x484>
 8009c48:	f1ba 0f00 	cmp.w	sl, #0
 8009c4c:	dd36      	ble.n	8009cbc <_dtoa_r+0x3a4>
 8009c4e:	4ac3      	ldr	r2, [pc, #780]	; (8009f5c <_dtoa_r+0x644>)
 8009c50:	f00a 030f 	and.w	r3, sl, #15
 8009c54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c58:	ed93 7b00 	vldr	d7, [r3]
 8009c5c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009c60:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009c64:	eeb0 8a47 	vmov.f32	s16, s14
 8009c68:	eef0 8a67 	vmov.f32	s17, s15
 8009c6c:	d016      	beq.n	8009c9c <_dtoa_r+0x384>
 8009c6e:	4bbc      	ldr	r3, [pc, #752]	; (8009f60 <_dtoa_r+0x648>)
 8009c70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c78:	f7f6 fdf0 	bl	800085c <__aeabi_ddiv>
 8009c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c80:	f007 070f 	and.w	r7, r7, #15
 8009c84:	2503      	movs	r5, #3
 8009c86:	4eb6      	ldr	r6, [pc, #728]	; (8009f60 <_dtoa_r+0x648>)
 8009c88:	b957      	cbnz	r7, 8009ca0 <_dtoa_r+0x388>
 8009c8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c8e:	ec53 2b18 	vmov	r2, r3, d8
 8009c92:	f7f6 fde3 	bl	800085c <__aeabi_ddiv>
 8009c96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c9a:	e029      	b.n	8009cf0 <_dtoa_r+0x3d8>
 8009c9c:	2502      	movs	r5, #2
 8009c9e:	e7f2      	b.n	8009c86 <_dtoa_r+0x36e>
 8009ca0:	07f9      	lsls	r1, r7, #31
 8009ca2:	d508      	bpl.n	8009cb6 <_dtoa_r+0x39e>
 8009ca4:	ec51 0b18 	vmov	r0, r1, d8
 8009ca8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cac:	f7f6 fcac 	bl	8000608 <__aeabi_dmul>
 8009cb0:	ec41 0b18 	vmov	d8, r0, r1
 8009cb4:	3501      	adds	r5, #1
 8009cb6:	107f      	asrs	r7, r7, #1
 8009cb8:	3608      	adds	r6, #8
 8009cba:	e7e5      	b.n	8009c88 <_dtoa_r+0x370>
 8009cbc:	f000 80a6 	beq.w	8009e0c <_dtoa_r+0x4f4>
 8009cc0:	f1ca 0600 	rsb	r6, sl, #0
 8009cc4:	4ba5      	ldr	r3, [pc, #660]	; (8009f5c <_dtoa_r+0x644>)
 8009cc6:	4fa6      	ldr	r7, [pc, #664]	; (8009f60 <_dtoa_r+0x648>)
 8009cc8:	f006 020f 	and.w	r2, r6, #15
 8009ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009cd8:	f7f6 fc96 	bl	8000608 <__aeabi_dmul>
 8009cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ce0:	1136      	asrs	r6, r6, #4
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	2502      	movs	r5, #2
 8009ce6:	2e00      	cmp	r6, #0
 8009ce8:	f040 8085 	bne.w	8009df6 <_dtoa_r+0x4de>
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1d2      	bne.n	8009c96 <_dtoa_r+0x37e>
 8009cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f000 808c 	beq.w	8009e10 <_dtoa_r+0x4f8>
 8009cf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009cfc:	4b99      	ldr	r3, [pc, #612]	; (8009f64 <_dtoa_r+0x64c>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	4630      	mov	r0, r6
 8009d02:	4639      	mov	r1, r7
 8009d04:	f7f6 fef2 	bl	8000aec <__aeabi_dcmplt>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	f000 8081 	beq.w	8009e10 <_dtoa_r+0x4f8>
 8009d0e:	9b01      	ldr	r3, [sp, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d07d      	beq.n	8009e10 <_dtoa_r+0x4f8>
 8009d14:	f1b9 0f00 	cmp.w	r9, #0
 8009d18:	dd3c      	ble.n	8009d94 <_dtoa_r+0x47c>
 8009d1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009d1e:	9307      	str	r3, [sp, #28]
 8009d20:	2200      	movs	r2, #0
 8009d22:	4b91      	ldr	r3, [pc, #580]	; (8009f68 <_dtoa_r+0x650>)
 8009d24:	4630      	mov	r0, r6
 8009d26:	4639      	mov	r1, r7
 8009d28:	f7f6 fc6e 	bl	8000608 <__aeabi_dmul>
 8009d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d30:	3501      	adds	r5, #1
 8009d32:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009d36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	f7f6 fbfa 	bl	8000534 <__aeabi_i2d>
 8009d40:	4632      	mov	r2, r6
 8009d42:	463b      	mov	r3, r7
 8009d44:	f7f6 fc60 	bl	8000608 <__aeabi_dmul>
 8009d48:	4b88      	ldr	r3, [pc, #544]	; (8009f6c <_dtoa_r+0x654>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f7f6 faa6 	bl	800029c <__adddf3>
 8009d50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d58:	9303      	str	r3, [sp, #12]
 8009d5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d15c      	bne.n	8009e1a <_dtoa_r+0x502>
 8009d60:	4b83      	ldr	r3, [pc, #524]	; (8009f70 <_dtoa_r+0x658>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	4630      	mov	r0, r6
 8009d66:	4639      	mov	r1, r7
 8009d68:	f7f6 fa96 	bl	8000298 <__aeabi_dsub>
 8009d6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d70:	4606      	mov	r6, r0
 8009d72:	460f      	mov	r7, r1
 8009d74:	f7f6 fed8 	bl	8000b28 <__aeabi_dcmpgt>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	f040 8296 	bne.w	800a2aa <_dtoa_r+0x992>
 8009d7e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009d82:	4630      	mov	r0, r6
 8009d84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d88:	4639      	mov	r1, r7
 8009d8a:	f7f6 feaf 	bl	8000aec <__aeabi_dcmplt>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	f040 8288 	bne.w	800a2a4 <_dtoa_r+0x98c>
 8009d94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f2c0 8158 	blt.w	800a054 <_dtoa_r+0x73c>
 8009da4:	f1ba 0f0e 	cmp.w	sl, #14
 8009da8:	f300 8154 	bgt.w	800a054 <_dtoa_r+0x73c>
 8009dac:	4b6b      	ldr	r3, [pc, #428]	; (8009f5c <_dtoa_r+0x644>)
 8009dae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009db2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f280 80e3 	bge.w	8009f84 <_dtoa_r+0x66c>
 8009dbe:	9b01      	ldr	r3, [sp, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f300 80df 	bgt.w	8009f84 <_dtoa_r+0x66c>
 8009dc6:	f040 826d 	bne.w	800a2a4 <_dtoa_r+0x98c>
 8009dca:	4b69      	ldr	r3, [pc, #420]	; (8009f70 <_dtoa_r+0x658>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	4640      	mov	r0, r8
 8009dd0:	4649      	mov	r1, r9
 8009dd2:	f7f6 fc19 	bl	8000608 <__aeabi_dmul>
 8009dd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dda:	f7f6 fe9b 	bl	8000b14 <__aeabi_dcmpge>
 8009dde:	9e01      	ldr	r6, [sp, #4]
 8009de0:	4637      	mov	r7, r6
 8009de2:	2800      	cmp	r0, #0
 8009de4:	f040 8243 	bne.w	800a26e <_dtoa_r+0x956>
 8009de8:	9d00      	ldr	r5, [sp, #0]
 8009dea:	2331      	movs	r3, #49	; 0x31
 8009dec:	f805 3b01 	strb.w	r3, [r5], #1
 8009df0:	f10a 0a01 	add.w	sl, sl, #1
 8009df4:	e23f      	b.n	800a276 <_dtoa_r+0x95e>
 8009df6:	07f2      	lsls	r2, r6, #31
 8009df8:	d505      	bpl.n	8009e06 <_dtoa_r+0x4ee>
 8009dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dfe:	f7f6 fc03 	bl	8000608 <__aeabi_dmul>
 8009e02:	3501      	adds	r5, #1
 8009e04:	2301      	movs	r3, #1
 8009e06:	1076      	asrs	r6, r6, #1
 8009e08:	3708      	adds	r7, #8
 8009e0a:	e76c      	b.n	8009ce6 <_dtoa_r+0x3ce>
 8009e0c:	2502      	movs	r5, #2
 8009e0e:	e76f      	b.n	8009cf0 <_dtoa_r+0x3d8>
 8009e10:	9b01      	ldr	r3, [sp, #4]
 8009e12:	f8cd a01c 	str.w	sl, [sp, #28]
 8009e16:	930c      	str	r3, [sp, #48]	; 0x30
 8009e18:	e78d      	b.n	8009d36 <_dtoa_r+0x41e>
 8009e1a:	9900      	ldr	r1, [sp, #0]
 8009e1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009e1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e20:	4b4e      	ldr	r3, [pc, #312]	; (8009f5c <_dtoa_r+0x644>)
 8009e22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e26:	4401      	add	r1, r0
 8009e28:	9102      	str	r1, [sp, #8]
 8009e2a:	9908      	ldr	r1, [sp, #32]
 8009e2c:	eeb0 8a47 	vmov.f32	s16, s14
 8009e30:	eef0 8a67 	vmov.f32	s17, s15
 8009e34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e3c:	2900      	cmp	r1, #0
 8009e3e:	d045      	beq.n	8009ecc <_dtoa_r+0x5b4>
 8009e40:	494c      	ldr	r1, [pc, #304]	; (8009f74 <_dtoa_r+0x65c>)
 8009e42:	2000      	movs	r0, #0
 8009e44:	f7f6 fd0a 	bl	800085c <__aeabi_ddiv>
 8009e48:	ec53 2b18 	vmov	r2, r3, d8
 8009e4c:	f7f6 fa24 	bl	8000298 <__aeabi_dsub>
 8009e50:	9d00      	ldr	r5, [sp, #0]
 8009e52:	ec41 0b18 	vmov	d8, r0, r1
 8009e56:	4639      	mov	r1, r7
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f7f6 fe85 	bl	8000b68 <__aeabi_d2iz>
 8009e5e:	900c      	str	r0, [sp, #48]	; 0x30
 8009e60:	f7f6 fb68 	bl	8000534 <__aeabi_i2d>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4630      	mov	r0, r6
 8009e6a:	4639      	mov	r1, r7
 8009e6c:	f7f6 fa14 	bl	8000298 <__aeabi_dsub>
 8009e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e72:	3330      	adds	r3, #48	; 0x30
 8009e74:	f805 3b01 	strb.w	r3, [r5], #1
 8009e78:	ec53 2b18 	vmov	r2, r3, d8
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	460f      	mov	r7, r1
 8009e80:	f7f6 fe34 	bl	8000aec <__aeabi_dcmplt>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d165      	bne.n	8009f54 <_dtoa_r+0x63c>
 8009e88:	4632      	mov	r2, r6
 8009e8a:	463b      	mov	r3, r7
 8009e8c:	4935      	ldr	r1, [pc, #212]	; (8009f64 <_dtoa_r+0x64c>)
 8009e8e:	2000      	movs	r0, #0
 8009e90:	f7f6 fa02 	bl	8000298 <__aeabi_dsub>
 8009e94:	ec53 2b18 	vmov	r2, r3, d8
 8009e98:	f7f6 fe28 	bl	8000aec <__aeabi_dcmplt>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	f040 80b9 	bne.w	800a014 <_dtoa_r+0x6fc>
 8009ea2:	9b02      	ldr	r3, [sp, #8]
 8009ea4:	429d      	cmp	r5, r3
 8009ea6:	f43f af75 	beq.w	8009d94 <_dtoa_r+0x47c>
 8009eaa:	4b2f      	ldr	r3, [pc, #188]	; (8009f68 <_dtoa_r+0x650>)
 8009eac:	ec51 0b18 	vmov	r0, r1, d8
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f7f6 fba9 	bl	8000608 <__aeabi_dmul>
 8009eb6:	4b2c      	ldr	r3, [pc, #176]	; (8009f68 <_dtoa_r+0x650>)
 8009eb8:	ec41 0b18 	vmov	d8, r0, r1
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	f7f6 fba1 	bl	8000608 <__aeabi_dmul>
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	460f      	mov	r7, r1
 8009eca:	e7c4      	b.n	8009e56 <_dtoa_r+0x53e>
 8009ecc:	ec51 0b17 	vmov	r0, r1, d7
 8009ed0:	f7f6 fb9a 	bl	8000608 <__aeabi_dmul>
 8009ed4:	9b02      	ldr	r3, [sp, #8]
 8009ed6:	9d00      	ldr	r5, [sp, #0]
 8009ed8:	930c      	str	r3, [sp, #48]	; 0x30
 8009eda:	ec41 0b18 	vmov	d8, r0, r1
 8009ede:	4639      	mov	r1, r7
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f7f6 fe41 	bl	8000b68 <__aeabi_d2iz>
 8009ee6:	9011      	str	r0, [sp, #68]	; 0x44
 8009ee8:	f7f6 fb24 	bl	8000534 <__aeabi_i2d>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	f7f6 f9d0 	bl	8000298 <__aeabi_dsub>
 8009ef8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009efa:	3330      	adds	r3, #48	; 0x30
 8009efc:	f805 3b01 	strb.w	r3, [r5], #1
 8009f00:	9b02      	ldr	r3, [sp, #8]
 8009f02:	429d      	cmp	r5, r3
 8009f04:	4606      	mov	r6, r0
 8009f06:	460f      	mov	r7, r1
 8009f08:	f04f 0200 	mov.w	r2, #0
 8009f0c:	d134      	bne.n	8009f78 <_dtoa_r+0x660>
 8009f0e:	4b19      	ldr	r3, [pc, #100]	; (8009f74 <_dtoa_r+0x65c>)
 8009f10:	ec51 0b18 	vmov	r0, r1, d8
 8009f14:	f7f6 f9c2 	bl	800029c <__adddf3>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	4639      	mov	r1, r7
 8009f20:	f7f6 fe02 	bl	8000b28 <__aeabi_dcmpgt>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d175      	bne.n	800a014 <_dtoa_r+0x6fc>
 8009f28:	ec53 2b18 	vmov	r2, r3, d8
 8009f2c:	4911      	ldr	r1, [pc, #68]	; (8009f74 <_dtoa_r+0x65c>)
 8009f2e:	2000      	movs	r0, #0
 8009f30:	f7f6 f9b2 	bl	8000298 <__aeabi_dsub>
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	4630      	mov	r0, r6
 8009f3a:	4639      	mov	r1, r7
 8009f3c:	f7f6 fdd6 	bl	8000aec <__aeabi_dcmplt>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	f43f af27 	beq.w	8009d94 <_dtoa_r+0x47c>
 8009f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f48:	1e6b      	subs	r3, r5, #1
 8009f4a:	930c      	str	r3, [sp, #48]	; 0x30
 8009f4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f50:	2b30      	cmp	r3, #48	; 0x30
 8009f52:	d0f8      	beq.n	8009f46 <_dtoa_r+0x62e>
 8009f54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009f58:	e04a      	b.n	8009ff0 <_dtoa_r+0x6d8>
 8009f5a:	bf00      	nop
 8009f5c:	0800bba0 	.word	0x0800bba0
 8009f60:	0800bb78 	.word	0x0800bb78
 8009f64:	3ff00000 	.word	0x3ff00000
 8009f68:	40240000 	.word	0x40240000
 8009f6c:	401c0000 	.word	0x401c0000
 8009f70:	40140000 	.word	0x40140000
 8009f74:	3fe00000 	.word	0x3fe00000
 8009f78:	4baf      	ldr	r3, [pc, #700]	; (800a238 <_dtoa_r+0x920>)
 8009f7a:	f7f6 fb45 	bl	8000608 <__aeabi_dmul>
 8009f7e:	4606      	mov	r6, r0
 8009f80:	460f      	mov	r7, r1
 8009f82:	e7ac      	b.n	8009ede <_dtoa_r+0x5c6>
 8009f84:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f88:	9d00      	ldr	r5, [sp, #0]
 8009f8a:	4642      	mov	r2, r8
 8009f8c:	464b      	mov	r3, r9
 8009f8e:	4630      	mov	r0, r6
 8009f90:	4639      	mov	r1, r7
 8009f92:	f7f6 fc63 	bl	800085c <__aeabi_ddiv>
 8009f96:	f7f6 fde7 	bl	8000b68 <__aeabi_d2iz>
 8009f9a:	9002      	str	r0, [sp, #8]
 8009f9c:	f7f6 faca 	bl	8000534 <__aeabi_i2d>
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	464b      	mov	r3, r9
 8009fa4:	f7f6 fb30 	bl	8000608 <__aeabi_dmul>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	4630      	mov	r0, r6
 8009fae:	4639      	mov	r1, r7
 8009fb0:	f7f6 f972 	bl	8000298 <__aeabi_dsub>
 8009fb4:	9e02      	ldr	r6, [sp, #8]
 8009fb6:	9f01      	ldr	r7, [sp, #4]
 8009fb8:	3630      	adds	r6, #48	; 0x30
 8009fba:	f805 6b01 	strb.w	r6, [r5], #1
 8009fbe:	9e00      	ldr	r6, [sp, #0]
 8009fc0:	1bae      	subs	r6, r5, r6
 8009fc2:	42b7      	cmp	r7, r6
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	d137      	bne.n	800a03a <_dtoa_r+0x722>
 8009fca:	f7f6 f967 	bl	800029c <__adddf3>
 8009fce:	4642      	mov	r2, r8
 8009fd0:	464b      	mov	r3, r9
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	460f      	mov	r7, r1
 8009fd6:	f7f6 fda7 	bl	8000b28 <__aeabi_dcmpgt>
 8009fda:	b9c8      	cbnz	r0, 800a010 <_dtoa_r+0x6f8>
 8009fdc:	4642      	mov	r2, r8
 8009fde:	464b      	mov	r3, r9
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	f7f6 fd78 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fe8:	b110      	cbz	r0, 8009ff0 <_dtoa_r+0x6d8>
 8009fea:	9b02      	ldr	r3, [sp, #8]
 8009fec:	07d9      	lsls	r1, r3, #31
 8009fee:	d40f      	bmi.n	800a010 <_dtoa_r+0x6f8>
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	4659      	mov	r1, fp
 8009ff4:	f000 fc0c 	bl	800a810 <_Bfree>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	702b      	strb	r3, [r5, #0]
 8009ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ffe:	f10a 0001 	add.w	r0, sl, #1
 800a002:	6018      	str	r0, [r3, #0]
 800a004:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a006:	2b00      	cmp	r3, #0
 800a008:	f43f acd8 	beq.w	80099bc <_dtoa_r+0xa4>
 800a00c:	601d      	str	r5, [r3, #0]
 800a00e:	e4d5      	b.n	80099bc <_dtoa_r+0xa4>
 800a010:	f8cd a01c 	str.w	sl, [sp, #28]
 800a014:	462b      	mov	r3, r5
 800a016:	461d      	mov	r5, r3
 800a018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a01c:	2a39      	cmp	r2, #57	; 0x39
 800a01e:	d108      	bne.n	800a032 <_dtoa_r+0x71a>
 800a020:	9a00      	ldr	r2, [sp, #0]
 800a022:	429a      	cmp	r2, r3
 800a024:	d1f7      	bne.n	800a016 <_dtoa_r+0x6fe>
 800a026:	9a07      	ldr	r2, [sp, #28]
 800a028:	9900      	ldr	r1, [sp, #0]
 800a02a:	3201      	adds	r2, #1
 800a02c:	9207      	str	r2, [sp, #28]
 800a02e:	2230      	movs	r2, #48	; 0x30
 800a030:	700a      	strb	r2, [r1, #0]
 800a032:	781a      	ldrb	r2, [r3, #0]
 800a034:	3201      	adds	r2, #1
 800a036:	701a      	strb	r2, [r3, #0]
 800a038:	e78c      	b.n	8009f54 <_dtoa_r+0x63c>
 800a03a:	4b7f      	ldr	r3, [pc, #508]	; (800a238 <_dtoa_r+0x920>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	f7f6 fae3 	bl	8000608 <__aeabi_dmul>
 800a042:	2200      	movs	r2, #0
 800a044:	2300      	movs	r3, #0
 800a046:	4606      	mov	r6, r0
 800a048:	460f      	mov	r7, r1
 800a04a:	f7f6 fd45 	bl	8000ad8 <__aeabi_dcmpeq>
 800a04e:	2800      	cmp	r0, #0
 800a050:	d09b      	beq.n	8009f8a <_dtoa_r+0x672>
 800a052:	e7cd      	b.n	8009ff0 <_dtoa_r+0x6d8>
 800a054:	9a08      	ldr	r2, [sp, #32]
 800a056:	2a00      	cmp	r2, #0
 800a058:	f000 80c4 	beq.w	800a1e4 <_dtoa_r+0x8cc>
 800a05c:	9a05      	ldr	r2, [sp, #20]
 800a05e:	2a01      	cmp	r2, #1
 800a060:	f300 80a8 	bgt.w	800a1b4 <_dtoa_r+0x89c>
 800a064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a066:	2a00      	cmp	r2, #0
 800a068:	f000 80a0 	beq.w	800a1ac <_dtoa_r+0x894>
 800a06c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a070:	9e06      	ldr	r6, [sp, #24]
 800a072:	4645      	mov	r5, r8
 800a074:	9a04      	ldr	r2, [sp, #16]
 800a076:	2101      	movs	r1, #1
 800a078:	441a      	add	r2, r3
 800a07a:	4620      	mov	r0, r4
 800a07c:	4498      	add	r8, r3
 800a07e:	9204      	str	r2, [sp, #16]
 800a080:	f000 fc82 	bl	800a988 <__i2b>
 800a084:	4607      	mov	r7, r0
 800a086:	2d00      	cmp	r5, #0
 800a088:	dd0b      	ble.n	800a0a2 <_dtoa_r+0x78a>
 800a08a:	9b04      	ldr	r3, [sp, #16]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	dd08      	ble.n	800a0a2 <_dtoa_r+0x78a>
 800a090:	42ab      	cmp	r3, r5
 800a092:	9a04      	ldr	r2, [sp, #16]
 800a094:	bfa8      	it	ge
 800a096:	462b      	movge	r3, r5
 800a098:	eba8 0803 	sub.w	r8, r8, r3
 800a09c:	1aed      	subs	r5, r5, r3
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	9304      	str	r3, [sp, #16]
 800a0a2:	9b06      	ldr	r3, [sp, #24]
 800a0a4:	b1fb      	cbz	r3, 800a0e6 <_dtoa_r+0x7ce>
 800a0a6:	9b08      	ldr	r3, [sp, #32]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 809f 	beq.w	800a1ec <_dtoa_r+0x8d4>
 800a0ae:	2e00      	cmp	r6, #0
 800a0b0:	dd11      	ble.n	800a0d6 <_dtoa_r+0x7be>
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	4632      	mov	r2, r6
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f000 fd22 	bl	800ab00 <__pow5mult>
 800a0bc:	465a      	mov	r2, fp
 800a0be:	4601      	mov	r1, r0
 800a0c0:	4607      	mov	r7, r0
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f000 fc76 	bl	800a9b4 <__multiply>
 800a0c8:	4659      	mov	r1, fp
 800a0ca:	9007      	str	r0, [sp, #28]
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f000 fb9f 	bl	800a810 <_Bfree>
 800a0d2:	9b07      	ldr	r3, [sp, #28]
 800a0d4:	469b      	mov	fp, r3
 800a0d6:	9b06      	ldr	r3, [sp, #24]
 800a0d8:	1b9a      	subs	r2, r3, r6
 800a0da:	d004      	beq.n	800a0e6 <_dtoa_r+0x7ce>
 800a0dc:	4659      	mov	r1, fp
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f000 fd0e 	bl	800ab00 <__pow5mult>
 800a0e4:	4683      	mov	fp, r0
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	f000 fc4d 	bl	800a988 <__i2b>
 800a0ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	dd7c      	ble.n	800a1f0 <_dtoa_r+0x8d8>
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	4601      	mov	r1, r0
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f000 fd00 	bl	800ab00 <__pow5mult>
 800a100:	9b05      	ldr	r3, [sp, #20]
 800a102:	2b01      	cmp	r3, #1
 800a104:	4606      	mov	r6, r0
 800a106:	dd76      	ble.n	800a1f6 <_dtoa_r+0x8de>
 800a108:	2300      	movs	r3, #0
 800a10a:	9306      	str	r3, [sp, #24]
 800a10c:	6933      	ldr	r3, [r6, #16]
 800a10e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a112:	6918      	ldr	r0, [r3, #16]
 800a114:	f000 fbe8 	bl	800a8e8 <__hi0bits>
 800a118:	f1c0 0020 	rsb	r0, r0, #32
 800a11c:	9b04      	ldr	r3, [sp, #16]
 800a11e:	4418      	add	r0, r3
 800a120:	f010 001f 	ands.w	r0, r0, #31
 800a124:	f000 8086 	beq.w	800a234 <_dtoa_r+0x91c>
 800a128:	f1c0 0320 	rsb	r3, r0, #32
 800a12c:	2b04      	cmp	r3, #4
 800a12e:	dd7f      	ble.n	800a230 <_dtoa_r+0x918>
 800a130:	f1c0 001c 	rsb	r0, r0, #28
 800a134:	9b04      	ldr	r3, [sp, #16]
 800a136:	4403      	add	r3, r0
 800a138:	4480      	add	r8, r0
 800a13a:	4405      	add	r5, r0
 800a13c:	9304      	str	r3, [sp, #16]
 800a13e:	f1b8 0f00 	cmp.w	r8, #0
 800a142:	dd05      	ble.n	800a150 <_dtoa_r+0x838>
 800a144:	4659      	mov	r1, fp
 800a146:	4642      	mov	r2, r8
 800a148:	4620      	mov	r0, r4
 800a14a:	f000 fd33 	bl	800abb4 <__lshift>
 800a14e:	4683      	mov	fp, r0
 800a150:	9b04      	ldr	r3, [sp, #16]
 800a152:	2b00      	cmp	r3, #0
 800a154:	dd05      	ble.n	800a162 <_dtoa_r+0x84a>
 800a156:	4631      	mov	r1, r6
 800a158:	461a      	mov	r2, r3
 800a15a:	4620      	mov	r0, r4
 800a15c:	f000 fd2a 	bl	800abb4 <__lshift>
 800a160:	4606      	mov	r6, r0
 800a162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a164:	2b00      	cmp	r3, #0
 800a166:	d069      	beq.n	800a23c <_dtoa_r+0x924>
 800a168:	4631      	mov	r1, r6
 800a16a:	4658      	mov	r0, fp
 800a16c:	f000 fd8e 	bl	800ac8c <__mcmp>
 800a170:	2800      	cmp	r0, #0
 800a172:	da63      	bge.n	800a23c <_dtoa_r+0x924>
 800a174:	2300      	movs	r3, #0
 800a176:	4659      	mov	r1, fp
 800a178:	220a      	movs	r2, #10
 800a17a:	4620      	mov	r0, r4
 800a17c:	f000 fb6a 	bl	800a854 <__multadd>
 800a180:	9b08      	ldr	r3, [sp, #32]
 800a182:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a186:	4683      	mov	fp, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 818f 	beq.w	800a4ac <_dtoa_r+0xb94>
 800a18e:	4639      	mov	r1, r7
 800a190:	2300      	movs	r3, #0
 800a192:	220a      	movs	r2, #10
 800a194:	4620      	mov	r0, r4
 800a196:	f000 fb5d 	bl	800a854 <__multadd>
 800a19a:	f1b9 0f00 	cmp.w	r9, #0
 800a19e:	4607      	mov	r7, r0
 800a1a0:	f300 808e 	bgt.w	800a2c0 <_dtoa_r+0x9a8>
 800a1a4:	9b05      	ldr	r3, [sp, #20]
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	dc50      	bgt.n	800a24c <_dtoa_r+0x934>
 800a1aa:	e089      	b.n	800a2c0 <_dtoa_r+0x9a8>
 800a1ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a1b2:	e75d      	b.n	800a070 <_dtoa_r+0x758>
 800a1b4:	9b01      	ldr	r3, [sp, #4]
 800a1b6:	1e5e      	subs	r6, r3, #1
 800a1b8:	9b06      	ldr	r3, [sp, #24]
 800a1ba:	42b3      	cmp	r3, r6
 800a1bc:	bfbf      	itttt	lt
 800a1be:	9b06      	ldrlt	r3, [sp, #24]
 800a1c0:	9606      	strlt	r6, [sp, #24]
 800a1c2:	1af2      	sublt	r2, r6, r3
 800a1c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a1c6:	bfb6      	itet	lt
 800a1c8:	189b      	addlt	r3, r3, r2
 800a1ca:	1b9e      	subge	r6, r3, r6
 800a1cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a1ce:	9b01      	ldr	r3, [sp, #4]
 800a1d0:	bfb8      	it	lt
 800a1d2:	2600      	movlt	r6, #0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	bfb5      	itete	lt
 800a1d8:	eba8 0503 	sublt.w	r5, r8, r3
 800a1dc:	9b01      	ldrge	r3, [sp, #4]
 800a1de:	2300      	movlt	r3, #0
 800a1e0:	4645      	movge	r5, r8
 800a1e2:	e747      	b.n	800a074 <_dtoa_r+0x75c>
 800a1e4:	9e06      	ldr	r6, [sp, #24]
 800a1e6:	9f08      	ldr	r7, [sp, #32]
 800a1e8:	4645      	mov	r5, r8
 800a1ea:	e74c      	b.n	800a086 <_dtoa_r+0x76e>
 800a1ec:	9a06      	ldr	r2, [sp, #24]
 800a1ee:	e775      	b.n	800a0dc <_dtoa_r+0x7c4>
 800a1f0:	9b05      	ldr	r3, [sp, #20]
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	dc18      	bgt.n	800a228 <_dtoa_r+0x910>
 800a1f6:	9b02      	ldr	r3, [sp, #8]
 800a1f8:	b9b3      	cbnz	r3, 800a228 <_dtoa_r+0x910>
 800a1fa:	9b03      	ldr	r3, [sp, #12]
 800a1fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a200:	b9a3      	cbnz	r3, 800a22c <_dtoa_r+0x914>
 800a202:	9b03      	ldr	r3, [sp, #12]
 800a204:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a208:	0d1b      	lsrs	r3, r3, #20
 800a20a:	051b      	lsls	r3, r3, #20
 800a20c:	b12b      	cbz	r3, 800a21a <_dtoa_r+0x902>
 800a20e:	9b04      	ldr	r3, [sp, #16]
 800a210:	3301      	adds	r3, #1
 800a212:	9304      	str	r3, [sp, #16]
 800a214:	f108 0801 	add.w	r8, r8, #1
 800a218:	2301      	movs	r3, #1
 800a21a:	9306      	str	r3, [sp, #24]
 800a21c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f47f af74 	bne.w	800a10c <_dtoa_r+0x7f4>
 800a224:	2001      	movs	r0, #1
 800a226:	e779      	b.n	800a11c <_dtoa_r+0x804>
 800a228:	2300      	movs	r3, #0
 800a22a:	e7f6      	b.n	800a21a <_dtoa_r+0x902>
 800a22c:	9b02      	ldr	r3, [sp, #8]
 800a22e:	e7f4      	b.n	800a21a <_dtoa_r+0x902>
 800a230:	d085      	beq.n	800a13e <_dtoa_r+0x826>
 800a232:	4618      	mov	r0, r3
 800a234:	301c      	adds	r0, #28
 800a236:	e77d      	b.n	800a134 <_dtoa_r+0x81c>
 800a238:	40240000 	.word	0x40240000
 800a23c:	9b01      	ldr	r3, [sp, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	dc38      	bgt.n	800a2b4 <_dtoa_r+0x99c>
 800a242:	9b05      	ldr	r3, [sp, #20]
 800a244:	2b02      	cmp	r3, #2
 800a246:	dd35      	ble.n	800a2b4 <_dtoa_r+0x99c>
 800a248:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a24c:	f1b9 0f00 	cmp.w	r9, #0
 800a250:	d10d      	bne.n	800a26e <_dtoa_r+0x956>
 800a252:	4631      	mov	r1, r6
 800a254:	464b      	mov	r3, r9
 800a256:	2205      	movs	r2, #5
 800a258:	4620      	mov	r0, r4
 800a25a:	f000 fafb 	bl	800a854 <__multadd>
 800a25e:	4601      	mov	r1, r0
 800a260:	4606      	mov	r6, r0
 800a262:	4658      	mov	r0, fp
 800a264:	f000 fd12 	bl	800ac8c <__mcmp>
 800a268:	2800      	cmp	r0, #0
 800a26a:	f73f adbd 	bgt.w	8009de8 <_dtoa_r+0x4d0>
 800a26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a270:	9d00      	ldr	r5, [sp, #0]
 800a272:	ea6f 0a03 	mvn.w	sl, r3
 800a276:	f04f 0800 	mov.w	r8, #0
 800a27a:	4631      	mov	r1, r6
 800a27c:	4620      	mov	r0, r4
 800a27e:	f000 fac7 	bl	800a810 <_Bfree>
 800a282:	2f00      	cmp	r7, #0
 800a284:	f43f aeb4 	beq.w	8009ff0 <_dtoa_r+0x6d8>
 800a288:	f1b8 0f00 	cmp.w	r8, #0
 800a28c:	d005      	beq.n	800a29a <_dtoa_r+0x982>
 800a28e:	45b8      	cmp	r8, r7
 800a290:	d003      	beq.n	800a29a <_dtoa_r+0x982>
 800a292:	4641      	mov	r1, r8
 800a294:	4620      	mov	r0, r4
 800a296:	f000 fabb 	bl	800a810 <_Bfree>
 800a29a:	4639      	mov	r1, r7
 800a29c:	4620      	mov	r0, r4
 800a29e:	f000 fab7 	bl	800a810 <_Bfree>
 800a2a2:	e6a5      	b.n	8009ff0 <_dtoa_r+0x6d8>
 800a2a4:	2600      	movs	r6, #0
 800a2a6:	4637      	mov	r7, r6
 800a2a8:	e7e1      	b.n	800a26e <_dtoa_r+0x956>
 800a2aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a2ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a2b0:	4637      	mov	r7, r6
 800a2b2:	e599      	b.n	8009de8 <_dtoa_r+0x4d0>
 800a2b4:	9b08      	ldr	r3, [sp, #32]
 800a2b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f000 80fd 	beq.w	800a4ba <_dtoa_r+0xba2>
 800a2c0:	2d00      	cmp	r5, #0
 800a2c2:	dd05      	ble.n	800a2d0 <_dtoa_r+0x9b8>
 800a2c4:	4639      	mov	r1, r7
 800a2c6:	462a      	mov	r2, r5
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	f000 fc73 	bl	800abb4 <__lshift>
 800a2ce:	4607      	mov	r7, r0
 800a2d0:	9b06      	ldr	r3, [sp, #24]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d05c      	beq.n	800a390 <_dtoa_r+0xa78>
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f000 fa59 	bl	800a790 <_Balloc>
 800a2de:	4605      	mov	r5, r0
 800a2e0:	b928      	cbnz	r0, 800a2ee <_dtoa_r+0x9d6>
 800a2e2:	4b80      	ldr	r3, [pc, #512]	; (800a4e4 <_dtoa_r+0xbcc>)
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a2ea:	f7ff bb2e 	b.w	800994a <_dtoa_r+0x32>
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	3202      	adds	r2, #2
 800a2f2:	0092      	lsls	r2, r2, #2
 800a2f4:	f107 010c 	add.w	r1, r7, #12
 800a2f8:	300c      	adds	r0, #12
 800a2fa:	f7fe fb22 	bl	8008942 <memcpy>
 800a2fe:	2201      	movs	r2, #1
 800a300:	4629      	mov	r1, r5
 800a302:	4620      	mov	r0, r4
 800a304:	f000 fc56 	bl	800abb4 <__lshift>
 800a308:	9b00      	ldr	r3, [sp, #0]
 800a30a:	3301      	adds	r3, #1
 800a30c:	9301      	str	r3, [sp, #4]
 800a30e:	9b00      	ldr	r3, [sp, #0]
 800a310:	444b      	add	r3, r9
 800a312:	9307      	str	r3, [sp, #28]
 800a314:	9b02      	ldr	r3, [sp, #8]
 800a316:	f003 0301 	and.w	r3, r3, #1
 800a31a:	46b8      	mov	r8, r7
 800a31c:	9306      	str	r3, [sp, #24]
 800a31e:	4607      	mov	r7, r0
 800a320:	9b01      	ldr	r3, [sp, #4]
 800a322:	4631      	mov	r1, r6
 800a324:	3b01      	subs	r3, #1
 800a326:	4658      	mov	r0, fp
 800a328:	9302      	str	r3, [sp, #8]
 800a32a:	f7ff fa67 	bl	80097fc <quorem>
 800a32e:	4603      	mov	r3, r0
 800a330:	3330      	adds	r3, #48	; 0x30
 800a332:	9004      	str	r0, [sp, #16]
 800a334:	4641      	mov	r1, r8
 800a336:	4658      	mov	r0, fp
 800a338:	9308      	str	r3, [sp, #32]
 800a33a:	f000 fca7 	bl	800ac8c <__mcmp>
 800a33e:	463a      	mov	r2, r7
 800a340:	4681      	mov	r9, r0
 800a342:	4631      	mov	r1, r6
 800a344:	4620      	mov	r0, r4
 800a346:	f000 fcbd 	bl	800acc4 <__mdiff>
 800a34a:	68c2      	ldr	r2, [r0, #12]
 800a34c:	9b08      	ldr	r3, [sp, #32]
 800a34e:	4605      	mov	r5, r0
 800a350:	bb02      	cbnz	r2, 800a394 <_dtoa_r+0xa7c>
 800a352:	4601      	mov	r1, r0
 800a354:	4658      	mov	r0, fp
 800a356:	f000 fc99 	bl	800ac8c <__mcmp>
 800a35a:	9b08      	ldr	r3, [sp, #32]
 800a35c:	4602      	mov	r2, r0
 800a35e:	4629      	mov	r1, r5
 800a360:	4620      	mov	r0, r4
 800a362:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a366:	f000 fa53 	bl	800a810 <_Bfree>
 800a36a:	9b05      	ldr	r3, [sp, #20]
 800a36c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a36e:	9d01      	ldr	r5, [sp, #4]
 800a370:	ea43 0102 	orr.w	r1, r3, r2
 800a374:	9b06      	ldr	r3, [sp, #24]
 800a376:	430b      	orrs	r3, r1
 800a378:	9b08      	ldr	r3, [sp, #32]
 800a37a:	d10d      	bne.n	800a398 <_dtoa_r+0xa80>
 800a37c:	2b39      	cmp	r3, #57	; 0x39
 800a37e:	d029      	beq.n	800a3d4 <_dtoa_r+0xabc>
 800a380:	f1b9 0f00 	cmp.w	r9, #0
 800a384:	dd01      	ble.n	800a38a <_dtoa_r+0xa72>
 800a386:	9b04      	ldr	r3, [sp, #16]
 800a388:	3331      	adds	r3, #49	; 0x31
 800a38a:	9a02      	ldr	r2, [sp, #8]
 800a38c:	7013      	strb	r3, [r2, #0]
 800a38e:	e774      	b.n	800a27a <_dtoa_r+0x962>
 800a390:	4638      	mov	r0, r7
 800a392:	e7b9      	b.n	800a308 <_dtoa_r+0x9f0>
 800a394:	2201      	movs	r2, #1
 800a396:	e7e2      	b.n	800a35e <_dtoa_r+0xa46>
 800a398:	f1b9 0f00 	cmp.w	r9, #0
 800a39c:	db06      	blt.n	800a3ac <_dtoa_r+0xa94>
 800a39e:	9905      	ldr	r1, [sp, #20]
 800a3a0:	ea41 0909 	orr.w	r9, r1, r9
 800a3a4:	9906      	ldr	r1, [sp, #24]
 800a3a6:	ea59 0101 	orrs.w	r1, r9, r1
 800a3aa:	d120      	bne.n	800a3ee <_dtoa_r+0xad6>
 800a3ac:	2a00      	cmp	r2, #0
 800a3ae:	ddec      	ble.n	800a38a <_dtoa_r+0xa72>
 800a3b0:	4659      	mov	r1, fp
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	9301      	str	r3, [sp, #4]
 800a3b8:	f000 fbfc 	bl	800abb4 <__lshift>
 800a3bc:	4631      	mov	r1, r6
 800a3be:	4683      	mov	fp, r0
 800a3c0:	f000 fc64 	bl	800ac8c <__mcmp>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	9b01      	ldr	r3, [sp, #4]
 800a3c8:	dc02      	bgt.n	800a3d0 <_dtoa_r+0xab8>
 800a3ca:	d1de      	bne.n	800a38a <_dtoa_r+0xa72>
 800a3cc:	07da      	lsls	r2, r3, #31
 800a3ce:	d5dc      	bpl.n	800a38a <_dtoa_r+0xa72>
 800a3d0:	2b39      	cmp	r3, #57	; 0x39
 800a3d2:	d1d8      	bne.n	800a386 <_dtoa_r+0xa6e>
 800a3d4:	9a02      	ldr	r2, [sp, #8]
 800a3d6:	2339      	movs	r3, #57	; 0x39
 800a3d8:	7013      	strb	r3, [r2, #0]
 800a3da:	462b      	mov	r3, r5
 800a3dc:	461d      	mov	r5, r3
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a3e4:	2a39      	cmp	r2, #57	; 0x39
 800a3e6:	d050      	beq.n	800a48a <_dtoa_r+0xb72>
 800a3e8:	3201      	adds	r2, #1
 800a3ea:	701a      	strb	r2, [r3, #0]
 800a3ec:	e745      	b.n	800a27a <_dtoa_r+0x962>
 800a3ee:	2a00      	cmp	r2, #0
 800a3f0:	dd03      	ble.n	800a3fa <_dtoa_r+0xae2>
 800a3f2:	2b39      	cmp	r3, #57	; 0x39
 800a3f4:	d0ee      	beq.n	800a3d4 <_dtoa_r+0xabc>
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	e7c7      	b.n	800a38a <_dtoa_r+0xa72>
 800a3fa:	9a01      	ldr	r2, [sp, #4]
 800a3fc:	9907      	ldr	r1, [sp, #28]
 800a3fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a402:	428a      	cmp	r2, r1
 800a404:	d02a      	beq.n	800a45c <_dtoa_r+0xb44>
 800a406:	4659      	mov	r1, fp
 800a408:	2300      	movs	r3, #0
 800a40a:	220a      	movs	r2, #10
 800a40c:	4620      	mov	r0, r4
 800a40e:	f000 fa21 	bl	800a854 <__multadd>
 800a412:	45b8      	cmp	r8, r7
 800a414:	4683      	mov	fp, r0
 800a416:	f04f 0300 	mov.w	r3, #0
 800a41a:	f04f 020a 	mov.w	r2, #10
 800a41e:	4641      	mov	r1, r8
 800a420:	4620      	mov	r0, r4
 800a422:	d107      	bne.n	800a434 <_dtoa_r+0xb1c>
 800a424:	f000 fa16 	bl	800a854 <__multadd>
 800a428:	4680      	mov	r8, r0
 800a42a:	4607      	mov	r7, r0
 800a42c:	9b01      	ldr	r3, [sp, #4]
 800a42e:	3301      	adds	r3, #1
 800a430:	9301      	str	r3, [sp, #4]
 800a432:	e775      	b.n	800a320 <_dtoa_r+0xa08>
 800a434:	f000 fa0e 	bl	800a854 <__multadd>
 800a438:	4639      	mov	r1, r7
 800a43a:	4680      	mov	r8, r0
 800a43c:	2300      	movs	r3, #0
 800a43e:	220a      	movs	r2, #10
 800a440:	4620      	mov	r0, r4
 800a442:	f000 fa07 	bl	800a854 <__multadd>
 800a446:	4607      	mov	r7, r0
 800a448:	e7f0      	b.n	800a42c <_dtoa_r+0xb14>
 800a44a:	f1b9 0f00 	cmp.w	r9, #0
 800a44e:	9a00      	ldr	r2, [sp, #0]
 800a450:	bfcc      	ite	gt
 800a452:	464d      	movgt	r5, r9
 800a454:	2501      	movle	r5, #1
 800a456:	4415      	add	r5, r2
 800a458:	f04f 0800 	mov.w	r8, #0
 800a45c:	4659      	mov	r1, fp
 800a45e:	2201      	movs	r2, #1
 800a460:	4620      	mov	r0, r4
 800a462:	9301      	str	r3, [sp, #4]
 800a464:	f000 fba6 	bl	800abb4 <__lshift>
 800a468:	4631      	mov	r1, r6
 800a46a:	4683      	mov	fp, r0
 800a46c:	f000 fc0e 	bl	800ac8c <__mcmp>
 800a470:	2800      	cmp	r0, #0
 800a472:	dcb2      	bgt.n	800a3da <_dtoa_r+0xac2>
 800a474:	d102      	bne.n	800a47c <_dtoa_r+0xb64>
 800a476:	9b01      	ldr	r3, [sp, #4]
 800a478:	07db      	lsls	r3, r3, #31
 800a47a:	d4ae      	bmi.n	800a3da <_dtoa_r+0xac2>
 800a47c:	462b      	mov	r3, r5
 800a47e:	461d      	mov	r5, r3
 800a480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a484:	2a30      	cmp	r2, #48	; 0x30
 800a486:	d0fa      	beq.n	800a47e <_dtoa_r+0xb66>
 800a488:	e6f7      	b.n	800a27a <_dtoa_r+0x962>
 800a48a:	9a00      	ldr	r2, [sp, #0]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d1a5      	bne.n	800a3dc <_dtoa_r+0xac4>
 800a490:	f10a 0a01 	add.w	sl, sl, #1
 800a494:	2331      	movs	r3, #49	; 0x31
 800a496:	e779      	b.n	800a38c <_dtoa_r+0xa74>
 800a498:	4b13      	ldr	r3, [pc, #76]	; (800a4e8 <_dtoa_r+0xbd0>)
 800a49a:	f7ff baaf 	b.w	80099fc <_dtoa_r+0xe4>
 800a49e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f47f aa86 	bne.w	80099b2 <_dtoa_r+0x9a>
 800a4a6:	4b11      	ldr	r3, [pc, #68]	; (800a4ec <_dtoa_r+0xbd4>)
 800a4a8:	f7ff baa8 	b.w	80099fc <_dtoa_r+0xe4>
 800a4ac:	f1b9 0f00 	cmp.w	r9, #0
 800a4b0:	dc03      	bgt.n	800a4ba <_dtoa_r+0xba2>
 800a4b2:	9b05      	ldr	r3, [sp, #20]
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	f73f aec9 	bgt.w	800a24c <_dtoa_r+0x934>
 800a4ba:	9d00      	ldr	r5, [sp, #0]
 800a4bc:	4631      	mov	r1, r6
 800a4be:	4658      	mov	r0, fp
 800a4c0:	f7ff f99c 	bl	80097fc <quorem>
 800a4c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a4c8:	f805 3b01 	strb.w	r3, [r5], #1
 800a4cc:	9a00      	ldr	r2, [sp, #0]
 800a4ce:	1aaa      	subs	r2, r5, r2
 800a4d0:	4591      	cmp	r9, r2
 800a4d2:	ddba      	ble.n	800a44a <_dtoa_r+0xb32>
 800a4d4:	4659      	mov	r1, fp
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	220a      	movs	r2, #10
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f000 f9ba 	bl	800a854 <__multadd>
 800a4e0:	4683      	mov	fp, r0
 800a4e2:	e7eb      	b.n	800a4bc <_dtoa_r+0xba4>
 800a4e4:	0800bb00 	.word	0x0800bb00
 800a4e8:	0800b958 	.word	0x0800b958
 800a4ec:	0800ba7d 	.word	0x0800ba7d

0800a4f0 <__sflush_r>:
 800a4f0:	898a      	ldrh	r2, [r1, #12]
 800a4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	0710      	lsls	r0, r2, #28
 800a4fa:	460c      	mov	r4, r1
 800a4fc:	d458      	bmi.n	800a5b0 <__sflush_r+0xc0>
 800a4fe:	684b      	ldr	r3, [r1, #4]
 800a500:	2b00      	cmp	r3, #0
 800a502:	dc05      	bgt.n	800a510 <__sflush_r+0x20>
 800a504:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a506:	2b00      	cmp	r3, #0
 800a508:	dc02      	bgt.n	800a510 <__sflush_r+0x20>
 800a50a:	2000      	movs	r0, #0
 800a50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a512:	2e00      	cmp	r6, #0
 800a514:	d0f9      	beq.n	800a50a <__sflush_r+0x1a>
 800a516:	2300      	movs	r3, #0
 800a518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a51c:	682f      	ldr	r7, [r5, #0]
 800a51e:	602b      	str	r3, [r5, #0]
 800a520:	d032      	beq.n	800a588 <__sflush_r+0x98>
 800a522:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	075a      	lsls	r2, r3, #29
 800a528:	d505      	bpl.n	800a536 <__sflush_r+0x46>
 800a52a:	6863      	ldr	r3, [r4, #4]
 800a52c:	1ac0      	subs	r0, r0, r3
 800a52e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a530:	b10b      	cbz	r3, 800a536 <__sflush_r+0x46>
 800a532:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a534:	1ac0      	subs	r0, r0, r3
 800a536:	2300      	movs	r3, #0
 800a538:	4602      	mov	r2, r0
 800a53a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a53c:	6a21      	ldr	r1, [r4, #32]
 800a53e:	4628      	mov	r0, r5
 800a540:	47b0      	blx	r6
 800a542:	1c43      	adds	r3, r0, #1
 800a544:	89a3      	ldrh	r3, [r4, #12]
 800a546:	d106      	bne.n	800a556 <__sflush_r+0x66>
 800a548:	6829      	ldr	r1, [r5, #0]
 800a54a:	291d      	cmp	r1, #29
 800a54c:	d82c      	bhi.n	800a5a8 <__sflush_r+0xb8>
 800a54e:	4a2a      	ldr	r2, [pc, #168]	; (800a5f8 <__sflush_r+0x108>)
 800a550:	40ca      	lsrs	r2, r1
 800a552:	07d6      	lsls	r6, r2, #31
 800a554:	d528      	bpl.n	800a5a8 <__sflush_r+0xb8>
 800a556:	2200      	movs	r2, #0
 800a558:	6062      	str	r2, [r4, #4]
 800a55a:	04d9      	lsls	r1, r3, #19
 800a55c:	6922      	ldr	r2, [r4, #16]
 800a55e:	6022      	str	r2, [r4, #0]
 800a560:	d504      	bpl.n	800a56c <__sflush_r+0x7c>
 800a562:	1c42      	adds	r2, r0, #1
 800a564:	d101      	bne.n	800a56a <__sflush_r+0x7a>
 800a566:	682b      	ldr	r3, [r5, #0]
 800a568:	b903      	cbnz	r3, 800a56c <__sflush_r+0x7c>
 800a56a:	6560      	str	r0, [r4, #84]	; 0x54
 800a56c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a56e:	602f      	str	r7, [r5, #0]
 800a570:	2900      	cmp	r1, #0
 800a572:	d0ca      	beq.n	800a50a <__sflush_r+0x1a>
 800a574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a578:	4299      	cmp	r1, r3
 800a57a:	d002      	beq.n	800a582 <__sflush_r+0x92>
 800a57c:	4628      	mov	r0, r5
 800a57e:	f000 fc95 	bl	800aeac <_free_r>
 800a582:	2000      	movs	r0, #0
 800a584:	6360      	str	r0, [r4, #52]	; 0x34
 800a586:	e7c1      	b.n	800a50c <__sflush_r+0x1c>
 800a588:	6a21      	ldr	r1, [r4, #32]
 800a58a:	2301      	movs	r3, #1
 800a58c:	4628      	mov	r0, r5
 800a58e:	47b0      	blx	r6
 800a590:	1c41      	adds	r1, r0, #1
 800a592:	d1c7      	bne.n	800a524 <__sflush_r+0x34>
 800a594:	682b      	ldr	r3, [r5, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d0c4      	beq.n	800a524 <__sflush_r+0x34>
 800a59a:	2b1d      	cmp	r3, #29
 800a59c:	d001      	beq.n	800a5a2 <__sflush_r+0xb2>
 800a59e:	2b16      	cmp	r3, #22
 800a5a0:	d101      	bne.n	800a5a6 <__sflush_r+0xb6>
 800a5a2:	602f      	str	r7, [r5, #0]
 800a5a4:	e7b1      	b.n	800a50a <__sflush_r+0x1a>
 800a5a6:	89a3      	ldrh	r3, [r4, #12]
 800a5a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ac:	81a3      	strh	r3, [r4, #12]
 800a5ae:	e7ad      	b.n	800a50c <__sflush_r+0x1c>
 800a5b0:	690f      	ldr	r7, [r1, #16]
 800a5b2:	2f00      	cmp	r7, #0
 800a5b4:	d0a9      	beq.n	800a50a <__sflush_r+0x1a>
 800a5b6:	0793      	lsls	r3, r2, #30
 800a5b8:	680e      	ldr	r6, [r1, #0]
 800a5ba:	bf08      	it	eq
 800a5bc:	694b      	ldreq	r3, [r1, #20]
 800a5be:	600f      	str	r7, [r1, #0]
 800a5c0:	bf18      	it	ne
 800a5c2:	2300      	movne	r3, #0
 800a5c4:	eba6 0807 	sub.w	r8, r6, r7
 800a5c8:	608b      	str	r3, [r1, #8]
 800a5ca:	f1b8 0f00 	cmp.w	r8, #0
 800a5ce:	dd9c      	ble.n	800a50a <__sflush_r+0x1a>
 800a5d0:	6a21      	ldr	r1, [r4, #32]
 800a5d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5d4:	4643      	mov	r3, r8
 800a5d6:	463a      	mov	r2, r7
 800a5d8:	4628      	mov	r0, r5
 800a5da:	47b0      	blx	r6
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	dc06      	bgt.n	800a5ee <__sflush_r+0xfe>
 800a5e0:	89a3      	ldrh	r3, [r4, #12]
 800a5e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5e6:	81a3      	strh	r3, [r4, #12]
 800a5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ec:	e78e      	b.n	800a50c <__sflush_r+0x1c>
 800a5ee:	4407      	add	r7, r0
 800a5f0:	eba8 0800 	sub.w	r8, r8, r0
 800a5f4:	e7e9      	b.n	800a5ca <__sflush_r+0xda>
 800a5f6:	bf00      	nop
 800a5f8:	20400001 	.word	0x20400001

0800a5fc <_fflush_r>:
 800a5fc:	b538      	push	{r3, r4, r5, lr}
 800a5fe:	690b      	ldr	r3, [r1, #16]
 800a600:	4605      	mov	r5, r0
 800a602:	460c      	mov	r4, r1
 800a604:	b913      	cbnz	r3, 800a60c <_fflush_r+0x10>
 800a606:	2500      	movs	r5, #0
 800a608:	4628      	mov	r0, r5
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
 800a60c:	b118      	cbz	r0, 800a616 <_fflush_r+0x1a>
 800a60e:	6983      	ldr	r3, [r0, #24]
 800a610:	b90b      	cbnz	r3, 800a616 <_fflush_r+0x1a>
 800a612:	f7fe f8d1 	bl	80087b8 <__sinit>
 800a616:	4b14      	ldr	r3, [pc, #80]	; (800a668 <_fflush_r+0x6c>)
 800a618:	429c      	cmp	r4, r3
 800a61a:	d11b      	bne.n	800a654 <_fflush_r+0x58>
 800a61c:	686c      	ldr	r4, [r5, #4]
 800a61e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d0ef      	beq.n	800a606 <_fflush_r+0xa>
 800a626:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a628:	07d0      	lsls	r0, r2, #31
 800a62a:	d404      	bmi.n	800a636 <_fflush_r+0x3a>
 800a62c:	0599      	lsls	r1, r3, #22
 800a62e:	d402      	bmi.n	800a636 <_fflush_r+0x3a>
 800a630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a632:	f7fe f984 	bl	800893e <__retarget_lock_acquire_recursive>
 800a636:	4628      	mov	r0, r5
 800a638:	4621      	mov	r1, r4
 800a63a:	f7ff ff59 	bl	800a4f0 <__sflush_r>
 800a63e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a640:	07da      	lsls	r2, r3, #31
 800a642:	4605      	mov	r5, r0
 800a644:	d4e0      	bmi.n	800a608 <_fflush_r+0xc>
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	059b      	lsls	r3, r3, #22
 800a64a:	d4dd      	bmi.n	800a608 <_fflush_r+0xc>
 800a64c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a64e:	f7fe f977 	bl	8008940 <__retarget_lock_release_recursive>
 800a652:	e7d9      	b.n	800a608 <_fflush_r+0xc>
 800a654:	4b05      	ldr	r3, [pc, #20]	; (800a66c <_fflush_r+0x70>)
 800a656:	429c      	cmp	r4, r3
 800a658:	d101      	bne.n	800a65e <_fflush_r+0x62>
 800a65a:	68ac      	ldr	r4, [r5, #8]
 800a65c:	e7df      	b.n	800a61e <_fflush_r+0x22>
 800a65e:	4b04      	ldr	r3, [pc, #16]	; (800a670 <_fflush_r+0x74>)
 800a660:	429c      	cmp	r4, r3
 800a662:	bf08      	it	eq
 800a664:	68ec      	ldreq	r4, [r5, #12]
 800a666:	e7da      	b.n	800a61e <_fflush_r+0x22>
 800a668:	0800b904 	.word	0x0800b904
 800a66c:	0800b924 	.word	0x0800b924
 800a670:	0800b8e4 	.word	0x0800b8e4

0800a674 <_localeconv_r>:
 800a674:	4800      	ldr	r0, [pc, #0]	; (800a678 <_localeconv_r+0x4>)
 800a676:	4770      	bx	lr
 800a678:	2000016c 	.word	0x2000016c

0800a67c <_lseek_r>:
 800a67c:	b538      	push	{r3, r4, r5, lr}
 800a67e:	4d07      	ldr	r5, [pc, #28]	; (800a69c <_lseek_r+0x20>)
 800a680:	4604      	mov	r4, r0
 800a682:	4608      	mov	r0, r1
 800a684:	4611      	mov	r1, r2
 800a686:	2200      	movs	r2, #0
 800a688:	602a      	str	r2, [r5, #0]
 800a68a:	461a      	mov	r2, r3
 800a68c:	f7f7 fdee 	bl	800226c <_lseek>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d102      	bne.n	800a69a <_lseek_r+0x1e>
 800a694:	682b      	ldr	r3, [r5, #0]
 800a696:	b103      	cbz	r3, 800a69a <_lseek_r+0x1e>
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	20005120 	.word	0x20005120

0800a6a0 <__swhatbuf_r>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	460e      	mov	r6, r1
 800a6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a8:	2900      	cmp	r1, #0
 800a6aa:	b096      	sub	sp, #88	; 0x58
 800a6ac:	4614      	mov	r4, r2
 800a6ae:	461d      	mov	r5, r3
 800a6b0:	da07      	bge.n	800a6c2 <__swhatbuf_r+0x22>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	602b      	str	r3, [r5, #0]
 800a6b6:	89b3      	ldrh	r3, [r6, #12]
 800a6b8:	061a      	lsls	r2, r3, #24
 800a6ba:	d410      	bmi.n	800a6de <__swhatbuf_r+0x3e>
 800a6bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6c0:	e00e      	b.n	800a6e0 <__swhatbuf_r+0x40>
 800a6c2:	466a      	mov	r2, sp
 800a6c4:	f000 ff3a 	bl	800b53c <_fstat_r>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	dbf2      	blt.n	800a6b2 <__swhatbuf_r+0x12>
 800a6cc:	9a01      	ldr	r2, [sp, #4]
 800a6ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6d6:	425a      	negs	r2, r3
 800a6d8:	415a      	adcs	r2, r3
 800a6da:	602a      	str	r2, [r5, #0]
 800a6dc:	e7ee      	b.n	800a6bc <__swhatbuf_r+0x1c>
 800a6de:	2340      	movs	r3, #64	; 0x40
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	6023      	str	r3, [r4, #0]
 800a6e4:	b016      	add	sp, #88	; 0x58
 800a6e6:	bd70      	pop	{r4, r5, r6, pc}

0800a6e8 <__smakebuf_r>:
 800a6e8:	898b      	ldrh	r3, [r1, #12]
 800a6ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6ec:	079d      	lsls	r5, r3, #30
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	d507      	bpl.n	800a704 <__smakebuf_r+0x1c>
 800a6f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	6123      	str	r3, [r4, #16]
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	6163      	str	r3, [r4, #20]
 800a700:	b002      	add	sp, #8
 800a702:	bd70      	pop	{r4, r5, r6, pc}
 800a704:	ab01      	add	r3, sp, #4
 800a706:	466a      	mov	r2, sp
 800a708:	f7ff ffca 	bl	800a6a0 <__swhatbuf_r>
 800a70c:	9900      	ldr	r1, [sp, #0]
 800a70e:	4605      	mov	r5, r0
 800a710:	4630      	mov	r0, r6
 800a712:	f7fe f92d 	bl	8008970 <_malloc_r>
 800a716:	b948      	cbnz	r0, 800a72c <__smakebuf_r+0x44>
 800a718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a71c:	059a      	lsls	r2, r3, #22
 800a71e:	d4ef      	bmi.n	800a700 <__smakebuf_r+0x18>
 800a720:	f023 0303 	bic.w	r3, r3, #3
 800a724:	f043 0302 	orr.w	r3, r3, #2
 800a728:	81a3      	strh	r3, [r4, #12]
 800a72a:	e7e3      	b.n	800a6f4 <__smakebuf_r+0xc>
 800a72c:	4b0d      	ldr	r3, [pc, #52]	; (800a764 <__smakebuf_r+0x7c>)
 800a72e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a730:	89a3      	ldrh	r3, [r4, #12]
 800a732:	6020      	str	r0, [r4, #0]
 800a734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a738:	81a3      	strh	r3, [r4, #12]
 800a73a:	9b00      	ldr	r3, [sp, #0]
 800a73c:	6163      	str	r3, [r4, #20]
 800a73e:	9b01      	ldr	r3, [sp, #4]
 800a740:	6120      	str	r0, [r4, #16]
 800a742:	b15b      	cbz	r3, 800a75c <__smakebuf_r+0x74>
 800a744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a748:	4630      	mov	r0, r6
 800a74a:	f000 ff09 	bl	800b560 <_isatty_r>
 800a74e:	b128      	cbz	r0, 800a75c <__smakebuf_r+0x74>
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	f023 0303 	bic.w	r3, r3, #3
 800a756:	f043 0301 	orr.w	r3, r3, #1
 800a75a:	81a3      	strh	r3, [r4, #12]
 800a75c:	89a0      	ldrh	r0, [r4, #12]
 800a75e:	4305      	orrs	r5, r0
 800a760:	81a5      	strh	r5, [r4, #12]
 800a762:	e7cd      	b.n	800a700 <__smakebuf_r+0x18>
 800a764:	08008751 	.word	0x08008751

0800a768 <malloc>:
 800a768:	4b02      	ldr	r3, [pc, #8]	; (800a774 <malloc+0xc>)
 800a76a:	4601      	mov	r1, r0
 800a76c:	6818      	ldr	r0, [r3, #0]
 800a76e:	f7fe b8ff 	b.w	8008970 <_malloc_r>
 800a772:	bf00      	nop
 800a774:	20000018 	.word	0x20000018

0800a778 <__malloc_lock>:
 800a778:	4801      	ldr	r0, [pc, #4]	; (800a780 <__malloc_lock+0x8>)
 800a77a:	f7fe b8e0 	b.w	800893e <__retarget_lock_acquire_recursive>
 800a77e:	bf00      	nop
 800a780:	20005118 	.word	0x20005118

0800a784 <__malloc_unlock>:
 800a784:	4801      	ldr	r0, [pc, #4]	; (800a78c <__malloc_unlock+0x8>)
 800a786:	f7fe b8db 	b.w	8008940 <__retarget_lock_release_recursive>
 800a78a:	bf00      	nop
 800a78c:	20005118 	.word	0x20005118

0800a790 <_Balloc>:
 800a790:	b570      	push	{r4, r5, r6, lr}
 800a792:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a794:	4604      	mov	r4, r0
 800a796:	460d      	mov	r5, r1
 800a798:	b976      	cbnz	r6, 800a7b8 <_Balloc+0x28>
 800a79a:	2010      	movs	r0, #16
 800a79c:	f7ff ffe4 	bl	800a768 <malloc>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	6260      	str	r0, [r4, #36]	; 0x24
 800a7a4:	b920      	cbnz	r0, 800a7b0 <_Balloc+0x20>
 800a7a6:	4b18      	ldr	r3, [pc, #96]	; (800a808 <_Balloc+0x78>)
 800a7a8:	4818      	ldr	r0, [pc, #96]	; (800a80c <_Balloc+0x7c>)
 800a7aa:	2166      	movs	r1, #102	; 0x66
 800a7ac:	f000 fe96 	bl	800b4dc <__assert_func>
 800a7b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7b4:	6006      	str	r6, [r0, #0]
 800a7b6:	60c6      	str	r6, [r0, #12]
 800a7b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a7ba:	68f3      	ldr	r3, [r6, #12]
 800a7bc:	b183      	cbz	r3, 800a7e0 <_Balloc+0x50>
 800a7be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7c6:	b9b8      	cbnz	r0, 800a7f8 <_Balloc+0x68>
 800a7c8:	2101      	movs	r1, #1
 800a7ca:	fa01 f605 	lsl.w	r6, r1, r5
 800a7ce:	1d72      	adds	r2, r6, #5
 800a7d0:	0092      	lsls	r2, r2, #2
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f000 fb5a 	bl	800ae8c <_calloc_r>
 800a7d8:	b160      	cbz	r0, 800a7f4 <_Balloc+0x64>
 800a7da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7de:	e00e      	b.n	800a7fe <_Balloc+0x6e>
 800a7e0:	2221      	movs	r2, #33	; 0x21
 800a7e2:	2104      	movs	r1, #4
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f000 fb51 	bl	800ae8c <_calloc_r>
 800a7ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7ec:	60f0      	str	r0, [r6, #12]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1e4      	bne.n	800a7be <_Balloc+0x2e>
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	bd70      	pop	{r4, r5, r6, pc}
 800a7f8:	6802      	ldr	r2, [r0, #0]
 800a7fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7fe:	2300      	movs	r3, #0
 800a800:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a804:	e7f7      	b.n	800a7f6 <_Balloc+0x66>
 800a806:	bf00      	nop
 800a808:	0800ba8a 	.word	0x0800ba8a
 800a80c:	0800bb11 	.word	0x0800bb11

0800a810 <_Bfree>:
 800a810:	b570      	push	{r4, r5, r6, lr}
 800a812:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a814:	4605      	mov	r5, r0
 800a816:	460c      	mov	r4, r1
 800a818:	b976      	cbnz	r6, 800a838 <_Bfree+0x28>
 800a81a:	2010      	movs	r0, #16
 800a81c:	f7ff ffa4 	bl	800a768 <malloc>
 800a820:	4602      	mov	r2, r0
 800a822:	6268      	str	r0, [r5, #36]	; 0x24
 800a824:	b920      	cbnz	r0, 800a830 <_Bfree+0x20>
 800a826:	4b09      	ldr	r3, [pc, #36]	; (800a84c <_Bfree+0x3c>)
 800a828:	4809      	ldr	r0, [pc, #36]	; (800a850 <_Bfree+0x40>)
 800a82a:	218a      	movs	r1, #138	; 0x8a
 800a82c:	f000 fe56 	bl	800b4dc <__assert_func>
 800a830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a834:	6006      	str	r6, [r0, #0]
 800a836:	60c6      	str	r6, [r0, #12]
 800a838:	b13c      	cbz	r4, 800a84a <_Bfree+0x3a>
 800a83a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a83c:	6862      	ldr	r2, [r4, #4]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a844:	6021      	str	r1, [r4, #0]
 800a846:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a84a:	bd70      	pop	{r4, r5, r6, pc}
 800a84c:	0800ba8a 	.word	0x0800ba8a
 800a850:	0800bb11 	.word	0x0800bb11

0800a854 <__multadd>:
 800a854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a858:	690e      	ldr	r6, [r1, #16]
 800a85a:	4607      	mov	r7, r0
 800a85c:	4698      	mov	r8, r3
 800a85e:	460c      	mov	r4, r1
 800a860:	f101 0014 	add.w	r0, r1, #20
 800a864:	2300      	movs	r3, #0
 800a866:	6805      	ldr	r5, [r0, #0]
 800a868:	b2a9      	uxth	r1, r5
 800a86a:	fb02 8101 	mla	r1, r2, r1, r8
 800a86e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a872:	0c2d      	lsrs	r5, r5, #16
 800a874:	fb02 c505 	mla	r5, r2, r5, ip
 800a878:	b289      	uxth	r1, r1
 800a87a:	3301      	adds	r3, #1
 800a87c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a880:	429e      	cmp	r6, r3
 800a882:	f840 1b04 	str.w	r1, [r0], #4
 800a886:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a88a:	dcec      	bgt.n	800a866 <__multadd+0x12>
 800a88c:	f1b8 0f00 	cmp.w	r8, #0
 800a890:	d022      	beq.n	800a8d8 <__multadd+0x84>
 800a892:	68a3      	ldr	r3, [r4, #8]
 800a894:	42b3      	cmp	r3, r6
 800a896:	dc19      	bgt.n	800a8cc <__multadd+0x78>
 800a898:	6861      	ldr	r1, [r4, #4]
 800a89a:	4638      	mov	r0, r7
 800a89c:	3101      	adds	r1, #1
 800a89e:	f7ff ff77 	bl	800a790 <_Balloc>
 800a8a2:	4605      	mov	r5, r0
 800a8a4:	b928      	cbnz	r0, 800a8b2 <__multadd+0x5e>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	4b0d      	ldr	r3, [pc, #52]	; (800a8e0 <__multadd+0x8c>)
 800a8aa:	480e      	ldr	r0, [pc, #56]	; (800a8e4 <__multadd+0x90>)
 800a8ac:	21b5      	movs	r1, #181	; 0xb5
 800a8ae:	f000 fe15 	bl	800b4dc <__assert_func>
 800a8b2:	6922      	ldr	r2, [r4, #16]
 800a8b4:	3202      	adds	r2, #2
 800a8b6:	f104 010c 	add.w	r1, r4, #12
 800a8ba:	0092      	lsls	r2, r2, #2
 800a8bc:	300c      	adds	r0, #12
 800a8be:	f7fe f840 	bl	8008942 <memcpy>
 800a8c2:	4621      	mov	r1, r4
 800a8c4:	4638      	mov	r0, r7
 800a8c6:	f7ff ffa3 	bl	800a810 <_Bfree>
 800a8ca:	462c      	mov	r4, r5
 800a8cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a8d0:	3601      	adds	r6, #1
 800a8d2:	f8c3 8014 	str.w	r8, [r3, #20]
 800a8d6:	6126      	str	r6, [r4, #16]
 800a8d8:	4620      	mov	r0, r4
 800a8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8de:	bf00      	nop
 800a8e0:	0800bb00 	.word	0x0800bb00
 800a8e4:	0800bb11 	.word	0x0800bb11

0800a8e8 <__hi0bits>:
 800a8e8:	0c03      	lsrs	r3, r0, #16
 800a8ea:	041b      	lsls	r3, r3, #16
 800a8ec:	b9d3      	cbnz	r3, 800a924 <__hi0bits+0x3c>
 800a8ee:	0400      	lsls	r0, r0, #16
 800a8f0:	2310      	movs	r3, #16
 800a8f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a8f6:	bf04      	itt	eq
 800a8f8:	0200      	lsleq	r0, r0, #8
 800a8fa:	3308      	addeq	r3, #8
 800a8fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a900:	bf04      	itt	eq
 800a902:	0100      	lsleq	r0, r0, #4
 800a904:	3304      	addeq	r3, #4
 800a906:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a90a:	bf04      	itt	eq
 800a90c:	0080      	lsleq	r0, r0, #2
 800a90e:	3302      	addeq	r3, #2
 800a910:	2800      	cmp	r0, #0
 800a912:	db05      	blt.n	800a920 <__hi0bits+0x38>
 800a914:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a918:	f103 0301 	add.w	r3, r3, #1
 800a91c:	bf08      	it	eq
 800a91e:	2320      	moveq	r3, #32
 800a920:	4618      	mov	r0, r3
 800a922:	4770      	bx	lr
 800a924:	2300      	movs	r3, #0
 800a926:	e7e4      	b.n	800a8f2 <__hi0bits+0xa>

0800a928 <__lo0bits>:
 800a928:	6803      	ldr	r3, [r0, #0]
 800a92a:	f013 0207 	ands.w	r2, r3, #7
 800a92e:	4601      	mov	r1, r0
 800a930:	d00b      	beq.n	800a94a <__lo0bits+0x22>
 800a932:	07da      	lsls	r2, r3, #31
 800a934:	d424      	bmi.n	800a980 <__lo0bits+0x58>
 800a936:	0798      	lsls	r0, r3, #30
 800a938:	bf49      	itett	mi
 800a93a:	085b      	lsrmi	r3, r3, #1
 800a93c:	089b      	lsrpl	r3, r3, #2
 800a93e:	2001      	movmi	r0, #1
 800a940:	600b      	strmi	r3, [r1, #0]
 800a942:	bf5c      	itt	pl
 800a944:	600b      	strpl	r3, [r1, #0]
 800a946:	2002      	movpl	r0, #2
 800a948:	4770      	bx	lr
 800a94a:	b298      	uxth	r0, r3
 800a94c:	b9b0      	cbnz	r0, 800a97c <__lo0bits+0x54>
 800a94e:	0c1b      	lsrs	r3, r3, #16
 800a950:	2010      	movs	r0, #16
 800a952:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a956:	bf04      	itt	eq
 800a958:	0a1b      	lsreq	r3, r3, #8
 800a95a:	3008      	addeq	r0, #8
 800a95c:	071a      	lsls	r2, r3, #28
 800a95e:	bf04      	itt	eq
 800a960:	091b      	lsreq	r3, r3, #4
 800a962:	3004      	addeq	r0, #4
 800a964:	079a      	lsls	r2, r3, #30
 800a966:	bf04      	itt	eq
 800a968:	089b      	lsreq	r3, r3, #2
 800a96a:	3002      	addeq	r0, #2
 800a96c:	07da      	lsls	r2, r3, #31
 800a96e:	d403      	bmi.n	800a978 <__lo0bits+0x50>
 800a970:	085b      	lsrs	r3, r3, #1
 800a972:	f100 0001 	add.w	r0, r0, #1
 800a976:	d005      	beq.n	800a984 <__lo0bits+0x5c>
 800a978:	600b      	str	r3, [r1, #0]
 800a97a:	4770      	bx	lr
 800a97c:	4610      	mov	r0, r2
 800a97e:	e7e8      	b.n	800a952 <__lo0bits+0x2a>
 800a980:	2000      	movs	r0, #0
 800a982:	4770      	bx	lr
 800a984:	2020      	movs	r0, #32
 800a986:	4770      	bx	lr

0800a988 <__i2b>:
 800a988:	b510      	push	{r4, lr}
 800a98a:	460c      	mov	r4, r1
 800a98c:	2101      	movs	r1, #1
 800a98e:	f7ff feff 	bl	800a790 <_Balloc>
 800a992:	4602      	mov	r2, r0
 800a994:	b928      	cbnz	r0, 800a9a2 <__i2b+0x1a>
 800a996:	4b05      	ldr	r3, [pc, #20]	; (800a9ac <__i2b+0x24>)
 800a998:	4805      	ldr	r0, [pc, #20]	; (800a9b0 <__i2b+0x28>)
 800a99a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a99e:	f000 fd9d 	bl	800b4dc <__assert_func>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	6144      	str	r4, [r0, #20]
 800a9a6:	6103      	str	r3, [r0, #16]
 800a9a8:	bd10      	pop	{r4, pc}
 800a9aa:	bf00      	nop
 800a9ac:	0800bb00 	.word	0x0800bb00
 800a9b0:	0800bb11 	.word	0x0800bb11

0800a9b4 <__multiply>:
 800a9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b8:	4614      	mov	r4, r2
 800a9ba:	690a      	ldr	r2, [r1, #16]
 800a9bc:	6923      	ldr	r3, [r4, #16]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	bfb8      	it	lt
 800a9c2:	460b      	movlt	r3, r1
 800a9c4:	460d      	mov	r5, r1
 800a9c6:	bfbc      	itt	lt
 800a9c8:	4625      	movlt	r5, r4
 800a9ca:	461c      	movlt	r4, r3
 800a9cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a9d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a9d4:	68ab      	ldr	r3, [r5, #8]
 800a9d6:	6869      	ldr	r1, [r5, #4]
 800a9d8:	eb0a 0709 	add.w	r7, sl, r9
 800a9dc:	42bb      	cmp	r3, r7
 800a9de:	b085      	sub	sp, #20
 800a9e0:	bfb8      	it	lt
 800a9e2:	3101      	addlt	r1, #1
 800a9e4:	f7ff fed4 	bl	800a790 <_Balloc>
 800a9e8:	b930      	cbnz	r0, 800a9f8 <__multiply+0x44>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	4b42      	ldr	r3, [pc, #264]	; (800aaf8 <__multiply+0x144>)
 800a9ee:	4843      	ldr	r0, [pc, #268]	; (800aafc <__multiply+0x148>)
 800a9f0:	f240 115d 	movw	r1, #349	; 0x15d
 800a9f4:	f000 fd72 	bl	800b4dc <__assert_func>
 800a9f8:	f100 0614 	add.w	r6, r0, #20
 800a9fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800aa00:	4633      	mov	r3, r6
 800aa02:	2200      	movs	r2, #0
 800aa04:	4543      	cmp	r3, r8
 800aa06:	d31e      	bcc.n	800aa46 <__multiply+0x92>
 800aa08:	f105 0c14 	add.w	ip, r5, #20
 800aa0c:	f104 0314 	add.w	r3, r4, #20
 800aa10:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800aa14:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800aa18:	9202      	str	r2, [sp, #8]
 800aa1a:	ebac 0205 	sub.w	r2, ip, r5
 800aa1e:	3a15      	subs	r2, #21
 800aa20:	f022 0203 	bic.w	r2, r2, #3
 800aa24:	3204      	adds	r2, #4
 800aa26:	f105 0115 	add.w	r1, r5, #21
 800aa2a:	458c      	cmp	ip, r1
 800aa2c:	bf38      	it	cc
 800aa2e:	2204      	movcc	r2, #4
 800aa30:	9201      	str	r2, [sp, #4]
 800aa32:	9a02      	ldr	r2, [sp, #8]
 800aa34:	9303      	str	r3, [sp, #12]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d808      	bhi.n	800aa4c <__multiply+0x98>
 800aa3a:	2f00      	cmp	r7, #0
 800aa3c:	dc55      	bgt.n	800aaea <__multiply+0x136>
 800aa3e:	6107      	str	r7, [r0, #16]
 800aa40:	b005      	add	sp, #20
 800aa42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa46:	f843 2b04 	str.w	r2, [r3], #4
 800aa4a:	e7db      	b.n	800aa04 <__multiply+0x50>
 800aa4c:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa50:	f1ba 0f00 	cmp.w	sl, #0
 800aa54:	d020      	beq.n	800aa98 <__multiply+0xe4>
 800aa56:	f105 0e14 	add.w	lr, r5, #20
 800aa5a:	46b1      	mov	r9, r6
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800aa62:	f8d9 b000 	ldr.w	fp, [r9]
 800aa66:	b2a1      	uxth	r1, r4
 800aa68:	fa1f fb8b 	uxth.w	fp, fp
 800aa6c:	fb0a b101 	mla	r1, sl, r1, fp
 800aa70:	4411      	add	r1, r2
 800aa72:	f8d9 2000 	ldr.w	r2, [r9]
 800aa76:	0c24      	lsrs	r4, r4, #16
 800aa78:	0c12      	lsrs	r2, r2, #16
 800aa7a:	fb0a 2404 	mla	r4, sl, r4, r2
 800aa7e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aa82:	b289      	uxth	r1, r1
 800aa84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aa88:	45f4      	cmp	ip, lr
 800aa8a:	f849 1b04 	str.w	r1, [r9], #4
 800aa8e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aa92:	d8e4      	bhi.n	800aa5e <__multiply+0xaa>
 800aa94:	9901      	ldr	r1, [sp, #4]
 800aa96:	5072      	str	r2, [r6, r1]
 800aa98:	9a03      	ldr	r2, [sp, #12]
 800aa9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	f1b9 0f00 	cmp.w	r9, #0
 800aaa4:	d01f      	beq.n	800aae6 <__multiply+0x132>
 800aaa6:	6834      	ldr	r4, [r6, #0]
 800aaa8:	f105 0114 	add.w	r1, r5, #20
 800aaac:	46b6      	mov	lr, r6
 800aaae:	f04f 0a00 	mov.w	sl, #0
 800aab2:	880a      	ldrh	r2, [r1, #0]
 800aab4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aab8:	fb09 b202 	mla	r2, r9, r2, fp
 800aabc:	4492      	add	sl, r2
 800aabe:	b2a4      	uxth	r4, r4
 800aac0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aac4:	f84e 4b04 	str.w	r4, [lr], #4
 800aac8:	f851 4b04 	ldr.w	r4, [r1], #4
 800aacc:	f8be 2000 	ldrh.w	r2, [lr]
 800aad0:	0c24      	lsrs	r4, r4, #16
 800aad2:	fb09 2404 	mla	r4, r9, r4, r2
 800aad6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aada:	458c      	cmp	ip, r1
 800aadc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aae0:	d8e7      	bhi.n	800aab2 <__multiply+0xfe>
 800aae2:	9a01      	ldr	r2, [sp, #4]
 800aae4:	50b4      	str	r4, [r6, r2]
 800aae6:	3604      	adds	r6, #4
 800aae8:	e7a3      	b.n	800aa32 <__multiply+0x7e>
 800aaea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1a5      	bne.n	800aa3e <__multiply+0x8a>
 800aaf2:	3f01      	subs	r7, #1
 800aaf4:	e7a1      	b.n	800aa3a <__multiply+0x86>
 800aaf6:	bf00      	nop
 800aaf8:	0800bb00 	.word	0x0800bb00
 800aafc:	0800bb11 	.word	0x0800bb11

0800ab00 <__pow5mult>:
 800ab00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab04:	4615      	mov	r5, r2
 800ab06:	f012 0203 	ands.w	r2, r2, #3
 800ab0a:	4606      	mov	r6, r0
 800ab0c:	460f      	mov	r7, r1
 800ab0e:	d007      	beq.n	800ab20 <__pow5mult+0x20>
 800ab10:	4c25      	ldr	r4, [pc, #148]	; (800aba8 <__pow5mult+0xa8>)
 800ab12:	3a01      	subs	r2, #1
 800ab14:	2300      	movs	r3, #0
 800ab16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab1a:	f7ff fe9b 	bl	800a854 <__multadd>
 800ab1e:	4607      	mov	r7, r0
 800ab20:	10ad      	asrs	r5, r5, #2
 800ab22:	d03d      	beq.n	800aba0 <__pow5mult+0xa0>
 800ab24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab26:	b97c      	cbnz	r4, 800ab48 <__pow5mult+0x48>
 800ab28:	2010      	movs	r0, #16
 800ab2a:	f7ff fe1d 	bl	800a768 <malloc>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	6270      	str	r0, [r6, #36]	; 0x24
 800ab32:	b928      	cbnz	r0, 800ab40 <__pow5mult+0x40>
 800ab34:	4b1d      	ldr	r3, [pc, #116]	; (800abac <__pow5mult+0xac>)
 800ab36:	481e      	ldr	r0, [pc, #120]	; (800abb0 <__pow5mult+0xb0>)
 800ab38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ab3c:	f000 fcce 	bl	800b4dc <__assert_func>
 800ab40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab44:	6004      	str	r4, [r0, #0]
 800ab46:	60c4      	str	r4, [r0, #12]
 800ab48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab50:	b94c      	cbnz	r4, 800ab66 <__pow5mult+0x66>
 800ab52:	f240 2171 	movw	r1, #625	; 0x271
 800ab56:	4630      	mov	r0, r6
 800ab58:	f7ff ff16 	bl	800a988 <__i2b>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab62:	4604      	mov	r4, r0
 800ab64:	6003      	str	r3, [r0, #0]
 800ab66:	f04f 0900 	mov.w	r9, #0
 800ab6a:	07eb      	lsls	r3, r5, #31
 800ab6c:	d50a      	bpl.n	800ab84 <__pow5mult+0x84>
 800ab6e:	4639      	mov	r1, r7
 800ab70:	4622      	mov	r2, r4
 800ab72:	4630      	mov	r0, r6
 800ab74:	f7ff ff1e 	bl	800a9b4 <__multiply>
 800ab78:	4639      	mov	r1, r7
 800ab7a:	4680      	mov	r8, r0
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	f7ff fe47 	bl	800a810 <_Bfree>
 800ab82:	4647      	mov	r7, r8
 800ab84:	106d      	asrs	r5, r5, #1
 800ab86:	d00b      	beq.n	800aba0 <__pow5mult+0xa0>
 800ab88:	6820      	ldr	r0, [r4, #0]
 800ab8a:	b938      	cbnz	r0, 800ab9c <__pow5mult+0x9c>
 800ab8c:	4622      	mov	r2, r4
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4630      	mov	r0, r6
 800ab92:	f7ff ff0f 	bl	800a9b4 <__multiply>
 800ab96:	6020      	str	r0, [r4, #0]
 800ab98:	f8c0 9000 	str.w	r9, [r0]
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	e7e4      	b.n	800ab6a <__pow5mult+0x6a>
 800aba0:	4638      	mov	r0, r7
 800aba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aba6:	bf00      	nop
 800aba8:	0800bc68 	.word	0x0800bc68
 800abac:	0800ba8a 	.word	0x0800ba8a
 800abb0:	0800bb11 	.word	0x0800bb11

0800abb4 <__lshift>:
 800abb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb8:	460c      	mov	r4, r1
 800abba:	6849      	ldr	r1, [r1, #4]
 800abbc:	6923      	ldr	r3, [r4, #16]
 800abbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abc2:	68a3      	ldr	r3, [r4, #8]
 800abc4:	4607      	mov	r7, r0
 800abc6:	4691      	mov	r9, r2
 800abc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abcc:	f108 0601 	add.w	r6, r8, #1
 800abd0:	42b3      	cmp	r3, r6
 800abd2:	db0b      	blt.n	800abec <__lshift+0x38>
 800abd4:	4638      	mov	r0, r7
 800abd6:	f7ff fddb 	bl	800a790 <_Balloc>
 800abda:	4605      	mov	r5, r0
 800abdc:	b948      	cbnz	r0, 800abf2 <__lshift+0x3e>
 800abde:	4602      	mov	r2, r0
 800abe0:	4b28      	ldr	r3, [pc, #160]	; (800ac84 <__lshift+0xd0>)
 800abe2:	4829      	ldr	r0, [pc, #164]	; (800ac88 <__lshift+0xd4>)
 800abe4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800abe8:	f000 fc78 	bl	800b4dc <__assert_func>
 800abec:	3101      	adds	r1, #1
 800abee:	005b      	lsls	r3, r3, #1
 800abf0:	e7ee      	b.n	800abd0 <__lshift+0x1c>
 800abf2:	2300      	movs	r3, #0
 800abf4:	f100 0114 	add.w	r1, r0, #20
 800abf8:	f100 0210 	add.w	r2, r0, #16
 800abfc:	4618      	mov	r0, r3
 800abfe:	4553      	cmp	r3, sl
 800ac00:	db33      	blt.n	800ac6a <__lshift+0xb6>
 800ac02:	6920      	ldr	r0, [r4, #16]
 800ac04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac08:	f104 0314 	add.w	r3, r4, #20
 800ac0c:	f019 091f 	ands.w	r9, r9, #31
 800ac10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac18:	d02b      	beq.n	800ac72 <__lshift+0xbe>
 800ac1a:	f1c9 0e20 	rsb	lr, r9, #32
 800ac1e:	468a      	mov	sl, r1
 800ac20:	2200      	movs	r2, #0
 800ac22:	6818      	ldr	r0, [r3, #0]
 800ac24:	fa00 f009 	lsl.w	r0, r0, r9
 800ac28:	4302      	orrs	r2, r0
 800ac2a:	f84a 2b04 	str.w	r2, [sl], #4
 800ac2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac32:	459c      	cmp	ip, r3
 800ac34:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac38:	d8f3      	bhi.n	800ac22 <__lshift+0x6e>
 800ac3a:	ebac 0304 	sub.w	r3, ip, r4
 800ac3e:	3b15      	subs	r3, #21
 800ac40:	f023 0303 	bic.w	r3, r3, #3
 800ac44:	3304      	adds	r3, #4
 800ac46:	f104 0015 	add.w	r0, r4, #21
 800ac4a:	4584      	cmp	ip, r0
 800ac4c:	bf38      	it	cc
 800ac4e:	2304      	movcc	r3, #4
 800ac50:	50ca      	str	r2, [r1, r3]
 800ac52:	b10a      	cbz	r2, 800ac58 <__lshift+0xa4>
 800ac54:	f108 0602 	add.w	r6, r8, #2
 800ac58:	3e01      	subs	r6, #1
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	612e      	str	r6, [r5, #16]
 800ac5e:	4621      	mov	r1, r4
 800ac60:	f7ff fdd6 	bl	800a810 <_Bfree>
 800ac64:	4628      	mov	r0, r5
 800ac66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac6e:	3301      	adds	r3, #1
 800ac70:	e7c5      	b.n	800abfe <__lshift+0x4a>
 800ac72:	3904      	subs	r1, #4
 800ac74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac78:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac7c:	459c      	cmp	ip, r3
 800ac7e:	d8f9      	bhi.n	800ac74 <__lshift+0xc0>
 800ac80:	e7ea      	b.n	800ac58 <__lshift+0xa4>
 800ac82:	bf00      	nop
 800ac84:	0800bb00 	.word	0x0800bb00
 800ac88:	0800bb11 	.word	0x0800bb11

0800ac8c <__mcmp>:
 800ac8c:	b530      	push	{r4, r5, lr}
 800ac8e:	6902      	ldr	r2, [r0, #16]
 800ac90:	690c      	ldr	r4, [r1, #16]
 800ac92:	1b12      	subs	r2, r2, r4
 800ac94:	d10e      	bne.n	800acb4 <__mcmp+0x28>
 800ac96:	f100 0314 	add.w	r3, r0, #20
 800ac9a:	3114      	adds	r1, #20
 800ac9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aca0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aca4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aca8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800acac:	42a5      	cmp	r5, r4
 800acae:	d003      	beq.n	800acb8 <__mcmp+0x2c>
 800acb0:	d305      	bcc.n	800acbe <__mcmp+0x32>
 800acb2:	2201      	movs	r2, #1
 800acb4:	4610      	mov	r0, r2
 800acb6:	bd30      	pop	{r4, r5, pc}
 800acb8:	4283      	cmp	r3, r0
 800acba:	d3f3      	bcc.n	800aca4 <__mcmp+0x18>
 800acbc:	e7fa      	b.n	800acb4 <__mcmp+0x28>
 800acbe:	f04f 32ff 	mov.w	r2, #4294967295
 800acc2:	e7f7      	b.n	800acb4 <__mcmp+0x28>

0800acc4 <__mdiff>:
 800acc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc8:	460c      	mov	r4, r1
 800acca:	4606      	mov	r6, r0
 800accc:	4611      	mov	r1, r2
 800acce:	4620      	mov	r0, r4
 800acd0:	4617      	mov	r7, r2
 800acd2:	f7ff ffdb 	bl	800ac8c <__mcmp>
 800acd6:	1e05      	subs	r5, r0, #0
 800acd8:	d110      	bne.n	800acfc <__mdiff+0x38>
 800acda:	4629      	mov	r1, r5
 800acdc:	4630      	mov	r0, r6
 800acde:	f7ff fd57 	bl	800a790 <_Balloc>
 800ace2:	b930      	cbnz	r0, 800acf2 <__mdiff+0x2e>
 800ace4:	4b39      	ldr	r3, [pc, #228]	; (800adcc <__mdiff+0x108>)
 800ace6:	4602      	mov	r2, r0
 800ace8:	f240 2132 	movw	r1, #562	; 0x232
 800acec:	4838      	ldr	r0, [pc, #224]	; (800add0 <__mdiff+0x10c>)
 800acee:	f000 fbf5 	bl	800b4dc <__assert_func>
 800acf2:	2301      	movs	r3, #1
 800acf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800acf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acfc:	bfa4      	itt	ge
 800acfe:	463b      	movge	r3, r7
 800ad00:	4627      	movge	r7, r4
 800ad02:	4630      	mov	r0, r6
 800ad04:	6879      	ldr	r1, [r7, #4]
 800ad06:	bfa6      	itte	ge
 800ad08:	461c      	movge	r4, r3
 800ad0a:	2500      	movge	r5, #0
 800ad0c:	2501      	movlt	r5, #1
 800ad0e:	f7ff fd3f 	bl	800a790 <_Balloc>
 800ad12:	b920      	cbnz	r0, 800ad1e <__mdiff+0x5a>
 800ad14:	4b2d      	ldr	r3, [pc, #180]	; (800adcc <__mdiff+0x108>)
 800ad16:	4602      	mov	r2, r0
 800ad18:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad1c:	e7e6      	b.n	800acec <__mdiff+0x28>
 800ad1e:	693e      	ldr	r6, [r7, #16]
 800ad20:	60c5      	str	r5, [r0, #12]
 800ad22:	6925      	ldr	r5, [r4, #16]
 800ad24:	f107 0114 	add.w	r1, r7, #20
 800ad28:	f104 0914 	add.w	r9, r4, #20
 800ad2c:	f100 0e14 	add.w	lr, r0, #20
 800ad30:	f107 0210 	add.w	r2, r7, #16
 800ad34:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ad38:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ad3c:	46f2      	mov	sl, lr
 800ad3e:	2700      	movs	r7, #0
 800ad40:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad48:	fa1f f883 	uxth.w	r8, r3
 800ad4c:	fa17 f78b 	uxtah	r7, r7, fp
 800ad50:	0c1b      	lsrs	r3, r3, #16
 800ad52:	eba7 0808 	sub.w	r8, r7, r8
 800ad56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad5e:	fa1f f888 	uxth.w	r8, r8
 800ad62:	141f      	asrs	r7, r3, #16
 800ad64:	454d      	cmp	r5, r9
 800ad66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad6a:	f84a 3b04 	str.w	r3, [sl], #4
 800ad6e:	d8e7      	bhi.n	800ad40 <__mdiff+0x7c>
 800ad70:	1b2b      	subs	r3, r5, r4
 800ad72:	3b15      	subs	r3, #21
 800ad74:	f023 0303 	bic.w	r3, r3, #3
 800ad78:	3304      	adds	r3, #4
 800ad7a:	3415      	adds	r4, #21
 800ad7c:	42a5      	cmp	r5, r4
 800ad7e:	bf38      	it	cc
 800ad80:	2304      	movcc	r3, #4
 800ad82:	4419      	add	r1, r3
 800ad84:	4473      	add	r3, lr
 800ad86:	469e      	mov	lr, r3
 800ad88:	460d      	mov	r5, r1
 800ad8a:	4565      	cmp	r5, ip
 800ad8c:	d30e      	bcc.n	800adac <__mdiff+0xe8>
 800ad8e:	f10c 0203 	add.w	r2, ip, #3
 800ad92:	1a52      	subs	r2, r2, r1
 800ad94:	f022 0203 	bic.w	r2, r2, #3
 800ad98:	3903      	subs	r1, #3
 800ad9a:	458c      	cmp	ip, r1
 800ad9c:	bf38      	it	cc
 800ad9e:	2200      	movcc	r2, #0
 800ada0:	441a      	add	r2, r3
 800ada2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ada6:	b17b      	cbz	r3, 800adc8 <__mdiff+0x104>
 800ada8:	6106      	str	r6, [r0, #16]
 800adaa:	e7a5      	b.n	800acf8 <__mdiff+0x34>
 800adac:	f855 8b04 	ldr.w	r8, [r5], #4
 800adb0:	fa17 f488 	uxtah	r4, r7, r8
 800adb4:	1422      	asrs	r2, r4, #16
 800adb6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800adba:	b2a4      	uxth	r4, r4
 800adbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800adc0:	f84e 4b04 	str.w	r4, [lr], #4
 800adc4:	1417      	asrs	r7, r2, #16
 800adc6:	e7e0      	b.n	800ad8a <__mdiff+0xc6>
 800adc8:	3e01      	subs	r6, #1
 800adca:	e7ea      	b.n	800ada2 <__mdiff+0xde>
 800adcc:	0800bb00 	.word	0x0800bb00
 800add0:	0800bb11 	.word	0x0800bb11

0800add4 <__d2b>:
 800add4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800add8:	4689      	mov	r9, r1
 800adda:	2101      	movs	r1, #1
 800addc:	ec57 6b10 	vmov	r6, r7, d0
 800ade0:	4690      	mov	r8, r2
 800ade2:	f7ff fcd5 	bl	800a790 <_Balloc>
 800ade6:	4604      	mov	r4, r0
 800ade8:	b930      	cbnz	r0, 800adf8 <__d2b+0x24>
 800adea:	4602      	mov	r2, r0
 800adec:	4b25      	ldr	r3, [pc, #148]	; (800ae84 <__d2b+0xb0>)
 800adee:	4826      	ldr	r0, [pc, #152]	; (800ae88 <__d2b+0xb4>)
 800adf0:	f240 310a 	movw	r1, #778	; 0x30a
 800adf4:	f000 fb72 	bl	800b4dc <__assert_func>
 800adf8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800adfc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae00:	bb35      	cbnz	r5, 800ae50 <__d2b+0x7c>
 800ae02:	2e00      	cmp	r6, #0
 800ae04:	9301      	str	r3, [sp, #4]
 800ae06:	d028      	beq.n	800ae5a <__d2b+0x86>
 800ae08:	4668      	mov	r0, sp
 800ae0a:	9600      	str	r6, [sp, #0]
 800ae0c:	f7ff fd8c 	bl	800a928 <__lo0bits>
 800ae10:	9900      	ldr	r1, [sp, #0]
 800ae12:	b300      	cbz	r0, 800ae56 <__d2b+0x82>
 800ae14:	9a01      	ldr	r2, [sp, #4]
 800ae16:	f1c0 0320 	rsb	r3, r0, #32
 800ae1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae1e:	430b      	orrs	r3, r1
 800ae20:	40c2      	lsrs	r2, r0
 800ae22:	6163      	str	r3, [r4, #20]
 800ae24:	9201      	str	r2, [sp, #4]
 800ae26:	9b01      	ldr	r3, [sp, #4]
 800ae28:	61a3      	str	r3, [r4, #24]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	bf14      	ite	ne
 800ae2e:	2202      	movne	r2, #2
 800ae30:	2201      	moveq	r2, #1
 800ae32:	6122      	str	r2, [r4, #16]
 800ae34:	b1d5      	cbz	r5, 800ae6c <__d2b+0x98>
 800ae36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae3a:	4405      	add	r5, r0
 800ae3c:	f8c9 5000 	str.w	r5, [r9]
 800ae40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae44:	f8c8 0000 	str.w	r0, [r8]
 800ae48:	4620      	mov	r0, r4
 800ae4a:	b003      	add	sp, #12
 800ae4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae54:	e7d5      	b.n	800ae02 <__d2b+0x2e>
 800ae56:	6161      	str	r1, [r4, #20]
 800ae58:	e7e5      	b.n	800ae26 <__d2b+0x52>
 800ae5a:	a801      	add	r0, sp, #4
 800ae5c:	f7ff fd64 	bl	800a928 <__lo0bits>
 800ae60:	9b01      	ldr	r3, [sp, #4]
 800ae62:	6163      	str	r3, [r4, #20]
 800ae64:	2201      	movs	r2, #1
 800ae66:	6122      	str	r2, [r4, #16]
 800ae68:	3020      	adds	r0, #32
 800ae6a:	e7e3      	b.n	800ae34 <__d2b+0x60>
 800ae6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae74:	f8c9 0000 	str.w	r0, [r9]
 800ae78:	6918      	ldr	r0, [r3, #16]
 800ae7a:	f7ff fd35 	bl	800a8e8 <__hi0bits>
 800ae7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae82:	e7df      	b.n	800ae44 <__d2b+0x70>
 800ae84:	0800bb00 	.word	0x0800bb00
 800ae88:	0800bb11 	.word	0x0800bb11

0800ae8c <_calloc_r>:
 800ae8c:	b513      	push	{r0, r1, r4, lr}
 800ae8e:	434a      	muls	r2, r1
 800ae90:	4611      	mov	r1, r2
 800ae92:	9201      	str	r2, [sp, #4]
 800ae94:	f7fd fd6c 	bl	8008970 <_malloc_r>
 800ae98:	4604      	mov	r4, r0
 800ae9a:	b118      	cbz	r0, 800aea4 <_calloc_r+0x18>
 800ae9c:	9a01      	ldr	r2, [sp, #4]
 800ae9e:	2100      	movs	r1, #0
 800aea0:	f7fd fd5d 	bl	800895e <memset>
 800aea4:	4620      	mov	r0, r4
 800aea6:	b002      	add	sp, #8
 800aea8:	bd10      	pop	{r4, pc}
	...

0800aeac <_free_r>:
 800aeac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aeae:	2900      	cmp	r1, #0
 800aeb0:	d048      	beq.n	800af44 <_free_r+0x98>
 800aeb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeb6:	9001      	str	r0, [sp, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f1a1 0404 	sub.w	r4, r1, #4
 800aebe:	bfb8      	it	lt
 800aec0:	18e4      	addlt	r4, r4, r3
 800aec2:	f7ff fc59 	bl	800a778 <__malloc_lock>
 800aec6:	4a20      	ldr	r2, [pc, #128]	; (800af48 <_free_r+0x9c>)
 800aec8:	9801      	ldr	r0, [sp, #4]
 800aeca:	6813      	ldr	r3, [r2, #0]
 800aecc:	4615      	mov	r5, r2
 800aece:	b933      	cbnz	r3, 800aede <_free_r+0x32>
 800aed0:	6063      	str	r3, [r4, #4]
 800aed2:	6014      	str	r4, [r2, #0]
 800aed4:	b003      	add	sp, #12
 800aed6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aeda:	f7ff bc53 	b.w	800a784 <__malloc_unlock>
 800aede:	42a3      	cmp	r3, r4
 800aee0:	d90b      	bls.n	800aefa <_free_r+0x4e>
 800aee2:	6821      	ldr	r1, [r4, #0]
 800aee4:	1862      	adds	r2, r4, r1
 800aee6:	4293      	cmp	r3, r2
 800aee8:	bf04      	itt	eq
 800aeea:	681a      	ldreq	r2, [r3, #0]
 800aeec:	685b      	ldreq	r3, [r3, #4]
 800aeee:	6063      	str	r3, [r4, #4]
 800aef0:	bf04      	itt	eq
 800aef2:	1852      	addeq	r2, r2, r1
 800aef4:	6022      	streq	r2, [r4, #0]
 800aef6:	602c      	str	r4, [r5, #0]
 800aef8:	e7ec      	b.n	800aed4 <_free_r+0x28>
 800aefa:	461a      	mov	r2, r3
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	b10b      	cbz	r3, 800af04 <_free_r+0x58>
 800af00:	42a3      	cmp	r3, r4
 800af02:	d9fa      	bls.n	800aefa <_free_r+0x4e>
 800af04:	6811      	ldr	r1, [r2, #0]
 800af06:	1855      	adds	r5, r2, r1
 800af08:	42a5      	cmp	r5, r4
 800af0a:	d10b      	bne.n	800af24 <_free_r+0x78>
 800af0c:	6824      	ldr	r4, [r4, #0]
 800af0e:	4421      	add	r1, r4
 800af10:	1854      	adds	r4, r2, r1
 800af12:	42a3      	cmp	r3, r4
 800af14:	6011      	str	r1, [r2, #0]
 800af16:	d1dd      	bne.n	800aed4 <_free_r+0x28>
 800af18:	681c      	ldr	r4, [r3, #0]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	6053      	str	r3, [r2, #4]
 800af1e:	4421      	add	r1, r4
 800af20:	6011      	str	r1, [r2, #0]
 800af22:	e7d7      	b.n	800aed4 <_free_r+0x28>
 800af24:	d902      	bls.n	800af2c <_free_r+0x80>
 800af26:	230c      	movs	r3, #12
 800af28:	6003      	str	r3, [r0, #0]
 800af2a:	e7d3      	b.n	800aed4 <_free_r+0x28>
 800af2c:	6825      	ldr	r5, [r4, #0]
 800af2e:	1961      	adds	r1, r4, r5
 800af30:	428b      	cmp	r3, r1
 800af32:	bf04      	itt	eq
 800af34:	6819      	ldreq	r1, [r3, #0]
 800af36:	685b      	ldreq	r3, [r3, #4]
 800af38:	6063      	str	r3, [r4, #4]
 800af3a:	bf04      	itt	eq
 800af3c:	1949      	addeq	r1, r1, r5
 800af3e:	6021      	streq	r1, [r4, #0]
 800af40:	6054      	str	r4, [r2, #4]
 800af42:	e7c7      	b.n	800aed4 <_free_r+0x28>
 800af44:	b003      	add	sp, #12
 800af46:	bd30      	pop	{r4, r5, pc}
 800af48:	20004bec 	.word	0x20004bec

0800af4c <__ssputs_r>:
 800af4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af50:	688e      	ldr	r6, [r1, #8]
 800af52:	429e      	cmp	r6, r3
 800af54:	4682      	mov	sl, r0
 800af56:	460c      	mov	r4, r1
 800af58:	4690      	mov	r8, r2
 800af5a:	461f      	mov	r7, r3
 800af5c:	d838      	bhi.n	800afd0 <__ssputs_r+0x84>
 800af5e:	898a      	ldrh	r2, [r1, #12]
 800af60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af64:	d032      	beq.n	800afcc <__ssputs_r+0x80>
 800af66:	6825      	ldr	r5, [r4, #0]
 800af68:	6909      	ldr	r1, [r1, #16]
 800af6a:	eba5 0901 	sub.w	r9, r5, r1
 800af6e:	6965      	ldr	r5, [r4, #20]
 800af70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af78:	3301      	adds	r3, #1
 800af7a:	444b      	add	r3, r9
 800af7c:	106d      	asrs	r5, r5, #1
 800af7e:	429d      	cmp	r5, r3
 800af80:	bf38      	it	cc
 800af82:	461d      	movcc	r5, r3
 800af84:	0553      	lsls	r3, r2, #21
 800af86:	d531      	bpl.n	800afec <__ssputs_r+0xa0>
 800af88:	4629      	mov	r1, r5
 800af8a:	f7fd fcf1 	bl	8008970 <_malloc_r>
 800af8e:	4606      	mov	r6, r0
 800af90:	b950      	cbnz	r0, 800afa8 <__ssputs_r+0x5c>
 800af92:	230c      	movs	r3, #12
 800af94:	f8ca 3000 	str.w	r3, [sl]
 800af98:	89a3      	ldrh	r3, [r4, #12]
 800af9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af9e:	81a3      	strh	r3, [r4, #12]
 800afa0:	f04f 30ff 	mov.w	r0, #4294967295
 800afa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa8:	6921      	ldr	r1, [r4, #16]
 800afaa:	464a      	mov	r2, r9
 800afac:	f7fd fcc9 	bl	8008942 <memcpy>
 800afb0:	89a3      	ldrh	r3, [r4, #12]
 800afb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afba:	81a3      	strh	r3, [r4, #12]
 800afbc:	6126      	str	r6, [r4, #16]
 800afbe:	6165      	str	r5, [r4, #20]
 800afc0:	444e      	add	r6, r9
 800afc2:	eba5 0509 	sub.w	r5, r5, r9
 800afc6:	6026      	str	r6, [r4, #0]
 800afc8:	60a5      	str	r5, [r4, #8]
 800afca:	463e      	mov	r6, r7
 800afcc:	42be      	cmp	r6, r7
 800afce:	d900      	bls.n	800afd2 <__ssputs_r+0x86>
 800afd0:	463e      	mov	r6, r7
 800afd2:	4632      	mov	r2, r6
 800afd4:	6820      	ldr	r0, [r4, #0]
 800afd6:	4641      	mov	r1, r8
 800afd8:	f000 fae4 	bl	800b5a4 <memmove>
 800afdc:	68a3      	ldr	r3, [r4, #8]
 800afde:	6822      	ldr	r2, [r4, #0]
 800afe0:	1b9b      	subs	r3, r3, r6
 800afe2:	4432      	add	r2, r6
 800afe4:	60a3      	str	r3, [r4, #8]
 800afe6:	6022      	str	r2, [r4, #0]
 800afe8:	2000      	movs	r0, #0
 800afea:	e7db      	b.n	800afa4 <__ssputs_r+0x58>
 800afec:	462a      	mov	r2, r5
 800afee:	f000 faf3 	bl	800b5d8 <_realloc_r>
 800aff2:	4606      	mov	r6, r0
 800aff4:	2800      	cmp	r0, #0
 800aff6:	d1e1      	bne.n	800afbc <__ssputs_r+0x70>
 800aff8:	6921      	ldr	r1, [r4, #16]
 800affa:	4650      	mov	r0, sl
 800affc:	f7ff ff56 	bl	800aeac <_free_r>
 800b000:	e7c7      	b.n	800af92 <__ssputs_r+0x46>
	...

0800b004 <_svfiprintf_r>:
 800b004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b008:	4698      	mov	r8, r3
 800b00a:	898b      	ldrh	r3, [r1, #12]
 800b00c:	061b      	lsls	r3, r3, #24
 800b00e:	b09d      	sub	sp, #116	; 0x74
 800b010:	4607      	mov	r7, r0
 800b012:	460d      	mov	r5, r1
 800b014:	4614      	mov	r4, r2
 800b016:	d50e      	bpl.n	800b036 <_svfiprintf_r+0x32>
 800b018:	690b      	ldr	r3, [r1, #16]
 800b01a:	b963      	cbnz	r3, 800b036 <_svfiprintf_r+0x32>
 800b01c:	2140      	movs	r1, #64	; 0x40
 800b01e:	f7fd fca7 	bl	8008970 <_malloc_r>
 800b022:	6028      	str	r0, [r5, #0]
 800b024:	6128      	str	r0, [r5, #16]
 800b026:	b920      	cbnz	r0, 800b032 <_svfiprintf_r+0x2e>
 800b028:	230c      	movs	r3, #12
 800b02a:	603b      	str	r3, [r7, #0]
 800b02c:	f04f 30ff 	mov.w	r0, #4294967295
 800b030:	e0d1      	b.n	800b1d6 <_svfiprintf_r+0x1d2>
 800b032:	2340      	movs	r3, #64	; 0x40
 800b034:	616b      	str	r3, [r5, #20]
 800b036:	2300      	movs	r3, #0
 800b038:	9309      	str	r3, [sp, #36]	; 0x24
 800b03a:	2320      	movs	r3, #32
 800b03c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b040:	f8cd 800c 	str.w	r8, [sp, #12]
 800b044:	2330      	movs	r3, #48	; 0x30
 800b046:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b1f0 <_svfiprintf_r+0x1ec>
 800b04a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b04e:	f04f 0901 	mov.w	r9, #1
 800b052:	4623      	mov	r3, r4
 800b054:	469a      	mov	sl, r3
 800b056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b05a:	b10a      	cbz	r2, 800b060 <_svfiprintf_r+0x5c>
 800b05c:	2a25      	cmp	r2, #37	; 0x25
 800b05e:	d1f9      	bne.n	800b054 <_svfiprintf_r+0x50>
 800b060:	ebba 0b04 	subs.w	fp, sl, r4
 800b064:	d00b      	beq.n	800b07e <_svfiprintf_r+0x7a>
 800b066:	465b      	mov	r3, fp
 800b068:	4622      	mov	r2, r4
 800b06a:	4629      	mov	r1, r5
 800b06c:	4638      	mov	r0, r7
 800b06e:	f7ff ff6d 	bl	800af4c <__ssputs_r>
 800b072:	3001      	adds	r0, #1
 800b074:	f000 80aa 	beq.w	800b1cc <_svfiprintf_r+0x1c8>
 800b078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b07a:	445a      	add	r2, fp
 800b07c:	9209      	str	r2, [sp, #36]	; 0x24
 800b07e:	f89a 3000 	ldrb.w	r3, [sl]
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 80a2 	beq.w	800b1cc <_svfiprintf_r+0x1c8>
 800b088:	2300      	movs	r3, #0
 800b08a:	f04f 32ff 	mov.w	r2, #4294967295
 800b08e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b092:	f10a 0a01 	add.w	sl, sl, #1
 800b096:	9304      	str	r3, [sp, #16]
 800b098:	9307      	str	r3, [sp, #28]
 800b09a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b09e:	931a      	str	r3, [sp, #104]	; 0x68
 800b0a0:	4654      	mov	r4, sl
 800b0a2:	2205      	movs	r2, #5
 800b0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a8:	4851      	ldr	r0, [pc, #324]	; (800b1f0 <_svfiprintf_r+0x1ec>)
 800b0aa:	f7f5 f8a1 	bl	80001f0 <memchr>
 800b0ae:	9a04      	ldr	r2, [sp, #16]
 800b0b0:	b9d8      	cbnz	r0, 800b0ea <_svfiprintf_r+0xe6>
 800b0b2:	06d0      	lsls	r0, r2, #27
 800b0b4:	bf44      	itt	mi
 800b0b6:	2320      	movmi	r3, #32
 800b0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0bc:	0711      	lsls	r1, r2, #28
 800b0be:	bf44      	itt	mi
 800b0c0:	232b      	movmi	r3, #43	; 0x2b
 800b0c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b0ca:	2b2a      	cmp	r3, #42	; 0x2a
 800b0cc:	d015      	beq.n	800b0fa <_svfiprintf_r+0xf6>
 800b0ce:	9a07      	ldr	r2, [sp, #28]
 800b0d0:	4654      	mov	r4, sl
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	f04f 0c0a 	mov.w	ip, #10
 800b0d8:	4621      	mov	r1, r4
 800b0da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0de:	3b30      	subs	r3, #48	; 0x30
 800b0e0:	2b09      	cmp	r3, #9
 800b0e2:	d94e      	bls.n	800b182 <_svfiprintf_r+0x17e>
 800b0e4:	b1b0      	cbz	r0, 800b114 <_svfiprintf_r+0x110>
 800b0e6:	9207      	str	r2, [sp, #28]
 800b0e8:	e014      	b.n	800b114 <_svfiprintf_r+0x110>
 800b0ea:	eba0 0308 	sub.w	r3, r0, r8
 800b0ee:	fa09 f303 	lsl.w	r3, r9, r3
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	9304      	str	r3, [sp, #16]
 800b0f6:	46a2      	mov	sl, r4
 800b0f8:	e7d2      	b.n	800b0a0 <_svfiprintf_r+0x9c>
 800b0fa:	9b03      	ldr	r3, [sp, #12]
 800b0fc:	1d19      	adds	r1, r3, #4
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	9103      	str	r1, [sp, #12]
 800b102:	2b00      	cmp	r3, #0
 800b104:	bfbb      	ittet	lt
 800b106:	425b      	neglt	r3, r3
 800b108:	f042 0202 	orrlt.w	r2, r2, #2
 800b10c:	9307      	strge	r3, [sp, #28]
 800b10e:	9307      	strlt	r3, [sp, #28]
 800b110:	bfb8      	it	lt
 800b112:	9204      	strlt	r2, [sp, #16]
 800b114:	7823      	ldrb	r3, [r4, #0]
 800b116:	2b2e      	cmp	r3, #46	; 0x2e
 800b118:	d10c      	bne.n	800b134 <_svfiprintf_r+0x130>
 800b11a:	7863      	ldrb	r3, [r4, #1]
 800b11c:	2b2a      	cmp	r3, #42	; 0x2a
 800b11e:	d135      	bne.n	800b18c <_svfiprintf_r+0x188>
 800b120:	9b03      	ldr	r3, [sp, #12]
 800b122:	1d1a      	adds	r2, r3, #4
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	9203      	str	r2, [sp, #12]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	bfb8      	it	lt
 800b12c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b130:	3402      	adds	r4, #2
 800b132:	9305      	str	r3, [sp, #20]
 800b134:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b200 <_svfiprintf_r+0x1fc>
 800b138:	7821      	ldrb	r1, [r4, #0]
 800b13a:	2203      	movs	r2, #3
 800b13c:	4650      	mov	r0, sl
 800b13e:	f7f5 f857 	bl	80001f0 <memchr>
 800b142:	b140      	cbz	r0, 800b156 <_svfiprintf_r+0x152>
 800b144:	2340      	movs	r3, #64	; 0x40
 800b146:	eba0 000a 	sub.w	r0, r0, sl
 800b14a:	fa03 f000 	lsl.w	r0, r3, r0
 800b14e:	9b04      	ldr	r3, [sp, #16]
 800b150:	4303      	orrs	r3, r0
 800b152:	3401      	adds	r4, #1
 800b154:	9304      	str	r3, [sp, #16]
 800b156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b15a:	4826      	ldr	r0, [pc, #152]	; (800b1f4 <_svfiprintf_r+0x1f0>)
 800b15c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b160:	2206      	movs	r2, #6
 800b162:	f7f5 f845 	bl	80001f0 <memchr>
 800b166:	2800      	cmp	r0, #0
 800b168:	d038      	beq.n	800b1dc <_svfiprintf_r+0x1d8>
 800b16a:	4b23      	ldr	r3, [pc, #140]	; (800b1f8 <_svfiprintf_r+0x1f4>)
 800b16c:	bb1b      	cbnz	r3, 800b1b6 <_svfiprintf_r+0x1b2>
 800b16e:	9b03      	ldr	r3, [sp, #12]
 800b170:	3307      	adds	r3, #7
 800b172:	f023 0307 	bic.w	r3, r3, #7
 800b176:	3308      	adds	r3, #8
 800b178:	9303      	str	r3, [sp, #12]
 800b17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b17c:	4433      	add	r3, r6
 800b17e:	9309      	str	r3, [sp, #36]	; 0x24
 800b180:	e767      	b.n	800b052 <_svfiprintf_r+0x4e>
 800b182:	fb0c 3202 	mla	r2, ip, r2, r3
 800b186:	460c      	mov	r4, r1
 800b188:	2001      	movs	r0, #1
 800b18a:	e7a5      	b.n	800b0d8 <_svfiprintf_r+0xd4>
 800b18c:	2300      	movs	r3, #0
 800b18e:	3401      	adds	r4, #1
 800b190:	9305      	str	r3, [sp, #20]
 800b192:	4619      	mov	r1, r3
 800b194:	f04f 0c0a 	mov.w	ip, #10
 800b198:	4620      	mov	r0, r4
 800b19a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b19e:	3a30      	subs	r2, #48	; 0x30
 800b1a0:	2a09      	cmp	r2, #9
 800b1a2:	d903      	bls.n	800b1ac <_svfiprintf_r+0x1a8>
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d0c5      	beq.n	800b134 <_svfiprintf_r+0x130>
 800b1a8:	9105      	str	r1, [sp, #20]
 800b1aa:	e7c3      	b.n	800b134 <_svfiprintf_r+0x130>
 800b1ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e7f0      	b.n	800b198 <_svfiprintf_r+0x194>
 800b1b6:	ab03      	add	r3, sp, #12
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	462a      	mov	r2, r5
 800b1bc:	4b0f      	ldr	r3, [pc, #60]	; (800b1fc <_svfiprintf_r+0x1f8>)
 800b1be:	a904      	add	r1, sp, #16
 800b1c0:	4638      	mov	r0, r7
 800b1c2:	f7fd fccf 	bl	8008b64 <_printf_float>
 800b1c6:	1c42      	adds	r2, r0, #1
 800b1c8:	4606      	mov	r6, r0
 800b1ca:	d1d6      	bne.n	800b17a <_svfiprintf_r+0x176>
 800b1cc:	89ab      	ldrh	r3, [r5, #12]
 800b1ce:	065b      	lsls	r3, r3, #25
 800b1d0:	f53f af2c 	bmi.w	800b02c <_svfiprintf_r+0x28>
 800b1d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1d6:	b01d      	add	sp, #116	; 0x74
 800b1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1dc:	ab03      	add	r3, sp, #12
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	462a      	mov	r2, r5
 800b1e2:	4b06      	ldr	r3, [pc, #24]	; (800b1fc <_svfiprintf_r+0x1f8>)
 800b1e4:	a904      	add	r1, sp, #16
 800b1e6:	4638      	mov	r0, r7
 800b1e8:	f7fd ff60 	bl	80090ac <_printf_i>
 800b1ec:	e7eb      	b.n	800b1c6 <_svfiprintf_r+0x1c2>
 800b1ee:	bf00      	nop
 800b1f0:	0800bc74 	.word	0x0800bc74
 800b1f4:	0800bc7e 	.word	0x0800bc7e
 800b1f8:	08008b65 	.word	0x08008b65
 800b1fc:	0800af4d 	.word	0x0800af4d
 800b200:	0800bc7a 	.word	0x0800bc7a

0800b204 <__sfputc_r>:
 800b204:	6893      	ldr	r3, [r2, #8]
 800b206:	3b01      	subs	r3, #1
 800b208:	2b00      	cmp	r3, #0
 800b20a:	b410      	push	{r4}
 800b20c:	6093      	str	r3, [r2, #8]
 800b20e:	da08      	bge.n	800b222 <__sfputc_r+0x1e>
 800b210:	6994      	ldr	r4, [r2, #24]
 800b212:	42a3      	cmp	r3, r4
 800b214:	db01      	blt.n	800b21a <__sfputc_r+0x16>
 800b216:	290a      	cmp	r1, #10
 800b218:	d103      	bne.n	800b222 <__sfputc_r+0x1e>
 800b21a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b21e:	f7fe ba0b 	b.w	8009638 <__swbuf_r>
 800b222:	6813      	ldr	r3, [r2, #0]
 800b224:	1c58      	adds	r0, r3, #1
 800b226:	6010      	str	r0, [r2, #0]
 800b228:	7019      	strb	r1, [r3, #0]
 800b22a:	4608      	mov	r0, r1
 800b22c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <__sfputs_r>:
 800b232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b234:	4606      	mov	r6, r0
 800b236:	460f      	mov	r7, r1
 800b238:	4614      	mov	r4, r2
 800b23a:	18d5      	adds	r5, r2, r3
 800b23c:	42ac      	cmp	r4, r5
 800b23e:	d101      	bne.n	800b244 <__sfputs_r+0x12>
 800b240:	2000      	movs	r0, #0
 800b242:	e007      	b.n	800b254 <__sfputs_r+0x22>
 800b244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b248:	463a      	mov	r2, r7
 800b24a:	4630      	mov	r0, r6
 800b24c:	f7ff ffda 	bl	800b204 <__sfputc_r>
 800b250:	1c43      	adds	r3, r0, #1
 800b252:	d1f3      	bne.n	800b23c <__sfputs_r+0xa>
 800b254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b258 <_vfiprintf_r>:
 800b258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	460d      	mov	r5, r1
 800b25e:	b09d      	sub	sp, #116	; 0x74
 800b260:	4614      	mov	r4, r2
 800b262:	4698      	mov	r8, r3
 800b264:	4606      	mov	r6, r0
 800b266:	b118      	cbz	r0, 800b270 <_vfiprintf_r+0x18>
 800b268:	6983      	ldr	r3, [r0, #24]
 800b26a:	b90b      	cbnz	r3, 800b270 <_vfiprintf_r+0x18>
 800b26c:	f7fd faa4 	bl	80087b8 <__sinit>
 800b270:	4b89      	ldr	r3, [pc, #548]	; (800b498 <_vfiprintf_r+0x240>)
 800b272:	429d      	cmp	r5, r3
 800b274:	d11b      	bne.n	800b2ae <_vfiprintf_r+0x56>
 800b276:	6875      	ldr	r5, [r6, #4]
 800b278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b27a:	07d9      	lsls	r1, r3, #31
 800b27c:	d405      	bmi.n	800b28a <_vfiprintf_r+0x32>
 800b27e:	89ab      	ldrh	r3, [r5, #12]
 800b280:	059a      	lsls	r2, r3, #22
 800b282:	d402      	bmi.n	800b28a <_vfiprintf_r+0x32>
 800b284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b286:	f7fd fb5a 	bl	800893e <__retarget_lock_acquire_recursive>
 800b28a:	89ab      	ldrh	r3, [r5, #12]
 800b28c:	071b      	lsls	r3, r3, #28
 800b28e:	d501      	bpl.n	800b294 <_vfiprintf_r+0x3c>
 800b290:	692b      	ldr	r3, [r5, #16]
 800b292:	b9eb      	cbnz	r3, 800b2d0 <_vfiprintf_r+0x78>
 800b294:	4629      	mov	r1, r5
 800b296:	4630      	mov	r0, r6
 800b298:	f7fe fa32 	bl	8009700 <__swsetup_r>
 800b29c:	b1c0      	cbz	r0, 800b2d0 <_vfiprintf_r+0x78>
 800b29e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2a0:	07dc      	lsls	r4, r3, #31
 800b2a2:	d50e      	bpl.n	800b2c2 <_vfiprintf_r+0x6a>
 800b2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a8:	b01d      	add	sp, #116	; 0x74
 800b2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ae:	4b7b      	ldr	r3, [pc, #492]	; (800b49c <_vfiprintf_r+0x244>)
 800b2b0:	429d      	cmp	r5, r3
 800b2b2:	d101      	bne.n	800b2b8 <_vfiprintf_r+0x60>
 800b2b4:	68b5      	ldr	r5, [r6, #8]
 800b2b6:	e7df      	b.n	800b278 <_vfiprintf_r+0x20>
 800b2b8:	4b79      	ldr	r3, [pc, #484]	; (800b4a0 <_vfiprintf_r+0x248>)
 800b2ba:	429d      	cmp	r5, r3
 800b2bc:	bf08      	it	eq
 800b2be:	68f5      	ldreq	r5, [r6, #12]
 800b2c0:	e7da      	b.n	800b278 <_vfiprintf_r+0x20>
 800b2c2:	89ab      	ldrh	r3, [r5, #12]
 800b2c4:	0598      	lsls	r0, r3, #22
 800b2c6:	d4ed      	bmi.n	800b2a4 <_vfiprintf_r+0x4c>
 800b2c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2ca:	f7fd fb39 	bl	8008940 <__retarget_lock_release_recursive>
 800b2ce:	e7e9      	b.n	800b2a4 <_vfiprintf_r+0x4c>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b2d4:	2320      	movs	r3, #32
 800b2d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2da:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2de:	2330      	movs	r3, #48	; 0x30
 800b2e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b4a4 <_vfiprintf_r+0x24c>
 800b2e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2e8:	f04f 0901 	mov.w	r9, #1
 800b2ec:	4623      	mov	r3, r4
 800b2ee:	469a      	mov	sl, r3
 800b2f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2f4:	b10a      	cbz	r2, 800b2fa <_vfiprintf_r+0xa2>
 800b2f6:	2a25      	cmp	r2, #37	; 0x25
 800b2f8:	d1f9      	bne.n	800b2ee <_vfiprintf_r+0x96>
 800b2fa:	ebba 0b04 	subs.w	fp, sl, r4
 800b2fe:	d00b      	beq.n	800b318 <_vfiprintf_r+0xc0>
 800b300:	465b      	mov	r3, fp
 800b302:	4622      	mov	r2, r4
 800b304:	4629      	mov	r1, r5
 800b306:	4630      	mov	r0, r6
 800b308:	f7ff ff93 	bl	800b232 <__sfputs_r>
 800b30c:	3001      	adds	r0, #1
 800b30e:	f000 80aa 	beq.w	800b466 <_vfiprintf_r+0x20e>
 800b312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b314:	445a      	add	r2, fp
 800b316:	9209      	str	r2, [sp, #36]	; 0x24
 800b318:	f89a 3000 	ldrb.w	r3, [sl]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f000 80a2 	beq.w	800b466 <_vfiprintf_r+0x20e>
 800b322:	2300      	movs	r3, #0
 800b324:	f04f 32ff 	mov.w	r2, #4294967295
 800b328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b32c:	f10a 0a01 	add.w	sl, sl, #1
 800b330:	9304      	str	r3, [sp, #16]
 800b332:	9307      	str	r3, [sp, #28]
 800b334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b338:	931a      	str	r3, [sp, #104]	; 0x68
 800b33a:	4654      	mov	r4, sl
 800b33c:	2205      	movs	r2, #5
 800b33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b342:	4858      	ldr	r0, [pc, #352]	; (800b4a4 <_vfiprintf_r+0x24c>)
 800b344:	f7f4 ff54 	bl	80001f0 <memchr>
 800b348:	9a04      	ldr	r2, [sp, #16]
 800b34a:	b9d8      	cbnz	r0, 800b384 <_vfiprintf_r+0x12c>
 800b34c:	06d1      	lsls	r1, r2, #27
 800b34e:	bf44      	itt	mi
 800b350:	2320      	movmi	r3, #32
 800b352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b356:	0713      	lsls	r3, r2, #28
 800b358:	bf44      	itt	mi
 800b35a:	232b      	movmi	r3, #43	; 0x2b
 800b35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b360:	f89a 3000 	ldrb.w	r3, [sl]
 800b364:	2b2a      	cmp	r3, #42	; 0x2a
 800b366:	d015      	beq.n	800b394 <_vfiprintf_r+0x13c>
 800b368:	9a07      	ldr	r2, [sp, #28]
 800b36a:	4654      	mov	r4, sl
 800b36c:	2000      	movs	r0, #0
 800b36e:	f04f 0c0a 	mov.w	ip, #10
 800b372:	4621      	mov	r1, r4
 800b374:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b378:	3b30      	subs	r3, #48	; 0x30
 800b37a:	2b09      	cmp	r3, #9
 800b37c:	d94e      	bls.n	800b41c <_vfiprintf_r+0x1c4>
 800b37e:	b1b0      	cbz	r0, 800b3ae <_vfiprintf_r+0x156>
 800b380:	9207      	str	r2, [sp, #28]
 800b382:	e014      	b.n	800b3ae <_vfiprintf_r+0x156>
 800b384:	eba0 0308 	sub.w	r3, r0, r8
 800b388:	fa09 f303 	lsl.w	r3, r9, r3
 800b38c:	4313      	orrs	r3, r2
 800b38e:	9304      	str	r3, [sp, #16]
 800b390:	46a2      	mov	sl, r4
 800b392:	e7d2      	b.n	800b33a <_vfiprintf_r+0xe2>
 800b394:	9b03      	ldr	r3, [sp, #12]
 800b396:	1d19      	adds	r1, r3, #4
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	9103      	str	r1, [sp, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	bfbb      	ittet	lt
 800b3a0:	425b      	neglt	r3, r3
 800b3a2:	f042 0202 	orrlt.w	r2, r2, #2
 800b3a6:	9307      	strge	r3, [sp, #28]
 800b3a8:	9307      	strlt	r3, [sp, #28]
 800b3aa:	bfb8      	it	lt
 800b3ac:	9204      	strlt	r2, [sp, #16]
 800b3ae:	7823      	ldrb	r3, [r4, #0]
 800b3b0:	2b2e      	cmp	r3, #46	; 0x2e
 800b3b2:	d10c      	bne.n	800b3ce <_vfiprintf_r+0x176>
 800b3b4:	7863      	ldrb	r3, [r4, #1]
 800b3b6:	2b2a      	cmp	r3, #42	; 0x2a
 800b3b8:	d135      	bne.n	800b426 <_vfiprintf_r+0x1ce>
 800b3ba:	9b03      	ldr	r3, [sp, #12]
 800b3bc:	1d1a      	adds	r2, r3, #4
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	9203      	str	r2, [sp, #12]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	bfb8      	it	lt
 800b3c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3ca:	3402      	adds	r4, #2
 800b3cc:	9305      	str	r3, [sp, #20]
 800b3ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b4b4 <_vfiprintf_r+0x25c>
 800b3d2:	7821      	ldrb	r1, [r4, #0]
 800b3d4:	2203      	movs	r2, #3
 800b3d6:	4650      	mov	r0, sl
 800b3d8:	f7f4 ff0a 	bl	80001f0 <memchr>
 800b3dc:	b140      	cbz	r0, 800b3f0 <_vfiprintf_r+0x198>
 800b3de:	2340      	movs	r3, #64	; 0x40
 800b3e0:	eba0 000a 	sub.w	r0, r0, sl
 800b3e4:	fa03 f000 	lsl.w	r0, r3, r0
 800b3e8:	9b04      	ldr	r3, [sp, #16]
 800b3ea:	4303      	orrs	r3, r0
 800b3ec:	3401      	adds	r4, #1
 800b3ee:	9304      	str	r3, [sp, #16]
 800b3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3f4:	482c      	ldr	r0, [pc, #176]	; (800b4a8 <_vfiprintf_r+0x250>)
 800b3f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3fa:	2206      	movs	r2, #6
 800b3fc:	f7f4 fef8 	bl	80001f0 <memchr>
 800b400:	2800      	cmp	r0, #0
 800b402:	d03f      	beq.n	800b484 <_vfiprintf_r+0x22c>
 800b404:	4b29      	ldr	r3, [pc, #164]	; (800b4ac <_vfiprintf_r+0x254>)
 800b406:	bb1b      	cbnz	r3, 800b450 <_vfiprintf_r+0x1f8>
 800b408:	9b03      	ldr	r3, [sp, #12]
 800b40a:	3307      	adds	r3, #7
 800b40c:	f023 0307 	bic.w	r3, r3, #7
 800b410:	3308      	adds	r3, #8
 800b412:	9303      	str	r3, [sp, #12]
 800b414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b416:	443b      	add	r3, r7
 800b418:	9309      	str	r3, [sp, #36]	; 0x24
 800b41a:	e767      	b.n	800b2ec <_vfiprintf_r+0x94>
 800b41c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b420:	460c      	mov	r4, r1
 800b422:	2001      	movs	r0, #1
 800b424:	e7a5      	b.n	800b372 <_vfiprintf_r+0x11a>
 800b426:	2300      	movs	r3, #0
 800b428:	3401      	adds	r4, #1
 800b42a:	9305      	str	r3, [sp, #20]
 800b42c:	4619      	mov	r1, r3
 800b42e:	f04f 0c0a 	mov.w	ip, #10
 800b432:	4620      	mov	r0, r4
 800b434:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b438:	3a30      	subs	r2, #48	; 0x30
 800b43a:	2a09      	cmp	r2, #9
 800b43c:	d903      	bls.n	800b446 <_vfiprintf_r+0x1ee>
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d0c5      	beq.n	800b3ce <_vfiprintf_r+0x176>
 800b442:	9105      	str	r1, [sp, #20]
 800b444:	e7c3      	b.n	800b3ce <_vfiprintf_r+0x176>
 800b446:	fb0c 2101 	mla	r1, ip, r1, r2
 800b44a:	4604      	mov	r4, r0
 800b44c:	2301      	movs	r3, #1
 800b44e:	e7f0      	b.n	800b432 <_vfiprintf_r+0x1da>
 800b450:	ab03      	add	r3, sp, #12
 800b452:	9300      	str	r3, [sp, #0]
 800b454:	462a      	mov	r2, r5
 800b456:	4b16      	ldr	r3, [pc, #88]	; (800b4b0 <_vfiprintf_r+0x258>)
 800b458:	a904      	add	r1, sp, #16
 800b45a:	4630      	mov	r0, r6
 800b45c:	f7fd fb82 	bl	8008b64 <_printf_float>
 800b460:	4607      	mov	r7, r0
 800b462:	1c78      	adds	r0, r7, #1
 800b464:	d1d6      	bne.n	800b414 <_vfiprintf_r+0x1bc>
 800b466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b468:	07d9      	lsls	r1, r3, #31
 800b46a:	d405      	bmi.n	800b478 <_vfiprintf_r+0x220>
 800b46c:	89ab      	ldrh	r3, [r5, #12]
 800b46e:	059a      	lsls	r2, r3, #22
 800b470:	d402      	bmi.n	800b478 <_vfiprintf_r+0x220>
 800b472:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b474:	f7fd fa64 	bl	8008940 <__retarget_lock_release_recursive>
 800b478:	89ab      	ldrh	r3, [r5, #12]
 800b47a:	065b      	lsls	r3, r3, #25
 800b47c:	f53f af12 	bmi.w	800b2a4 <_vfiprintf_r+0x4c>
 800b480:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b482:	e711      	b.n	800b2a8 <_vfiprintf_r+0x50>
 800b484:	ab03      	add	r3, sp, #12
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	462a      	mov	r2, r5
 800b48a:	4b09      	ldr	r3, [pc, #36]	; (800b4b0 <_vfiprintf_r+0x258>)
 800b48c:	a904      	add	r1, sp, #16
 800b48e:	4630      	mov	r0, r6
 800b490:	f7fd fe0c 	bl	80090ac <_printf_i>
 800b494:	e7e4      	b.n	800b460 <_vfiprintf_r+0x208>
 800b496:	bf00      	nop
 800b498:	0800b904 	.word	0x0800b904
 800b49c:	0800b924 	.word	0x0800b924
 800b4a0:	0800b8e4 	.word	0x0800b8e4
 800b4a4:	0800bc74 	.word	0x0800bc74
 800b4a8:	0800bc7e 	.word	0x0800bc7e
 800b4ac:	08008b65 	.word	0x08008b65
 800b4b0:	0800b233 	.word	0x0800b233
 800b4b4:	0800bc7a 	.word	0x0800bc7a

0800b4b8 <_read_r>:
 800b4b8:	b538      	push	{r3, r4, r5, lr}
 800b4ba:	4d07      	ldr	r5, [pc, #28]	; (800b4d8 <_read_r+0x20>)
 800b4bc:	4604      	mov	r4, r0
 800b4be:	4608      	mov	r0, r1
 800b4c0:	4611      	mov	r1, r2
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	602a      	str	r2, [r5, #0]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	f7f6 fe70 	bl	80021ac <_read>
 800b4cc:	1c43      	adds	r3, r0, #1
 800b4ce:	d102      	bne.n	800b4d6 <_read_r+0x1e>
 800b4d0:	682b      	ldr	r3, [r5, #0]
 800b4d2:	b103      	cbz	r3, 800b4d6 <_read_r+0x1e>
 800b4d4:	6023      	str	r3, [r4, #0]
 800b4d6:	bd38      	pop	{r3, r4, r5, pc}
 800b4d8:	20005120 	.word	0x20005120

0800b4dc <__assert_func>:
 800b4dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4de:	4614      	mov	r4, r2
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	4b09      	ldr	r3, [pc, #36]	; (800b508 <__assert_func+0x2c>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4605      	mov	r5, r0
 800b4e8:	68d8      	ldr	r0, [r3, #12]
 800b4ea:	b14c      	cbz	r4, 800b500 <__assert_func+0x24>
 800b4ec:	4b07      	ldr	r3, [pc, #28]	; (800b50c <__assert_func+0x30>)
 800b4ee:	9100      	str	r1, [sp, #0]
 800b4f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4f4:	4906      	ldr	r1, [pc, #24]	; (800b510 <__assert_func+0x34>)
 800b4f6:	462b      	mov	r3, r5
 800b4f8:	f000 f80e 	bl	800b518 <fiprintf>
 800b4fc:	f000 f89f 	bl	800b63e <abort>
 800b500:	4b04      	ldr	r3, [pc, #16]	; (800b514 <__assert_func+0x38>)
 800b502:	461c      	mov	r4, r3
 800b504:	e7f3      	b.n	800b4ee <__assert_func+0x12>
 800b506:	bf00      	nop
 800b508:	20000018 	.word	0x20000018
 800b50c:	0800bc85 	.word	0x0800bc85
 800b510:	0800bc92 	.word	0x0800bc92
 800b514:	0800bcc0 	.word	0x0800bcc0

0800b518 <fiprintf>:
 800b518:	b40e      	push	{r1, r2, r3}
 800b51a:	b503      	push	{r0, r1, lr}
 800b51c:	4601      	mov	r1, r0
 800b51e:	ab03      	add	r3, sp, #12
 800b520:	4805      	ldr	r0, [pc, #20]	; (800b538 <fiprintf+0x20>)
 800b522:	f853 2b04 	ldr.w	r2, [r3], #4
 800b526:	6800      	ldr	r0, [r0, #0]
 800b528:	9301      	str	r3, [sp, #4]
 800b52a:	f7ff fe95 	bl	800b258 <_vfiprintf_r>
 800b52e:	b002      	add	sp, #8
 800b530:	f85d eb04 	ldr.w	lr, [sp], #4
 800b534:	b003      	add	sp, #12
 800b536:	4770      	bx	lr
 800b538:	20000018 	.word	0x20000018

0800b53c <_fstat_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4d07      	ldr	r5, [pc, #28]	; (800b55c <_fstat_r+0x20>)
 800b540:	2300      	movs	r3, #0
 800b542:	4604      	mov	r4, r0
 800b544:	4608      	mov	r0, r1
 800b546:	4611      	mov	r1, r2
 800b548:	602b      	str	r3, [r5, #0]
 800b54a:	f7f6 fe74 	bl	8002236 <_fstat>
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	d102      	bne.n	800b558 <_fstat_r+0x1c>
 800b552:	682b      	ldr	r3, [r5, #0]
 800b554:	b103      	cbz	r3, 800b558 <_fstat_r+0x1c>
 800b556:	6023      	str	r3, [r4, #0]
 800b558:	bd38      	pop	{r3, r4, r5, pc}
 800b55a:	bf00      	nop
 800b55c:	20005120 	.word	0x20005120

0800b560 <_isatty_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	4d06      	ldr	r5, [pc, #24]	; (800b57c <_isatty_r+0x1c>)
 800b564:	2300      	movs	r3, #0
 800b566:	4604      	mov	r4, r0
 800b568:	4608      	mov	r0, r1
 800b56a:	602b      	str	r3, [r5, #0]
 800b56c:	f7f6 fe73 	bl	8002256 <_isatty>
 800b570:	1c43      	adds	r3, r0, #1
 800b572:	d102      	bne.n	800b57a <_isatty_r+0x1a>
 800b574:	682b      	ldr	r3, [r5, #0]
 800b576:	b103      	cbz	r3, 800b57a <_isatty_r+0x1a>
 800b578:	6023      	str	r3, [r4, #0]
 800b57a:	bd38      	pop	{r3, r4, r5, pc}
 800b57c:	20005120 	.word	0x20005120

0800b580 <__ascii_mbtowc>:
 800b580:	b082      	sub	sp, #8
 800b582:	b901      	cbnz	r1, 800b586 <__ascii_mbtowc+0x6>
 800b584:	a901      	add	r1, sp, #4
 800b586:	b142      	cbz	r2, 800b59a <__ascii_mbtowc+0x1a>
 800b588:	b14b      	cbz	r3, 800b59e <__ascii_mbtowc+0x1e>
 800b58a:	7813      	ldrb	r3, [r2, #0]
 800b58c:	600b      	str	r3, [r1, #0]
 800b58e:	7812      	ldrb	r2, [r2, #0]
 800b590:	1e10      	subs	r0, r2, #0
 800b592:	bf18      	it	ne
 800b594:	2001      	movne	r0, #1
 800b596:	b002      	add	sp, #8
 800b598:	4770      	bx	lr
 800b59a:	4610      	mov	r0, r2
 800b59c:	e7fb      	b.n	800b596 <__ascii_mbtowc+0x16>
 800b59e:	f06f 0001 	mvn.w	r0, #1
 800b5a2:	e7f8      	b.n	800b596 <__ascii_mbtowc+0x16>

0800b5a4 <memmove>:
 800b5a4:	4288      	cmp	r0, r1
 800b5a6:	b510      	push	{r4, lr}
 800b5a8:	eb01 0402 	add.w	r4, r1, r2
 800b5ac:	d902      	bls.n	800b5b4 <memmove+0x10>
 800b5ae:	4284      	cmp	r4, r0
 800b5b0:	4623      	mov	r3, r4
 800b5b2:	d807      	bhi.n	800b5c4 <memmove+0x20>
 800b5b4:	1e43      	subs	r3, r0, #1
 800b5b6:	42a1      	cmp	r1, r4
 800b5b8:	d008      	beq.n	800b5cc <memmove+0x28>
 800b5ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5c2:	e7f8      	b.n	800b5b6 <memmove+0x12>
 800b5c4:	4402      	add	r2, r0
 800b5c6:	4601      	mov	r1, r0
 800b5c8:	428a      	cmp	r2, r1
 800b5ca:	d100      	bne.n	800b5ce <memmove+0x2a>
 800b5cc:	bd10      	pop	{r4, pc}
 800b5ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5d6:	e7f7      	b.n	800b5c8 <memmove+0x24>

0800b5d8 <_realloc_r>:
 800b5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5da:	4607      	mov	r7, r0
 800b5dc:	4614      	mov	r4, r2
 800b5de:	460e      	mov	r6, r1
 800b5e0:	b921      	cbnz	r1, 800b5ec <_realloc_r+0x14>
 800b5e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b5e6:	4611      	mov	r1, r2
 800b5e8:	f7fd b9c2 	b.w	8008970 <_malloc_r>
 800b5ec:	b922      	cbnz	r2, 800b5f8 <_realloc_r+0x20>
 800b5ee:	f7ff fc5d 	bl	800aeac <_free_r>
 800b5f2:	4625      	mov	r5, r4
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5f8:	f000 f828 	bl	800b64c <_malloc_usable_size_r>
 800b5fc:	42a0      	cmp	r0, r4
 800b5fe:	d20f      	bcs.n	800b620 <_realloc_r+0x48>
 800b600:	4621      	mov	r1, r4
 800b602:	4638      	mov	r0, r7
 800b604:	f7fd f9b4 	bl	8008970 <_malloc_r>
 800b608:	4605      	mov	r5, r0
 800b60a:	2800      	cmp	r0, #0
 800b60c:	d0f2      	beq.n	800b5f4 <_realloc_r+0x1c>
 800b60e:	4631      	mov	r1, r6
 800b610:	4622      	mov	r2, r4
 800b612:	f7fd f996 	bl	8008942 <memcpy>
 800b616:	4631      	mov	r1, r6
 800b618:	4638      	mov	r0, r7
 800b61a:	f7ff fc47 	bl	800aeac <_free_r>
 800b61e:	e7e9      	b.n	800b5f4 <_realloc_r+0x1c>
 800b620:	4635      	mov	r5, r6
 800b622:	e7e7      	b.n	800b5f4 <_realloc_r+0x1c>

0800b624 <__ascii_wctomb>:
 800b624:	b149      	cbz	r1, 800b63a <__ascii_wctomb+0x16>
 800b626:	2aff      	cmp	r2, #255	; 0xff
 800b628:	bf85      	ittet	hi
 800b62a:	238a      	movhi	r3, #138	; 0x8a
 800b62c:	6003      	strhi	r3, [r0, #0]
 800b62e:	700a      	strbls	r2, [r1, #0]
 800b630:	f04f 30ff 	movhi.w	r0, #4294967295
 800b634:	bf98      	it	ls
 800b636:	2001      	movls	r0, #1
 800b638:	4770      	bx	lr
 800b63a:	4608      	mov	r0, r1
 800b63c:	4770      	bx	lr

0800b63e <abort>:
 800b63e:	b508      	push	{r3, lr}
 800b640:	2006      	movs	r0, #6
 800b642:	f000 f833 	bl	800b6ac <raise>
 800b646:	2001      	movs	r0, #1
 800b648:	f7f6 fda6 	bl	8002198 <_exit>

0800b64c <_malloc_usable_size_r>:
 800b64c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b650:	1f18      	subs	r0, r3, #4
 800b652:	2b00      	cmp	r3, #0
 800b654:	bfbc      	itt	lt
 800b656:	580b      	ldrlt	r3, [r1, r0]
 800b658:	18c0      	addlt	r0, r0, r3
 800b65a:	4770      	bx	lr

0800b65c <_raise_r>:
 800b65c:	291f      	cmp	r1, #31
 800b65e:	b538      	push	{r3, r4, r5, lr}
 800b660:	4604      	mov	r4, r0
 800b662:	460d      	mov	r5, r1
 800b664:	d904      	bls.n	800b670 <_raise_r+0x14>
 800b666:	2316      	movs	r3, #22
 800b668:	6003      	str	r3, [r0, #0]
 800b66a:	f04f 30ff 	mov.w	r0, #4294967295
 800b66e:	bd38      	pop	{r3, r4, r5, pc}
 800b670:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b672:	b112      	cbz	r2, 800b67a <_raise_r+0x1e>
 800b674:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b678:	b94b      	cbnz	r3, 800b68e <_raise_r+0x32>
 800b67a:	4620      	mov	r0, r4
 800b67c:	f000 f830 	bl	800b6e0 <_getpid_r>
 800b680:	462a      	mov	r2, r5
 800b682:	4601      	mov	r1, r0
 800b684:	4620      	mov	r0, r4
 800b686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b68a:	f000 b817 	b.w	800b6bc <_kill_r>
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d00a      	beq.n	800b6a8 <_raise_r+0x4c>
 800b692:	1c59      	adds	r1, r3, #1
 800b694:	d103      	bne.n	800b69e <_raise_r+0x42>
 800b696:	2316      	movs	r3, #22
 800b698:	6003      	str	r3, [r0, #0]
 800b69a:	2001      	movs	r0, #1
 800b69c:	e7e7      	b.n	800b66e <_raise_r+0x12>
 800b69e:	2400      	movs	r4, #0
 800b6a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	4798      	blx	r3
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	e7e0      	b.n	800b66e <_raise_r+0x12>

0800b6ac <raise>:
 800b6ac:	4b02      	ldr	r3, [pc, #8]	; (800b6b8 <raise+0xc>)
 800b6ae:	4601      	mov	r1, r0
 800b6b0:	6818      	ldr	r0, [r3, #0]
 800b6b2:	f7ff bfd3 	b.w	800b65c <_raise_r>
 800b6b6:	bf00      	nop
 800b6b8:	20000018 	.word	0x20000018

0800b6bc <_kill_r>:
 800b6bc:	b538      	push	{r3, r4, r5, lr}
 800b6be:	4d07      	ldr	r5, [pc, #28]	; (800b6dc <_kill_r+0x20>)
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	4608      	mov	r0, r1
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	602b      	str	r3, [r5, #0]
 800b6ca:	f7f6 fd55 	bl	8002178 <_kill>
 800b6ce:	1c43      	adds	r3, r0, #1
 800b6d0:	d102      	bne.n	800b6d8 <_kill_r+0x1c>
 800b6d2:	682b      	ldr	r3, [r5, #0]
 800b6d4:	b103      	cbz	r3, 800b6d8 <_kill_r+0x1c>
 800b6d6:	6023      	str	r3, [r4, #0]
 800b6d8:	bd38      	pop	{r3, r4, r5, pc}
 800b6da:	bf00      	nop
 800b6dc:	20005120 	.word	0x20005120

0800b6e0 <_getpid_r>:
 800b6e0:	f7f6 bd42 	b.w	8002168 <_getpid>

0800b6e4 <_init>:
 800b6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e6:	bf00      	nop
 800b6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ea:	bc08      	pop	{r3}
 800b6ec:	469e      	mov	lr, r3
 800b6ee:	4770      	bx	lr

0800b6f0 <_fini>:
 800b6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f2:	bf00      	nop
 800b6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6f6:	bc08      	pop	{r3}
 800b6f8:	469e      	mov	lr, r3
 800b6fa:	4770      	bx	lr
