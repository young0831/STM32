
08.KEYPAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fd4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08008178  08008178  00018178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085dc  080085dc  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  080085dc  080085dc  000185dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085e4  080085e4  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085e4  080085e4  000185e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085e8  080085e8  000185e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  080085ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a74  20000224  08008810  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c98  08008810  00020c98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc16  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003852  00000000  00000000  0003de6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  000416c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  00042cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000503e  00000000  00000000  000441d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194a0  00000000  00000000  0004920e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bbad  00000000  00000000  000626ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe25b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f24  00000000  00000000  000fe2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000224 	.word	0x20000224
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800815c 	.word	0x0800815c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000228 	.word	0x20000228
 80001dc:	0800815c 	.word	0x0800815c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <queue_empty>:
int front1=-1;  // read index
int rear1=-1;   // insert index
unsigned char queue[QUEUE_MAX];

int queue_empty(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
	if (front1==rear1) //front와 rear가 같으면 큐는 비어있는 상태
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <queue_empty+0x20>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <queue_empty+0x24>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d101      	bne.n	8000ec4 <queue_empty+0x14>
	     return TRUE;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <queue_empty+0x16>
	else return FALSE;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <queue_full>:

int queue_full(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
	int tmp=(rear1+1)%QUEUE_MAX; //원형 큐에서 rear+1을 MAX로 나눈 나머지값이
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <queue_full+0x40>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <queue_full+0x44>)
 8000ee6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eea:	1151      	asrs	r1, r2, #5
 8000eec:	17da      	asrs	r2, r3, #31
 8000eee:	1a8a      	subs	r2, r1, r2
 8000ef0:	2164      	movs	r1, #100	; 0x64
 8000ef2:	fb01 f202 	mul.w	r2, r1, r2
 8000ef6:	1a9b      	subs	r3, r3, r2
 8000ef8:	607b      	str	r3, [r7, #4]
	if (tmp == front1) //front와 같으면 큐는 가득차 있는 상태
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <queue_full+0x48>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d101      	bne.n	8000f08 <queue_full+0x30>
		return TRUE;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <queue_full+0x32>
	else 
		return FALSE;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000004 	.word	0x20000004
 8000f1c:	51eb851f 	.word	0x51eb851f
 8000f20:	20000000 	.word	0x20000000

08000f24 <insert_queue>:
void insert_queue(unsigned char value)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	if (queue_full())
 8000f2e:	f7ff ffd3 	bl	8000ed8 <queue_full>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <insert_queue+0x1c>
	{
		printf("Queue is Full.\n");
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <insert_queue+0x4c>)
 8000f3a:	f005 f92d 	bl	8006198 <puts>
	else
	{
		rear1 = (rear1+1) % QUEUE_MAX;
		queue[rear1]=value;
	}
}
 8000f3e:	e013      	b.n	8000f68 <insert_queue+0x44>
		rear1 = (rear1+1) % QUEUE_MAX;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <insert_queue+0x50>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <insert_queue+0x54>)
 8000f48:	fb83 1302 	smull	r1, r3, r3, r2
 8000f4c:	1159      	asrs	r1, r3, #5
 8000f4e:	17d3      	asrs	r3, r2, #31
 8000f50:	1acb      	subs	r3, r1, r3
 8000f52:	2164      	movs	r1, #100	; 0x64
 8000f54:	fb01 f303 	mul.w	r3, r1, r3
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <insert_queue+0x50>)
 8000f5c:	6013      	str	r3, [r2, #0]
		queue[rear1]=value;
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <insert_queue+0x50>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4906      	ldr	r1, [pc, #24]	; (8000f7c <insert_queue+0x58>)
 8000f64:	79fa      	ldrb	r2, [r7, #7]
 8000f66:	54ca      	strb	r2, [r1, r3]
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	08008178 	.word	0x08008178
 8000f74:	20000004 	.word	0x20000004
 8000f78:	51eb851f 	.word	0x51eb851f
 8000f7c:	200006e4 	.word	0x200006e4

08000f80 <read_queue>:

unsigned char read_queue() //큐에있는 값 가져오는 함수
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

	if (queue_empty())
 8000f84:	f7ff ff94 	bl	8000eb0 <queue_empty>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <read_queue+0x16>
		printf("Queue is Empty.\n");
 8000f8e:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <read_queue+0x40>)
 8000f90:	f005 f902 	bl	8006198 <puts>
	{
		front1 = (front1+1) % QUEUE_MAX;
//printf("%c ", queue[front]);
		return queue[front1];
	}
}
 8000f94:	e012      	b.n	8000fbc <read_queue+0x3c>
		front1 = (front1+1) % QUEUE_MAX;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <read_queue+0x44>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1c5a      	adds	r2, r3, #1
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <read_queue+0x48>)
 8000f9e:	fb83 1302 	smull	r1, r3, r3, r2
 8000fa2:	1159      	asrs	r1, r3, #5
 8000fa4:	17d3      	asrs	r3, r2, #31
 8000fa6:	1acb      	subs	r3, r1, r3
 8000fa8:	2164      	movs	r1, #100	; 0x64
 8000faa:	fb01 f303 	mul.w	r3, r1, r3
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <read_queue+0x44>)
 8000fb2:	6013      	str	r3, [r2, #0]
		return queue[front1];
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <read_queue+0x44>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <read_queue+0x4c>)
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	08008188 	.word	0x08008188
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	51eb851f 	.word	0x51eb851f
 8000fcc:	200006e4 	.word	0x200006e4

08000fd0 <keypadInit>:
GPIO_TypeDef* keypadColPort[4] = {GPIOC, GPIOC, GPIOC, GPIOC}; //C1~C4
uint16_t keypadRowPin[4] = {GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7}; //R1~R4 GPIO Input & Pull-up으로 설정을 해야 한다.
uint16_t keypadColPin[4] = {GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11}; //C1~C4  GPIO Output으로만 설정 한다.

void keypadInit()
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	for(uint8_t col = 0; col < 4; col++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	71fb      	strb	r3, [r7, #7]
 8000fda:	e00e      	b.n	8000ffa <keypadInit+0x2a>
	{
		HAL_GPIO_WritePin(keypadColPort[col], keypadColPin[col], SET); //초기 값 1로 셋팅
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <keypadInit+0x3c>)
 8000fe0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <keypadInit+0x40>)
 8000fe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fec:	2201      	movs	r2, #1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f001 fb5c 	bl	80026ac <HAL_GPIO_WritePin>
	for(uint8_t col = 0; col < 4; col++)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	71fb      	strb	r3, [r7, #7]
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	d9ed      	bls.n	8000fdc <keypadInit+0xc>
	}
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000018 	.word	0x20000018
 8001010:	20000030 	.word	0x20000030

08001014 <getKeypadState>:

uint8_t getKeypadState(uint8_t col, uint8_t row)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	460a      	mov	r2, r1
 800101e:	71fb      	strb	r3, [r7, #7]
 8001020:	4613      	mov	r3, r2
 8001022:	71bb      	strb	r3, [r7, #6]
#if 1
	uint8_t keypadChar[4][4] = {
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <getKeypadState+0xe0>)
 8001026:	f107 040c 	add.w	r4, r7, #12
 800102a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0, 1, 1, 1},
			{1, 1, 1, 1},
			{1, 1, 1, 1},
			{1, 1, 1, 1},
	};
	uint8_t curState = 1;
 8001030:	2301      	movs	r3, #1
 8001032:	77fb      	strb	r3, [r7, #31]

	HAL_GPIO_WritePin(keypadColPort[col], keypadColPin[col], RESET);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4a30      	ldr	r2, [pc, #192]	; (80010f8 <getKeypadState+0xe4>)
 8001038:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	4a2f      	ldr	r2, [pc, #188]	; (80010fc <getKeypadState+0xe8>)
 8001040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	f001 fb30 	bl	80026ac <HAL_GPIO_WritePin>
	curState = HAL_GPIO_ReadPin(keypadRowPort[row], keypadRowPin[row]);
 800104c:	79bb      	ldrb	r3, [r7, #6]
 800104e:	4a2c      	ldr	r2, [pc, #176]	; (8001100 <getKeypadState+0xec>)
 8001050:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001054:	79bb      	ldrb	r3, [r7, #6]
 8001056:	492b      	ldr	r1, [pc, #172]	; (8001104 <getKeypadState+0xf0>)
 8001058:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800105c:	4619      	mov	r1, r3
 800105e:	4610      	mov	r0, r2
 8001060:	f001 fb0c 	bl	800267c <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	77fb      	strb	r3, [r7, #31]

	HAL_GPIO_WritePin(keypadColPort[col], keypadColPin[col], SET);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <getKeypadState+0xe4>)
 800106c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4a22      	ldr	r2, [pc, #136]	; (80010fc <getKeypadState+0xe8>)
 8001074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001078:	2201      	movs	r2, #1
 800107a:	4619      	mov	r1, r3
 800107c:	f001 fb16 	bl	80026ac <HAL_GPIO_WritePin>

	if(curState == PUSHED && prevState[col][row] == RELEASED)
 8001080:	7ffb      	ldrb	r3, [r7, #31]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d112      	bne.n	80010ac <getKeypadState+0x98>
 8001086:	79fa      	ldrb	r2, [r7, #7]
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	491f      	ldr	r1, [pc, #124]	; (8001108 <getKeypadState+0xf4>)
 800108c:	0092      	lsls	r2, r2, #2
 800108e:	440a      	add	r2, r1
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d109      	bne.n	80010ac <getKeypadState+0x98>
	{
		prevState[col][row] = curState;
 8001098:	79fa      	ldrb	r2, [r7, #7]
 800109a:	79bb      	ldrb	r3, [r7, #6]
 800109c:	491a      	ldr	r1, [pc, #104]	; (8001108 <getKeypadState+0xf4>)
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	440a      	add	r2, r1
 80010a2:	4413      	add	r3, r2
 80010a4:	7ffa      	ldrb	r2, [r7, #31]
 80010a6:	701a      	strb	r2, [r3, #0]
		return 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	e01e      	b.n	80010ea <getKeypadState+0xd6>
	}
	else if (curState == RELEASED && prevState[col][row] == PUSHED)
 80010ac:	7ffb      	ldrb	r3, [r7, #31]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d11a      	bne.n	80010e8 <getKeypadState+0xd4>
 80010b2:	79fa      	ldrb	r2, [r7, #7]
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	4914      	ldr	r1, [pc, #80]	; (8001108 <getKeypadState+0xf4>)
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	440a      	add	r2, r1
 80010bc:	4413      	add	r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d111      	bne.n	80010e8 <getKeypadState+0xd4>
	{
		prevState[col][row] = curState;
 80010c4:	79fa      	ldrb	r2, [r7, #7]
 80010c6:	79bb      	ldrb	r3, [r7, #6]
 80010c8:	490f      	ldr	r1, [pc, #60]	; (8001108 <getKeypadState+0xf4>)
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	440a      	add	r2, r1
 80010ce:	4413      	add	r3, r2
 80010d0:	7ffa      	ldrb	r2, [r7, #31]
 80010d2:	701a      	strb	r2, [r3, #0]
		return keypadChar[col][row];
 80010d4:	79fa      	ldrb	r2, [r7, #7]
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	0092      	lsls	r2, r2, #2
 80010da:	f107 0120 	add.w	r1, r7, #32
 80010de:	440a      	add	r2, r1
 80010e0:	4413      	add	r3, r2
 80010e2:	3b14      	subs	r3, #20
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	e000      	b.n	80010ea <getKeypadState+0xd6>
	}
	return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd90      	pop	{r4, r7, pc}
 80010f2:	bf00      	nop
 80010f4:	08008198 	.word	0x08008198
 80010f8:	20000018 	.word	0x20000018
 80010fc:	20000030 	.word	0x20000030
 8001100:	20000008 	.word	0x20000008
 8001104:	20000028 	.word	0x20000028
 8001108:	20000038 	.word	0x20000038

0800110c <keypadScan>:

uint8_t keypadScan()
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	uint8_t data;

	for(uint8_t col=0; col<4; col++)
 8001112:	2300      	movs	r3, #0
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	e018      	b.n	800114a <keypadScan+0x3e>
	{
		for(uint8_t row=0; row<4; row++)
 8001118:	2300      	movs	r3, #0
 800111a:	71bb      	strb	r3, [r7, #6]
 800111c:	e00f      	b.n	800113e <keypadScan+0x32>
		{
			data = getKeypadState(col, row);
 800111e:	79ba      	ldrb	r2, [r7, #6]
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff75 	bl	8001014 <getKeypadState>
 800112a:	4603      	mov	r3, r0
 800112c:	717b      	strb	r3, [r7, #5]
			if(data != 0)
 800112e:	797b      	ldrb	r3, [r7, #5]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <keypadScan+0x2c>
			{
				return data;
 8001134:	797b      	ldrb	r3, [r7, #5]
 8001136:	e00c      	b.n	8001152 <keypadScan+0x46>
		for(uint8_t row=0; row<4; row++)
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	3301      	adds	r3, #1
 800113c:	71bb      	strb	r3, [r7, #6]
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	2b03      	cmp	r3, #3
 8001142:	d9ec      	bls.n	800111e <keypadScan+0x12>
	for(uint8_t col=0; col<4; col++)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	3301      	adds	r3, #1
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b03      	cmp	r3, #3
 800114e:	d9e3      	bls.n	8001118 <keypadScan+0xc>
			}
		}
	}
	return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <multiple_number>:

int multiple_number(char a, char b, char c)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	460b      	mov	r3, r1
 8001168:	71bb      	strb	r3, [r7, #6]
 800116a:	4613      	mov	r3, r2
 800116c:	717b      	strb	r3, [r7, #5]
	int num1, num2;
	num1 = atoi(a);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f004 f973 	bl	800545c <atoi>
 8001176:	6138      	str	r0, [r7, #16]
	num2 = atoi(c);
 8001178:	797b      	ldrb	r3, [r7, #5]
 800117a:	4618      	mov	r0, r3
 800117c:	f004 f96e 	bl	800545c <atoi>
 8001180:	60f8      	str	r0, [r7, #12]
	int result = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]

	switch (c)
 8001186:	797b      	ldrb	r3, [r7, #5]
 8001188:	3b2a      	subs	r3, #42	; 0x2a
 800118a:	2b05      	cmp	r3, #5
 800118c:	d824      	bhi.n	80011d8 <multiple_number+0x7c>
 800118e:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <multiple_number+0x38>)
 8001190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001194:	080011c1 	.word	0x080011c1
 8001198:	080011ad 	.word	0x080011ad
 800119c:	080011d9 	.word	0x080011d9
 80011a0:	080011b7 	.word	0x080011b7
 80011a4:	080011d9 	.word	0x080011d9
 80011a8:	080011cd 	.word	0x080011cd
	{
	case '+' :
		result = num1 + num2;
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4413      	add	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]
		break;
 80011b4:	e010      	b.n	80011d8 <multiple_number+0x7c>
	case '-' :
		result = num1 - num2;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	617b      	str	r3, [r7, #20]
		break;
 80011be:	e00b      	b.n	80011d8 <multiple_number+0x7c>
	case '*' :
		result = num1 * num2;
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	fb02 f303 	mul.w	r3, r2, r3
 80011c8:	617b      	str	r3, [r7, #20]
		break;
 80011ca:	e005      	b.n	80011d8 <multiple_number+0x7c>
	case '/' :
		result = num1 / num2;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80011d4:	617b      	str	r3, [r7, #20]
		break;
 80011d6:	bf00      	nop
	}
	return result;
 80011d8:	697b      	ldr	r3, [r7, #20]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop

080011e4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80011ec:	1d39      	adds	r1, r7, #4
 80011ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011f2:	2201      	movs	r2, #1
 80011f4:	4803      	ldr	r0, [pc, #12]	; (8001204 <__io_putchar+0x20>)
 80011f6:	f002 ff8e 	bl	8004116 <HAL_UART_Transmit>

  return ch;
 80011fa:	687b      	ldr	r3, [r7, #4]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200008cc 	.word	0x200008cc

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120e:	f000 fefb 	bl	8002008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001212:	f000 f86d 	bl	80012f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001216:	f000 fa77 	bl	8001708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800121a:	f000 fa4b 	bl	80016b4 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 800121e:	f000 fa25 	bl	800166c <MX_TIM11_Init>
  MX_TIM2_Init();
 8001222:	f000 f8fb 	bl	800141c <MX_TIM2_Init>
  MX_I2C1_Init();
 8001226:	f000 f8cb 	bl	80013c0 <MX_I2C1_Init>
  MX_TIM3_Init();
 800122a:	f000 f943 	bl	80014b4 <MX_TIM3_Init>
  MX_TIM5_Init();
 800122e:	f000 f9b7 	bl	80015a0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001232:	2201      	movs	r2, #1
 8001234:	4928      	ldr	r1, [pc, #160]	; (80012d8 <main+0xd0>)
 8001236:	4829      	ldr	r0, [pc, #164]	; (80012dc <main+0xd4>)
 8001238:	f002 ffff 	bl	800423a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 800123c:	4828      	ldr	r0, [pc, #160]	; (80012e0 <main+0xd8>)
 800123e:	f002 f889 	bl	8003354 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);	// for make delay_us
 8001242:	4828      	ldr	r0, [pc, #160]	; (80012e4 <main+0xdc>)
 8001244:	f002 f886 	bl	8003354 <HAL_TIM_Base_Start_IT>
  keypadInit();
 8001248:	f7ff fec2 	bl	8000fd0 <keypadInit>
  while(1)
  {
	  char buffer[10] = { 0 };
 800124c:	2300      	movs	r3, #0
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	809a      	strh	r2, [r3, #4]
	  int i = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
	  int result;
	  if (!queue_empty())
 800125c:	f7ff fe28 	bl	8000eb0 <queue_empty>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10c      	bne.n	8001280 <main+0x78>
	  {
		  uint8_t key_value;
		  key_value = read_queue();
 8001266:	f7ff fe8b 	bl	8000f80 <read_queue>
 800126a:	4603      	mov	r3, r0
 800126c:	74fb      	strb	r3, [r7, #19]
		  buffer[i] = key_value;
 800126e:	463a      	mov	r2, r7
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	4413      	add	r3, r2
 8001274:	7cfa      	ldrb	r2, [r7, #19]
 8001276:	701a      	strb	r2, [r3, #0]
		  printf("%c", key_value);
 8001278:	7cfb      	ldrb	r3, [r7, #19]
 800127a:	4618      	mov	r0, r3
 800127c:	f004 ff08 	bl	8006090 <putchar>

	  }
	  i = (i + 1) % 3;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <main+0xe0>)
 8001286:	fb83 3102 	smull	r3, r1, r3, r2
 800128a:	17d3      	asrs	r3, r2, #31
 800128c:	1ac9      	subs	r1, r1, r3
 800128e:	460b      	mov	r3, r1
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	440b      	add	r3, r1
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	617b      	str	r3, [r7, #20]
	  if (i % 3 == 2)
 8001298:	6979      	ldr	r1, [r7, #20]
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <main+0xe0>)
 800129c:	fb83 3201 	smull	r3, r2, r3, r1
 80012a0:	17cb      	asrs	r3, r1, #31
 80012a2:	1ad2      	subs	r2, r2, r3
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	1aca      	subs	r2, r1, r3
 80012ac:	2a02      	cmp	r2, #2
 80012ae:	d1cd      	bne.n	800124c <main+0x44>
	  {
		result = multiple_number(buffer[0], buffer[1], buffer[2]);
 80012b0:	783b      	ldrb	r3, [r7, #0]
 80012b2:	7879      	ldrb	r1, [r7, #1]
 80012b4:	78ba      	ldrb	r2, [r7, #2]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff50 	bl	800115c <multiple_number>
 80012bc:	60f8      	str	r0, [r7, #12]
		printf("%c %c %c = %d", buffer[0], buffer[1], buffer[2], result);
 80012be:	783b      	ldrb	r3, [r7, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	787b      	ldrb	r3, [r7, #1]
 80012c4:	461a      	mov	r2, r3
 80012c6:	78bb      	ldrb	r3, [r7, #2]
 80012c8:	4618      	mov	r0, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	4603      	mov	r3, r0
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <main+0xe4>)
 80012d2:	f004 fec5 	bl	8006060 <iprintf>
  {
 80012d6:	e7b9      	b.n	800124c <main+0x44>
 80012d8:	2000087c 	.word	0x2000087c
 80012dc:	200008cc 	.word	0x200008cc
 80012e0:	20000830 	.word	0x20000830
 80012e4:	20000884 	.word	0x20000884
 80012e8:	55555556 	.word	0x55555556
 80012ec:	080081cc 	.word	0x080081cc

080012f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b094      	sub	sp, #80	; 0x50
 80012f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	2230      	movs	r2, #48	; 0x30
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f004 f9e1 	bl	80056c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <SystemClock_Config+0xc8>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	4a26      	ldr	r2, [pc, #152]	; (80013b8 <SystemClock_Config+0xc8>)
 800131e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001322:	6413      	str	r3, [r2, #64]	; 0x40
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <SystemClock_Config+0xc8>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <SystemClock_Config+0xcc>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a20      	ldr	r2, [pc, #128]	; (80013bc <SystemClock_Config+0xcc>)
 800133a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <SystemClock_Config+0xcc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800134c:	2302      	movs	r3, #2
 800134e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001350:	2301      	movs	r3, #1
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001354:	2310      	movs	r3, #16
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001358:	2302      	movs	r3, #2
 800135a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800135c:	2300      	movs	r3, #0
 800135e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001360:	2308      	movs	r3, #8
 8001362:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001364:	2354      	movs	r3, #84	; 0x54
 8001366:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001368:	2302      	movs	r3, #2
 800136a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800136c:	2304      	movs	r3, #4
 800136e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001370:	f107 0320 	add.w	r3, r7, #32
 8001374:	4618      	mov	r0, r3
 8001376:	f001 faf7 	bl	8002968 <HAL_RCC_OscConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001380:	f000 faae 	bl	80018e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001384:	230f      	movs	r3, #15
 8001386:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001388:	2302      	movs	r3, #2
 800138a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001394:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	2102      	movs	r1, #2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 fd59 	bl	8002e58 <HAL_RCC_ClockConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013ac:	f000 fa98 	bl	80018e0 <Error_Handler>
  }
}
 80013b0:	bf00      	nop
 80013b2:	3750      	adds	r7, #80	; 0x50
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40007000 	.word	0x40007000

080013c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_I2C1_Init+0x50>)
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <MX_I2C1_Init+0x54>)
 80013c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_I2C1_Init+0x50>)
 80013cc:	4a12      	ldr	r2, [pc, #72]	; (8001418 <MX_I2C1_Init+0x58>)
 80013ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_I2C1_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_I2C1_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_I2C1_Init+0x50>)
 80013de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_I2C1_Init+0x50>)
 80013fe:	f001 f96f 	bl	80026e0 <HAL_I2C_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001408:	f000 fa6a 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000074c 	.word	0x2000074c
 8001414:	40005400 	.word	0x40005400
 8001418:	000186a0 	.word	0x000186a0

0800141c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <MX_TIM2_Init+0x94>)
 800143a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001442:	2253      	movs	r2, #83	; 0x53
 8001444:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <MX_TIM2_Init+0x94>)
 800144e:	f04f 32ff 	mov.w	r2, #4294967295
 8001452:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <MX_TIM2_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001460:	4813      	ldr	r0, [pc, #76]	; (80014b0 <MX_TIM2_Init+0x94>)
 8001462:	f001 ff27 	bl	80032b4 <HAL_TIM_Base_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800146c:	f000 fa38 	bl	80018e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001474:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	4619      	mov	r1, r3
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <MX_TIM2_Init+0x94>)
 800147e:	f002 f9e5 	bl	800384c <HAL_TIM_ConfigClockSource>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001488:	f000 fa2a 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_TIM2_Init+0x94>)
 800149a:	f002 fd6d 	bl	8003f78 <HAL_TIMEx_MasterConfigSynchronization>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014a4:	f000 fa1c 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000884 	.word	0x20000884

080014b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08e      	sub	sp, #56	; 0x38
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	f107 0320 	add.w	r3, r7, #32
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
 80014e0:	615a      	str	r2, [r3, #20]
 80014e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014e4:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <MX_TIM3_Init+0xe4>)
 80014e6:	4a2d      	ldr	r2, [pc, #180]	; (800159c <MX_TIM3_Init+0xe8>)
 80014e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 52.5-1;
 80014ea:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <MX_TIM3_Init+0xe4>)
 80014ec:	2233      	movs	r2, #51	; 0x33
 80014ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f0:	4b29      	ldr	r3, [pc, #164]	; (8001598 <MX_TIM3_Init+0xe4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400-1;
 80014f6:	4b28      	ldr	r3, [pc, #160]	; (8001598 <MX_TIM3_Init+0xe4>)
 80014f8:	f240 128f 	movw	r2, #399	; 0x18f
 80014fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <MX_TIM3_Init+0xe4>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <MX_TIM3_Init+0xe4>)
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800150a:	4823      	ldr	r0, [pc, #140]	; (8001598 <MX_TIM3_Init+0xe4>)
 800150c:	f001 fed2 	bl	80032b4 <HAL_TIM_Base_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001516:	f000 f9e3 	bl	80018e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001524:	4619      	mov	r1, r3
 8001526:	481c      	ldr	r0, [pc, #112]	; (8001598 <MX_TIM3_Init+0xe4>)
 8001528:	f002 f990 	bl	800384c <HAL_TIM_ConfigClockSource>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001532:	f000 f9d5 	bl	80018e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001536:	4818      	ldr	r0, [pc, #96]	; (8001598 <MX_TIM3_Init+0xe4>)
 8001538:	f001 ff6e 	bl	8003418 <HAL_TIM_PWM_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001542:	f000 f9cd 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800154e:	f107 0320 	add.w	r3, r7, #32
 8001552:	4619      	mov	r1, r3
 8001554:	4810      	ldr	r0, [pc, #64]	; (8001598 <MX_TIM3_Init+0xe4>)
 8001556:	f002 fd0f 	bl	8003f78 <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001560:	f000 f9be 	bl	80018e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001564:	2360      	movs	r3, #96	; 0x60
 8001566:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8001568:	23c7      	movs	r3, #199	; 0xc7
 800156a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2200      	movs	r2, #0
 8001578:	4619      	mov	r1, r3
 800157a:	4807      	ldr	r0, [pc, #28]	; (8001598 <MX_TIM3_Init+0xe4>)
 800157c:	f002 f8a4 	bl	80036c8 <HAL_TIM_PWM_ConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001586:	f000 f9ab 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <MX_TIM3_Init+0xe4>)
 800158c:	f000 fa9e 	bl	8001acc <HAL_TIM_MspPostInit>

}
 8001590:	bf00      	nop
 8001592:	3738      	adds	r7, #56	; 0x38
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200007e8 	.word	0x200007e8
 800159c:	40000400 	.word	0x40000400

080015a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a6:	f107 0320 	add.w	r3, r7, #32
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]
 80015be:	615a      	str	r2, [r3, #20]
 80015c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015c2:	4b28      	ldr	r3, [pc, #160]	; (8001664 <MX_TIM5_Init+0xc4>)
 80015c4:	4a28      	ldr	r2, [pc, #160]	; (8001668 <MX_TIM5_Init+0xc8>)
 80015c6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1680-1;
 80015c8:	4b26      	ldr	r3, [pc, #152]	; (8001664 <MX_TIM5_Init+0xc4>)
 80015ca:	f240 628f 	movw	r2, #1679	; 0x68f
 80015ce:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <MX_TIM5_Init+0xc4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <MX_TIM5_Init+0xc4>)
 80015d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015dc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015de:	4b21      	ldr	r3, [pc, #132]	; (8001664 <MX_TIM5_Init+0xc4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e4:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <MX_TIM5_Init+0xc4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80015ea:	481e      	ldr	r0, [pc, #120]	; (8001664 <MX_TIM5_Init+0xc4>)
 80015ec:	f001 ff14 	bl	8003418 <HAL_TIM_PWM_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80015f6:	f000 f973 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001602:	f107 0320 	add.w	r3, r7, #32
 8001606:	4619      	mov	r1, r3
 8001608:	4816      	ldr	r0, [pc, #88]	; (8001664 <MX_TIM5_Init+0xc4>)
 800160a:	f002 fcb5 	bl	8003f78 <HAL_TIMEx_MasterConfigSynchronization>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001614:	f000 f964 	bl	80018e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001618:	2360      	movs	r3, #96	; 0x60
 800161a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_TIM5_Init+0xc4>)
 8001630:	f002 f84a 	bl	80036c8 <HAL_TIM_PWM_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800163a:	f000 f951 	bl	80018e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2204      	movs	r2, #4
 8001642:	4619      	mov	r1, r3
 8001644:	4807      	ldr	r0, [pc, #28]	; (8001664 <MX_TIM5_Init+0xc4>)
 8001646:	f002 f83f 	bl	80036c8 <HAL_TIM_PWM_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001650:	f000 f946 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001654:	4803      	ldr	r0, [pc, #12]	; (8001664 <MX_TIM5_Init+0xc4>)
 8001656:	f000 fa39 	bl	8001acc <HAL_TIM_MspPostInit>

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200007a0 	.word	0x200007a0
 8001668:	40000c00 	.word	0x40000c00

0800166c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_TIM11_Init+0x40>)
 8001672:	4a0f      	ldr	r2, [pc, #60]	; (80016b0 <MX_TIM11_Init+0x44>)
 8001674:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <MX_TIM11_Init+0x40>)
 8001678:	2253      	movs	r2, #83	; 0x53
 800167a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_TIM11_Init+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <MX_TIM11_Init+0x40>)
 8001684:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001688:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_TIM11_Init+0x40>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_TIM11_Init+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_TIM11_Init+0x40>)
 8001698:	f001 fe0c 	bl	80032b4 <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80016a2:	f000 f91d 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000830 	.word	0x20000830
 80016b0:	40014800 	.word	0x40014800

080016b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <MX_USART2_UART_Init+0x50>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ec:	f002 fcc6 	bl	800407c <HAL_UART_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016f6:	f000 f8f3 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200008cc 	.word	0x200008cc
 8001704:	40004400 	.word	0x40004400

08001708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b4f      	ldr	r3, [pc, #316]	; (8001860 <MX_GPIO_Init+0x158>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a4e      	ldr	r2, [pc, #312]	; (8001860 <MX_GPIO_Init+0x158>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <MX_GPIO_Init+0x158>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b48      	ldr	r3, [pc, #288]	; (8001860 <MX_GPIO_Init+0x158>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a47      	ldr	r2, [pc, #284]	; (8001860 <MX_GPIO_Init+0x158>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b45      	ldr	r3, [pc, #276]	; (8001860 <MX_GPIO_Init+0x158>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b41      	ldr	r3, [pc, #260]	; (8001860 <MX_GPIO_Init+0x158>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a40      	ldr	r2, [pc, #256]	; (8001860 <MX_GPIO_Init+0x158>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <MX_GPIO_Init+0x158>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b3a      	ldr	r3, [pc, #232]	; (8001860 <MX_GPIO_Init+0x158>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a39      	ldr	r2, [pc, #228]	; (8001860 <MX_GPIO_Init+0x158>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b37      	ldr	r3, [pc, #220]	; (8001860 <MX_GPIO_Init+0x158>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CE_DS1302_Pin|IO_DS1302_Pin|CLK_DS1302_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8001794:	4833      	ldr	r0, [pc, #204]	; (8001864 <MX_GPIO_Init+0x15c>)
 8001796:	f000 ff89 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_74HC595_Pin|LATCH_74HC595_Pin|SER_74HC595_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 4124 	mov.w	r1, #41984	; 0xa400
 80017a0:	4831      	ldr	r0, [pc, #196]	; (8001868 <MX_GPIO_Init+0x160>)
 80017a2:	f000 ff83 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COL1_KEYPAD_Pin|COL2_KEYPAD_Pin|COL3_KEYPAD_Pin|COL4_KEYPAD_Pin, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80017ac:	482f      	ldr	r0, [pc, #188]	; (800186c <MX_GPIO_Init+0x164>)
 80017ae:	f000 ff7d 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	4828      	ldr	r0, [pc, #160]	; (800186c <MX_GPIO_Init+0x164>)
 80017ca:	f000 fdd3 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin;
 80017ce:	230f      	movs	r3, #15
 80017d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4822      	ldr	r0, [pc, #136]	; (800186c <MX_GPIO_Init+0x164>)
 80017e2:	f000 fdc7 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin CE_DS1302_Pin IO_DS1302_Pin CLK_DS1302_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CE_DS1302_Pin|IO_DS1302_Pin|CLK_DS1302_Pin;
 80017e6:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80017ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	4819      	ldr	r0, [pc, #100]	; (8001864 <MX_GPIO_Init+0x15c>)
 8001800:	f000 fdb8 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW1_KEYPAD_Pin ROW2_KEYPAD_Pin ROW3_KEYPAD_Pin ROW4_KEYPAD_Pin */
  GPIO_InitStruct.Pin = ROW1_KEYPAD_Pin|ROW2_KEYPAD_Pin|ROW3_KEYPAD_Pin|ROW4_KEYPAD_Pin;
 8001804:	23f0      	movs	r3, #240	; 0xf0
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800180c:	2301      	movs	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	4815      	ldr	r0, [pc, #84]	; (800186c <MX_GPIO_Init+0x164>)
 8001818:	f000 fdac 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_74HC595_Pin LATCH_74HC595_Pin SER_74HC595_Pin */
  GPIO_InitStruct.Pin = CLK_74HC595_Pin|LATCH_74HC595_Pin|SER_74HC595_Pin;
 800181c:	f44f 4324 	mov.w	r3, #41984	; 0xa400
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	480c      	ldr	r0, [pc, #48]	; (8001868 <MX_GPIO_Init+0x160>)
 8001836:	f000 fd9d 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_KEYPAD_Pin COL2_KEYPAD_Pin COL3_KEYPAD_Pin COL4_KEYPAD_Pin */
  GPIO_InitStruct.Pin = COL1_KEYPAD_Pin|COL2_KEYPAD_Pin|COL3_KEYPAD_Pin|COL4_KEYPAD_Pin;
 800183a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4806      	ldr	r0, [pc, #24]	; (800186c <MX_GPIO_Init+0x164>)
 8001854:	f000 fd8e 	bl	8002374 <HAL_GPIO_Init>

}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	40020000 	.word	0x40020000
 8001868:	40020400 	.word	0x40020400
 800186c:	40020800 	.word	0x40020800

08001870 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d101      	bne.n	8001886 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001882:	f000 fbe3 	bl	800204c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM11) {
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d11b      	bne.n	80018c8 <HAL_TIM_PeriodElapsedCallback+0x58>
	  TIM11_1ms_counter++;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	4a10      	ldr	r2, [pc, #64]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001898:	6013      	str	r3, [r2, #0]
	  TIM11_keypad_scan_timer++;
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018a2:	6013      	str	r3, [r2, #0]
	  if (TIM11_keypad_scan_timer >= 60)
 80018a4:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b3b      	cmp	r3, #59	; 0x3b
 80018aa:	dd0d      	ble.n	80018c8 <HAL_TIM_PeriodElapsedCallback+0x58>
	  {
		  uint8_t  key_value;

		  TIM11_keypad_scan_timer = 0;
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
		  key_value = keypadScan();
 80018b2:	f7ff fc2b 	bl	800110c <keypadScan>
 80018b6:	4603      	mov	r3, r0
 80018b8:	73fb      	strb	r3, [r7, #15]
		  if (key_value)
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_TIM_PeriodElapsedCallback+0x58>
		  {
			  insert_queue(key_value);	//circular queue에 insert
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fb2e 	bl	8000f24 <insert_queue>
		  }
	  }
    }
  /* USER CODE END Callback 1 */
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40014400 	.word	0x40014400
 80018d4:	40014800 	.word	0x40014800
 80018d8:	20000240 	.word	0x20000240
 80018dc:	20000244 	.word	0x20000244

080018e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
}
 80018e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <Error_Handler+0x8>
	...

080018ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_MspInit+0x54>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a11      	ldr	r2, [pc, #68]	; (8001940 <HAL_MspInit+0x54>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_MspInit+0x54>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_MspInit+0x54>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_MspInit+0x54>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_MspInit+0x54>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	210f      	movs	r1, #15
 800192e:	f06f 0001 	mvn.w	r0, #1
 8001932:	f000 fc63 	bl	80021fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800

08001944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a19      	ldr	r2, [pc, #100]	; (80019c8 <HAL_I2C_MspInit+0x84>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d12c      	bne.n	80019c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <HAL_I2C_MspInit+0x88>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a17      	ldr	r2, [pc, #92]	; (80019cc <HAL_I2C_MspInit+0x88>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_I2C_MspInit+0x88>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001982:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001988:	2312      	movs	r3, #18
 800198a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001994:	2304      	movs	r3, #4
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	480c      	ldr	r0, [pc, #48]	; (80019d0 <HAL_I2C_MspInit+0x8c>)
 80019a0:	f000 fce8 	bl	8002374 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_I2C_MspInit+0x88>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_I2C_MspInit+0x88>)
 80019ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019b2:	6413      	str	r3, [r2, #64]	; 0x40
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_I2C_MspInit+0x88>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019c0:	bf00      	nop
 80019c2:	3728      	adds	r7, #40	; 0x28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40005400 	.word	0x40005400
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020400 	.word	0x40020400

080019d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e4:	d10e      	bne.n	8001a04 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_TIM_Base_MspInit+0xa8>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <HAL_TIM_Base_MspInit+0xa8>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_TIM_Base_MspInit+0xa8>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001a02:	e036      	b.n	8001a72 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1d      	ldr	r2, [pc, #116]	; (8001a80 <HAL_TIM_Base_MspInit+0xac>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d116      	bne.n	8001a3c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <HAL_TIM_Base_MspInit+0xa8>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_TIM_Base_MspInit+0xa8>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <HAL_TIM_Base_MspInit+0xa8>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2105      	movs	r1, #5
 8001a2e:	201d      	movs	r0, #29
 8001a30:	f000 fbe4 	bl	80021fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a34:	201d      	movs	r0, #29
 8001a36:	f000 fbfd 	bl	8002234 <HAL_NVIC_EnableIRQ>
}
 8001a3a:	e01a      	b.n	8001a72 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <HAL_TIM_Base_MspInit+0xb0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d115      	bne.n	8001a72 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_TIM_Base_MspInit+0xa8>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_TIM_Base_MspInit+0xa8>)
 8001a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_TIM_Base_MspInit+0xa8>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2105      	movs	r1, #5
 8001a66:	201a      	movs	r0, #26
 8001a68:	f000 fbc8 	bl	80021fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a6c:	201a      	movs	r0, #26
 8001a6e:	f000 fbe1 	bl	8002234 <HAL_NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40000400 	.word	0x40000400
 8001a84:	40014800 	.word	0x40014800

08001a88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d10d      	bne.n	8001ab6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_TIM_PWM_MspInit+0x40>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_TIM_PWM_MspInit+0x40>)
 8001aa4:	f043 0308 	orr.w	r3, r3, #8
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_TIM_PWM_MspInit+0x40>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40000c00 	.word	0x40000c00
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a24      	ldr	r2, [pc, #144]	; (8001b7c <HAL_TIM_MspPostInit+0xb0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d11e      	bne.n	8001b2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <HAL_TIM_MspPostInit+0xb4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a22      	ldr	r2, [pc, #136]	; (8001b80 <HAL_TIM_MspPostInit+0xb4>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_TIM_MspPostInit+0xb4>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = buzzer_Pin;
 8001b0a:	2340      	movs	r3, #64	; 0x40
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4817      	ldr	r0, [pc, #92]	; (8001b84 <HAL_TIM_MspPostInit+0xb8>)
 8001b26:	f000 fc25 	bl	8002374 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001b2a:	e022      	b.n	8001b72 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a15      	ldr	r2, [pc, #84]	; (8001b88 <HAL_TIM_MspPostInit+0xbc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d11d      	bne.n	8001b72 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_TIM_MspPostInit+0xb4>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <HAL_TIM_MspPostInit+0xb4>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_TIM_MspPostInit+0xb4>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DHT11_Pin|SERVO_Pin;
 8001b52:	2303      	movs	r3, #3
 8001b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b62:	2302      	movs	r3, #2
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	; (8001b84 <HAL_TIM_MspPostInit+0xb8>)
 8001b6e:	f000 fc01 	bl	8002374 <HAL_GPIO_Init>
}
 8001b72:	bf00      	nop
 8001b74:	3728      	adds	r7, #40	; 0x28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40000400 	.word	0x40000400
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40000c00 	.word	0x40000c00

08001b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a1d      	ldr	r2, [pc, #116]	; (8001c20 <HAL_UART_MspInit+0x94>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d133      	bne.n	8001c16 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <HAL_UART_MspInit+0x98>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_UART_MspInit+0x98>)
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_UART_MspInit+0x98>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_UART_MspInit+0x98>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <HAL_UART_MspInit+0x98>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_UART_MspInit+0x98>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001be6:	230c      	movs	r3, #12
 8001be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bf6:	2307      	movs	r3, #7
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4809      	ldr	r0, [pc, #36]	; (8001c28 <HAL_UART_MspInit+0x9c>)
 8001c02:	f000 fbb7 	bl	8002374 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2105      	movs	r1, #5
 8001c0a:	2026      	movs	r0, #38	; 0x26
 8001c0c:	f000 faf6 	bl	80021fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c10:	2026      	movs	r0, #38	; 0x26
 8001c12:	f000 fb0f 	bl	8002234 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c16:	bf00      	nop
 8001c18:	3728      	adds	r7, #40	; 0x28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40004400 	.word	0x40004400
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020000 	.word	0x40020000

08001c2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	2019      	movs	r0, #25
 8001c42:	f000 fadb 	bl	80021fc <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c46:	2019      	movs	r0, #25
 8001c48:	f000 faf4 	bl	8002234 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_InitTick+0xa0>)
 8001c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c54:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <HAL_InitTick+0xa0>)
 8001c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_InitTick+0xa0>)
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c68:	f107 0210 	add.w	r2, r7, #16
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f001 faec 	bl	8003250 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c78:	f001 fad6 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 8001c7c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c80:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <HAL_InitTick+0xa4>)
 8001c82:	fba2 2303 	umull	r2, r3, r2, r3
 8001c86:	0c9b      	lsrs	r3, r3, #18
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_InitTick+0xa8>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <HAL_InitTick+0xac>)
 8001c90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <HAL_InitTick+0xa8>)
 8001c94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c98:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001c9a:	4a0e      	ldr	r2, [pc, #56]	; (8001cd4 <HAL_InitTick+0xa8>)
 8001c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_InitTick+0xa8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_InitTick+0xa8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001cac:	4809      	ldr	r0, [pc, #36]	; (8001cd4 <HAL_InitTick+0xa8>)
 8001cae:	f001 fb01 	bl	80032b4 <HAL_TIM_Base_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d104      	bne.n	8001cc2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001cb8:	4806      	ldr	r0, [pc, #24]	; (8001cd4 <HAL_InitTick+0xa8>)
 8001cba:	f001 fb4b 	bl	8003354 <HAL_TIM_Base_Start_IT>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	e000      	b.n	8001cc4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3730      	adds	r7, #48	; 0x30
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	431bde83 	.word	0x431bde83
 8001cd4:	20000910 	.word	0x20000910
 8001cd8:	40014400 	.word	0x40014400

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d0e:	f001 fbd2 	bl	80034b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000910 	.word	0x20000910

08001d1c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001d22:	f001 fbc8 	bl	80034b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000830 	.word	0x20000830

08001d30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <TIM3_IRQHandler+0x10>)
 8001d36:	f001 fbbe 	bl	80034b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200007e8 	.word	0x200007e8

08001d44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <USART2_IRQHandler+0x10>)
 8001d4a:	f002 faa7 	bl	800429c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200008cc 	.word	0x200008cc

08001d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
	return 1;
 8001d5c:	2301      	movs	r3, #1
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <_kill>:

int _kill(int pid, int sig)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d72:	f003 fb77 	bl	8005464 <__errno>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2216      	movs	r2, #22
 8001d7a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_exit>:

void _exit (int status)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ffe7 	bl	8001d68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d9a:	e7fe      	b.n	8001d9a <_exit+0x12>

08001d9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e00a      	b.n	8001dc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dae:	f3af 8000 	nop.w
 8001db2:	4601      	mov	r1, r0
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	60ba      	str	r2, [r7, #8]
 8001dba:	b2ca      	uxtb	r2, r1
 8001dbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbf0      	blt.n	8001dae <_read+0x12>
	}

return len;
 8001dcc:	687b      	ldr	r3, [r7, #4]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e009      	b.n	8001dfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	60ba      	str	r2, [r7, #8]
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f9f7 	bl	80011e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dbf1      	blt.n	8001de8 <_write+0x12>
	}
	return len;
 8001e04:	687b      	ldr	r3, [r7, #4]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_close>:

int _close(int file)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
	return -1;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e36:	605a      	str	r2, [r3, #4]
	return 0;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <_isatty>:

int _isatty(int file)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
	return 1;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
	return 0;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e80:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <_sbrk+0x5c>)
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <_sbrk+0x60>)
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <_sbrk+0x64>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <_sbrk+0x64>)
 8001e96:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <_sbrk+0x68>)
 8001e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d207      	bcs.n	8001eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea8:	f003 fadc 	bl	8005464 <__errno>
 8001eac:	4603      	mov	r3, r0
 8001eae:	220c      	movs	r2, #12
 8001eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	e009      	b.n	8001ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <_sbrk+0x64>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	4a05      	ldr	r2, [pc, #20]	; (8001edc <_sbrk+0x64>)
 8001ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eca:	68fb      	ldr	r3, [r7, #12]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20020000 	.word	0x20020000
 8001ed8:	00000400 	.word	0x00000400
 8001edc:	20000248 	.word	0x20000248
 8001ee0:	20000c98 	.word	0x20000c98

08001ee4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <SystemInit+0x20>)
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <SystemInit+0x20>)
 8001ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <HAL_UART_RxCpltCallback>:
  * 예) comportmaster로 부터 1char를 수신하면 HAL_UART_RxCpltCallback으로 진입
  * 	9600bps인 경우 RxCpltCallback를 수행 후 1ms이내에는 빠져 나가야 한다.
  * 	115200bps 						   86us
   */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	volatile static int i = 0;	// buffer의 index


	if (huart == &huart2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a22      	ldr	r2, [pc, #136]	; (8001f9c <HAL_UART_RxCpltCallback+0x94>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d13d      	bne.n	8001f94 <HAL_UART_RxCpltCallback+0x8c>
	{
		if(rx_data == '\n')
 8001f18:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <HAL_UART_RxCpltCallback+0x98>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b0a      	cmp	r3, #10
 8001f1e:	d122      	bne.n	8001f66 <HAL_UART_RxCpltCallback+0x5e>
		{
			rx_buff[rear++][i] = 0; // 문장의 끝은 항상 0
 8001f20:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_UART_RxCpltCallback+0x9c>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	1c53      	adds	r3, r2, #1
 8001f26:	491f      	ldr	r1, [pc, #124]	; (8001fa4 <HAL_UART_RxCpltCallback+0x9c>)
 8001f28:	600b      	str	r3, [r1, #0]
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <HAL_UART_RxCpltCallback+0xa0>)
 8001f2c:	6819      	ldr	r1, [r3, #0]
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <HAL_UART_RxCpltCallback+0xa4>)
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4403      	add	r3, r0
 8001f3a:	440b      	add	r3, r1
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
			rear %= COMMAND_NUMBER; // 원형큐
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <HAL_UART_RxCpltCallback+0x9c>)
 8001f42:	6819      	ldr	r1, [r3, #0]
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <HAL_UART_RxCpltCallback+0xa8>)
 8001f46:	fb83 2301 	smull	r2, r3, r3, r1
 8001f4a:	10da      	asrs	r2, r3, #3
 8001f4c:	17cb      	asrs	r3, r1, #31
 8001f4e:	1ad2      	subs	r2, r2, r3
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	1aca      	subs	r2, r1, r3
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_UART_RxCpltCallback+0x9c>)
 8001f5c:	601a      	str	r2, [r3, #0]
			i = 0; // 새로오는건 버퍼에 새로우 채워야함 (다른 메시지니치!)
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_UART_RxCpltCallback+0xa0>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e011      	b.n	8001f8a <HAL_UART_RxCpltCallback+0x82>
			// 큐 full 여부 확인
		}
		else
		{
			// 그래야 버퍼에 넣기 (push)
			rx_buff[rear][i++] = rx_data;
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_UART_RxCpltCallback+0x9c>)
 8001f68:	6819      	ldr	r1, [r3, #0]
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_UART_RxCpltCallback+0xa0>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	1c53      	adds	r3, r2, #1
 8001f70:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <HAL_UART_RxCpltCallback+0xa0>)
 8001f72:	6003      	str	r3, [r0, #0]
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_UART_RxCpltCallback+0x98>)
 8001f76:	781c      	ldrb	r4, [r3, #0]
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <HAL_UART_RxCpltCallback+0xa4>)
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4403      	add	r3, r0
 8001f84:	4413      	add	r3, r2
 8001f86:	4622      	mov	r2, r4
 8001f88:	701a      	strb	r2, [r3, #0]
			// command length 확인
		}
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);	// 주의 : 반드시 집어 넣어야 다음 INT가 발생
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4904      	ldr	r1, [pc, #16]	; (8001fa0 <HAL_UART_RxCpltCallback+0x98>)
 8001f8e:	4803      	ldr	r0, [pc, #12]	; (8001f9c <HAL_UART_RxCpltCallback+0x94>)
 8001f90:	f002 f953 	bl	800423a <HAL_UART_Receive_IT>
	}
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd90      	pop	{r4, r7, pc}
 8001f9c:	200008cc 	.word	0x200008cc
 8001fa0:	2000087c 	.word	0x2000087c
 8001fa4:	20000958 	.word	0x20000958
 8001fa8:	2000024c 	.word	0x2000024c
 8001fac:	2000095c 	.word	0x2000095c
 8001fb0:	66666667 	.word	0x66666667

08001fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fb8:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fba:	490e      	ldr	r1, [pc, #56]	; (8001ff4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fbc:	4a0e      	ldr	r2, [pc, #56]	; (8001ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc0:	e002      	b.n	8001fc8 <LoopCopyDataInit>

08001fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc6:	3304      	adds	r3, #4

08001fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fcc:	d3f9      	bcc.n	8001fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fce:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fd0:	4c0b      	ldr	r4, [pc, #44]	; (8002000 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd4:	e001      	b.n	8001fda <LoopFillZerobss>

08001fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd8:	3204      	adds	r2, #4

08001fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fdc:	d3fb      	bcc.n	8001fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fde:	f7ff ff81 	bl	8001ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fe2:	f003 fb3b 	bl	800565c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fe6:	f7ff f90f 	bl	8001208 <main>
  bx  lr    
 8001fea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff4:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8001ff8:	080085ec 	.word	0x080085ec
  ldr r2, =_sbss
 8001ffc:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8002000:	20000c98 	.word	0x20000c98

08002004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002004:	e7fe      	b.n	8002004 <ADC_IRQHandler>
	...

08002008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800200c:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <HAL_Init+0x40>)
 8002012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_Init+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <HAL_Init+0x40>)
 800201e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HAL_Init+0x40>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002030:	2003      	movs	r0, #3
 8002032:	f000 f8d8 	bl	80021e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002036:	200f      	movs	r0, #15
 8002038:	f7ff fdf8 	bl	8001c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800203c:	f7ff fc56 	bl	80018ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023c00 	.word	0x40023c00

0800204c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_IncTick+0x20>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_IncTick+0x24>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4413      	add	r3, r2
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_IncTick+0x24>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000050 	.word	0x20000050
 8002070:	20000c84 	.word	0x20000c84

08002074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <HAL_GetTick+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000c84 	.word	0x20000c84

0800208c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a8:	4013      	ands	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020be:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	60d3      	str	r3, [r2, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <__NVIC_GetPriorityGrouping+0x18>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	f003 0307 	and.w	r3, r3, #7
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	db0b      	blt.n	800211a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	f003 021f 	and.w	r2, r3, #31
 8002108:	4907      	ldr	r1, [pc, #28]	; (8002128 <__NVIC_EnableIRQ+0x38>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	2001      	movs	r0, #1
 8002112:	fa00 f202 	lsl.w	r2, r0, r2
 8002116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000e100 	.word	0xe000e100

0800212c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	2b00      	cmp	r3, #0
 800213e:	db0a      	blt.n	8002156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	490c      	ldr	r1, [pc, #48]	; (8002178 <__NVIC_SetPriority+0x4c>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	0112      	lsls	r2, r2, #4
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	440b      	add	r3, r1
 8002150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002154:	e00a      	b.n	800216c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4908      	ldr	r1, [pc, #32]	; (800217c <__NVIC_SetPriority+0x50>)
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	3b04      	subs	r3, #4
 8002164:	0112      	lsls	r2, r2, #4
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	440b      	add	r3, r1
 800216a:	761a      	strb	r2, [r3, #24]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000e100 	.word	0xe000e100
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f1c3 0307 	rsb	r3, r3, #7
 800219a:	2b04      	cmp	r3, #4
 800219c:	bf28      	it	cs
 800219e:	2304      	movcs	r3, #4
 80021a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2b06      	cmp	r3, #6
 80021a8:	d902      	bls.n	80021b0 <NVIC_EncodePriority+0x30>
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3b03      	subs	r3, #3
 80021ae:	e000      	b.n	80021b2 <NVIC_EncodePriority+0x32>
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	f04f 32ff 	mov.w	r2, #4294967295
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43da      	mvns	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	401a      	ands	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c8:	f04f 31ff 	mov.w	r1, #4294967295
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	43d9      	mvns	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	4313      	orrs	r3, r2
         );
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3724      	adds	r7, #36	; 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ff4c 	bl	800208c <__NVIC_SetPriorityGrouping>
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800220e:	f7ff ff61 	bl	80020d4 <__NVIC_GetPriorityGrouping>
 8002212:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	6978      	ldr	r0, [r7, #20]
 800221a:	f7ff ffb1 	bl	8002180 <NVIC_EncodePriority>
 800221e:	4602      	mov	r2, r0
 8002220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff ff80 	bl	800212c <__NVIC_SetPriority>
}
 800222c:	bf00      	nop
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff54 	bl	80020f0 <__NVIC_EnableIRQ>
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800225e:	f7ff ff09 	bl	8002074 <HAL_GetTick>
 8002262:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d008      	beq.n	8002282 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e052      	b.n	8002328 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0216 	bic.w	r2, r2, #22
 8002290:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d103      	bne.n	80022b2 <HAL_DMA_Abort+0x62>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d007      	beq.n	80022c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0208 	bic.w	r2, r2, #8
 80022c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d2:	e013      	b.n	80022fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022d4:	f7ff fece 	bl	8002074 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b05      	cmp	r3, #5
 80022e0:	d90c      	bls.n	80022fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2203      	movs	r2, #3
 80022ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e015      	b.n	8002328 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1e4      	bne.n	80022d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	223f      	movs	r2, #63	; 0x3f
 8002310:	409a      	lsls	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d004      	beq.n	800234e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e00c      	b.n	8002368 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2205      	movs	r2, #5
 8002352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0201 	bic.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	; 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	e159      	b.n	8002644 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002390:	2201      	movs	r2, #1
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	f040 8148 	bne.w	800263e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d005      	beq.n	80023c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d130      	bne.n	8002428 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	2203      	movs	r2, #3
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023fc:	2201      	movs	r2, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 0201 	and.w	r2, r3, #1
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b03      	cmp	r3, #3
 8002432:	d017      	beq.n	8002464 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d123      	bne.n	80024b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	08da      	lsrs	r2, r3, #3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3208      	adds	r2, #8
 8002478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	08da      	lsrs	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3208      	adds	r2, #8
 80024b2:	69b9      	ldr	r1, [r7, #24]
 80024b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0203 	and.w	r2, r3, #3
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 80a2 	beq.w	800263e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b57      	ldr	r3, [pc, #348]	; (800265c <HAL_GPIO_Init+0x2e8>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	4a56      	ldr	r2, [pc, #344]	; (800265c <HAL_GPIO_Init+0x2e8>)
 8002504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002508:	6453      	str	r3, [r2, #68]	; 0x44
 800250a:	4b54      	ldr	r3, [pc, #336]	; (800265c <HAL_GPIO_Init+0x2e8>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002516:	4a52      	ldr	r2, [pc, #328]	; (8002660 <HAL_GPIO_Init+0x2ec>)
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	3302      	adds	r3, #2
 800251e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	220f      	movs	r2, #15
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a49      	ldr	r2, [pc, #292]	; (8002664 <HAL_GPIO_Init+0x2f0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d019      	beq.n	8002576 <HAL_GPIO_Init+0x202>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a48      	ldr	r2, [pc, #288]	; (8002668 <HAL_GPIO_Init+0x2f4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <HAL_GPIO_Init+0x1fe>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a47      	ldr	r2, [pc, #284]	; (800266c <HAL_GPIO_Init+0x2f8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00d      	beq.n	800256e <HAL_GPIO_Init+0x1fa>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a46      	ldr	r2, [pc, #280]	; (8002670 <HAL_GPIO_Init+0x2fc>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d007      	beq.n	800256a <HAL_GPIO_Init+0x1f6>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a45      	ldr	r2, [pc, #276]	; (8002674 <HAL_GPIO_Init+0x300>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d101      	bne.n	8002566 <HAL_GPIO_Init+0x1f2>
 8002562:	2304      	movs	r3, #4
 8002564:	e008      	b.n	8002578 <HAL_GPIO_Init+0x204>
 8002566:	2307      	movs	r3, #7
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x204>
 800256a:	2303      	movs	r3, #3
 800256c:	e004      	b.n	8002578 <HAL_GPIO_Init+0x204>
 800256e:	2302      	movs	r3, #2
 8002570:	e002      	b.n	8002578 <HAL_GPIO_Init+0x204>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_GPIO_Init+0x204>
 8002576:	2300      	movs	r3, #0
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	f002 0203 	and.w	r2, r2, #3
 800257e:	0092      	lsls	r2, r2, #2
 8002580:	4093      	lsls	r3, r2
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002588:	4935      	ldr	r1, [pc, #212]	; (8002660 <HAL_GPIO_Init+0x2ec>)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	3302      	adds	r3, #2
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002596:	4b38      	ldr	r3, [pc, #224]	; (8002678 <HAL_GPIO_Init+0x304>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ba:	4a2f      	ldr	r2, [pc, #188]	; (8002678 <HAL_GPIO_Init+0x304>)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025c0:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_GPIO_Init+0x304>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025e4:	4a24      	ldr	r2, [pc, #144]	; (8002678 <HAL_GPIO_Init+0x304>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ea:	4b23      	ldr	r3, [pc, #140]	; (8002678 <HAL_GPIO_Init+0x304>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800260e:	4a1a      	ldr	r2, [pc, #104]	; (8002678 <HAL_GPIO_Init+0x304>)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002614:	4b18      	ldr	r3, [pc, #96]	; (8002678 <HAL_GPIO_Init+0x304>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002638:	4a0f      	ldr	r2, [pc, #60]	; (8002678 <HAL_GPIO_Init+0x304>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3301      	adds	r3, #1
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	2b0f      	cmp	r3, #15
 8002648:	f67f aea2 	bls.w	8002390 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3724      	adds	r7, #36	; 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	40013800 	.word	0x40013800
 8002664:	40020000 	.word	0x40020000
 8002668:	40020400 	.word	0x40020400
 800266c:	40020800 	.word	0x40020800
 8002670:	40020c00 	.word	0x40020c00
 8002674:	40021000 	.word	0x40021000
 8002678:	40013c00 	.word	0x40013c00

0800267c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	887b      	ldrh	r3, [r7, #2]
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	e001      	b.n	800269e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800269e:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]
 80026b8:	4613      	mov	r3, r2
 80026ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026bc:	787b      	ldrb	r3, [r7, #1]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026c8:	e003      	b.n	80026d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	041a      	lsls	r2, r3, #16
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	619a      	str	r2, [r3, #24]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e12b      	b.n	800294a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff f91c 	bl	8001944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2224      	movs	r2, #36	; 0x24
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002732:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002742:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002744:	f000 fd5c 	bl	8003200 <HAL_RCC_GetPCLK1Freq>
 8002748:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4a81      	ldr	r2, [pc, #516]	; (8002954 <HAL_I2C_Init+0x274>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d807      	bhi.n	8002764 <HAL_I2C_Init+0x84>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4a80      	ldr	r2, [pc, #512]	; (8002958 <HAL_I2C_Init+0x278>)
 8002758:	4293      	cmp	r3, r2
 800275a:	bf94      	ite	ls
 800275c:	2301      	movls	r3, #1
 800275e:	2300      	movhi	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e006      	b.n	8002772 <HAL_I2C_Init+0x92>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4a7d      	ldr	r2, [pc, #500]	; (800295c <HAL_I2C_Init+0x27c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	bf94      	ite	ls
 800276c:	2301      	movls	r3, #1
 800276e:	2300      	movhi	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e0e7      	b.n	800294a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4a78      	ldr	r2, [pc, #480]	; (8002960 <HAL_I2C_Init+0x280>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	0c9b      	lsrs	r3, r3, #18
 8002784:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	430a      	orrs	r2, r1
 8002798:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a6a      	ldr	r2, [pc, #424]	; (8002954 <HAL_I2C_Init+0x274>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d802      	bhi.n	80027b4 <HAL_I2C_Init+0xd4>
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	3301      	adds	r3, #1
 80027b2:	e009      	b.n	80027c8 <HAL_I2C_Init+0xe8>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027ba:	fb02 f303 	mul.w	r3, r2, r3
 80027be:	4a69      	ldr	r2, [pc, #420]	; (8002964 <HAL_I2C_Init+0x284>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	3301      	adds	r3, #1
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	430b      	orrs	r3, r1
 80027ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	495c      	ldr	r1, [pc, #368]	; (8002954 <HAL_I2C_Init+0x274>)
 80027e4:	428b      	cmp	r3, r1
 80027e6:	d819      	bhi.n	800281c <HAL_I2C_Init+0x13c>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1e59      	subs	r1, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80027f6:	1c59      	adds	r1, r3, #1
 80027f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027fc:	400b      	ands	r3, r1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_I2C_Init+0x138>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1e59      	subs	r1, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002810:	3301      	adds	r3, #1
 8002812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002816:	e051      	b.n	80028bc <HAL_I2C_Init+0x1dc>
 8002818:	2304      	movs	r3, #4
 800281a:	e04f      	b.n	80028bc <HAL_I2C_Init+0x1dc>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d111      	bne.n	8002848 <HAL_I2C_Init+0x168>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1e58      	subs	r0, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6859      	ldr	r1, [r3, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	440b      	add	r3, r1
 8002832:	fbb0 f3f3 	udiv	r3, r0, r3
 8002836:	3301      	adds	r3, #1
 8002838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	e012      	b.n	800286e <HAL_I2C_Init+0x18e>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1e58      	subs	r0, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6859      	ldr	r1, [r3, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	0099      	lsls	r1, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	fbb0 f3f3 	udiv	r3, r0, r3
 800285e:	3301      	adds	r3, #1
 8002860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Init+0x196>
 8002872:	2301      	movs	r3, #1
 8002874:	e022      	b.n	80028bc <HAL_I2C_Init+0x1dc>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10e      	bne.n	800289c <HAL_I2C_Init+0x1bc>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1e58      	subs	r0, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6859      	ldr	r1, [r3, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	440b      	add	r3, r1
 800288c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002890:	3301      	adds	r3, #1
 8002892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800289a:	e00f      	b.n	80028bc <HAL_I2C_Init+0x1dc>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1e58      	subs	r0, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	0099      	lsls	r1, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b2:	3301      	adds	r3, #1
 80028b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	6809      	ldr	r1, [r1, #0]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69da      	ldr	r2, [r3, #28]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6911      	ldr	r1, [r2, #16]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68d2      	ldr	r2, [r2, #12]
 80028f6:	4311      	orrs	r1, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	430b      	orrs	r3, r1
 80028fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695a      	ldr	r2, [r3, #20]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	000186a0 	.word	0x000186a0
 8002958:	001e847f 	.word	0x001e847f
 800295c:	003d08ff 	.word	0x003d08ff
 8002960:	431bde83 	.word	0x431bde83
 8002964:	10624dd3 	.word	0x10624dd3

08002968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e264      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d075      	beq.n	8002a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002986:	4ba3      	ldr	r3, [pc, #652]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b04      	cmp	r3, #4
 8002990:	d00c      	beq.n	80029ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002992:	4ba0      	ldr	r3, [pc, #640]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800299a:	2b08      	cmp	r3, #8
 800299c:	d112      	bne.n	80029c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299e:	4b9d      	ldr	r3, [pc, #628]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029aa:	d10b      	bne.n	80029c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ac:	4b99      	ldr	r3, [pc, #612]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d05b      	beq.n	8002a70 <HAL_RCC_OscConfig+0x108>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d157      	bne.n	8002a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e23f      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029cc:	d106      	bne.n	80029dc <HAL_RCC_OscConfig+0x74>
 80029ce:	4b91      	ldr	r3, [pc, #580]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a90      	ldr	r2, [pc, #576]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e01d      	b.n	8002a18 <HAL_RCC_OscConfig+0xb0>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x98>
 80029e6:	4b8b      	ldr	r3, [pc, #556]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a8a      	ldr	r2, [pc, #552]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b88      	ldr	r3, [pc, #544]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a87      	ldr	r2, [pc, #540]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e00b      	b.n	8002a18 <HAL_RCC_OscConfig+0xb0>
 8002a00:	4b84      	ldr	r3, [pc, #528]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a83      	ldr	r2, [pc, #524]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b81      	ldr	r3, [pc, #516]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a80      	ldr	r2, [pc, #512]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7ff fb28 	bl	8002074 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a28:	f7ff fb24 	bl	8002074 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e204      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	4b76      	ldr	r3, [pc, #472]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0xc0>
 8002a46:	e014      	b.n	8002a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7ff fb14 	bl	8002074 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a50:	f7ff fb10 	bl	8002074 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e1f0      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a62:	4b6c      	ldr	r3, [pc, #432]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0xe8>
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d063      	beq.n	8002b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a7e:	4b65      	ldr	r3, [pc, #404]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8a:	4b62      	ldr	r3, [pc, #392]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d11c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a96:	4b5f      	ldr	r3, [pc, #380]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d116      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa2:	4b5c      	ldr	r3, [pc, #368]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_RCC_OscConfig+0x152>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d001      	beq.n	8002aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e1c4      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aba:	4b56      	ldr	r3, [pc, #344]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4952      	ldr	r1, [pc, #328]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ace:	e03a      	b.n	8002b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d020      	beq.n	8002b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad8:	4b4f      	ldr	r3, [pc, #316]	; (8002c18 <HAL_RCC_OscConfig+0x2b0>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ade:	f7ff fac9 	bl	8002074 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae6:	f7ff fac5 	bl	8002074 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e1a5      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af8:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b04:	4b43      	ldr	r3, [pc, #268]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4940      	ldr	r1, [pc, #256]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	600b      	str	r3, [r1, #0]
 8002b18:	e015      	b.n	8002b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1a:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <HAL_RCC_OscConfig+0x2b0>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7ff faa8 	bl	8002074 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b28:	f7ff faa4 	bl	8002074 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e184      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3a:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d030      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d016      	beq.n	8002b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5a:	4b30      	ldr	r3, [pc, #192]	; (8002c1c <HAL_RCC_OscConfig+0x2b4>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7ff fa88 	bl	8002074 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b68:	f7ff fa84 	bl	8002074 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e164      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7a:	4b26      	ldr	r3, [pc, #152]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x200>
 8002b86:	e015      	b.n	8002bb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCC_OscConfig+0x2b4>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8e:	f7ff fa71 	bl	8002074 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b96:	f7ff fa6d 	bl	8002074 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e14d      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f0      	bne.n	8002b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80a0 	beq.w	8002d02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc6:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10f      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be0:	6413      	str	r3, [r2, #64]	; 0x40
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_OscConfig+0x2b8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d121      	bne.n	8002c42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <HAL_RCC_OscConfig+0x2b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <HAL_RCC_OscConfig+0x2b8>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0a:	f7ff fa33 	bl	8002074 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c10:	e011      	b.n	8002c36 <HAL_RCC_OscConfig+0x2ce>
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	42470000 	.word	0x42470000
 8002c1c:	42470e80 	.word	0x42470e80
 8002c20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c24:	f7ff fa26 	bl	8002074 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e106      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c36:	4b85      	ldr	r3, [pc, #532]	; (8002e4c <HAL_RCC_OscConfig+0x4e4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d106      	bne.n	8002c58 <HAL_RCC_OscConfig+0x2f0>
 8002c4a:	4b81      	ldr	r3, [pc, #516]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a80      	ldr	r2, [pc, #512]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
 8002c56:	e01c      	b.n	8002c92 <HAL_RCC_OscConfig+0x32a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d10c      	bne.n	8002c7a <HAL_RCC_OscConfig+0x312>
 8002c60:	4b7b      	ldr	r3, [pc, #492]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c64:	4a7a      	ldr	r2, [pc, #488]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6c:	4b78      	ldr	r3, [pc, #480]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	4a77      	ldr	r2, [pc, #476]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6713      	str	r3, [r2, #112]	; 0x70
 8002c78:	e00b      	b.n	8002c92 <HAL_RCC_OscConfig+0x32a>
 8002c7a:	4b75      	ldr	r3, [pc, #468]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	4a74      	ldr	r2, [pc, #464]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	6713      	str	r3, [r2, #112]	; 0x70
 8002c86:	4b72      	ldr	r3, [pc, #456]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a71      	ldr	r2, [pc, #452]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d015      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9a:	f7ff f9eb 	bl	8002074 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f7ff f9e7 	bl	8002074 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e0c5      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	4b65      	ldr	r3, [pc, #404]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ee      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x33a>
 8002cc4:	e014      	b.n	8002cf0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7ff f9d5 	bl	8002074 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7ff f9d1 	bl	8002074 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0af      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce4:	4b5a      	ldr	r3, [pc, #360]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1ee      	bne.n	8002cce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d105      	bne.n	8002d02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf6:	4b56      	ldr	r3, [pc, #344]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a55      	ldr	r2, [pc, #340]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 809b 	beq.w	8002e42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d0c:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d05c      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d141      	bne.n	8002da4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d20:	4b4c      	ldr	r3, [pc, #304]	; (8002e54 <HAL_RCC_OscConfig+0x4ec>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7ff f9a5 	bl	8002074 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2e:	f7ff f9a1 	bl	8002074 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e081      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d40:	4b43      	ldr	r3, [pc, #268]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	019b      	lsls	r3, r3, #6
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	085b      	lsrs	r3, r3, #1
 8002d64:	3b01      	subs	r3, #1
 8002d66:	041b      	lsls	r3, r3, #16
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	061b      	lsls	r3, r3, #24
 8002d70:	4937      	ldr	r1, [pc, #220]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d76:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <HAL_RCC_OscConfig+0x4ec>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7ff f97a 	bl	8002074 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d84:	f7ff f976 	bl	8002074 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e056      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d96:	4b2e      	ldr	r3, [pc, #184]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x41c>
 8002da2:	e04e      	b.n	8002e42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_OscConfig+0x4ec>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7ff f963 	bl	8002074 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db2:	f7ff f95f 	bl	8002074 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e03f      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc4:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x44a>
 8002dd0:	e037      	b.n	8002e42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e032      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dde:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <HAL_RCC_OscConfig+0x4e8>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d028      	beq.n	8002e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d121      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d11a      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e0e:	4013      	ands	r3, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d111      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	085b      	lsrs	r3, r3, #1
 8002e26:	3b01      	subs	r3, #1
 8002e28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	40023800 	.word	0x40023800
 8002e54:	42470060 	.word	0x42470060

08002e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0cc      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b68      	ldr	r3, [pc, #416]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d90c      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b65      	ldr	r3, [pc, #404]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b63      	ldr	r3, [pc, #396]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0b8      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eac:	4b59      	ldr	r3, [pc, #356]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a58      	ldr	r2, [pc, #352]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec4:	4b53      	ldr	r3, [pc, #332]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	4a52      	ldr	r2, [pc, #328]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed0:	4b50      	ldr	r3, [pc, #320]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	494d      	ldr	r1, [pc, #308]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d044      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b47      	ldr	r3, [pc, #284]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d119      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e07f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d003      	beq.n	8002f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d107      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f16:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e06f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f26:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e067      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f36:	4b37      	ldr	r3, [pc, #220]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4934      	ldr	r1, [pc, #208]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f48:	f7ff f894 	bl	8002074 <HAL_GetTick>
 8002f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f50:	f7ff f890 	bl	8002074 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e04f      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 020c 	and.w	r2, r3, #12
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1eb      	bne.n	8002f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f78:	4b25      	ldr	r3, [pc, #148]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d20c      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b22      	ldr	r3, [pc, #136]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b20      	ldr	r3, [pc, #128]	; (8003010 <HAL_RCC_ClockConfig+0x1b8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e032      	b.n	8003006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4916      	ldr	r1, [pc, #88]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	490e      	ldr	r1, [pc, #56]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fde:	f000 f821 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	490a      	ldr	r1, [pc, #40]	; (8003018 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	5ccb      	ldrb	r3, [r1, r3]
 8002ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff6:	4a09      	ldr	r2, [pc, #36]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fe14 	bl	8001c2c <HAL_InitTick>

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023c00 	.word	0x40023c00
 8003014:	40023800 	.word	0x40023800
 8003018:	080081dc 	.word	0x080081dc
 800301c:	20000048 	.word	0x20000048
 8003020:	2000004c 	.word	0x2000004c

08003024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	2300      	movs	r3, #0
 8003036:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800303c:	4b67      	ldr	r3, [pc, #412]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b08      	cmp	r3, #8
 8003046:	d00d      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x40>
 8003048:	2b08      	cmp	r3, #8
 800304a:	f200 80bd 	bhi.w	80031c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x34>
 8003052:	2b04      	cmp	r3, #4
 8003054:	d003      	beq.n	800305e <HAL_RCC_GetSysClockFreq+0x3a>
 8003056:	e0b7      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003058:	4b61      	ldr	r3, [pc, #388]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800305a:	60bb      	str	r3, [r7, #8]
       break;
 800305c:	e0b7      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800305e:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003060:	60bb      	str	r3, [r7, #8]
      break;
 8003062:	e0b4      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003064:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800306c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800306e:	4b5b      	ldr	r3, [pc, #364]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d04d      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307a:	4b58      	ldr	r3, [pc, #352]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	099b      	lsrs	r3, r3, #6
 8003080:	461a      	mov	r2, r3
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	f240 10ff 	movw	r0, #511	; 0x1ff
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	ea02 0800 	and.w	r8, r2, r0
 8003092:	ea03 0901 	and.w	r9, r3, r1
 8003096:	4640      	mov	r0, r8
 8003098:	4649      	mov	r1, r9
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	014b      	lsls	r3, r1, #5
 80030a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030a8:	0142      	lsls	r2, r0, #5
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	ebb0 0008 	subs.w	r0, r0, r8
 80030b2:	eb61 0109 	sbc.w	r1, r1, r9
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	018b      	lsls	r3, r1, #6
 80030c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030c4:	0182      	lsls	r2, r0, #6
 80030c6:	1a12      	subs	r2, r2, r0
 80030c8:	eb63 0301 	sbc.w	r3, r3, r1
 80030cc:	f04f 0000 	mov.w	r0, #0
 80030d0:	f04f 0100 	mov.w	r1, #0
 80030d4:	00d9      	lsls	r1, r3, #3
 80030d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030da:	00d0      	lsls	r0, r2, #3
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	eb12 0208 	adds.w	r2, r2, r8
 80030e4:	eb43 0309 	adc.w	r3, r3, r9
 80030e8:	f04f 0000 	mov.w	r0, #0
 80030ec:	f04f 0100 	mov.w	r1, #0
 80030f0:	0259      	lsls	r1, r3, #9
 80030f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80030f6:	0250      	lsls	r0, r2, #9
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	461a      	mov	r2, r3
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	f7fd fd56 	bl	8000bb8 <__aeabi_uldivmod>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4613      	mov	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e04a      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003116:	4b31      	ldr	r3, [pc, #196]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	099b      	lsrs	r3, r3, #6
 800311c:	461a      	mov	r2, r3
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003126:	f04f 0100 	mov.w	r1, #0
 800312a:	ea02 0400 	and.w	r4, r2, r0
 800312e:	ea03 0501 	and.w	r5, r3, r1
 8003132:	4620      	mov	r0, r4
 8003134:	4629      	mov	r1, r5
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	014b      	lsls	r3, r1, #5
 8003140:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003144:	0142      	lsls	r2, r0, #5
 8003146:	4610      	mov	r0, r2
 8003148:	4619      	mov	r1, r3
 800314a:	1b00      	subs	r0, r0, r4
 800314c:	eb61 0105 	sbc.w	r1, r1, r5
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	018b      	lsls	r3, r1, #6
 800315a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800315e:	0182      	lsls	r2, r0, #6
 8003160:	1a12      	subs	r2, r2, r0
 8003162:	eb63 0301 	sbc.w	r3, r3, r1
 8003166:	f04f 0000 	mov.w	r0, #0
 800316a:	f04f 0100 	mov.w	r1, #0
 800316e:	00d9      	lsls	r1, r3, #3
 8003170:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003174:	00d0      	lsls	r0, r2, #3
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	1912      	adds	r2, r2, r4
 800317c:	eb45 0303 	adc.w	r3, r5, r3
 8003180:	f04f 0000 	mov.w	r0, #0
 8003184:	f04f 0100 	mov.w	r1, #0
 8003188:	0299      	lsls	r1, r3, #10
 800318a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800318e:	0290      	lsls	r0, r2, #10
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	461a      	mov	r2, r3
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	f7fd fd0a 	bl	8000bb8 <__aeabi_uldivmod>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4613      	mov	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	3301      	adds	r3, #1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	60bb      	str	r3, [r7, #8]
      break;
 80031c6:	e002      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031ca:	60bb      	str	r3, [r7, #8]
      break;
 80031cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ce:	68bb      	ldr	r3, [r7, #8]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	00f42400 	.word	0x00f42400
 80031e4:	007a1200 	.word	0x007a1200

080031e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000048 	.word	0x20000048

08003200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003204:	f7ff fff0 	bl	80031e8 <HAL_RCC_GetHCLKFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	0a9b      	lsrs	r3, r3, #10
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	4903      	ldr	r1, [pc, #12]	; (8003224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800
 8003224:	080081ec 	.word	0x080081ec

08003228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800322c:	f7ff ffdc 	bl	80031e8 <HAL_RCC_GetHCLKFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	0b5b      	lsrs	r3, r3, #13
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	4903      	ldr	r1, [pc, #12]	; (800324c <HAL_RCC_GetPCLK2Freq+0x24>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003244:	4618      	mov	r0, r3
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40023800 	.word	0x40023800
 800324c:	080081ec 	.word	0x080081ec

08003250 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	220f      	movs	r2, #15
 800325e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003260:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_RCC_GetClockConfig+0x5c>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 0203 	and.w	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <HAL_RCC_GetClockConfig+0x5c>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <HAL_RCC_GetClockConfig+0x5c>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <HAL_RCC_GetClockConfig+0x5c>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	08db      	lsrs	r3, r3, #3
 800328a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003292:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <HAL_RCC_GetClockConfig+0x60>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0207 	and.w	r2, r3, #7
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	601a      	str	r2, [r3, #0]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40023c00 	.word	0x40023c00

080032b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e041      	b.n	800334a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fe fb7a 	bl	80019d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3304      	adds	r3, #4
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f000 fb9a 	bl	8003a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	d001      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e044      	b.n	80033f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1e      	ldr	r2, [pc, #120]	; (8003404 <HAL_TIM_Base_Start_IT+0xb0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d018      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x6c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003396:	d013      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x6c>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1a      	ldr	r2, [pc, #104]	; (8003408 <HAL_TIM_Base_Start_IT+0xb4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00e      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x6c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a19      	ldr	r2, [pc, #100]	; (800340c <HAL_TIM_Base_Start_IT+0xb8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d009      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x6c>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a17      	ldr	r2, [pc, #92]	; (8003410 <HAL_TIM_Base_Start_IT+0xbc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x6c>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a16      	ldr	r2, [pc, #88]	; (8003414 <HAL_TIM_Base_Start_IT+0xc0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d111      	bne.n	80033e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d010      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0201 	orr.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e2:	e007      	b.n	80033f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40010000 	.word	0x40010000
 8003408:	40000400 	.word	0x40000400
 800340c:	40000800 	.word	0x40000800
 8003410:	40000c00 	.word	0x40000c00
 8003414:	40014000 	.word	0x40014000

08003418 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e041      	b.n	80034ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fe fb22 	bl	8001a88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f000 fae8 	bl	8003a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d122      	bne.n	8003512 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d11b      	bne.n	8003512 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f06f 0202 	mvn.w	r2, #2
 80034e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fa78 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 80034fe:	e005      	b.n	800350c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fa6a 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fa7b 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b04      	cmp	r3, #4
 800351e:	d122      	bne.n	8003566 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b04      	cmp	r3, #4
 800352c:	d11b      	bne.n	8003566 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f06f 0204 	mvn.w	r2, #4
 8003536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fa4e 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 8003552:	e005      	b.n	8003560 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fa40 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fa51 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b08      	cmp	r3, #8
 8003572:	d122      	bne.n	80035ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b08      	cmp	r3, #8
 8003580:	d11b      	bne.n	80035ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f06f 0208 	mvn.w	r2, #8
 800358a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2204      	movs	r2, #4
 8003590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fa24 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 80035a6:	e005      	b.n	80035b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fa16 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fa27 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	d122      	bne.n	800360e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b10      	cmp	r3, #16
 80035d4:	d11b      	bne.n	800360e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f06f 0210 	mvn.w	r2, #16
 80035de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2208      	movs	r2, #8
 80035e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f9fa 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 80035fa:	e005      	b.n	8003608 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f9ec 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f9fd 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b01      	cmp	r3, #1
 800361a:	d10e      	bne.n	800363a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f06f 0201 	mvn.w	r2, #1
 8003632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7fe f91b 	bl	8001870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003644:	2b80      	cmp	r3, #128	; 0x80
 8003646:	d10e      	bne.n	8003666 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003652:	2b80      	cmp	r3, #128	; 0x80
 8003654:	d107      	bne.n	8003666 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800365e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fd01 	bl	8004068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b40      	cmp	r3, #64	; 0x40
 8003672:	d10e      	bne.n	8003692 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b40      	cmp	r3, #64	; 0x40
 8003680:	d107      	bne.n	8003692 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800368a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f9c2 	bl	8003a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b20      	cmp	r3, #32
 800369e:	d10e      	bne.n	80036be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d107      	bne.n	80036be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f06f 0220 	mvn.w	r2, #32
 80036b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 fccb 	bl	8004054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e0ae      	b.n	8003844 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b0c      	cmp	r3, #12
 80036f2:	f200 809f 	bhi.w	8003834 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036f6:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fc:	08003731 	.word	0x08003731
 8003700:	08003835 	.word	0x08003835
 8003704:	08003835 	.word	0x08003835
 8003708:	08003835 	.word	0x08003835
 800370c:	08003771 	.word	0x08003771
 8003710:	08003835 	.word	0x08003835
 8003714:	08003835 	.word	0x08003835
 8003718:	08003835 	.word	0x08003835
 800371c:	080037b3 	.word	0x080037b3
 8003720:	08003835 	.word	0x08003835
 8003724:	08003835 	.word	0x08003835
 8003728:	08003835 	.word	0x08003835
 800372c:	080037f3 	.word	0x080037f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 f9f8 	bl	8003b2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0208 	orr.w	r2, r2, #8
 800374a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0204 	bic.w	r2, r2, #4
 800375a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6999      	ldr	r1, [r3, #24]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	619a      	str	r2, [r3, #24]
      break;
 800376e:	e064      	b.n	800383a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fa3e 	bl	8003bf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800378a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800379a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6999      	ldr	r1, [r3, #24]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	021a      	lsls	r2, r3, #8
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	619a      	str	r2, [r3, #24]
      break;
 80037b0:	e043      	b.n	800383a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68b9      	ldr	r1, [r7, #8]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fa89 	bl	8003cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69da      	ldr	r2, [r3, #28]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0208 	orr.w	r2, r2, #8
 80037cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69da      	ldr	r2, [r3, #28]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0204 	bic.w	r2, r2, #4
 80037dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69d9      	ldr	r1, [r3, #28]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	61da      	str	r2, [r3, #28]
      break;
 80037f0:	e023      	b.n	800383a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fad3 	bl	8003da4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69da      	ldr	r2, [r3, #28]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800380c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69d9      	ldr	r1, [r3, #28]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	021a      	lsls	r2, r3, #8
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	61da      	str	r2, [r3, #28]
      break;
 8003832:	e002      	b.n	800383a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	75fb      	strb	r3, [r7, #23]
      break;
 8003838:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003842:	7dfb      	ldrb	r3, [r7, #23]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_TIM_ConfigClockSource+0x1c>
 8003864:	2302      	movs	r3, #2
 8003866:	e0b4      	b.n	80039d2 <HAL_TIM_ConfigClockSource+0x186>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800388e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a0:	d03e      	beq.n	8003920 <HAL_TIM_ConfigClockSource+0xd4>
 80038a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a6:	f200 8087 	bhi.w	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ae:	f000 8086 	beq.w	80039be <HAL_TIM_ConfigClockSource+0x172>
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b6:	d87f      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038b8:	2b70      	cmp	r3, #112	; 0x70
 80038ba:	d01a      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0xa6>
 80038bc:	2b70      	cmp	r3, #112	; 0x70
 80038be:	d87b      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038c0:	2b60      	cmp	r3, #96	; 0x60
 80038c2:	d050      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x11a>
 80038c4:	2b60      	cmp	r3, #96	; 0x60
 80038c6:	d877      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038c8:	2b50      	cmp	r3, #80	; 0x50
 80038ca:	d03c      	beq.n	8003946 <HAL_TIM_ConfigClockSource+0xfa>
 80038cc:	2b50      	cmp	r3, #80	; 0x50
 80038ce:	d873      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	d058      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x13a>
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	d86f      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038d8:	2b30      	cmp	r3, #48	; 0x30
 80038da:	d064      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x15a>
 80038dc:	2b30      	cmp	r3, #48	; 0x30
 80038de:	d86b      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d060      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x15a>
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d867      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d05c      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x15a>
 80038ec:	2b10      	cmp	r3, #16
 80038ee:	d05a      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x15a>
 80038f0:	e062      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6899      	ldr	r1, [r3, #8]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f000 fb19 	bl	8003f38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	609a      	str	r2, [r3, #8]
      break;
 800391e:	e04f      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6899      	ldr	r1, [r3, #8]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f000 fb02 	bl	8003f38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003942:	609a      	str	r2, [r3, #8]
      break;
 8003944:	e03c      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	461a      	mov	r2, r3
 8003954:	f000 fa76 	bl	8003e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2150      	movs	r1, #80	; 0x50
 800395e:	4618      	mov	r0, r3
 8003960:	f000 facf 	bl	8003f02 <TIM_ITRx_SetConfig>
      break;
 8003964:	e02c      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6859      	ldr	r1, [r3, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	461a      	mov	r2, r3
 8003974:	f000 fa95 	bl	8003ea2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2160      	movs	r1, #96	; 0x60
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fabf 	bl	8003f02 <TIM_ITRx_SetConfig>
      break;
 8003984:	e01c      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6859      	ldr	r1, [r3, #4]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	461a      	mov	r2, r3
 8003994:	f000 fa56 	bl	8003e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2140      	movs	r1, #64	; 0x40
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 faaf 	bl	8003f02 <TIM_ITRx_SetConfig>
      break;
 80039a4:	e00c      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4619      	mov	r1, r3
 80039b0:	4610      	mov	r0, r2
 80039b2:	f000 faa6 	bl	8003f02 <TIM_ITRx_SetConfig>
      break;
 80039b6:	e003      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      break;
 80039bc:	e000      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a34      	ldr	r2, [pc, #208]	; (8003b10 <TIM_Base_SetConfig+0xe4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00f      	beq.n	8003a64 <TIM_Base_SetConfig+0x38>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4a:	d00b      	beq.n	8003a64 <TIM_Base_SetConfig+0x38>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a31      	ldr	r2, [pc, #196]	; (8003b14 <TIM_Base_SetConfig+0xe8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d007      	beq.n	8003a64 <TIM_Base_SetConfig+0x38>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a30      	ldr	r2, [pc, #192]	; (8003b18 <TIM_Base_SetConfig+0xec>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d003      	beq.n	8003a64 <TIM_Base_SetConfig+0x38>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a2f      	ldr	r2, [pc, #188]	; (8003b1c <TIM_Base_SetConfig+0xf0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d108      	bne.n	8003a76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a25      	ldr	r2, [pc, #148]	; (8003b10 <TIM_Base_SetConfig+0xe4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01b      	beq.n	8003ab6 <TIM_Base_SetConfig+0x8a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a84:	d017      	beq.n	8003ab6 <TIM_Base_SetConfig+0x8a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a22      	ldr	r2, [pc, #136]	; (8003b14 <TIM_Base_SetConfig+0xe8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <TIM_Base_SetConfig+0x8a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a21      	ldr	r2, [pc, #132]	; (8003b18 <TIM_Base_SetConfig+0xec>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00f      	beq.n	8003ab6 <TIM_Base_SetConfig+0x8a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a20      	ldr	r2, [pc, #128]	; (8003b1c <TIM_Base_SetConfig+0xf0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00b      	beq.n	8003ab6 <TIM_Base_SetConfig+0x8a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a1f      	ldr	r2, [pc, #124]	; (8003b20 <TIM_Base_SetConfig+0xf4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d007      	beq.n	8003ab6 <TIM_Base_SetConfig+0x8a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a1e      	ldr	r2, [pc, #120]	; (8003b24 <TIM_Base_SetConfig+0xf8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d003      	beq.n	8003ab6 <TIM_Base_SetConfig+0x8a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a1d      	ldr	r2, [pc, #116]	; (8003b28 <TIM_Base_SetConfig+0xfc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d108      	bne.n	8003ac8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a08      	ldr	r2, [pc, #32]	; (8003b10 <TIM_Base_SetConfig+0xe4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d103      	bne.n	8003afc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	615a      	str	r2, [r3, #20]
}
 8003b02:	bf00      	nop
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40010000 	.word	0x40010000
 8003b14:	40000400 	.word	0x40000400
 8003b18:	40000800 	.word	0x40000800
 8003b1c:	40000c00 	.word	0x40000c00
 8003b20:	40014000 	.word	0x40014000
 8003b24:	40014400 	.word	0x40014400
 8003b28:	40014800 	.word	0x40014800

08003b2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f023 0201 	bic.w	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f023 0302 	bic.w	r3, r3, #2
 8003b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a1c      	ldr	r2, [pc, #112]	; (8003bf4 <TIM_OC1_SetConfig+0xc8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d10c      	bne.n	8003ba2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0308 	bic.w	r3, r3, #8
 8003b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f023 0304 	bic.w	r3, r3, #4
 8003ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <TIM_OC1_SetConfig+0xc8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d111      	bne.n	8003bce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	621a      	str	r2, [r3, #32]
}
 8003be8:	bf00      	nop
 8003bea:	371c      	adds	r7, #28
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	40010000 	.word	0x40010000

08003bf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	f023 0210 	bic.w	r2, r3, #16
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f023 0320 	bic.w	r3, r3, #32
 8003c42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a1e      	ldr	r2, [pc, #120]	; (8003ccc <TIM_OC2_SetConfig+0xd4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d10d      	bne.n	8003c74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a15      	ldr	r2, [pc, #84]	; (8003ccc <TIM_OC2_SetConfig+0xd4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d113      	bne.n	8003ca4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	621a      	str	r2, [r3, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40010000 	.word	0x40010000

08003cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69db      	ldr	r3, [r3, #28]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0303 	bic.w	r3, r3, #3
 8003d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a1d      	ldr	r2, [pc, #116]	; (8003da0 <TIM_OC3_SetConfig+0xd0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10d      	bne.n	8003d4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a14      	ldr	r2, [pc, #80]	; (8003da0 <TIM_OC3_SetConfig+0xd0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d113      	bne.n	8003d7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	621a      	str	r2, [r3, #32]
}
 8003d94:	bf00      	nop
 8003d96:	371c      	adds	r7, #28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	40010000 	.word	0x40010000

08003da4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	021b      	lsls	r3, r3, #8
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	031b      	lsls	r3, r3, #12
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a10      	ldr	r2, [pc, #64]	; (8003e40 <TIM_OC4_SetConfig+0x9c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d109      	bne.n	8003e18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	019b      	lsls	r3, r3, #6
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	621a      	str	r2, [r3, #32]
}
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40010000 	.word	0x40010000

08003e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f023 0201 	bic.w	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f023 030a 	bic.w	r3, r3, #10
 8003e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b087      	sub	sp, #28
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	f023 0210 	bic.w	r2, r3, #16
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ecc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	031b      	lsls	r3, r3, #12
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ede:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	621a      	str	r2, [r3, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b085      	sub	sp, #20
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f043 0307 	orr.w	r3, r3, #7
 8003f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	609a      	str	r2, [r3, #8]
}
 8003f2c:	bf00      	nop
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	021a      	lsls	r2, r3, #8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	609a      	str	r2, [r3, #8]
}
 8003f6c:	bf00      	nop
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e050      	b.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d018      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fdc:	d013      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a18      	ldr	r2, [pc, #96]	; (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00e      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a16      	ldr	r2, [pc, #88]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d009      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a15      	ldr	r2, [pc, #84]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a13      	ldr	r2, [pc, #76]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10c      	bne.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800400c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	4313      	orrs	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40010000 	.word	0x40010000
 8004044:	40000400 	.word	0x40000400
 8004048:	40000800 	.word	0x40000800
 800404c:	40000c00 	.word	0x40000c00
 8004050:	40014000 	.word	0x40014000

08004054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e03f      	b.n	800410e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fd fd72 	bl	8001b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2224      	movs	r2, #36	; 0x24
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fddb 	bl	8004c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695a      	ldr	r2, [r3, #20]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b08a      	sub	sp, #40	; 0x28
 800411a:	af02      	add	r7, sp, #8
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	603b      	str	r3, [r7, #0]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b20      	cmp	r3, #32
 8004134:	d17c      	bne.n	8004230 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <HAL_UART_Transmit+0x2c>
 800413c:	88fb      	ldrh	r3, [r7, #6]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e075      	b.n	8004232 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_UART_Transmit+0x3e>
 8004150:	2302      	movs	r3, #2
 8004152:	e06e      	b.n	8004232 <HAL_UART_Transmit+0x11c>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2221      	movs	r2, #33	; 0x21
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800416a:	f7fd ff83 	bl	8002074 <HAL_GetTick>
 800416e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	88fa      	ldrh	r2, [r7, #6]
 8004174:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	88fa      	ldrh	r2, [r7, #6]
 800417a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004184:	d108      	bne.n	8004198 <HAL_UART_Transmit+0x82>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d104      	bne.n	8004198 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	61bb      	str	r3, [r7, #24]
 8004196:	e003      	b.n	80041a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800419c:	2300      	movs	r3, #0
 800419e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041a8:	e02a      	b.n	8004200 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2200      	movs	r2, #0
 80041b2:	2180      	movs	r1, #128	; 0x80
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 fb1f 	bl	80047f8 <UART_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e036      	b.n	8004232 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10b      	bne.n	80041e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	3302      	adds	r3, #2
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	e007      	b.n	80041f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	781a      	ldrb	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	3301      	adds	r3, #1
 80041f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1cf      	bne.n	80041aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2200      	movs	r2, #0
 8004212:	2140      	movs	r1, #64	; 0x40
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 faef 	bl	80047f8 <UART_WaitOnFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e006      	b.n	8004232 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e000      	b.n	8004232 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004230:	2302      	movs	r3, #2
  }
}
 8004232:	4618      	mov	r0, r3
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	4613      	mov	r3, r2
 8004246:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b20      	cmp	r3, #32
 8004252:	d11d      	bne.n	8004290 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_UART_Receive_IT+0x26>
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e016      	b.n	8004292 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_UART_Receive_IT+0x38>
 800426e:	2302      	movs	r3, #2
 8004270:	e00f      	b.n	8004292 <HAL_UART_Receive_IT+0x58>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	461a      	mov	r2, r3
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 fb24 	bl	80048d4 <UART_Start_Receive_IT>
 800428c:	4603      	mov	r3, r0
 800428e:	e000      	b.n	8004292 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004290:	2302      	movs	r3, #2
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b0ba      	sub	sp, #232	; 0xe8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10f      	bne.n	8004302 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <HAL_UART_IRQHandler+0x66>
 80042ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fc03 	bl	8004b06 <UART_Receive_IT>
      return;
 8004300:	e256      	b.n	80047b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80de 	beq.w	80044c8 <HAL_UART_IRQHandler+0x22c>
 800430c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d106      	bne.n	8004326 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80d1 	beq.w	80044c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <HAL_UART_IRQHandler+0xae>
 8004332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0201 	orr.w	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800434a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00b      	beq.n	800436e <HAL_UART_IRQHandler+0xd2>
 8004356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f043 0202 	orr.w	r2, r3, #2
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800436e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00b      	beq.n	8004392 <HAL_UART_IRQHandler+0xf6>
 800437a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f043 0204 	orr.w	r2, r3, #4
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d011      	beq.n	80043c2 <HAL_UART_IRQHandler+0x126>
 800439e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d105      	bne.n	80043b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f043 0208 	orr.w	r2, r3, #8
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 81ed 	beq.w	80047a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_UART_IRQHandler+0x14e>
 80043d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fb8e 	bl	8004b06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f4:	2b40      	cmp	r3, #64	; 0x40
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <HAL_UART_IRQHandler+0x17a>
 800440e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004412:	2b00      	cmp	r3, #0
 8004414:	d04f      	beq.n	80044b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fa96 	bl	8004948 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004426:	2b40      	cmp	r3, #64	; 0x40
 8004428:	d141      	bne.n	80044ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3314      	adds	r3, #20
 8004430:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004440:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3314      	adds	r3, #20
 8004452:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004456:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800445a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004462:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800446e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1d9      	bne.n	800442a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	2b00      	cmp	r3, #0
 800447c:	d013      	beq.n	80044a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	4a7d      	ldr	r2, [pc, #500]	; (8004678 <HAL_UART_IRQHandler+0x3dc>)
 8004484:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	4618      	mov	r0, r3
 800448c:	f7fd ff50 	bl	8002330 <HAL_DMA_Abort_IT>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d016      	beq.n	80044c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044a0:	4610      	mov	r0, r2
 80044a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	e00e      	b.n	80044c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f990 	bl	80047cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ac:	e00a      	b.n	80044c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f98c 	bl	80047cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b4:	e006      	b.n	80044c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f988 	bl	80047cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044c2:	e170      	b.n	80047a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c4:	bf00      	nop
    return;
 80044c6:	e16e      	b.n	80047a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	f040 814a 	bne.w	8004766 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8143 	beq.w	8004766 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 813c 	beq.w	8004766 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ee:	2300      	movs	r3, #0
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b40      	cmp	r3, #64	; 0x40
 8004510:	f040 80b4 	bne.w	800467c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004520:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8140 	beq.w	80047aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800452e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004532:	429a      	cmp	r2, r3
 8004534:	f080 8139 	bcs.w	80047aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800453e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800454a:	f000 8088 	beq.w	800465e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	330c      	adds	r3, #12
 8004554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004564:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800456c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800457a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800457e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004586:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1d9      	bne.n	800454e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3314      	adds	r3, #20
 80045a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a4:	e853 3f00 	ldrex	r3, [r3]
 80045a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045ac:	f023 0301 	bic.w	r3, r3, #1
 80045b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3314      	adds	r3, #20
 80045ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e1      	bne.n	800459a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3314      	adds	r3, #20
 80045dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045e0:	e853 3f00 	ldrex	r3, [r3]
 80045e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3314      	adds	r3, #20
 80045f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004600:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e3      	bne.n	80045d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800462c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800462e:	f023 0310 	bic.w	r3, r3, #16
 8004632:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004640:	65ba      	str	r2, [r7, #88]	; 0x58
 8004642:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004646:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800464e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e3      	bne.n	800461c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	4618      	mov	r0, r3
 800465a:	f7fd fdf9 	bl	8002250 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004666:	b29b      	uxth	r3, r3
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	b29b      	uxth	r3, r3
 800466c:	4619      	mov	r1, r3
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8b6 	bl	80047e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004674:	e099      	b.n	80047aa <HAL_UART_IRQHandler+0x50e>
 8004676:	bf00      	nop
 8004678:	08004a0f 	.word	0x08004a0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004684:	b29b      	uxth	r3, r3
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 808b 	beq.w	80047ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8086 	beq.w	80047ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	330c      	adds	r3, #12
 80046c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046c6:	647a      	str	r2, [r7, #68]	; 0x44
 80046c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e3      	bne.n	80046a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3314      	adds	r3, #20
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	623b      	str	r3, [r7, #32]
   return(result);
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3314      	adds	r3, #20
 80046fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046fe:	633a      	str	r2, [r7, #48]	; 0x30
 8004700:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800470c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e3      	bne.n	80046da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	330c      	adds	r3, #12
 8004726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0310 	bic.w	r3, r3, #16
 8004736:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004744:	61fa      	str	r2, [r7, #28]
 8004746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004748:	69b9      	ldr	r1, [r7, #24]
 800474a:	69fa      	ldr	r2, [r7, #28]
 800474c:	e841 2300 	strex	r3, r2, [r1]
 8004750:	617b      	str	r3, [r7, #20]
   return(result);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1e3      	bne.n	8004720 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800475c:	4619      	mov	r1, r3
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f83e 	bl	80047e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004764:	e023      	b.n	80047ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <HAL_UART_IRQHandler+0x4ea>
 8004772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f959 	bl	8004a36 <UART_Transmit_IT>
    return;
 8004784:	e014      	b.n	80047b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00e      	beq.n	80047b0 <HAL_UART_IRQHandler+0x514>
 8004792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	d008      	beq.n	80047b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f999 	bl	8004ad6 <UART_EndTransmit_IT>
    return;
 80047a4:	e004      	b.n	80047b0 <HAL_UART_IRQHandler+0x514>
    return;
 80047a6:	bf00      	nop
 80047a8:	e002      	b.n	80047b0 <HAL_UART_IRQHandler+0x514>
      return;
 80047aa:	bf00      	nop
 80047ac:	e000      	b.n	80047b0 <HAL_UART_IRQHandler+0x514>
      return;
 80047ae:	bf00      	nop
  }
}
 80047b0:	37e8      	adds	r7, #232	; 0xe8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop

080047b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b090      	sub	sp, #64	; 0x40
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	4613      	mov	r3, r2
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004808:	e050      	b.n	80048ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d04c      	beq.n	80048ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <UART_WaitOnFlagUntilTimeout+0x30>
 8004818:	f7fd fc2c 	bl	8002074 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004824:	429a      	cmp	r2, r3
 8004826:	d241      	bcs.n	80048ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	330c      	adds	r3, #12
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	330c      	adds	r3, #12
 8004846:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004848:	637a      	str	r2, [r7, #52]	; 0x34
 800484a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800484e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1e5      	bne.n	8004828 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3314      	adds	r3, #20
 8004862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	613b      	str	r3, [r7, #16]
   return(result);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	63bb      	str	r3, [r7, #56]	; 0x38
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3314      	adds	r3, #20
 800487a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800487c:	623a      	str	r2, [r7, #32]
 800487e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004880:	69f9      	ldr	r1, [r7, #28]
 8004882:	6a3a      	ldr	r2, [r7, #32]
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	61bb      	str	r3, [r7, #24]
   return(result);
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e5      	bne.n	800485c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e00f      	b.n	80048cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4013      	ands	r3, r2
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	bf0c      	ite	eq
 80048bc:	2301      	moveq	r3, #1
 80048be:	2300      	movne	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d09f      	beq.n	800480a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3740      	adds	r7, #64	; 0x40
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	4613      	mov	r3, r2
 80048e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	88fa      	ldrh	r2, [r7, #6]
 80048ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	88fa      	ldrh	r2, [r7, #6]
 80048f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2222      	movs	r2, #34	; 0x22
 80048fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004918:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695a      	ldr	r2, [r3, #20]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0201 	orr.w	r2, r2, #1
 8004928:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0220 	orr.w	r2, r2, #32
 8004938:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004948:	b480      	push	{r7}
 800494a:	b095      	sub	sp, #84	; 0x54
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004962:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004970:	643a      	str	r2, [r7, #64]	; 0x40
 8004972:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004976:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e5      	bne.n	8004950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3314      	adds	r3, #20
 800498a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	e853 3f00 	ldrex	r3, [r3]
 8004992:	61fb      	str	r3, [r7, #28]
   return(result);
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	64bb      	str	r3, [r7, #72]	; 0x48
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3314      	adds	r3, #20
 80049a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e5      	bne.n	8004984 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d119      	bne.n	80049f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	330c      	adds	r3, #12
 80049c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f023 0310 	bic.w	r3, r3, #16
 80049d6:	647b      	str	r3, [r7, #68]	; 0x44
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	330c      	adds	r3, #12
 80049de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049e0:	61ba      	str	r2, [r7, #24]
 80049e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6979      	ldr	r1, [r7, #20]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	613b      	str	r3, [r7, #16]
   return(result);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e5      	bne.n	80049c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a02:	bf00      	nop
 8004a04:	3754      	adds	r7, #84	; 0x54
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b084      	sub	sp, #16
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7ff fecf 	bl	80047cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b21      	cmp	r3, #33	; 0x21
 8004a48:	d13e      	bne.n	8004ac8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a52:	d114      	bne.n	8004a7e <UART_Transmit_IT+0x48>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d110      	bne.n	8004a7e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	1c9a      	adds	r2, r3, #2
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	621a      	str	r2, [r3, #32]
 8004a7c:	e008      	b.n	8004a90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	1c59      	adds	r1, r3, #1
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6211      	str	r1, [r2, #32]
 8004a88:	781a      	ldrb	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10f      	bne.n	8004ac4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ab2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e000      	b.n	8004aca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ac8:	2302      	movs	r3, #2
  }
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff fe5e 	bl	80047b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b08c      	sub	sp, #48	; 0x30
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b22      	cmp	r3, #34	; 0x22
 8004b18:	f040 80ab 	bne.w	8004c72 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b24:	d117      	bne.n	8004b56 <UART_Receive_IT+0x50>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d113      	bne.n	8004b56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4e:	1c9a      	adds	r2, r3, #2
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	629a      	str	r2, [r3, #40]	; 0x28
 8004b54:	e026      	b.n	8004ba4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b68:	d007      	beq.n	8004b7a <UART_Receive_IT+0x74>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10a      	bne.n	8004b88 <UART_Receive_IT+0x82>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	e008      	b.n	8004b9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d15a      	bne.n	8004c6e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0220 	bic.w	r2, r2, #32
 8004bc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695a      	ldr	r2, [r3, #20]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d135      	bne.n	8004c64 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	330c      	adds	r3, #12
 8004c04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f023 0310 	bic.w	r3, r3, #16
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	330c      	adds	r3, #12
 8004c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1e:	623a      	str	r2, [r7, #32]
 8004c20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	69f9      	ldr	r1, [r7, #28]
 8004c24:	6a3a      	ldr	r2, [r7, #32]
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e5      	bne.n	8004bfe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d10a      	bne.n	8004c56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff fdbf 	bl	80047e0 <HAL_UARTEx_RxEventCallback>
 8004c62:	e002      	b.n	8004c6a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7fd f94f 	bl	8001f08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	e002      	b.n	8004c74 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e000      	b.n	8004c74 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004c72:	2302      	movs	r3, #2
  }
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3730      	adds	r7, #48	; 0x30
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c80:	b09f      	sub	sp, #124	; 0x7c
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c92:	68d9      	ldr	r1, [r3, #12]
 8004c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	ea40 0301 	orr.w	r3, r0, r1
 8004c9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cc0:	f021 010c 	bic.w	r1, r1, #12
 8004cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cda:	6999      	ldr	r1, [r3, #24]
 8004cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	ea40 0301 	orr.w	r3, r0, r1
 8004ce4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4bc5      	ldr	r3, [pc, #788]	; (8005000 <UART_SetConfig+0x384>)
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d004      	beq.n	8004cfa <UART_SetConfig+0x7e>
 8004cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4bc3      	ldr	r3, [pc, #780]	; (8005004 <UART_SetConfig+0x388>)
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d103      	bne.n	8004d02 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cfa:	f7fe fa95 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 8004cfe:	6778      	str	r0, [r7, #116]	; 0x74
 8004d00:	e002      	b.n	8004d08 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d02:	f7fe fa7d 	bl	8003200 <HAL_RCC_GetPCLK1Freq>
 8004d06:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d10:	f040 80b6 	bne.w	8004e80 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d16:	461c      	mov	r4, r3
 8004d18:	f04f 0500 	mov.w	r5, #0
 8004d1c:	4622      	mov	r2, r4
 8004d1e:	462b      	mov	r3, r5
 8004d20:	1891      	adds	r1, r2, r2
 8004d22:	6439      	str	r1, [r7, #64]	; 0x40
 8004d24:	415b      	adcs	r3, r3
 8004d26:	647b      	str	r3, [r7, #68]	; 0x44
 8004d28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d2c:	1912      	adds	r2, r2, r4
 8004d2e:	eb45 0303 	adc.w	r3, r5, r3
 8004d32:	f04f 0000 	mov.w	r0, #0
 8004d36:	f04f 0100 	mov.w	r1, #0
 8004d3a:	00d9      	lsls	r1, r3, #3
 8004d3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d40:	00d0      	lsls	r0, r2, #3
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	1911      	adds	r1, r2, r4
 8004d48:	6639      	str	r1, [r7, #96]	; 0x60
 8004d4a:	416b      	adcs	r3, r5
 8004d4c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	461a      	mov	r2, r3
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	1891      	adds	r1, r2, r2
 8004d5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d5c:	415b      	adcs	r3, r3
 8004d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d64:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004d68:	f7fb ff26 	bl	8000bb8 <__aeabi_uldivmod>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4ba5      	ldr	r3, [pc, #660]	; (8005008 <UART_SetConfig+0x38c>)
 8004d72:	fba3 2302 	umull	r2, r3, r3, r2
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	011e      	lsls	r6, r3, #4
 8004d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d7c:	461c      	mov	r4, r3
 8004d7e:	f04f 0500 	mov.w	r5, #0
 8004d82:	4622      	mov	r2, r4
 8004d84:	462b      	mov	r3, r5
 8004d86:	1891      	adds	r1, r2, r2
 8004d88:	6339      	str	r1, [r7, #48]	; 0x30
 8004d8a:	415b      	adcs	r3, r3
 8004d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004d92:	1912      	adds	r2, r2, r4
 8004d94:	eb45 0303 	adc.w	r3, r5, r3
 8004d98:	f04f 0000 	mov.w	r0, #0
 8004d9c:	f04f 0100 	mov.w	r1, #0
 8004da0:	00d9      	lsls	r1, r3, #3
 8004da2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004da6:	00d0      	lsls	r0, r2, #3
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	1911      	adds	r1, r2, r4
 8004dae:	65b9      	str	r1, [r7, #88]	; 0x58
 8004db0:	416b      	adcs	r3, r5
 8004db2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	461a      	mov	r2, r3
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	1891      	adds	r1, r2, r2
 8004dc0:	62b9      	str	r1, [r7, #40]	; 0x28
 8004dc2:	415b      	adcs	r3, r3
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004dce:	f7fb fef3 	bl	8000bb8 <__aeabi_uldivmod>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4b8c      	ldr	r3, [pc, #560]	; (8005008 <UART_SetConfig+0x38c>)
 8004dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ddc:	095b      	lsrs	r3, r3, #5
 8004dde:	2164      	movs	r1, #100	; 0x64
 8004de0:	fb01 f303 	mul.w	r3, r1, r3
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	3332      	adds	r3, #50	; 0x32
 8004dea:	4a87      	ldr	r2, [pc, #540]	; (8005008 <UART_SetConfig+0x38c>)
 8004dec:	fba2 2303 	umull	r2, r3, r2, r3
 8004df0:	095b      	lsrs	r3, r3, #5
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004df8:	441e      	add	r6, r3
 8004dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f04f 0100 	mov.w	r1, #0
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	1894      	adds	r4, r2, r2
 8004e08:	623c      	str	r4, [r7, #32]
 8004e0a:	415b      	adcs	r3, r3
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e12:	1812      	adds	r2, r2, r0
 8004e14:	eb41 0303 	adc.w	r3, r1, r3
 8004e18:	f04f 0400 	mov.w	r4, #0
 8004e1c:	f04f 0500 	mov.w	r5, #0
 8004e20:	00dd      	lsls	r5, r3, #3
 8004e22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e26:	00d4      	lsls	r4, r2, #3
 8004e28:	4622      	mov	r2, r4
 8004e2a:	462b      	mov	r3, r5
 8004e2c:	1814      	adds	r4, r2, r0
 8004e2e:	653c      	str	r4, [r7, #80]	; 0x50
 8004e30:	414b      	adcs	r3, r1
 8004e32:	657b      	str	r3, [r7, #84]	; 0x54
 8004e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	1891      	adds	r1, r2, r2
 8004e40:	61b9      	str	r1, [r7, #24]
 8004e42:	415b      	adcs	r3, r3
 8004e44:	61fb      	str	r3, [r7, #28]
 8004e46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004e4e:	f7fb feb3 	bl	8000bb8 <__aeabi_uldivmod>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	4b6c      	ldr	r3, [pc, #432]	; (8005008 <UART_SetConfig+0x38c>)
 8004e58:	fba3 1302 	umull	r1, r3, r3, r2
 8004e5c:	095b      	lsrs	r3, r3, #5
 8004e5e:	2164      	movs	r1, #100	; 0x64
 8004e60:	fb01 f303 	mul.w	r3, r1, r3
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	3332      	adds	r3, #50	; 0x32
 8004e6a:	4a67      	ldr	r2, [pc, #412]	; (8005008 <UART_SetConfig+0x38c>)
 8004e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e70:	095b      	lsrs	r3, r3, #5
 8004e72:	f003 0207 	and.w	r2, r3, #7
 8004e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4432      	add	r2, r6
 8004e7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e7e:	e0b9      	b.n	8004ff4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e82:	461c      	mov	r4, r3
 8004e84:	f04f 0500 	mov.w	r5, #0
 8004e88:	4622      	mov	r2, r4
 8004e8a:	462b      	mov	r3, r5
 8004e8c:	1891      	adds	r1, r2, r2
 8004e8e:	6139      	str	r1, [r7, #16]
 8004e90:	415b      	adcs	r3, r3
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e98:	1912      	adds	r2, r2, r4
 8004e9a:	eb45 0303 	adc.w	r3, r5, r3
 8004e9e:	f04f 0000 	mov.w	r0, #0
 8004ea2:	f04f 0100 	mov.w	r1, #0
 8004ea6:	00d9      	lsls	r1, r3, #3
 8004ea8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eac:	00d0      	lsls	r0, r2, #3
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	eb12 0804 	adds.w	r8, r2, r4
 8004eb6:	eb43 0905 	adc.w	r9, r3, r5
 8004eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f04f 0100 	mov.w	r1, #0
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	008b      	lsls	r3, r1, #2
 8004ece:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ed2:	0082      	lsls	r2, r0, #2
 8004ed4:	4640      	mov	r0, r8
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	f7fb fe6e 	bl	8000bb8 <__aeabi_uldivmod>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4b49      	ldr	r3, [pc, #292]	; (8005008 <UART_SetConfig+0x38c>)
 8004ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	011e      	lsls	r6, r3, #4
 8004eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eec:	4618      	mov	r0, r3
 8004eee:	f04f 0100 	mov.w	r1, #0
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	1894      	adds	r4, r2, r2
 8004ef8:	60bc      	str	r4, [r7, #8]
 8004efa:	415b      	adcs	r3, r3
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f02:	1812      	adds	r2, r2, r0
 8004f04:	eb41 0303 	adc.w	r3, r1, r3
 8004f08:	f04f 0400 	mov.w	r4, #0
 8004f0c:	f04f 0500 	mov.w	r5, #0
 8004f10:	00dd      	lsls	r5, r3, #3
 8004f12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f16:	00d4      	lsls	r4, r2, #3
 8004f18:	4622      	mov	r2, r4
 8004f1a:	462b      	mov	r3, r5
 8004f1c:	1814      	adds	r4, r2, r0
 8004f1e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f20:	414b      	adcs	r3, r1
 8004f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f04f 0100 	mov.w	r1, #0
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	008b      	lsls	r3, r1, #2
 8004f38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f3c:	0082      	lsls	r2, r0, #2
 8004f3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004f42:	f7fb fe39 	bl	8000bb8 <__aeabi_uldivmod>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4b2f      	ldr	r3, [pc, #188]	; (8005008 <UART_SetConfig+0x38c>)
 8004f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f50:	095b      	lsrs	r3, r3, #5
 8004f52:	2164      	movs	r1, #100	; 0x64
 8004f54:	fb01 f303 	mul.w	r3, r1, r3
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	3332      	adds	r3, #50	; 0x32
 8004f5e:	4a2a      	ldr	r2, [pc, #168]	; (8005008 <UART_SetConfig+0x38c>)
 8004f60:	fba2 2303 	umull	r2, r3, r2, r3
 8004f64:	095b      	lsrs	r3, r3, #5
 8004f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f6a:	441e      	add	r6, r3
 8004f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f04f 0100 	mov.w	r1, #0
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	1894      	adds	r4, r2, r2
 8004f7a:	603c      	str	r4, [r7, #0]
 8004f7c:	415b      	adcs	r3, r3
 8004f7e:	607b      	str	r3, [r7, #4]
 8004f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f84:	1812      	adds	r2, r2, r0
 8004f86:	eb41 0303 	adc.w	r3, r1, r3
 8004f8a:	f04f 0400 	mov.w	r4, #0
 8004f8e:	f04f 0500 	mov.w	r5, #0
 8004f92:	00dd      	lsls	r5, r3, #3
 8004f94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f98:	00d4      	lsls	r4, r2, #3
 8004f9a:	4622      	mov	r2, r4
 8004f9c:	462b      	mov	r3, r5
 8004f9e:	eb12 0a00 	adds.w	sl, r2, r0
 8004fa2:	eb43 0b01 	adc.w	fp, r3, r1
 8004fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	008b      	lsls	r3, r1, #2
 8004fba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fbe:	0082      	lsls	r2, r0, #2
 8004fc0:	4650      	mov	r0, sl
 8004fc2:	4659      	mov	r1, fp
 8004fc4:	f7fb fdf8 	bl	8000bb8 <__aeabi_uldivmod>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4b0e      	ldr	r3, [pc, #56]	; (8005008 <UART_SetConfig+0x38c>)
 8004fce:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	2164      	movs	r1, #100	; 0x64
 8004fd6:	fb01 f303 	mul.w	r3, r1, r3
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	3332      	adds	r3, #50	; 0x32
 8004fe0:	4a09      	ldr	r2, [pc, #36]	; (8005008 <UART_SetConfig+0x38c>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	f003 020f 	and.w	r2, r3, #15
 8004fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4432      	add	r2, r6
 8004ff2:	609a      	str	r2, [r3, #8]
}
 8004ff4:	bf00      	nop
 8004ff6:	377c      	adds	r7, #124	; 0x7c
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffe:	bf00      	nop
 8005000:	40011000 	.word	0x40011000
 8005004:	40011400 	.word	0x40011400
 8005008:	51eb851f 	.word	0x51eb851f

0800500c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005010:	4b05      	ldr	r3, [pc, #20]	; (8005028 <SysTick_Handler+0x1c>)
 8005012:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005014:	f000 f996 	bl	8005344 <xTaskGetSchedulerState>
 8005018:	4603      	mov	r3, r0
 800501a:	2b01      	cmp	r3, #1
 800501c:	d001      	beq.n	8005022 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800501e:	f000 f9fb 	bl	8005418 <xPortSysTickHandler>
  }
}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	e000e010 	.word	0xe000e010

0800502c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	601a      	str	r2, [r3, #0]
}
 8005068:	bf00      	nop
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6892      	ldr	r2, [r2, #8]
 800508a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6852      	ldr	r2, [r2, #4]
 8005094:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	429a      	cmp	r2, r3
 800509e:	d103      	bne.n	80050a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	1e5a      	subs	r2, r3, #1
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050d2:	4b4f      	ldr	r3, [pc, #316]	; (8005210 <xTaskIncrementTick+0x148>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f040 808f 	bne.w	80051fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050dc:	4b4d      	ldr	r3, [pc, #308]	; (8005214 <xTaskIncrementTick+0x14c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3301      	adds	r3, #1
 80050e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050e4:	4a4b      	ldr	r2, [pc, #300]	; (8005214 <xTaskIncrementTick+0x14c>)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d120      	bne.n	8005132 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80050f0:	4b49      	ldr	r3, [pc, #292]	; (8005218 <xTaskIncrementTick+0x150>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800510c:	bf00      	nop
 800510e:	e7fe      	b.n	800510e <xTaskIncrementTick+0x46>
 8005110:	4b41      	ldr	r3, [pc, #260]	; (8005218 <xTaskIncrementTick+0x150>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	4b41      	ldr	r3, [pc, #260]	; (800521c <xTaskIncrementTick+0x154>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a3f      	ldr	r2, [pc, #252]	; (8005218 <xTaskIncrementTick+0x150>)
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	4a3f      	ldr	r2, [pc, #252]	; (800521c <xTaskIncrementTick+0x154>)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	4b3e      	ldr	r3, [pc, #248]	; (8005220 <xTaskIncrementTick+0x158>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3301      	adds	r3, #1
 800512a:	4a3d      	ldr	r2, [pc, #244]	; (8005220 <xTaskIncrementTick+0x158>)
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	f000 f8e9 	bl	8005304 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005132:	4b3c      	ldr	r3, [pc, #240]	; (8005224 <xTaskIncrementTick+0x15c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	429a      	cmp	r2, r3
 800513a:	d349      	bcc.n	80051d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800513c:	4b36      	ldr	r3, [pc, #216]	; (8005218 <xTaskIncrementTick+0x150>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d104      	bne.n	8005150 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005146:	4b37      	ldr	r3, [pc, #220]	; (8005224 <xTaskIncrementTick+0x15c>)
 8005148:	f04f 32ff 	mov.w	r2, #4294967295
 800514c:	601a      	str	r2, [r3, #0]
					break;
 800514e:	e03f      	b.n	80051d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005150:	4b31      	ldr	r3, [pc, #196]	; (8005218 <xTaskIncrementTick+0x150>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	429a      	cmp	r2, r3
 8005166:	d203      	bcs.n	8005170 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005168:	4a2e      	ldr	r2, [pc, #184]	; (8005224 <xTaskIncrementTick+0x15c>)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800516e:	e02f      	b.n	80051d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	3304      	adds	r3, #4
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff ff7d 	bl	8005074 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	2b00      	cmp	r3, #0
 8005180:	d004      	beq.n	800518c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	3318      	adds	r3, #24
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff ff74 	bl	8005074 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005190:	4b25      	ldr	r3, [pc, #148]	; (8005228 <xTaskIncrementTick+0x160>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d903      	bls.n	80051a0 <xTaskIncrementTick+0xd8>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	4a22      	ldr	r2, [pc, #136]	; (8005228 <xTaskIncrementTick+0x160>)
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4a1f      	ldr	r2, [pc, #124]	; (800522c <xTaskIncrementTick+0x164>)
 80051ae:	441a      	add	r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	3304      	adds	r3, #4
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f7ff ff38 	bl	800502c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c0:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <xTaskIncrementTick+0x168>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d3b8      	bcc.n	800513c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80051ca:	2301      	movs	r3, #1
 80051cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ce:	e7b5      	b.n	800513c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051d0:	4b17      	ldr	r3, [pc, #92]	; (8005230 <xTaskIncrementTick+0x168>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d6:	4915      	ldr	r1, [pc, #84]	; (800522c <xTaskIncrementTick+0x164>)
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d901      	bls.n	80051ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80051e8:	2301      	movs	r3, #1
 80051ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80051ec:	4b11      	ldr	r3, [pc, #68]	; (8005234 <xTaskIncrementTick+0x16c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e004      	b.n	8005204 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80051fa:	4b0f      	ldr	r3, [pc, #60]	; (8005238 <xTaskIncrementTick+0x170>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3301      	adds	r3, #1
 8005200:	4a0d      	ldr	r2, [pc, #52]	; (8005238 <xTaskIncrementTick+0x170>)
 8005202:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005204:	697b      	ldr	r3, [r7, #20]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	200006d8 	.word	0x200006d8
 8005214:	200006bc 	.word	0x200006bc
 8005218:	200006b4 	.word	0x200006b4
 800521c:	200006b8 	.word	0x200006b8
 8005220:	200006d0 	.word	0x200006d0
 8005224:	200006d4 	.word	0x200006d4
 8005228:	200006c0 	.word	0x200006c0
 800522c:	20000254 	.word	0x20000254
 8005230:	20000250 	.word	0x20000250
 8005234:	200006cc 	.word	0x200006cc
 8005238:	200006c8 	.word	0x200006c8

0800523c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005242:	4b2a      	ldr	r3, [pc, #168]	; (80052ec <vTaskSwitchContext+0xb0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800524a:	4b29      	ldr	r3, [pc, #164]	; (80052f0 <vTaskSwitchContext+0xb4>)
 800524c:	2201      	movs	r2, #1
 800524e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005250:	e046      	b.n	80052e0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005252:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <vTaskSwitchContext+0xb4>)
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005258:	4b26      	ldr	r3, [pc, #152]	; (80052f4 <vTaskSwitchContext+0xb8>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	e010      	b.n	8005282 <vTaskSwitchContext+0x46>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10a      	bne.n	800527c <vTaskSwitchContext+0x40>
	__asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	607b      	str	r3, [r7, #4]
}
 8005278:	bf00      	nop
 800527a:	e7fe      	b.n	800527a <vTaskSwitchContext+0x3e>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3b01      	subs	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	491d      	ldr	r1, [pc, #116]	; (80052f8 <vTaskSwitchContext+0xbc>)
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	440b      	add	r3, r1
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0e4      	beq.n	8005260 <vTaskSwitchContext+0x24>
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4a15      	ldr	r2, [pc, #84]	; (80052f8 <vTaskSwitchContext+0xbc>)
 80052a2:	4413      	add	r3, r2
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	605a      	str	r2, [r3, #4]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	3308      	adds	r3, #8
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d104      	bne.n	80052c6 <vTaskSwitchContext+0x8a>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	605a      	str	r2, [r3, #4]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	4a0b      	ldr	r2, [pc, #44]	; (80052fc <vTaskSwitchContext+0xc0>)
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <vTaskSwitchContext+0xb8>)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80052d6:	4b09      	ldr	r3, [pc, #36]	; (80052fc <vTaskSwitchContext+0xc0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3354      	adds	r3, #84	; 0x54
 80052dc:	4a08      	ldr	r2, [pc, #32]	; (8005300 <vTaskSwitchContext+0xc4>)
 80052de:	6013      	str	r3, [r2, #0]
}
 80052e0:	bf00      	nop
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	200006d8 	.word	0x200006d8
 80052f0:	200006cc 	.word	0x200006cc
 80052f4:	200006c0 	.word	0x200006c0
 80052f8:	20000254 	.word	0x20000254
 80052fc:	20000250 	.word	0x20000250
 8005300:	20000054 	.word	0x20000054

08005304 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800530a:	4b0c      	ldr	r3, [pc, #48]	; (800533c <prvResetNextTaskUnblockTime+0x38>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d104      	bne.n	800531e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005314:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <prvResetNextTaskUnblockTime+0x3c>)
 8005316:	f04f 32ff 	mov.w	r2, #4294967295
 800531a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800531c:	e008      	b.n	8005330 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800531e:	4b07      	ldr	r3, [pc, #28]	; (800533c <prvResetNextTaskUnblockTime+0x38>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4a04      	ldr	r2, [pc, #16]	; (8005340 <prvResetNextTaskUnblockTime+0x3c>)
 800532e:	6013      	str	r3, [r2, #0]
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	200006b4 	.word	0x200006b4
 8005340:	200006d4 	.word	0x200006d4

08005344 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800534a:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <xTaskGetSchedulerState+0x34>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d102      	bne.n	8005358 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005352:	2301      	movs	r3, #1
 8005354:	607b      	str	r3, [r7, #4]
 8005356:	e008      	b.n	800536a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005358:	4b08      	ldr	r3, [pc, #32]	; (800537c <xTaskGetSchedulerState+0x38>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d102      	bne.n	8005366 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005360:	2302      	movs	r3, #2
 8005362:	607b      	str	r3, [r7, #4]
 8005364:	e001      	b.n	800536a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005366:	2300      	movs	r3, #0
 8005368:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800536a:	687b      	ldr	r3, [r7, #4]
	}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	200006c4 	.word	0x200006c4
 800537c:	200006d8 	.word	0x200006d8

08005380 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <pxCurrentTCBConst2>)
 8005382:	6819      	ldr	r1, [r3, #0]
 8005384:	6808      	ldr	r0, [r1, #0]
 8005386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538a:	f380 8809 	msr	PSP, r0
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f04f 0000 	mov.w	r0, #0
 8005396:	f380 8811 	msr	BASEPRI, r0
 800539a:	4770      	bx	lr
 800539c:	f3af 8000 	nop.w

080053a0 <pxCurrentTCBConst2>:
 80053a0:	20000250 	.word	0x20000250
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop
	...

080053b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053b0:	f3ef 8009 	mrs	r0, PSP
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	4b15      	ldr	r3, [pc, #84]	; (8005410 <pxCurrentTCBConst>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	f01e 0f10 	tst.w	lr, #16
 80053c0:	bf08      	it	eq
 80053c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80053c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ca:	6010      	str	r0, [r2, #0]
 80053cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80053d4:	f380 8811 	msr	BASEPRI, r0
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f7ff ff2c 	bl	800523c <vTaskSwitchContext>
 80053e4:	f04f 0000 	mov.w	r0, #0
 80053e8:	f380 8811 	msr	BASEPRI, r0
 80053ec:	bc09      	pop	{r0, r3}
 80053ee:	6819      	ldr	r1, [r3, #0]
 80053f0:	6808      	ldr	r0, [r1, #0]
 80053f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f6:	f01e 0f10 	tst.w	lr, #16
 80053fa:	bf08      	it	eq
 80053fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005400:	f380 8809 	msr	PSP, r0
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	f3af 8000 	nop.w

08005410 <pxCurrentTCBConst>:
 8005410:	20000250 	.word	0x20000250
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop

08005418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	607b      	str	r3, [r7, #4]
}
 8005430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005432:	f7ff fe49 	bl	80050c8 <xTaskIncrementTick>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800543c:	4b06      	ldr	r3, [pc, #24]	; (8005458 <xPortSysTickHandler+0x40>)
 800543e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	2300      	movs	r3, #0
 8005446:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800544e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005450:	bf00      	nop
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <atoi>:
 800545c:	220a      	movs	r2, #10
 800545e:	2100      	movs	r1, #0
 8005460:	f000 bf7a 	b.w	8006358 <strtol>

08005464 <__errno>:
 8005464:	4b01      	ldr	r3, [pc, #4]	; (800546c <__errno+0x8>)
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	20000054 	.word	0x20000054

08005470 <std>:
 8005470:	2300      	movs	r3, #0
 8005472:	b510      	push	{r4, lr}
 8005474:	4604      	mov	r4, r0
 8005476:	e9c0 3300 	strd	r3, r3, [r0]
 800547a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800547e:	6083      	str	r3, [r0, #8]
 8005480:	8181      	strh	r1, [r0, #12]
 8005482:	6643      	str	r3, [r0, #100]	; 0x64
 8005484:	81c2      	strh	r2, [r0, #14]
 8005486:	6183      	str	r3, [r0, #24]
 8005488:	4619      	mov	r1, r3
 800548a:	2208      	movs	r2, #8
 800548c:	305c      	adds	r0, #92	; 0x5c
 800548e:	f000 f91a 	bl	80056c6 <memset>
 8005492:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <std+0x38>)
 8005494:	6263      	str	r3, [r4, #36]	; 0x24
 8005496:	4b05      	ldr	r3, [pc, #20]	; (80054ac <std+0x3c>)
 8005498:	62a3      	str	r3, [r4, #40]	; 0x28
 800549a:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <std+0x40>)
 800549c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800549e:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <std+0x44>)
 80054a0:	6224      	str	r4, [r4, #32]
 80054a2:	6323      	str	r3, [r4, #48]	; 0x30
 80054a4:	bd10      	pop	{r4, pc}
 80054a6:	bf00      	nop
 80054a8:	080061c9 	.word	0x080061c9
 80054ac:	080061eb 	.word	0x080061eb
 80054b0:	08006223 	.word	0x08006223
 80054b4:	08006247 	.word	0x08006247

080054b8 <_cleanup_r>:
 80054b8:	4901      	ldr	r1, [pc, #4]	; (80054c0 <_cleanup_r+0x8>)
 80054ba:	f000 b8af 	b.w	800561c <_fwalk_reent>
 80054be:	bf00      	nop
 80054c0:	0800732d 	.word	0x0800732d

080054c4 <__sfmoreglue>:
 80054c4:	b570      	push	{r4, r5, r6, lr}
 80054c6:	1e4a      	subs	r2, r1, #1
 80054c8:	2568      	movs	r5, #104	; 0x68
 80054ca:	4355      	muls	r5, r2
 80054cc:	460e      	mov	r6, r1
 80054ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80054d2:	f000 f901 	bl	80056d8 <_malloc_r>
 80054d6:	4604      	mov	r4, r0
 80054d8:	b140      	cbz	r0, 80054ec <__sfmoreglue+0x28>
 80054da:	2100      	movs	r1, #0
 80054dc:	e9c0 1600 	strd	r1, r6, [r0]
 80054e0:	300c      	adds	r0, #12
 80054e2:	60a0      	str	r0, [r4, #8]
 80054e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80054e8:	f000 f8ed 	bl	80056c6 <memset>
 80054ec:	4620      	mov	r0, r4
 80054ee:	bd70      	pop	{r4, r5, r6, pc}

080054f0 <__sfp_lock_acquire>:
 80054f0:	4801      	ldr	r0, [pc, #4]	; (80054f8 <__sfp_lock_acquire+0x8>)
 80054f2:	f000 b8d8 	b.w	80056a6 <__retarget_lock_acquire_recursive>
 80054f6:	bf00      	nop
 80054f8:	20000c90 	.word	0x20000c90

080054fc <__sfp_lock_release>:
 80054fc:	4801      	ldr	r0, [pc, #4]	; (8005504 <__sfp_lock_release+0x8>)
 80054fe:	f000 b8d3 	b.w	80056a8 <__retarget_lock_release_recursive>
 8005502:	bf00      	nop
 8005504:	20000c90 	.word	0x20000c90

08005508 <__sinit_lock_acquire>:
 8005508:	4801      	ldr	r0, [pc, #4]	; (8005510 <__sinit_lock_acquire+0x8>)
 800550a:	f000 b8cc 	b.w	80056a6 <__retarget_lock_acquire_recursive>
 800550e:	bf00      	nop
 8005510:	20000c8b 	.word	0x20000c8b

08005514 <__sinit_lock_release>:
 8005514:	4801      	ldr	r0, [pc, #4]	; (800551c <__sinit_lock_release+0x8>)
 8005516:	f000 b8c7 	b.w	80056a8 <__retarget_lock_release_recursive>
 800551a:	bf00      	nop
 800551c:	20000c8b 	.word	0x20000c8b

08005520 <__sinit>:
 8005520:	b510      	push	{r4, lr}
 8005522:	4604      	mov	r4, r0
 8005524:	f7ff fff0 	bl	8005508 <__sinit_lock_acquire>
 8005528:	69a3      	ldr	r3, [r4, #24]
 800552a:	b11b      	cbz	r3, 8005534 <__sinit+0x14>
 800552c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005530:	f7ff bff0 	b.w	8005514 <__sinit_lock_release>
 8005534:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005538:	6523      	str	r3, [r4, #80]	; 0x50
 800553a:	4b13      	ldr	r3, [pc, #76]	; (8005588 <__sinit+0x68>)
 800553c:	4a13      	ldr	r2, [pc, #76]	; (800558c <__sinit+0x6c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	62a2      	str	r2, [r4, #40]	; 0x28
 8005542:	42a3      	cmp	r3, r4
 8005544:	bf04      	itt	eq
 8005546:	2301      	moveq	r3, #1
 8005548:	61a3      	streq	r3, [r4, #24]
 800554a:	4620      	mov	r0, r4
 800554c:	f000 f820 	bl	8005590 <__sfp>
 8005550:	6060      	str	r0, [r4, #4]
 8005552:	4620      	mov	r0, r4
 8005554:	f000 f81c 	bl	8005590 <__sfp>
 8005558:	60a0      	str	r0, [r4, #8]
 800555a:	4620      	mov	r0, r4
 800555c:	f000 f818 	bl	8005590 <__sfp>
 8005560:	2200      	movs	r2, #0
 8005562:	60e0      	str	r0, [r4, #12]
 8005564:	2104      	movs	r1, #4
 8005566:	6860      	ldr	r0, [r4, #4]
 8005568:	f7ff ff82 	bl	8005470 <std>
 800556c:	68a0      	ldr	r0, [r4, #8]
 800556e:	2201      	movs	r2, #1
 8005570:	2109      	movs	r1, #9
 8005572:	f7ff ff7d 	bl	8005470 <std>
 8005576:	68e0      	ldr	r0, [r4, #12]
 8005578:	2202      	movs	r2, #2
 800557a:	2112      	movs	r1, #18
 800557c:	f7ff ff78 	bl	8005470 <std>
 8005580:	2301      	movs	r3, #1
 8005582:	61a3      	str	r3, [r4, #24]
 8005584:	e7d2      	b.n	800552c <__sinit+0xc>
 8005586:	bf00      	nop
 8005588:	08008254 	.word	0x08008254
 800558c:	080054b9 	.word	0x080054b9

08005590 <__sfp>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	4607      	mov	r7, r0
 8005594:	f7ff ffac 	bl	80054f0 <__sfp_lock_acquire>
 8005598:	4b1e      	ldr	r3, [pc, #120]	; (8005614 <__sfp+0x84>)
 800559a:	681e      	ldr	r6, [r3, #0]
 800559c:	69b3      	ldr	r3, [r6, #24]
 800559e:	b913      	cbnz	r3, 80055a6 <__sfp+0x16>
 80055a0:	4630      	mov	r0, r6
 80055a2:	f7ff ffbd 	bl	8005520 <__sinit>
 80055a6:	3648      	adds	r6, #72	; 0x48
 80055a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80055ac:	3b01      	subs	r3, #1
 80055ae:	d503      	bpl.n	80055b8 <__sfp+0x28>
 80055b0:	6833      	ldr	r3, [r6, #0]
 80055b2:	b30b      	cbz	r3, 80055f8 <__sfp+0x68>
 80055b4:	6836      	ldr	r6, [r6, #0]
 80055b6:	e7f7      	b.n	80055a8 <__sfp+0x18>
 80055b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80055bc:	b9d5      	cbnz	r5, 80055f4 <__sfp+0x64>
 80055be:	4b16      	ldr	r3, [pc, #88]	; (8005618 <__sfp+0x88>)
 80055c0:	60e3      	str	r3, [r4, #12]
 80055c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055c6:	6665      	str	r5, [r4, #100]	; 0x64
 80055c8:	f000 f86c 	bl	80056a4 <__retarget_lock_init_recursive>
 80055cc:	f7ff ff96 	bl	80054fc <__sfp_lock_release>
 80055d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80055d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80055d8:	6025      	str	r5, [r4, #0]
 80055da:	61a5      	str	r5, [r4, #24]
 80055dc:	2208      	movs	r2, #8
 80055de:	4629      	mov	r1, r5
 80055e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055e4:	f000 f86f 	bl	80056c6 <memset>
 80055e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80055ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80055f0:	4620      	mov	r0, r4
 80055f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055f4:	3468      	adds	r4, #104	; 0x68
 80055f6:	e7d9      	b.n	80055ac <__sfp+0x1c>
 80055f8:	2104      	movs	r1, #4
 80055fa:	4638      	mov	r0, r7
 80055fc:	f7ff ff62 	bl	80054c4 <__sfmoreglue>
 8005600:	4604      	mov	r4, r0
 8005602:	6030      	str	r0, [r6, #0]
 8005604:	2800      	cmp	r0, #0
 8005606:	d1d5      	bne.n	80055b4 <__sfp+0x24>
 8005608:	f7ff ff78 	bl	80054fc <__sfp_lock_release>
 800560c:	230c      	movs	r3, #12
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	e7ee      	b.n	80055f0 <__sfp+0x60>
 8005612:	bf00      	nop
 8005614:	08008254 	.word	0x08008254
 8005618:	ffff0001 	.word	0xffff0001

0800561c <_fwalk_reent>:
 800561c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005620:	4606      	mov	r6, r0
 8005622:	4688      	mov	r8, r1
 8005624:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005628:	2700      	movs	r7, #0
 800562a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800562e:	f1b9 0901 	subs.w	r9, r9, #1
 8005632:	d505      	bpl.n	8005640 <_fwalk_reent+0x24>
 8005634:	6824      	ldr	r4, [r4, #0]
 8005636:	2c00      	cmp	r4, #0
 8005638:	d1f7      	bne.n	800562a <_fwalk_reent+0xe>
 800563a:	4638      	mov	r0, r7
 800563c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005640:	89ab      	ldrh	r3, [r5, #12]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d907      	bls.n	8005656 <_fwalk_reent+0x3a>
 8005646:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800564a:	3301      	adds	r3, #1
 800564c:	d003      	beq.n	8005656 <_fwalk_reent+0x3a>
 800564e:	4629      	mov	r1, r5
 8005650:	4630      	mov	r0, r6
 8005652:	47c0      	blx	r8
 8005654:	4307      	orrs	r7, r0
 8005656:	3568      	adds	r5, #104	; 0x68
 8005658:	e7e9      	b.n	800562e <_fwalk_reent+0x12>
	...

0800565c <__libc_init_array>:
 800565c:	b570      	push	{r4, r5, r6, lr}
 800565e:	4d0d      	ldr	r5, [pc, #52]	; (8005694 <__libc_init_array+0x38>)
 8005660:	4c0d      	ldr	r4, [pc, #52]	; (8005698 <__libc_init_array+0x3c>)
 8005662:	1b64      	subs	r4, r4, r5
 8005664:	10a4      	asrs	r4, r4, #2
 8005666:	2600      	movs	r6, #0
 8005668:	42a6      	cmp	r6, r4
 800566a:	d109      	bne.n	8005680 <__libc_init_array+0x24>
 800566c:	4d0b      	ldr	r5, [pc, #44]	; (800569c <__libc_init_array+0x40>)
 800566e:	4c0c      	ldr	r4, [pc, #48]	; (80056a0 <__libc_init_array+0x44>)
 8005670:	f002 fd74 	bl	800815c <_init>
 8005674:	1b64      	subs	r4, r4, r5
 8005676:	10a4      	asrs	r4, r4, #2
 8005678:	2600      	movs	r6, #0
 800567a:	42a6      	cmp	r6, r4
 800567c:	d105      	bne.n	800568a <__libc_init_array+0x2e>
 800567e:	bd70      	pop	{r4, r5, r6, pc}
 8005680:	f855 3b04 	ldr.w	r3, [r5], #4
 8005684:	4798      	blx	r3
 8005686:	3601      	adds	r6, #1
 8005688:	e7ee      	b.n	8005668 <__libc_init_array+0xc>
 800568a:	f855 3b04 	ldr.w	r3, [r5], #4
 800568e:	4798      	blx	r3
 8005690:	3601      	adds	r6, #1
 8005692:	e7f2      	b.n	800567a <__libc_init_array+0x1e>
 8005694:	080085e4 	.word	0x080085e4
 8005698:	080085e4 	.word	0x080085e4
 800569c:	080085e4 	.word	0x080085e4
 80056a0:	080085e8 	.word	0x080085e8

080056a4 <__retarget_lock_init_recursive>:
 80056a4:	4770      	bx	lr

080056a6 <__retarget_lock_acquire_recursive>:
 80056a6:	4770      	bx	lr

080056a8 <__retarget_lock_release_recursive>:
 80056a8:	4770      	bx	lr

080056aa <memcpy>:
 80056aa:	440a      	add	r2, r1
 80056ac:	4291      	cmp	r1, r2
 80056ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80056b2:	d100      	bne.n	80056b6 <memcpy+0xc>
 80056b4:	4770      	bx	lr
 80056b6:	b510      	push	{r4, lr}
 80056b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056c0:	4291      	cmp	r1, r2
 80056c2:	d1f9      	bne.n	80056b8 <memcpy+0xe>
 80056c4:	bd10      	pop	{r4, pc}

080056c6 <memset>:
 80056c6:	4402      	add	r2, r0
 80056c8:	4603      	mov	r3, r0
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d100      	bne.n	80056d0 <memset+0xa>
 80056ce:	4770      	bx	lr
 80056d0:	f803 1b01 	strb.w	r1, [r3], #1
 80056d4:	e7f9      	b.n	80056ca <memset+0x4>
	...

080056d8 <_malloc_r>:
 80056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056da:	1ccd      	adds	r5, r1, #3
 80056dc:	f025 0503 	bic.w	r5, r5, #3
 80056e0:	3508      	adds	r5, #8
 80056e2:	2d0c      	cmp	r5, #12
 80056e4:	bf38      	it	cc
 80056e6:	250c      	movcc	r5, #12
 80056e8:	2d00      	cmp	r5, #0
 80056ea:	4606      	mov	r6, r0
 80056ec:	db01      	blt.n	80056f2 <_malloc_r+0x1a>
 80056ee:	42a9      	cmp	r1, r5
 80056f0:	d903      	bls.n	80056fa <_malloc_r+0x22>
 80056f2:	230c      	movs	r3, #12
 80056f4:	6033      	str	r3, [r6, #0]
 80056f6:	2000      	movs	r0, #0
 80056f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056fa:	f001 fed5 	bl	80074a8 <__malloc_lock>
 80056fe:	4921      	ldr	r1, [pc, #132]	; (8005784 <_malloc_r+0xac>)
 8005700:	680a      	ldr	r2, [r1, #0]
 8005702:	4614      	mov	r4, r2
 8005704:	b99c      	cbnz	r4, 800572e <_malloc_r+0x56>
 8005706:	4f20      	ldr	r7, [pc, #128]	; (8005788 <_malloc_r+0xb0>)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	b923      	cbnz	r3, 8005716 <_malloc_r+0x3e>
 800570c:	4621      	mov	r1, r4
 800570e:	4630      	mov	r0, r6
 8005710:	f000 fd4a 	bl	80061a8 <_sbrk_r>
 8005714:	6038      	str	r0, [r7, #0]
 8005716:	4629      	mov	r1, r5
 8005718:	4630      	mov	r0, r6
 800571a:	f000 fd45 	bl	80061a8 <_sbrk_r>
 800571e:	1c43      	adds	r3, r0, #1
 8005720:	d123      	bne.n	800576a <_malloc_r+0x92>
 8005722:	230c      	movs	r3, #12
 8005724:	6033      	str	r3, [r6, #0]
 8005726:	4630      	mov	r0, r6
 8005728:	f001 fec4 	bl	80074b4 <__malloc_unlock>
 800572c:	e7e3      	b.n	80056f6 <_malloc_r+0x1e>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	1b5b      	subs	r3, r3, r5
 8005732:	d417      	bmi.n	8005764 <_malloc_r+0x8c>
 8005734:	2b0b      	cmp	r3, #11
 8005736:	d903      	bls.n	8005740 <_malloc_r+0x68>
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	441c      	add	r4, r3
 800573c:	6025      	str	r5, [r4, #0]
 800573e:	e004      	b.n	800574a <_malloc_r+0x72>
 8005740:	6863      	ldr	r3, [r4, #4]
 8005742:	42a2      	cmp	r2, r4
 8005744:	bf0c      	ite	eq
 8005746:	600b      	streq	r3, [r1, #0]
 8005748:	6053      	strne	r3, [r2, #4]
 800574a:	4630      	mov	r0, r6
 800574c:	f001 feb2 	bl	80074b4 <__malloc_unlock>
 8005750:	f104 000b 	add.w	r0, r4, #11
 8005754:	1d23      	adds	r3, r4, #4
 8005756:	f020 0007 	bic.w	r0, r0, #7
 800575a:	1ac2      	subs	r2, r0, r3
 800575c:	d0cc      	beq.n	80056f8 <_malloc_r+0x20>
 800575e:	1a1b      	subs	r3, r3, r0
 8005760:	50a3      	str	r3, [r4, r2]
 8005762:	e7c9      	b.n	80056f8 <_malloc_r+0x20>
 8005764:	4622      	mov	r2, r4
 8005766:	6864      	ldr	r4, [r4, #4]
 8005768:	e7cc      	b.n	8005704 <_malloc_r+0x2c>
 800576a:	1cc4      	adds	r4, r0, #3
 800576c:	f024 0403 	bic.w	r4, r4, #3
 8005770:	42a0      	cmp	r0, r4
 8005772:	d0e3      	beq.n	800573c <_malloc_r+0x64>
 8005774:	1a21      	subs	r1, r4, r0
 8005776:	4630      	mov	r0, r6
 8005778:	f000 fd16 	bl	80061a8 <_sbrk_r>
 800577c:	3001      	adds	r0, #1
 800577e:	d1dd      	bne.n	800573c <_malloc_r+0x64>
 8005780:	e7cf      	b.n	8005722 <_malloc_r+0x4a>
 8005782:	bf00      	nop
 8005784:	200006dc 	.word	0x200006dc
 8005788:	200006e0 	.word	0x200006e0

0800578c <__cvt>:
 800578c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	ec55 4b10 	vmov	r4, r5, d0
 8005794:	2d00      	cmp	r5, #0
 8005796:	460e      	mov	r6, r1
 8005798:	4619      	mov	r1, r3
 800579a:	462b      	mov	r3, r5
 800579c:	bfbb      	ittet	lt
 800579e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057a2:	461d      	movlt	r5, r3
 80057a4:	2300      	movge	r3, #0
 80057a6:	232d      	movlt	r3, #45	; 0x2d
 80057a8:	700b      	strb	r3, [r1, #0]
 80057aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057b0:	4691      	mov	r9, r2
 80057b2:	f023 0820 	bic.w	r8, r3, #32
 80057b6:	bfbc      	itt	lt
 80057b8:	4622      	movlt	r2, r4
 80057ba:	4614      	movlt	r4, r2
 80057bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057c0:	d005      	beq.n	80057ce <__cvt+0x42>
 80057c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057c6:	d100      	bne.n	80057ca <__cvt+0x3e>
 80057c8:	3601      	adds	r6, #1
 80057ca:	2102      	movs	r1, #2
 80057cc:	e000      	b.n	80057d0 <__cvt+0x44>
 80057ce:	2103      	movs	r1, #3
 80057d0:	ab03      	add	r3, sp, #12
 80057d2:	9301      	str	r3, [sp, #4]
 80057d4:	ab02      	add	r3, sp, #8
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	ec45 4b10 	vmov	d0, r4, r5
 80057dc:	4653      	mov	r3, sl
 80057de:	4632      	mov	r2, r6
 80057e0:	f000 ff32 	bl	8006648 <_dtoa_r>
 80057e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057e8:	4607      	mov	r7, r0
 80057ea:	d102      	bne.n	80057f2 <__cvt+0x66>
 80057ec:	f019 0f01 	tst.w	r9, #1
 80057f0:	d022      	beq.n	8005838 <__cvt+0xac>
 80057f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057f6:	eb07 0906 	add.w	r9, r7, r6
 80057fa:	d110      	bne.n	800581e <__cvt+0x92>
 80057fc:	783b      	ldrb	r3, [r7, #0]
 80057fe:	2b30      	cmp	r3, #48	; 0x30
 8005800:	d10a      	bne.n	8005818 <__cvt+0x8c>
 8005802:	2200      	movs	r2, #0
 8005804:	2300      	movs	r3, #0
 8005806:	4620      	mov	r0, r4
 8005808:	4629      	mov	r1, r5
 800580a:	f7fb f965 	bl	8000ad8 <__aeabi_dcmpeq>
 800580e:	b918      	cbnz	r0, 8005818 <__cvt+0x8c>
 8005810:	f1c6 0601 	rsb	r6, r6, #1
 8005814:	f8ca 6000 	str.w	r6, [sl]
 8005818:	f8da 3000 	ldr.w	r3, [sl]
 800581c:	4499      	add	r9, r3
 800581e:	2200      	movs	r2, #0
 8005820:	2300      	movs	r3, #0
 8005822:	4620      	mov	r0, r4
 8005824:	4629      	mov	r1, r5
 8005826:	f7fb f957 	bl	8000ad8 <__aeabi_dcmpeq>
 800582a:	b108      	cbz	r0, 8005830 <__cvt+0xa4>
 800582c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005830:	2230      	movs	r2, #48	; 0x30
 8005832:	9b03      	ldr	r3, [sp, #12]
 8005834:	454b      	cmp	r3, r9
 8005836:	d307      	bcc.n	8005848 <__cvt+0xbc>
 8005838:	9b03      	ldr	r3, [sp, #12]
 800583a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800583c:	1bdb      	subs	r3, r3, r7
 800583e:	4638      	mov	r0, r7
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	b004      	add	sp, #16
 8005844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005848:	1c59      	adds	r1, r3, #1
 800584a:	9103      	str	r1, [sp, #12]
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	e7f0      	b.n	8005832 <__cvt+0xa6>

08005850 <__exponent>:
 8005850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005852:	4603      	mov	r3, r0
 8005854:	2900      	cmp	r1, #0
 8005856:	bfb8      	it	lt
 8005858:	4249      	neglt	r1, r1
 800585a:	f803 2b02 	strb.w	r2, [r3], #2
 800585e:	bfb4      	ite	lt
 8005860:	222d      	movlt	r2, #45	; 0x2d
 8005862:	222b      	movge	r2, #43	; 0x2b
 8005864:	2909      	cmp	r1, #9
 8005866:	7042      	strb	r2, [r0, #1]
 8005868:	dd2a      	ble.n	80058c0 <__exponent+0x70>
 800586a:	f10d 0407 	add.w	r4, sp, #7
 800586e:	46a4      	mov	ip, r4
 8005870:	270a      	movs	r7, #10
 8005872:	46a6      	mov	lr, r4
 8005874:	460a      	mov	r2, r1
 8005876:	fb91 f6f7 	sdiv	r6, r1, r7
 800587a:	fb07 1516 	mls	r5, r7, r6, r1
 800587e:	3530      	adds	r5, #48	; 0x30
 8005880:	2a63      	cmp	r2, #99	; 0x63
 8005882:	f104 34ff 	add.w	r4, r4, #4294967295
 8005886:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800588a:	4631      	mov	r1, r6
 800588c:	dcf1      	bgt.n	8005872 <__exponent+0x22>
 800588e:	3130      	adds	r1, #48	; 0x30
 8005890:	f1ae 0502 	sub.w	r5, lr, #2
 8005894:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005898:	1c44      	adds	r4, r0, #1
 800589a:	4629      	mov	r1, r5
 800589c:	4561      	cmp	r1, ip
 800589e:	d30a      	bcc.n	80058b6 <__exponent+0x66>
 80058a0:	f10d 0209 	add.w	r2, sp, #9
 80058a4:	eba2 020e 	sub.w	r2, r2, lr
 80058a8:	4565      	cmp	r5, ip
 80058aa:	bf88      	it	hi
 80058ac:	2200      	movhi	r2, #0
 80058ae:	4413      	add	r3, r2
 80058b0:	1a18      	subs	r0, r3, r0
 80058b2:	b003      	add	sp, #12
 80058b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058be:	e7ed      	b.n	800589c <__exponent+0x4c>
 80058c0:	2330      	movs	r3, #48	; 0x30
 80058c2:	3130      	adds	r1, #48	; 0x30
 80058c4:	7083      	strb	r3, [r0, #2]
 80058c6:	70c1      	strb	r1, [r0, #3]
 80058c8:	1d03      	adds	r3, r0, #4
 80058ca:	e7f1      	b.n	80058b0 <__exponent+0x60>

080058cc <_printf_float>:
 80058cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d0:	ed2d 8b02 	vpush	{d8}
 80058d4:	b08d      	sub	sp, #52	; 0x34
 80058d6:	460c      	mov	r4, r1
 80058d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80058dc:	4616      	mov	r6, r2
 80058de:	461f      	mov	r7, r3
 80058e0:	4605      	mov	r5, r0
 80058e2:	f001 fd5f 	bl	80073a4 <_localeconv_r>
 80058e6:	f8d0 a000 	ldr.w	sl, [r0]
 80058ea:	4650      	mov	r0, sl
 80058ec:	f7fa fc78 	bl	80001e0 <strlen>
 80058f0:	2300      	movs	r3, #0
 80058f2:	930a      	str	r3, [sp, #40]	; 0x28
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	9305      	str	r3, [sp, #20]
 80058f8:	f8d8 3000 	ldr.w	r3, [r8]
 80058fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005900:	3307      	adds	r3, #7
 8005902:	f023 0307 	bic.w	r3, r3, #7
 8005906:	f103 0208 	add.w	r2, r3, #8
 800590a:	f8c8 2000 	str.w	r2, [r8]
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005916:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800591a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800591e:	9307      	str	r3, [sp, #28]
 8005920:	f8cd 8018 	str.w	r8, [sp, #24]
 8005924:	ee08 0a10 	vmov	s16, r0
 8005928:	4b9f      	ldr	r3, [pc, #636]	; (8005ba8 <_printf_float+0x2dc>)
 800592a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800592e:	f04f 32ff 	mov.w	r2, #4294967295
 8005932:	f7fb f903 	bl	8000b3c <__aeabi_dcmpun>
 8005936:	bb88      	cbnz	r0, 800599c <_printf_float+0xd0>
 8005938:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800593c:	4b9a      	ldr	r3, [pc, #616]	; (8005ba8 <_printf_float+0x2dc>)
 800593e:	f04f 32ff 	mov.w	r2, #4294967295
 8005942:	f7fb f8dd 	bl	8000b00 <__aeabi_dcmple>
 8005946:	bb48      	cbnz	r0, 800599c <_printf_float+0xd0>
 8005948:	2200      	movs	r2, #0
 800594a:	2300      	movs	r3, #0
 800594c:	4640      	mov	r0, r8
 800594e:	4649      	mov	r1, r9
 8005950:	f7fb f8cc 	bl	8000aec <__aeabi_dcmplt>
 8005954:	b110      	cbz	r0, 800595c <_printf_float+0x90>
 8005956:	232d      	movs	r3, #45	; 0x2d
 8005958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800595c:	4b93      	ldr	r3, [pc, #588]	; (8005bac <_printf_float+0x2e0>)
 800595e:	4894      	ldr	r0, [pc, #592]	; (8005bb0 <_printf_float+0x2e4>)
 8005960:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005964:	bf94      	ite	ls
 8005966:	4698      	movls	r8, r3
 8005968:	4680      	movhi	r8, r0
 800596a:	2303      	movs	r3, #3
 800596c:	6123      	str	r3, [r4, #16]
 800596e:	9b05      	ldr	r3, [sp, #20]
 8005970:	f023 0204 	bic.w	r2, r3, #4
 8005974:	6022      	str	r2, [r4, #0]
 8005976:	f04f 0900 	mov.w	r9, #0
 800597a:	9700      	str	r7, [sp, #0]
 800597c:	4633      	mov	r3, r6
 800597e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005980:	4621      	mov	r1, r4
 8005982:	4628      	mov	r0, r5
 8005984:	f000 f9d8 	bl	8005d38 <_printf_common>
 8005988:	3001      	adds	r0, #1
 800598a:	f040 8090 	bne.w	8005aae <_printf_float+0x1e2>
 800598e:	f04f 30ff 	mov.w	r0, #4294967295
 8005992:	b00d      	add	sp, #52	; 0x34
 8005994:	ecbd 8b02 	vpop	{d8}
 8005998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599c:	4642      	mov	r2, r8
 800599e:	464b      	mov	r3, r9
 80059a0:	4640      	mov	r0, r8
 80059a2:	4649      	mov	r1, r9
 80059a4:	f7fb f8ca 	bl	8000b3c <__aeabi_dcmpun>
 80059a8:	b140      	cbz	r0, 80059bc <_printf_float+0xf0>
 80059aa:	464b      	mov	r3, r9
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	bfbc      	itt	lt
 80059b0:	232d      	movlt	r3, #45	; 0x2d
 80059b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059b6:	487f      	ldr	r0, [pc, #508]	; (8005bb4 <_printf_float+0x2e8>)
 80059b8:	4b7f      	ldr	r3, [pc, #508]	; (8005bb8 <_printf_float+0x2ec>)
 80059ba:	e7d1      	b.n	8005960 <_printf_float+0x94>
 80059bc:	6863      	ldr	r3, [r4, #4]
 80059be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80059c2:	9206      	str	r2, [sp, #24]
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	d13f      	bne.n	8005a48 <_printf_float+0x17c>
 80059c8:	2306      	movs	r3, #6
 80059ca:	6063      	str	r3, [r4, #4]
 80059cc:	9b05      	ldr	r3, [sp, #20]
 80059ce:	6861      	ldr	r1, [r4, #4]
 80059d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80059d4:	2300      	movs	r3, #0
 80059d6:	9303      	str	r3, [sp, #12]
 80059d8:	ab0a      	add	r3, sp, #40	; 0x28
 80059da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80059de:	ab09      	add	r3, sp, #36	; 0x24
 80059e0:	ec49 8b10 	vmov	d0, r8, r9
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	6022      	str	r2, [r4, #0]
 80059e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80059ec:	4628      	mov	r0, r5
 80059ee:	f7ff fecd 	bl	800578c <__cvt>
 80059f2:	9b06      	ldr	r3, [sp, #24]
 80059f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059f6:	2b47      	cmp	r3, #71	; 0x47
 80059f8:	4680      	mov	r8, r0
 80059fa:	d108      	bne.n	8005a0e <_printf_float+0x142>
 80059fc:	1cc8      	adds	r0, r1, #3
 80059fe:	db02      	blt.n	8005a06 <_printf_float+0x13a>
 8005a00:	6863      	ldr	r3, [r4, #4]
 8005a02:	4299      	cmp	r1, r3
 8005a04:	dd41      	ble.n	8005a8a <_printf_float+0x1be>
 8005a06:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a0a:	fa5f fb8b 	uxtb.w	fp, fp
 8005a0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a12:	d820      	bhi.n	8005a56 <_printf_float+0x18a>
 8005a14:	3901      	subs	r1, #1
 8005a16:	465a      	mov	r2, fp
 8005a18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a1c:	9109      	str	r1, [sp, #36]	; 0x24
 8005a1e:	f7ff ff17 	bl	8005850 <__exponent>
 8005a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a24:	1813      	adds	r3, r2, r0
 8005a26:	2a01      	cmp	r2, #1
 8005a28:	4681      	mov	r9, r0
 8005a2a:	6123      	str	r3, [r4, #16]
 8005a2c:	dc02      	bgt.n	8005a34 <_printf_float+0x168>
 8005a2e:	6822      	ldr	r2, [r4, #0]
 8005a30:	07d2      	lsls	r2, r2, #31
 8005a32:	d501      	bpl.n	8005a38 <_printf_float+0x16c>
 8005a34:	3301      	adds	r3, #1
 8005a36:	6123      	str	r3, [r4, #16]
 8005a38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d09c      	beq.n	800597a <_printf_float+0xae>
 8005a40:	232d      	movs	r3, #45	; 0x2d
 8005a42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a46:	e798      	b.n	800597a <_printf_float+0xae>
 8005a48:	9a06      	ldr	r2, [sp, #24]
 8005a4a:	2a47      	cmp	r2, #71	; 0x47
 8005a4c:	d1be      	bne.n	80059cc <_printf_float+0x100>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1bc      	bne.n	80059cc <_printf_float+0x100>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e7b9      	b.n	80059ca <_printf_float+0xfe>
 8005a56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a5a:	d118      	bne.n	8005a8e <_printf_float+0x1c2>
 8005a5c:	2900      	cmp	r1, #0
 8005a5e:	6863      	ldr	r3, [r4, #4]
 8005a60:	dd0b      	ble.n	8005a7a <_printf_float+0x1ae>
 8005a62:	6121      	str	r1, [r4, #16]
 8005a64:	b913      	cbnz	r3, 8005a6c <_printf_float+0x1a0>
 8005a66:	6822      	ldr	r2, [r4, #0]
 8005a68:	07d0      	lsls	r0, r2, #31
 8005a6a:	d502      	bpl.n	8005a72 <_printf_float+0x1a6>
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	440b      	add	r3, r1
 8005a70:	6123      	str	r3, [r4, #16]
 8005a72:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a74:	f04f 0900 	mov.w	r9, #0
 8005a78:	e7de      	b.n	8005a38 <_printf_float+0x16c>
 8005a7a:	b913      	cbnz	r3, 8005a82 <_printf_float+0x1b6>
 8005a7c:	6822      	ldr	r2, [r4, #0]
 8005a7e:	07d2      	lsls	r2, r2, #31
 8005a80:	d501      	bpl.n	8005a86 <_printf_float+0x1ba>
 8005a82:	3302      	adds	r3, #2
 8005a84:	e7f4      	b.n	8005a70 <_printf_float+0x1a4>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e7f2      	b.n	8005a70 <_printf_float+0x1a4>
 8005a8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a90:	4299      	cmp	r1, r3
 8005a92:	db05      	blt.n	8005aa0 <_printf_float+0x1d4>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	6121      	str	r1, [r4, #16]
 8005a98:	07d8      	lsls	r0, r3, #31
 8005a9a:	d5ea      	bpl.n	8005a72 <_printf_float+0x1a6>
 8005a9c:	1c4b      	adds	r3, r1, #1
 8005a9e:	e7e7      	b.n	8005a70 <_printf_float+0x1a4>
 8005aa0:	2900      	cmp	r1, #0
 8005aa2:	bfd4      	ite	le
 8005aa4:	f1c1 0202 	rsble	r2, r1, #2
 8005aa8:	2201      	movgt	r2, #1
 8005aaa:	4413      	add	r3, r2
 8005aac:	e7e0      	b.n	8005a70 <_printf_float+0x1a4>
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	055a      	lsls	r2, r3, #21
 8005ab2:	d407      	bmi.n	8005ac4 <_printf_float+0x1f8>
 8005ab4:	6923      	ldr	r3, [r4, #16]
 8005ab6:	4642      	mov	r2, r8
 8005ab8:	4631      	mov	r1, r6
 8005aba:	4628      	mov	r0, r5
 8005abc:	47b8      	blx	r7
 8005abe:	3001      	adds	r0, #1
 8005ac0:	d12c      	bne.n	8005b1c <_printf_float+0x250>
 8005ac2:	e764      	b.n	800598e <_printf_float+0xc2>
 8005ac4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ac8:	f240 80e0 	bls.w	8005c8c <_printf_float+0x3c0>
 8005acc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f7fb f800 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	d034      	beq.n	8005b46 <_printf_float+0x27a>
 8005adc:	4a37      	ldr	r2, [pc, #220]	; (8005bbc <_printf_float+0x2f0>)
 8005ade:	2301      	movs	r3, #1
 8005ae0:	4631      	mov	r1, r6
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	47b8      	blx	r7
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	f43f af51 	beq.w	800598e <_printf_float+0xc2>
 8005aec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005af0:	429a      	cmp	r2, r3
 8005af2:	db02      	blt.n	8005afa <_printf_float+0x22e>
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	07d8      	lsls	r0, r3, #31
 8005af8:	d510      	bpl.n	8005b1c <_printf_float+0x250>
 8005afa:	ee18 3a10 	vmov	r3, s16
 8005afe:	4652      	mov	r2, sl
 8005b00:	4631      	mov	r1, r6
 8005b02:	4628      	mov	r0, r5
 8005b04:	47b8      	blx	r7
 8005b06:	3001      	adds	r0, #1
 8005b08:	f43f af41 	beq.w	800598e <_printf_float+0xc2>
 8005b0c:	f04f 0800 	mov.w	r8, #0
 8005b10:	f104 091a 	add.w	r9, r4, #26
 8005b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b16:	3b01      	subs	r3, #1
 8005b18:	4543      	cmp	r3, r8
 8005b1a:	dc09      	bgt.n	8005b30 <_printf_float+0x264>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	079b      	lsls	r3, r3, #30
 8005b20:	f100 8105 	bmi.w	8005d2e <_printf_float+0x462>
 8005b24:	68e0      	ldr	r0, [r4, #12]
 8005b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b28:	4298      	cmp	r0, r3
 8005b2a:	bfb8      	it	lt
 8005b2c:	4618      	movlt	r0, r3
 8005b2e:	e730      	b.n	8005992 <_printf_float+0xc6>
 8005b30:	2301      	movs	r3, #1
 8005b32:	464a      	mov	r2, r9
 8005b34:	4631      	mov	r1, r6
 8005b36:	4628      	mov	r0, r5
 8005b38:	47b8      	blx	r7
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	f43f af27 	beq.w	800598e <_printf_float+0xc2>
 8005b40:	f108 0801 	add.w	r8, r8, #1
 8005b44:	e7e6      	b.n	8005b14 <_printf_float+0x248>
 8005b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	dc39      	bgt.n	8005bc0 <_printf_float+0x2f4>
 8005b4c:	4a1b      	ldr	r2, [pc, #108]	; (8005bbc <_printf_float+0x2f0>)
 8005b4e:	2301      	movs	r3, #1
 8005b50:	4631      	mov	r1, r6
 8005b52:	4628      	mov	r0, r5
 8005b54:	47b8      	blx	r7
 8005b56:	3001      	adds	r0, #1
 8005b58:	f43f af19 	beq.w	800598e <_printf_float+0xc2>
 8005b5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b60:	4313      	orrs	r3, r2
 8005b62:	d102      	bne.n	8005b6a <_printf_float+0x29e>
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	07d9      	lsls	r1, r3, #31
 8005b68:	d5d8      	bpl.n	8005b1c <_printf_float+0x250>
 8005b6a:	ee18 3a10 	vmov	r3, s16
 8005b6e:	4652      	mov	r2, sl
 8005b70:	4631      	mov	r1, r6
 8005b72:	4628      	mov	r0, r5
 8005b74:	47b8      	blx	r7
 8005b76:	3001      	adds	r0, #1
 8005b78:	f43f af09 	beq.w	800598e <_printf_float+0xc2>
 8005b7c:	f04f 0900 	mov.w	r9, #0
 8005b80:	f104 0a1a 	add.w	sl, r4, #26
 8005b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b86:	425b      	negs	r3, r3
 8005b88:	454b      	cmp	r3, r9
 8005b8a:	dc01      	bgt.n	8005b90 <_printf_float+0x2c4>
 8005b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b8e:	e792      	b.n	8005ab6 <_printf_float+0x1ea>
 8005b90:	2301      	movs	r3, #1
 8005b92:	4652      	mov	r2, sl
 8005b94:	4631      	mov	r1, r6
 8005b96:	4628      	mov	r0, r5
 8005b98:	47b8      	blx	r7
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	f43f aef7 	beq.w	800598e <_printf_float+0xc2>
 8005ba0:	f109 0901 	add.w	r9, r9, #1
 8005ba4:	e7ee      	b.n	8005b84 <_printf_float+0x2b8>
 8005ba6:	bf00      	nop
 8005ba8:	7fefffff 	.word	0x7fefffff
 8005bac:	08008258 	.word	0x08008258
 8005bb0:	0800825c 	.word	0x0800825c
 8005bb4:	08008264 	.word	0x08008264
 8005bb8:	08008260 	.word	0x08008260
 8005bbc:	08008268 	.word	0x08008268
 8005bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	bfa8      	it	ge
 8005bc8:	461a      	movge	r2, r3
 8005bca:	2a00      	cmp	r2, #0
 8005bcc:	4691      	mov	r9, r2
 8005bce:	dc37      	bgt.n	8005c40 <_printf_float+0x374>
 8005bd0:	f04f 0b00 	mov.w	fp, #0
 8005bd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bd8:	f104 021a 	add.w	r2, r4, #26
 8005bdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bde:	9305      	str	r3, [sp, #20]
 8005be0:	eba3 0309 	sub.w	r3, r3, r9
 8005be4:	455b      	cmp	r3, fp
 8005be6:	dc33      	bgt.n	8005c50 <_printf_float+0x384>
 8005be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bec:	429a      	cmp	r2, r3
 8005bee:	db3b      	blt.n	8005c68 <_printf_float+0x39c>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	07da      	lsls	r2, r3, #31
 8005bf4:	d438      	bmi.n	8005c68 <_printf_float+0x39c>
 8005bf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bf8:	9b05      	ldr	r3, [sp, #20]
 8005bfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	eba2 0901 	sub.w	r9, r2, r1
 8005c02:	4599      	cmp	r9, r3
 8005c04:	bfa8      	it	ge
 8005c06:	4699      	movge	r9, r3
 8005c08:	f1b9 0f00 	cmp.w	r9, #0
 8005c0c:	dc35      	bgt.n	8005c7a <_printf_float+0x3ae>
 8005c0e:	f04f 0800 	mov.w	r8, #0
 8005c12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c16:	f104 0a1a 	add.w	sl, r4, #26
 8005c1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c1e:	1a9b      	subs	r3, r3, r2
 8005c20:	eba3 0309 	sub.w	r3, r3, r9
 8005c24:	4543      	cmp	r3, r8
 8005c26:	f77f af79 	ble.w	8005b1c <_printf_float+0x250>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4652      	mov	r2, sl
 8005c2e:	4631      	mov	r1, r6
 8005c30:	4628      	mov	r0, r5
 8005c32:	47b8      	blx	r7
 8005c34:	3001      	adds	r0, #1
 8005c36:	f43f aeaa 	beq.w	800598e <_printf_float+0xc2>
 8005c3a:	f108 0801 	add.w	r8, r8, #1
 8005c3e:	e7ec      	b.n	8005c1a <_printf_float+0x34e>
 8005c40:	4613      	mov	r3, r2
 8005c42:	4631      	mov	r1, r6
 8005c44:	4642      	mov	r2, r8
 8005c46:	4628      	mov	r0, r5
 8005c48:	47b8      	blx	r7
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	d1c0      	bne.n	8005bd0 <_printf_float+0x304>
 8005c4e:	e69e      	b.n	800598e <_printf_float+0xc2>
 8005c50:	2301      	movs	r3, #1
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	9205      	str	r2, [sp, #20]
 8005c58:	47b8      	blx	r7
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	f43f ae97 	beq.w	800598e <_printf_float+0xc2>
 8005c60:	9a05      	ldr	r2, [sp, #20]
 8005c62:	f10b 0b01 	add.w	fp, fp, #1
 8005c66:	e7b9      	b.n	8005bdc <_printf_float+0x310>
 8005c68:	ee18 3a10 	vmov	r3, s16
 8005c6c:	4652      	mov	r2, sl
 8005c6e:	4631      	mov	r1, r6
 8005c70:	4628      	mov	r0, r5
 8005c72:	47b8      	blx	r7
 8005c74:	3001      	adds	r0, #1
 8005c76:	d1be      	bne.n	8005bf6 <_printf_float+0x32a>
 8005c78:	e689      	b.n	800598e <_printf_float+0xc2>
 8005c7a:	9a05      	ldr	r2, [sp, #20]
 8005c7c:	464b      	mov	r3, r9
 8005c7e:	4442      	add	r2, r8
 8005c80:	4631      	mov	r1, r6
 8005c82:	4628      	mov	r0, r5
 8005c84:	47b8      	blx	r7
 8005c86:	3001      	adds	r0, #1
 8005c88:	d1c1      	bne.n	8005c0e <_printf_float+0x342>
 8005c8a:	e680      	b.n	800598e <_printf_float+0xc2>
 8005c8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c8e:	2a01      	cmp	r2, #1
 8005c90:	dc01      	bgt.n	8005c96 <_printf_float+0x3ca>
 8005c92:	07db      	lsls	r3, r3, #31
 8005c94:	d538      	bpl.n	8005d08 <_printf_float+0x43c>
 8005c96:	2301      	movs	r3, #1
 8005c98:	4642      	mov	r2, r8
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b8      	blx	r7
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	f43f ae74 	beq.w	800598e <_printf_float+0xc2>
 8005ca6:	ee18 3a10 	vmov	r3, s16
 8005caa:	4652      	mov	r2, sl
 8005cac:	4631      	mov	r1, r6
 8005cae:	4628      	mov	r0, r5
 8005cb0:	47b8      	blx	r7
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	f43f ae6b 	beq.w	800598e <_printf_float+0xc2>
 8005cb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f7fa ff0a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cc4:	b9d8      	cbnz	r0, 8005cfe <_printf_float+0x432>
 8005cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc8:	f108 0201 	add.w	r2, r8, #1
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	47b8      	blx	r7
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d10e      	bne.n	8005cf6 <_printf_float+0x42a>
 8005cd8:	e659      	b.n	800598e <_printf_float+0xc2>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4652      	mov	r2, sl
 8005cde:	4631      	mov	r1, r6
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	47b8      	blx	r7
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	f43f ae52 	beq.w	800598e <_printf_float+0xc2>
 8005cea:	f108 0801 	add.w	r8, r8, #1
 8005cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	4543      	cmp	r3, r8
 8005cf4:	dcf1      	bgt.n	8005cda <_printf_float+0x40e>
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005cfc:	e6dc      	b.n	8005ab8 <_printf_float+0x1ec>
 8005cfe:	f04f 0800 	mov.w	r8, #0
 8005d02:	f104 0a1a 	add.w	sl, r4, #26
 8005d06:	e7f2      	b.n	8005cee <_printf_float+0x422>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	4642      	mov	r2, r8
 8005d0c:	e7df      	b.n	8005cce <_printf_float+0x402>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	464a      	mov	r2, r9
 8005d12:	4631      	mov	r1, r6
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b8      	blx	r7
 8005d18:	3001      	adds	r0, #1
 8005d1a:	f43f ae38 	beq.w	800598e <_printf_float+0xc2>
 8005d1e:	f108 0801 	add.w	r8, r8, #1
 8005d22:	68e3      	ldr	r3, [r4, #12]
 8005d24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d26:	1a5b      	subs	r3, r3, r1
 8005d28:	4543      	cmp	r3, r8
 8005d2a:	dcf0      	bgt.n	8005d0e <_printf_float+0x442>
 8005d2c:	e6fa      	b.n	8005b24 <_printf_float+0x258>
 8005d2e:	f04f 0800 	mov.w	r8, #0
 8005d32:	f104 0919 	add.w	r9, r4, #25
 8005d36:	e7f4      	b.n	8005d22 <_printf_float+0x456>

08005d38 <_printf_common>:
 8005d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3c:	4616      	mov	r6, r2
 8005d3e:	4699      	mov	r9, r3
 8005d40:	688a      	ldr	r2, [r1, #8]
 8005d42:	690b      	ldr	r3, [r1, #16]
 8005d44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	bfb8      	it	lt
 8005d4c:	4613      	movlt	r3, r2
 8005d4e:	6033      	str	r3, [r6, #0]
 8005d50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d54:	4607      	mov	r7, r0
 8005d56:	460c      	mov	r4, r1
 8005d58:	b10a      	cbz	r2, 8005d5e <_printf_common+0x26>
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	6033      	str	r3, [r6, #0]
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	0699      	lsls	r1, r3, #26
 8005d62:	bf42      	ittt	mi
 8005d64:	6833      	ldrmi	r3, [r6, #0]
 8005d66:	3302      	addmi	r3, #2
 8005d68:	6033      	strmi	r3, [r6, #0]
 8005d6a:	6825      	ldr	r5, [r4, #0]
 8005d6c:	f015 0506 	ands.w	r5, r5, #6
 8005d70:	d106      	bne.n	8005d80 <_printf_common+0x48>
 8005d72:	f104 0a19 	add.w	sl, r4, #25
 8005d76:	68e3      	ldr	r3, [r4, #12]
 8005d78:	6832      	ldr	r2, [r6, #0]
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	42ab      	cmp	r3, r5
 8005d7e:	dc26      	bgt.n	8005dce <_printf_common+0x96>
 8005d80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d84:	1e13      	subs	r3, r2, #0
 8005d86:	6822      	ldr	r2, [r4, #0]
 8005d88:	bf18      	it	ne
 8005d8a:	2301      	movne	r3, #1
 8005d8c:	0692      	lsls	r2, r2, #26
 8005d8e:	d42b      	bmi.n	8005de8 <_printf_common+0xb0>
 8005d90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d94:	4649      	mov	r1, r9
 8005d96:	4638      	mov	r0, r7
 8005d98:	47c0      	blx	r8
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	d01e      	beq.n	8005ddc <_printf_common+0xa4>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	68e5      	ldr	r5, [r4, #12]
 8005da2:	6832      	ldr	r2, [r6, #0]
 8005da4:	f003 0306 	and.w	r3, r3, #6
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	bf08      	it	eq
 8005dac:	1aad      	subeq	r5, r5, r2
 8005dae:	68a3      	ldr	r3, [r4, #8]
 8005db0:	6922      	ldr	r2, [r4, #16]
 8005db2:	bf0c      	ite	eq
 8005db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005db8:	2500      	movne	r5, #0
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	bfc4      	itt	gt
 8005dbe:	1a9b      	subgt	r3, r3, r2
 8005dc0:	18ed      	addgt	r5, r5, r3
 8005dc2:	2600      	movs	r6, #0
 8005dc4:	341a      	adds	r4, #26
 8005dc6:	42b5      	cmp	r5, r6
 8005dc8:	d11a      	bne.n	8005e00 <_printf_common+0xc8>
 8005dca:	2000      	movs	r0, #0
 8005dcc:	e008      	b.n	8005de0 <_printf_common+0xa8>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4652      	mov	r2, sl
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	4638      	mov	r0, r7
 8005dd6:	47c0      	blx	r8
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d103      	bne.n	8005de4 <_printf_common+0xac>
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8005de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de4:	3501      	adds	r5, #1
 8005de6:	e7c6      	b.n	8005d76 <_printf_common+0x3e>
 8005de8:	18e1      	adds	r1, r4, r3
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	2030      	movs	r0, #48	; 0x30
 8005dee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005df2:	4422      	add	r2, r4
 8005df4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005df8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dfc:	3302      	adds	r3, #2
 8005dfe:	e7c7      	b.n	8005d90 <_printf_common+0x58>
 8005e00:	2301      	movs	r3, #1
 8005e02:	4622      	mov	r2, r4
 8005e04:	4649      	mov	r1, r9
 8005e06:	4638      	mov	r0, r7
 8005e08:	47c0      	blx	r8
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d0e6      	beq.n	8005ddc <_printf_common+0xa4>
 8005e0e:	3601      	adds	r6, #1
 8005e10:	e7d9      	b.n	8005dc6 <_printf_common+0x8e>
	...

08005e14 <_printf_i>:
 8005e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e18:	460c      	mov	r4, r1
 8005e1a:	4691      	mov	r9, r2
 8005e1c:	7e27      	ldrb	r7, [r4, #24]
 8005e1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e20:	2f78      	cmp	r7, #120	; 0x78
 8005e22:	4680      	mov	r8, r0
 8005e24:	469a      	mov	sl, r3
 8005e26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e2a:	d807      	bhi.n	8005e3c <_printf_i+0x28>
 8005e2c:	2f62      	cmp	r7, #98	; 0x62
 8005e2e:	d80a      	bhi.n	8005e46 <_printf_i+0x32>
 8005e30:	2f00      	cmp	r7, #0
 8005e32:	f000 80d8 	beq.w	8005fe6 <_printf_i+0x1d2>
 8005e36:	2f58      	cmp	r7, #88	; 0x58
 8005e38:	f000 80a3 	beq.w	8005f82 <_printf_i+0x16e>
 8005e3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e44:	e03a      	b.n	8005ebc <_printf_i+0xa8>
 8005e46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e4a:	2b15      	cmp	r3, #21
 8005e4c:	d8f6      	bhi.n	8005e3c <_printf_i+0x28>
 8005e4e:	a001      	add	r0, pc, #4	; (adr r0, 8005e54 <_printf_i+0x40>)
 8005e50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e54:	08005ead 	.word	0x08005ead
 8005e58:	08005ec1 	.word	0x08005ec1
 8005e5c:	08005e3d 	.word	0x08005e3d
 8005e60:	08005e3d 	.word	0x08005e3d
 8005e64:	08005e3d 	.word	0x08005e3d
 8005e68:	08005e3d 	.word	0x08005e3d
 8005e6c:	08005ec1 	.word	0x08005ec1
 8005e70:	08005e3d 	.word	0x08005e3d
 8005e74:	08005e3d 	.word	0x08005e3d
 8005e78:	08005e3d 	.word	0x08005e3d
 8005e7c:	08005e3d 	.word	0x08005e3d
 8005e80:	08005fcd 	.word	0x08005fcd
 8005e84:	08005ef1 	.word	0x08005ef1
 8005e88:	08005faf 	.word	0x08005faf
 8005e8c:	08005e3d 	.word	0x08005e3d
 8005e90:	08005e3d 	.word	0x08005e3d
 8005e94:	08005fef 	.word	0x08005fef
 8005e98:	08005e3d 	.word	0x08005e3d
 8005e9c:	08005ef1 	.word	0x08005ef1
 8005ea0:	08005e3d 	.word	0x08005e3d
 8005ea4:	08005e3d 	.word	0x08005e3d
 8005ea8:	08005fb7 	.word	0x08005fb7
 8005eac:	680b      	ldr	r3, [r1, #0]
 8005eae:	1d1a      	adds	r2, r3, #4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	600a      	str	r2, [r1, #0]
 8005eb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005eb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e0a3      	b.n	8006008 <_printf_i+0x1f4>
 8005ec0:	6825      	ldr	r5, [r4, #0]
 8005ec2:	6808      	ldr	r0, [r1, #0]
 8005ec4:	062e      	lsls	r6, r5, #24
 8005ec6:	f100 0304 	add.w	r3, r0, #4
 8005eca:	d50a      	bpl.n	8005ee2 <_printf_i+0xce>
 8005ecc:	6805      	ldr	r5, [r0, #0]
 8005ece:	600b      	str	r3, [r1, #0]
 8005ed0:	2d00      	cmp	r5, #0
 8005ed2:	da03      	bge.n	8005edc <_printf_i+0xc8>
 8005ed4:	232d      	movs	r3, #45	; 0x2d
 8005ed6:	426d      	negs	r5, r5
 8005ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005edc:	485e      	ldr	r0, [pc, #376]	; (8006058 <_printf_i+0x244>)
 8005ede:	230a      	movs	r3, #10
 8005ee0:	e019      	b.n	8005f16 <_printf_i+0x102>
 8005ee2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ee6:	6805      	ldr	r5, [r0, #0]
 8005ee8:	600b      	str	r3, [r1, #0]
 8005eea:	bf18      	it	ne
 8005eec:	b22d      	sxthne	r5, r5
 8005eee:	e7ef      	b.n	8005ed0 <_printf_i+0xbc>
 8005ef0:	680b      	ldr	r3, [r1, #0]
 8005ef2:	6825      	ldr	r5, [r4, #0]
 8005ef4:	1d18      	adds	r0, r3, #4
 8005ef6:	6008      	str	r0, [r1, #0]
 8005ef8:	0628      	lsls	r0, r5, #24
 8005efa:	d501      	bpl.n	8005f00 <_printf_i+0xec>
 8005efc:	681d      	ldr	r5, [r3, #0]
 8005efe:	e002      	b.n	8005f06 <_printf_i+0xf2>
 8005f00:	0669      	lsls	r1, r5, #25
 8005f02:	d5fb      	bpl.n	8005efc <_printf_i+0xe8>
 8005f04:	881d      	ldrh	r5, [r3, #0]
 8005f06:	4854      	ldr	r0, [pc, #336]	; (8006058 <_printf_i+0x244>)
 8005f08:	2f6f      	cmp	r7, #111	; 0x6f
 8005f0a:	bf0c      	ite	eq
 8005f0c:	2308      	moveq	r3, #8
 8005f0e:	230a      	movne	r3, #10
 8005f10:	2100      	movs	r1, #0
 8005f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f16:	6866      	ldr	r6, [r4, #4]
 8005f18:	60a6      	str	r6, [r4, #8]
 8005f1a:	2e00      	cmp	r6, #0
 8005f1c:	bfa2      	ittt	ge
 8005f1e:	6821      	ldrge	r1, [r4, #0]
 8005f20:	f021 0104 	bicge.w	r1, r1, #4
 8005f24:	6021      	strge	r1, [r4, #0]
 8005f26:	b90d      	cbnz	r5, 8005f2c <_printf_i+0x118>
 8005f28:	2e00      	cmp	r6, #0
 8005f2a:	d04d      	beq.n	8005fc8 <_printf_i+0x1b4>
 8005f2c:	4616      	mov	r6, r2
 8005f2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f32:	fb03 5711 	mls	r7, r3, r1, r5
 8005f36:	5dc7      	ldrb	r7, [r0, r7]
 8005f38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f3c:	462f      	mov	r7, r5
 8005f3e:	42bb      	cmp	r3, r7
 8005f40:	460d      	mov	r5, r1
 8005f42:	d9f4      	bls.n	8005f2e <_printf_i+0x11a>
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d10b      	bne.n	8005f60 <_printf_i+0x14c>
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	07df      	lsls	r7, r3, #31
 8005f4c:	d508      	bpl.n	8005f60 <_printf_i+0x14c>
 8005f4e:	6923      	ldr	r3, [r4, #16]
 8005f50:	6861      	ldr	r1, [r4, #4]
 8005f52:	4299      	cmp	r1, r3
 8005f54:	bfde      	ittt	le
 8005f56:	2330      	movle	r3, #48	; 0x30
 8005f58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f60:	1b92      	subs	r2, r2, r6
 8005f62:	6122      	str	r2, [r4, #16]
 8005f64:	f8cd a000 	str.w	sl, [sp]
 8005f68:	464b      	mov	r3, r9
 8005f6a:	aa03      	add	r2, sp, #12
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	4640      	mov	r0, r8
 8005f70:	f7ff fee2 	bl	8005d38 <_printf_common>
 8005f74:	3001      	adds	r0, #1
 8005f76:	d14c      	bne.n	8006012 <_printf_i+0x1fe>
 8005f78:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7c:	b004      	add	sp, #16
 8005f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f82:	4835      	ldr	r0, [pc, #212]	; (8006058 <_printf_i+0x244>)
 8005f84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	680e      	ldr	r6, [r1, #0]
 8005f8c:	061f      	lsls	r7, r3, #24
 8005f8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f92:	600e      	str	r6, [r1, #0]
 8005f94:	d514      	bpl.n	8005fc0 <_printf_i+0x1ac>
 8005f96:	07d9      	lsls	r1, r3, #31
 8005f98:	bf44      	itt	mi
 8005f9a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f9e:	6023      	strmi	r3, [r4, #0]
 8005fa0:	b91d      	cbnz	r5, 8005faa <_printf_i+0x196>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	f023 0320 	bic.w	r3, r3, #32
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	2310      	movs	r3, #16
 8005fac:	e7b0      	b.n	8005f10 <_printf_i+0xfc>
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	f043 0320 	orr.w	r3, r3, #32
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	2378      	movs	r3, #120	; 0x78
 8005fb8:	4828      	ldr	r0, [pc, #160]	; (800605c <_printf_i+0x248>)
 8005fba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fbe:	e7e3      	b.n	8005f88 <_printf_i+0x174>
 8005fc0:	065e      	lsls	r6, r3, #25
 8005fc2:	bf48      	it	mi
 8005fc4:	b2ad      	uxthmi	r5, r5
 8005fc6:	e7e6      	b.n	8005f96 <_printf_i+0x182>
 8005fc8:	4616      	mov	r6, r2
 8005fca:	e7bb      	b.n	8005f44 <_printf_i+0x130>
 8005fcc:	680b      	ldr	r3, [r1, #0]
 8005fce:	6826      	ldr	r6, [r4, #0]
 8005fd0:	6960      	ldr	r0, [r4, #20]
 8005fd2:	1d1d      	adds	r5, r3, #4
 8005fd4:	600d      	str	r5, [r1, #0]
 8005fd6:	0635      	lsls	r5, r6, #24
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	d501      	bpl.n	8005fe0 <_printf_i+0x1cc>
 8005fdc:	6018      	str	r0, [r3, #0]
 8005fde:	e002      	b.n	8005fe6 <_printf_i+0x1d2>
 8005fe0:	0671      	lsls	r1, r6, #25
 8005fe2:	d5fb      	bpl.n	8005fdc <_printf_i+0x1c8>
 8005fe4:	8018      	strh	r0, [r3, #0]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	6123      	str	r3, [r4, #16]
 8005fea:	4616      	mov	r6, r2
 8005fec:	e7ba      	b.n	8005f64 <_printf_i+0x150>
 8005fee:	680b      	ldr	r3, [r1, #0]
 8005ff0:	1d1a      	adds	r2, r3, #4
 8005ff2:	600a      	str	r2, [r1, #0]
 8005ff4:	681e      	ldr	r6, [r3, #0]
 8005ff6:	6862      	ldr	r2, [r4, #4]
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f7fa f8f8 	bl	80001f0 <memchr>
 8006000:	b108      	cbz	r0, 8006006 <_printf_i+0x1f2>
 8006002:	1b80      	subs	r0, r0, r6
 8006004:	6060      	str	r0, [r4, #4]
 8006006:	6863      	ldr	r3, [r4, #4]
 8006008:	6123      	str	r3, [r4, #16]
 800600a:	2300      	movs	r3, #0
 800600c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006010:	e7a8      	b.n	8005f64 <_printf_i+0x150>
 8006012:	6923      	ldr	r3, [r4, #16]
 8006014:	4632      	mov	r2, r6
 8006016:	4649      	mov	r1, r9
 8006018:	4640      	mov	r0, r8
 800601a:	47d0      	blx	sl
 800601c:	3001      	adds	r0, #1
 800601e:	d0ab      	beq.n	8005f78 <_printf_i+0x164>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	079b      	lsls	r3, r3, #30
 8006024:	d413      	bmi.n	800604e <_printf_i+0x23a>
 8006026:	68e0      	ldr	r0, [r4, #12]
 8006028:	9b03      	ldr	r3, [sp, #12]
 800602a:	4298      	cmp	r0, r3
 800602c:	bfb8      	it	lt
 800602e:	4618      	movlt	r0, r3
 8006030:	e7a4      	b.n	8005f7c <_printf_i+0x168>
 8006032:	2301      	movs	r3, #1
 8006034:	4632      	mov	r2, r6
 8006036:	4649      	mov	r1, r9
 8006038:	4640      	mov	r0, r8
 800603a:	47d0      	blx	sl
 800603c:	3001      	adds	r0, #1
 800603e:	d09b      	beq.n	8005f78 <_printf_i+0x164>
 8006040:	3501      	adds	r5, #1
 8006042:	68e3      	ldr	r3, [r4, #12]
 8006044:	9903      	ldr	r1, [sp, #12]
 8006046:	1a5b      	subs	r3, r3, r1
 8006048:	42ab      	cmp	r3, r5
 800604a:	dcf2      	bgt.n	8006032 <_printf_i+0x21e>
 800604c:	e7eb      	b.n	8006026 <_printf_i+0x212>
 800604e:	2500      	movs	r5, #0
 8006050:	f104 0619 	add.w	r6, r4, #25
 8006054:	e7f5      	b.n	8006042 <_printf_i+0x22e>
 8006056:	bf00      	nop
 8006058:	0800826a 	.word	0x0800826a
 800605c:	0800827b 	.word	0x0800827b

08006060 <iprintf>:
 8006060:	b40f      	push	{r0, r1, r2, r3}
 8006062:	4b0a      	ldr	r3, [pc, #40]	; (800608c <iprintf+0x2c>)
 8006064:	b513      	push	{r0, r1, r4, lr}
 8006066:	681c      	ldr	r4, [r3, #0]
 8006068:	b124      	cbz	r4, 8006074 <iprintf+0x14>
 800606a:	69a3      	ldr	r3, [r4, #24]
 800606c:	b913      	cbnz	r3, 8006074 <iprintf+0x14>
 800606e:	4620      	mov	r0, r4
 8006070:	f7ff fa56 	bl	8005520 <__sinit>
 8006074:	ab05      	add	r3, sp, #20
 8006076:	9a04      	ldr	r2, [sp, #16]
 8006078:	68a1      	ldr	r1, [r4, #8]
 800607a:	9301      	str	r3, [sp, #4]
 800607c:	4620      	mov	r0, r4
 800607e:	f001 fe27 	bl	8007cd0 <_vfiprintf_r>
 8006082:	b002      	add	sp, #8
 8006084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006088:	b004      	add	sp, #16
 800608a:	4770      	bx	lr
 800608c:	20000054 	.word	0x20000054

08006090 <putchar>:
 8006090:	4b09      	ldr	r3, [pc, #36]	; (80060b8 <putchar+0x28>)
 8006092:	b513      	push	{r0, r1, r4, lr}
 8006094:	681c      	ldr	r4, [r3, #0]
 8006096:	4601      	mov	r1, r0
 8006098:	b134      	cbz	r4, 80060a8 <putchar+0x18>
 800609a:	69a3      	ldr	r3, [r4, #24]
 800609c:	b923      	cbnz	r3, 80060a8 <putchar+0x18>
 800609e:	9001      	str	r0, [sp, #4]
 80060a0:	4620      	mov	r0, r4
 80060a2:	f7ff fa3d 	bl	8005520 <__sinit>
 80060a6:	9901      	ldr	r1, [sp, #4]
 80060a8:	68a2      	ldr	r2, [r4, #8]
 80060aa:	4620      	mov	r0, r4
 80060ac:	b002      	add	sp, #8
 80060ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060b2:	f001 bf3d 	b.w	8007f30 <_putc_r>
 80060b6:	bf00      	nop
 80060b8:	20000054 	.word	0x20000054

080060bc <_puts_r>:
 80060bc:	b570      	push	{r4, r5, r6, lr}
 80060be:	460e      	mov	r6, r1
 80060c0:	4605      	mov	r5, r0
 80060c2:	b118      	cbz	r0, 80060cc <_puts_r+0x10>
 80060c4:	6983      	ldr	r3, [r0, #24]
 80060c6:	b90b      	cbnz	r3, 80060cc <_puts_r+0x10>
 80060c8:	f7ff fa2a 	bl	8005520 <__sinit>
 80060cc:	69ab      	ldr	r3, [r5, #24]
 80060ce:	68ac      	ldr	r4, [r5, #8]
 80060d0:	b913      	cbnz	r3, 80060d8 <_puts_r+0x1c>
 80060d2:	4628      	mov	r0, r5
 80060d4:	f7ff fa24 	bl	8005520 <__sinit>
 80060d8:	4b2c      	ldr	r3, [pc, #176]	; (800618c <_puts_r+0xd0>)
 80060da:	429c      	cmp	r4, r3
 80060dc:	d120      	bne.n	8006120 <_puts_r+0x64>
 80060de:	686c      	ldr	r4, [r5, #4]
 80060e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060e2:	07db      	lsls	r3, r3, #31
 80060e4:	d405      	bmi.n	80060f2 <_puts_r+0x36>
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	0598      	lsls	r0, r3, #22
 80060ea:	d402      	bmi.n	80060f2 <_puts_r+0x36>
 80060ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ee:	f7ff fada 	bl	80056a6 <__retarget_lock_acquire_recursive>
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	0719      	lsls	r1, r3, #28
 80060f6:	d51d      	bpl.n	8006134 <_puts_r+0x78>
 80060f8:	6923      	ldr	r3, [r4, #16]
 80060fa:	b1db      	cbz	r3, 8006134 <_puts_r+0x78>
 80060fc:	3e01      	subs	r6, #1
 80060fe:	68a3      	ldr	r3, [r4, #8]
 8006100:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006104:	3b01      	subs	r3, #1
 8006106:	60a3      	str	r3, [r4, #8]
 8006108:	bb39      	cbnz	r1, 800615a <_puts_r+0x9e>
 800610a:	2b00      	cmp	r3, #0
 800610c:	da38      	bge.n	8006180 <_puts_r+0xc4>
 800610e:	4622      	mov	r2, r4
 8006110:	210a      	movs	r1, #10
 8006112:	4628      	mov	r0, r5
 8006114:	f000 f92a 	bl	800636c <__swbuf_r>
 8006118:	3001      	adds	r0, #1
 800611a:	d011      	beq.n	8006140 <_puts_r+0x84>
 800611c:	250a      	movs	r5, #10
 800611e:	e011      	b.n	8006144 <_puts_r+0x88>
 8006120:	4b1b      	ldr	r3, [pc, #108]	; (8006190 <_puts_r+0xd4>)
 8006122:	429c      	cmp	r4, r3
 8006124:	d101      	bne.n	800612a <_puts_r+0x6e>
 8006126:	68ac      	ldr	r4, [r5, #8]
 8006128:	e7da      	b.n	80060e0 <_puts_r+0x24>
 800612a:	4b1a      	ldr	r3, [pc, #104]	; (8006194 <_puts_r+0xd8>)
 800612c:	429c      	cmp	r4, r3
 800612e:	bf08      	it	eq
 8006130:	68ec      	ldreq	r4, [r5, #12]
 8006132:	e7d5      	b.n	80060e0 <_puts_r+0x24>
 8006134:	4621      	mov	r1, r4
 8006136:	4628      	mov	r0, r5
 8006138:	f000 f97c 	bl	8006434 <__swsetup_r>
 800613c:	2800      	cmp	r0, #0
 800613e:	d0dd      	beq.n	80060fc <_puts_r+0x40>
 8006140:	f04f 35ff 	mov.w	r5, #4294967295
 8006144:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006146:	07da      	lsls	r2, r3, #31
 8006148:	d405      	bmi.n	8006156 <_puts_r+0x9a>
 800614a:	89a3      	ldrh	r3, [r4, #12]
 800614c:	059b      	lsls	r3, r3, #22
 800614e:	d402      	bmi.n	8006156 <_puts_r+0x9a>
 8006150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006152:	f7ff faa9 	bl	80056a8 <__retarget_lock_release_recursive>
 8006156:	4628      	mov	r0, r5
 8006158:	bd70      	pop	{r4, r5, r6, pc}
 800615a:	2b00      	cmp	r3, #0
 800615c:	da04      	bge.n	8006168 <_puts_r+0xac>
 800615e:	69a2      	ldr	r2, [r4, #24]
 8006160:	429a      	cmp	r2, r3
 8006162:	dc06      	bgt.n	8006172 <_puts_r+0xb6>
 8006164:	290a      	cmp	r1, #10
 8006166:	d004      	beq.n	8006172 <_puts_r+0xb6>
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	6022      	str	r2, [r4, #0]
 800616e:	7019      	strb	r1, [r3, #0]
 8006170:	e7c5      	b.n	80060fe <_puts_r+0x42>
 8006172:	4622      	mov	r2, r4
 8006174:	4628      	mov	r0, r5
 8006176:	f000 f8f9 	bl	800636c <__swbuf_r>
 800617a:	3001      	adds	r0, #1
 800617c:	d1bf      	bne.n	80060fe <_puts_r+0x42>
 800617e:	e7df      	b.n	8006140 <_puts_r+0x84>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	250a      	movs	r5, #10
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	6022      	str	r2, [r4, #0]
 8006188:	701d      	strb	r5, [r3, #0]
 800618a:	e7db      	b.n	8006144 <_puts_r+0x88>
 800618c:	08008214 	.word	0x08008214
 8006190:	08008234 	.word	0x08008234
 8006194:	080081f4 	.word	0x080081f4

08006198 <puts>:
 8006198:	4b02      	ldr	r3, [pc, #8]	; (80061a4 <puts+0xc>)
 800619a:	4601      	mov	r1, r0
 800619c:	6818      	ldr	r0, [r3, #0]
 800619e:	f7ff bf8d 	b.w	80060bc <_puts_r>
 80061a2:	bf00      	nop
 80061a4:	20000054 	.word	0x20000054

080061a8 <_sbrk_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4d06      	ldr	r5, [pc, #24]	; (80061c4 <_sbrk_r+0x1c>)
 80061ac:	2300      	movs	r3, #0
 80061ae:	4604      	mov	r4, r0
 80061b0:	4608      	mov	r0, r1
 80061b2:	602b      	str	r3, [r5, #0]
 80061b4:	f7fb fe60 	bl	8001e78 <_sbrk>
 80061b8:	1c43      	adds	r3, r0, #1
 80061ba:	d102      	bne.n	80061c2 <_sbrk_r+0x1a>
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	b103      	cbz	r3, 80061c2 <_sbrk_r+0x1a>
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	bd38      	pop	{r3, r4, r5, pc}
 80061c4:	20000c94 	.word	0x20000c94

080061c8 <__sread>:
 80061c8:	b510      	push	{r4, lr}
 80061ca:	460c      	mov	r4, r1
 80061cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d0:	f001 fef6 	bl	8007fc0 <_read_r>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	bfab      	itete	ge
 80061d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061da:	89a3      	ldrhlt	r3, [r4, #12]
 80061dc:	181b      	addge	r3, r3, r0
 80061de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061e2:	bfac      	ite	ge
 80061e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80061e6:	81a3      	strhlt	r3, [r4, #12]
 80061e8:	bd10      	pop	{r4, pc}

080061ea <__swrite>:
 80061ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ee:	461f      	mov	r7, r3
 80061f0:	898b      	ldrh	r3, [r1, #12]
 80061f2:	05db      	lsls	r3, r3, #23
 80061f4:	4605      	mov	r5, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	4616      	mov	r6, r2
 80061fa:	d505      	bpl.n	8006208 <__swrite+0x1e>
 80061fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006200:	2302      	movs	r3, #2
 8006202:	2200      	movs	r2, #0
 8006204:	f001 f8d2 	bl	80073ac <_lseek_r>
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800620e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006212:	81a3      	strh	r3, [r4, #12]
 8006214:	4632      	mov	r2, r6
 8006216:	463b      	mov	r3, r7
 8006218:	4628      	mov	r0, r5
 800621a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800621e:	f000 b8f7 	b.w	8006410 <_write_r>

08006222 <__sseek>:
 8006222:	b510      	push	{r4, lr}
 8006224:	460c      	mov	r4, r1
 8006226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800622a:	f001 f8bf 	bl	80073ac <_lseek_r>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	89a3      	ldrh	r3, [r4, #12]
 8006232:	bf15      	itete	ne
 8006234:	6560      	strne	r0, [r4, #84]	; 0x54
 8006236:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800623a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800623e:	81a3      	strheq	r3, [r4, #12]
 8006240:	bf18      	it	ne
 8006242:	81a3      	strhne	r3, [r4, #12]
 8006244:	bd10      	pop	{r4, pc}

08006246 <__sclose>:
 8006246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800624a:	f000 b961 	b.w	8006510 <_close_r>
	...

08006250 <_strtol_l.isra.0>:
 8006250:	2b01      	cmp	r3, #1
 8006252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006256:	d001      	beq.n	800625c <_strtol_l.isra.0+0xc>
 8006258:	2b24      	cmp	r3, #36	; 0x24
 800625a:	d906      	bls.n	800626a <_strtol_l.isra.0+0x1a>
 800625c:	f7ff f902 	bl	8005464 <__errno>
 8006260:	2316      	movs	r3, #22
 8006262:	6003      	str	r3, [r0, #0]
 8006264:	2000      	movs	r0, #0
 8006266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626a:	4f3a      	ldr	r7, [pc, #232]	; (8006354 <_strtol_l.isra.0+0x104>)
 800626c:	468e      	mov	lr, r1
 800626e:	4676      	mov	r6, lr
 8006270:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006274:	5de5      	ldrb	r5, [r4, r7]
 8006276:	f015 0508 	ands.w	r5, r5, #8
 800627a:	d1f8      	bne.n	800626e <_strtol_l.isra.0+0x1e>
 800627c:	2c2d      	cmp	r4, #45	; 0x2d
 800627e:	d134      	bne.n	80062ea <_strtol_l.isra.0+0x9a>
 8006280:	f89e 4000 	ldrb.w	r4, [lr]
 8006284:	f04f 0801 	mov.w	r8, #1
 8006288:	f106 0e02 	add.w	lr, r6, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d05c      	beq.n	800634a <_strtol_l.isra.0+0xfa>
 8006290:	2b10      	cmp	r3, #16
 8006292:	d10c      	bne.n	80062ae <_strtol_l.isra.0+0x5e>
 8006294:	2c30      	cmp	r4, #48	; 0x30
 8006296:	d10a      	bne.n	80062ae <_strtol_l.isra.0+0x5e>
 8006298:	f89e 4000 	ldrb.w	r4, [lr]
 800629c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80062a0:	2c58      	cmp	r4, #88	; 0x58
 80062a2:	d14d      	bne.n	8006340 <_strtol_l.isra.0+0xf0>
 80062a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80062a8:	2310      	movs	r3, #16
 80062aa:	f10e 0e02 	add.w	lr, lr, #2
 80062ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80062b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80062b6:	2600      	movs	r6, #0
 80062b8:	fbbc f9f3 	udiv	r9, ip, r3
 80062bc:	4635      	mov	r5, r6
 80062be:	fb03 ca19 	mls	sl, r3, r9, ip
 80062c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80062c6:	2f09      	cmp	r7, #9
 80062c8:	d818      	bhi.n	80062fc <_strtol_l.isra.0+0xac>
 80062ca:	463c      	mov	r4, r7
 80062cc:	42a3      	cmp	r3, r4
 80062ce:	dd24      	ble.n	800631a <_strtol_l.isra.0+0xca>
 80062d0:	2e00      	cmp	r6, #0
 80062d2:	db1f      	blt.n	8006314 <_strtol_l.isra.0+0xc4>
 80062d4:	45a9      	cmp	r9, r5
 80062d6:	d31d      	bcc.n	8006314 <_strtol_l.isra.0+0xc4>
 80062d8:	d101      	bne.n	80062de <_strtol_l.isra.0+0x8e>
 80062da:	45a2      	cmp	sl, r4
 80062dc:	db1a      	blt.n	8006314 <_strtol_l.isra.0+0xc4>
 80062de:	fb05 4503 	mla	r5, r5, r3, r4
 80062e2:	2601      	movs	r6, #1
 80062e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80062e8:	e7eb      	b.n	80062c2 <_strtol_l.isra.0+0x72>
 80062ea:	2c2b      	cmp	r4, #43	; 0x2b
 80062ec:	bf08      	it	eq
 80062ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 80062f2:	46a8      	mov	r8, r5
 80062f4:	bf08      	it	eq
 80062f6:	f106 0e02 	addeq.w	lr, r6, #2
 80062fa:	e7c7      	b.n	800628c <_strtol_l.isra.0+0x3c>
 80062fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006300:	2f19      	cmp	r7, #25
 8006302:	d801      	bhi.n	8006308 <_strtol_l.isra.0+0xb8>
 8006304:	3c37      	subs	r4, #55	; 0x37
 8006306:	e7e1      	b.n	80062cc <_strtol_l.isra.0+0x7c>
 8006308:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800630c:	2f19      	cmp	r7, #25
 800630e:	d804      	bhi.n	800631a <_strtol_l.isra.0+0xca>
 8006310:	3c57      	subs	r4, #87	; 0x57
 8006312:	e7db      	b.n	80062cc <_strtol_l.isra.0+0x7c>
 8006314:	f04f 36ff 	mov.w	r6, #4294967295
 8006318:	e7e4      	b.n	80062e4 <_strtol_l.isra.0+0x94>
 800631a:	2e00      	cmp	r6, #0
 800631c:	da05      	bge.n	800632a <_strtol_l.isra.0+0xda>
 800631e:	2322      	movs	r3, #34	; 0x22
 8006320:	6003      	str	r3, [r0, #0]
 8006322:	4665      	mov	r5, ip
 8006324:	b942      	cbnz	r2, 8006338 <_strtol_l.isra.0+0xe8>
 8006326:	4628      	mov	r0, r5
 8006328:	e79d      	b.n	8006266 <_strtol_l.isra.0+0x16>
 800632a:	f1b8 0f00 	cmp.w	r8, #0
 800632e:	d000      	beq.n	8006332 <_strtol_l.isra.0+0xe2>
 8006330:	426d      	negs	r5, r5
 8006332:	2a00      	cmp	r2, #0
 8006334:	d0f7      	beq.n	8006326 <_strtol_l.isra.0+0xd6>
 8006336:	b10e      	cbz	r6, 800633c <_strtol_l.isra.0+0xec>
 8006338:	f10e 31ff 	add.w	r1, lr, #4294967295
 800633c:	6011      	str	r1, [r2, #0]
 800633e:	e7f2      	b.n	8006326 <_strtol_l.isra.0+0xd6>
 8006340:	2430      	movs	r4, #48	; 0x30
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1b3      	bne.n	80062ae <_strtol_l.isra.0+0x5e>
 8006346:	2308      	movs	r3, #8
 8006348:	e7b1      	b.n	80062ae <_strtol_l.isra.0+0x5e>
 800634a:	2c30      	cmp	r4, #48	; 0x30
 800634c:	d0a4      	beq.n	8006298 <_strtol_l.isra.0+0x48>
 800634e:	230a      	movs	r3, #10
 8006350:	e7ad      	b.n	80062ae <_strtol_l.isra.0+0x5e>
 8006352:	bf00      	nop
 8006354:	0800828d 	.word	0x0800828d

08006358 <strtol>:
 8006358:	4613      	mov	r3, r2
 800635a:	460a      	mov	r2, r1
 800635c:	4601      	mov	r1, r0
 800635e:	4802      	ldr	r0, [pc, #8]	; (8006368 <strtol+0x10>)
 8006360:	6800      	ldr	r0, [r0, #0]
 8006362:	f7ff bf75 	b.w	8006250 <_strtol_l.isra.0>
 8006366:	bf00      	nop
 8006368:	20000054 	.word	0x20000054

0800636c <__swbuf_r>:
 800636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636e:	460e      	mov	r6, r1
 8006370:	4614      	mov	r4, r2
 8006372:	4605      	mov	r5, r0
 8006374:	b118      	cbz	r0, 800637e <__swbuf_r+0x12>
 8006376:	6983      	ldr	r3, [r0, #24]
 8006378:	b90b      	cbnz	r3, 800637e <__swbuf_r+0x12>
 800637a:	f7ff f8d1 	bl	8005520 <__sinit>
 800637e:	4b21      	ldr	r3, [pc, #132]	; (8006404 <__swbuf_r+0x98>)
 8006380:	429c      	cmp	r4, r3
 8006382:	d12b      	bne.n	80063dc <__swbuf_r+0x70>
 8006384:	686c      	ldr	r4, [r5, #4]
 8006386:	69a3      	ldr	r3, [r4, #24]
 8006388:	60a3      	str	r3, [r4, #8]
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	071a      	lsls	r2, r3, #28
 800638e:	d52f      	bpl.n	80063f0 <__swbuf_r+0x84>
 8006390:	6923      	ldr	r3, [r4, #16]
 8006392:	b36b      	cbz	r3, 80063f0 <__swbuf_r+0x84>
 8006394:	6923      	ldr	r3, [r4, #16]
 8006396:	6820      	ldr	r0, [r4, #0]
 8006398:	1ac0      	subs	r0, r0, r3
 800639a:	6963      	ldr	r3, [r4, #20]
 800639c:	b2f6      	uxtb	r6, r6
 800639e:	4283      	cmp	r3, r0
 80063a0:	4637      	mov	r7, r6
 80063a2:	dc04      	bgt.n	80063ae <__swbuf_r+0x42>
 80063a4:	4621      	mov	r1, r4
 80063a6:	4628      	mov	r0, r5
 80063a8:	f000 ffc0 	bl	800732c <_fflush_r>
 80063ac:	bb30      	cbnz	r0, 80063fc <__swbuf_r+0x90>
 80063ae:	68a3      	ldr	r3, [r4, #8]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	60a3      	str	r3, [r4, #8]
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	6022      	str	r2, [r4, #0]
 80063ba:	701e      	strb	r6, [r3, #0]
 80063bc:	6963      	ldr	r3, [r4, #20]
 80063be:	3001      	adds	r0, #1
 80063c0:	4283      	cmp	r3, r0
 80063c2:	d004      	beq.n	80063ce <__swbuf_r+0x62>
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	07db      	lsls	r3, r3, #31
 80063c8:	d506      	bpl.n	80063d8 <__swbuf_r+0x6c>
 80063ca:	2e0a      	cmp	r6, #10
 80063cc:	d104      	bne.n	80063d8 <__swbuf_r+0x6c>
 80063ce:	4621      	mov	r1, r4
 80063d0:	4628      	mov	r0, r5
 80063d2:	f000 ffab 	bl	800732c <_fflush_r>
 80063d6:	b988      	cbnz	r0, 80063fc <__swbuf_r+0x90>
 80063d8:	4638      	mov	r0, r7
 80063da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063dc:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <__swbuf_r+0x9c>)
 80063de:	429c      	cmp	r4, r3
 80063e0:	d101      	bne.n	80063e6 <__swbuf_r+0x7a>
 80063e2:	68ac      	ldr	r4, [r5, #8]
 80063e4:	e7cf      	b.n	8006386 <__swbuf_r+0x1a>
 80063e6:	4b09      	ldr	r3, [pc, #36]	; (800640c <__swbuf_r+0xa0>)
 80063e8:	429c      	cmp	r4, r3
 80063ea:	bf08      	it	eq
 80063ec:	68ec      	ldreq	r4, [r5, #12]
 80063ee:	e7ca      	b.n	8006386 <__swbuf_r+0x1a>
 80063f0:	4621      	mov	r1, r4
 80063f2:	4628      	mov	r0, r5
 80063f4:	f000 f81e 	bl	8006434 <__swsetup_r>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	d0cb      	beq.n	8006394 <__swbuf_r+0x28>
 80063fc:	f04f 37ff 	mov.w	r7, #4294967295
 8006400:	e7ea      	b.n	80063d8 <__swbuf_r+0x6c>
 8006402:	bf00      	nop
 8006404:	08008214 	.word	0x08008214
 8006408:	08008234 	.word	0x08008234
 800640c:	080081f4 	.word	0x080081f4

08006410 <_write_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4d07      	ldr	r5, [pc, #28]	; (8006430 <_write_r+0x20>)
 8006414:	4604      	mov	r4, r0
 8006416:	4608      	mov	r0, r1
 8006418:	4611      	mov	r1, r2
 800641a:	2200      	movs	r2, #0
 800641c:	602a      	str	r2, [r5, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	f7fb fcd9 	bl	8001dd6 <_write>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d102      	bne.n	800642e <_write_r+0x1e>
 8006428:	682b      	ldr	r3, [r5, #0]
 800642a:	b103      	cbz	r3, 800642e <_write_r+0x1e>
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	bd38      	pop	{r3, r4, r5, pc}
 8006430:	20000c94 	.word	0x20000c94

08006434 <__swsetup_r>:
 8006434:	4b32      	ldr	r3, [pc, #200]	; (8006500 <__swsetup_r+0xcc>)
 8006436:	b570      	push	{r4, r5, r6, lr}
 8006438:	681d      	ldr	r5, [r3, #0]
 800643a:	4606      	mov	r6, r0
 800643c:	460c      	mov	r4, r1
 800643e:	b125      	cbz	r5, 800644a <__swsetup_r+0x16>
 8006440:	69ab      	ldr	r3, [r5, #24]
 8006442:	b913      	cbnz	r3, 800644a <__swsetup_r+0x16>
 8006444:	4628      	mov	r0, r5
 8006446:	f7ff f86b 	bl	8005520 <__sinit>
 800644a:	4b2e      	ldr	r3, [pc, #184]	; (8006504 <__swsetup_r+0xd0>)
 800644c:	429c      	cmp	r4, r3
 800644e:	d10f      	bne.n	8006470 <__swsetup_r+0x3c>
 8006450:	686c      	ldr	r4, [r5, #4]
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006458:	0719      	lsls	r1, r3, #28
 800645a:	d42c      	bmi.n	80064b6 <__swsetup_r+0x82>
 800645c:	06dd      	lsls	r5, r3, #27
 800645e:	d411      	bmi.n	8006484 <__swsetup_r+0x50>
 8006460:	2309      	movs	r3, #9
 8006462:	6033      	str	r3, [r6, #0]
 8006464:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006468:	81a3      	strh	r3, [r4, #12]
 800646a:	f04f 30ff 	mov.w	r0, #4294967295
 800646e:	e03e      	b.n	80064ee <__swsetup_r+0xba>
 8006470:	4b25      	ldr	r3, [pc, #148]	; (8006508 <__swsetup_r+0xd4>)
 8006472:	429c      	cmp	r4, r3
 8006474:	d101      	bne.n	800647a <__swsetup_r+0x46>
 8006476:	68ac      	ldr	r4, [r5, #8]
 8006478:	e7eb      	b.n	8006452 <__swsetup_r+0x1e>
 800647a:	4b24      	ldr	r3, [pc, #144]	; (800650c <__swsetup_r+0xd8>)
 800647c:	429c      	cmp	r4, r3
 800647e:	bf08      	it	eq
 8006480:	68ec      	ldreq	r4, [r5, #12]
 8006482:	e7e6      	b.n	8006452 <__swsetup_r+0x1e>
 8006484:	0758      	lsls	r0, r3, #29
 8006486:	d512      	bpl.n	80064ae <__swsetup_r+0x7a>
 8006488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800648a:	b141      	cbz	r1, 800649e <__swsetup_r+0x6a>
 800648c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006490:	4299      	cmp	r1, r3
 8006492:	d002      	beq.n	800649a <__swsetup_r+0x66>
 8006494:	4630      	mov	r0, r6
 8006496:	f001 fba1 	bl	8007bdc <_free_r>
 800649a:	2300      	movs	r3, #0
 800649c:	6363      	str	r3, [r4, #52]	; 0x34
 800649e:	89a3      	ldrh	r3, [r4, #12]
 80064a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064a4:	81a3      	strh	r3, [r4, #12]
 80064a6:	2300      	movs	r3, #0
 80064a8:	6063      	str	r3, [r4, #4]
 80064aa:	6923      	ldr	r3, [r4, #16]
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	f043 0308 	orr.w	r3, r3, #8
 80064b4:	81a3      	strh	r3, [r4, #12]
 80064b6:	6923      	ldr	r3, [r4, #16]
 80064b8:	b94b      	cbnz	r3, 80064ce <__swsetup_r+0x9a>
 80064ba:	89a3      	ldrh	r3, [r4, #12]
 80064bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c4:	d003      	beq.n	80064ce <__swsetup_r+0x9a>
 80064c6:	4621      	mov	r1, r4
 80064c8:	4630      	mov	r0, r6
 80064ca:	f000 ffa5 	bl	8007418 <__smakebuf_r>
 80064ce:	89a0      	ldrh	r0, [r4, #12]
 80064d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064d4:	f010 0301 	ands.w	r3, r0, #1
 80064d8:	d00a      	beq.n	80064f0 <__swsetup_r+0xbc>
 80064da:	2300      	movs	r3, #0
 80064dc:	60a3      	str	r3, [r4, #8]
 80064de:	6963      	ldr	r3, [r4, #20]
 80064e0:	425b      	negs	r3, r3
 80064e2:	61a3      	str	r3, [r4, #24]
 80064e4:	6923      	ldr	r3, [r4, #16]
 80064e6:	b943      	cbnz	r3, 80064fa <__swsetup_r+0xc6>
 80064e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064ec:	d1ba      	bne.n	8006464 <__swsetup_r+0x30>
 80064ee:	bd70      	pop	{r4, r5, r6, pc}
 80064f0:	0781      	lsls	r1, r0, #30
 80064f2:	bf58      	it	pl
 80064f4:	6963      	ldrpl	r3, [r4, #20]
 80064f6:	60a3      	str	r3, [r4, #8]
 80064f8:	e7f4      	b.n	80064e4 <__swsetup_r+0xb0>
 80064fa:	2000      	movs	r0, #0
 80064fc:	e7f7      	b.n	80064ee <__swsetup_r+0xba>
 80064fe:	bf00      	nop
 8006500:	20000054 	.word	0x20000054
 8006504:	08008214 	.word	0x08008214
 8006508:	08008234 	.word	0x08008234
 800650c:	080081f4 	.word	0x080081f4

08006510 <_close_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4d06      	ldr	r5, [pc, #24]	; (800652c <_close_r+0x1c>)
 8006514:	2300      	movs	r3, #0
 8006516:	4604      	mov	r4, r0
 8006518:	4608      	mov	r0, r1
 800651a:	602b      	str	r3, [r5, #0]
 800651c:	f7fb fc77 	bl	8001e0e <_close>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_close_r+0x1a>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_close_r+0x1a>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	20000c94 	.word	0x20000c94

08006530 <quorem>:
 8006530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	6903      	ldr	r3, [r0, #16]
 8006536:	690c      	ldr	r4, [r1, #16]
 8006538:	42a3      	cmp	r3, r4
 800653a:	4607      	mov	r7, r0
 800653c:	f2c0 8081 	blt.w	8006642 <quorem+0x112>
 8006540:	3c01      	subs	r4, #1
 8006542:	f101 0814 	add.w	r8, r1, #20
 8006546:	f100 0514 	add.w	r5, r0, #20
 800654a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006554:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006558:	3301      	adds	r3, #1
 800655a:	429a      	cmp	r2, r3
 800655c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006560:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006564:	fbb2 f6f3 	udiv	r6, r2, r3
 8006568:	d331      	bcc.n	80065ce <quorem+0x9e>
 800656a:	f04f 0e00 	mov.w	lr, #0
 800656e:	4640      	mov	r0, r8
 8006570:	46ac      	mov	ip, r5
 8006572:	46f2      	mov	sl, lr
 8006574:	f850 2b04 	ldr.w	r2, [r0], #4
 8006578:	b293      	uxth	r3, r2
 800657a:	fb06 e303 	mla	r3, r6, r3, lr
 800657e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006582:	b29b      	uxth	r3, r3
 8006584:	ebaa 0303 	sub.w	r3, sl, r3
 8006588:	0c12      	lsrs	r2, r2, #16
 800658a:	f8dc a000 	ldr.w	sl, [ip]
 800658e:	fb06 e202 	mla	r2, r6, r2, lr
 8006592:	fa13 f38a 	uxtah	r3, r3, sl
 8006596:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800659a:	fa1f fa82 	uxth.w	sl, r2
 800659e:	f8dc 2000 	ldr.w	r2, [ip]
 80065a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80065a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065b0:	4581      	cmp	r9, r0
 80065b2:	f84c 3b04 	str.w	r3, [ip], #4
 80065b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065ba:	d2db      	bcs.n	8006574 <quorem+0x44>
 80065bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80065c0:	b92b      	cbnz	r3, 80065ce <quorem+0x9e>
 80065c2:	9b01      	ldr	r3, [sp, #4]
 80065c4:	3b04      	subs	r3, #4
 80065c6:	429d      	cmp	r5, r3
 80065c8:	461a      	mov	r2, r3
 80065ca:	d32e      	bcc.n	800662a <quorem+0xfa>
 80065cc:	613c      	str	r4, [r7, #16]
 80065ce:	4638      	mov	r0, r7
 80065d0:	f001 f9f4 	bl	80079bc <__mcmp>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	db24      	blt.n	8006622 <quorem+0xf2>
 80065d8:	3601      	adds	r6, #1
 80065da:	4628      	mov	r0, r5
 80065dc:	f04f 0c00 	mov.w	ip, #0
 80065e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80065e4:	f8d0 e000 	ldr.w	lr, [r0]
 80065e8:	b293      	uxth	r3, r2
 80065ea:	ebac 0303 	sub.w	r3, ip, r3
 80065ee:	0c12      	lsrs	r2, r2, #16
 80065f0:	fa13 f38e 	uxtah	r3, r3, lr
 80065f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006602:	45c1      	cmp	r9, r8
 8006604:	f840 3b04 	str.w	r3, [r0], #4
 8006608:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800660c:	d2e8      	bcs.n	80065e0 <quorem+0xb0>
 800660e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006612:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006616:	b922      	cbnz	r2, 8006622 <quorem+0xf2>
 8006618:	3b04      	subs	r3, #4
 800661a:	429d      	cmp	r5, r3
 800661c:	461a      	mov	r2, r3
 800661e:	d30a      	bcc.n	8006636 <quorem+0x106>
 8006620:	613c      	str	r4, [r7, #16]
 8006622:	4630      	mov	r0, r6
 8006624:	b003      	add	sp, #12
 8006626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	3b04      	subs	r3, #4
 800662e:	2a00      	cmp	r2, #0
 8006630:	d1cc      	bne.n	80065cc <quorem+0x9c>
 8006632:	3c01      	subs	r4, #1
 8006634:	e7c7      	b.n	80065c6 <quorem+0x96>
 8006636:	6812      	ldr	r2, [r2, #0]
 8006638:	3b04      	subs	r3, #4
 800663a:	2a00      	cmp	r2, #0
 800663c:	d1f0      	bne.n	8006620 <quorem+0xf0>
 800663e:	3c01      	subs	r4, #1
 8006640:	e7eb      	b.n	800661a <quorem+0xea>
 8006642:	2000      	movs	r0, #0
 8006644:	e7ee      	b.n	8006624 <quorem+0xf4>
	...

08006648 <_dtoa_r>:
 8006648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664c:	ed2d 8b02 	vpush	{d8}
 8006650:	ec57 6b10 	vmov	r6, r7, d0
 8006654:	b095      	sub	sp, #84	; 0x54
 8006656:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006658:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800665c:	9105      	str	r1, [sp, #20]
 800665e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006662:	4604      	mov	r4, r0
 8006664:	9209      	str	r2, [sp, #36]	; 0x24
 8006666:	930f      	str	r3, [sp, #60]	; 0x3c
 8006668:	b975      	cbnz	r5, 8006688 <_dtoa_r+0x40>
 800666a:	2010      	movs	r0, #16
 800666c:	f000 ff14 	bl	8007498 <malloc>
 8006670:	4602      	mov	r2, r0
 8006672:	6260      	str	r0, [r4, #36]	; 0x24
 8006674:	b920      	cbnz	r0, 8006680 <_dtoa_r+0x38>
 8006676:	4bb2      	ldr	r3, [pc, #712]	; (8006940 <_dtoa_r+0x2f8>)
 8006678:	21ea      	movs	r1, #234	; 0xea
 800667a:	48b2      	ldr	r0, [pc, #712]	; (8006944 <_dtoa_r+0x2fc>)
 800667c:	f001 fcb2 	bl	8007fe4 <__assert_func>
 8006680:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006684:	6005      	str	r5, [r0, #0]
 8006686:	60c5      	str	r5, [r0, #12]
 8006688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800668a:	6819      	ldr	r1, [r3, #0]
 800668c:	b151      	cbz	r1, 80066a4 <_dtoa_r+0x5c>
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	604a      	str	r2, [r1, #4]
 8006692:	2301      	movs	r3, #1
 8006694:	4093      	lsls	r3, r2
 8006696:	608b      	str	r3, [r1, #8]
 8006698:	4620      	mov	r0, r4
 800669a:	f000 ff51 	bl	8007540 <_Bfree>
 800669e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	1e3b      	subs	r3, r7, #0
 80066a6:	bfb9      	ittee	lt
 80066a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80066ac:	9303      	strlt	r3, [sp, #12]
 80066ae:	2300      	movge	r3, #0
 80066b0:	f8c8 3000 	strge.w	r3, [r8]
 80066b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80066b8:	4ba3      	ldr	r3, [pc, #652]	; (8006948 <_dtoa_r+0x300>)
 80066ba:	bfbc      	itt	lt
 80066bc:	2201      	movlt	r2, #1
 80066be:	f8c8 2000 	strlt.w	r2, [r8]
 80066c2:	ea33 0309 	bics.w	r3, r3, r9
 80066c6:	d11b      	bne.n	8006700 <_dtoa_r+0xb8>
 80066c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066d4:	4333      	orrs	r3, r6
 80066d6:	f000 857a 	beq.w	80071ce <_dtoa_r+0xb86>
 80066da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066dc:	b963      	cbnz	r3, 80066f8 <_dtoa_r+0xb0>
 80066de:	4b9b      	ldr	r3, [pc, #620]	; (800694c <_dtoa_r+0x304>)
 80066e0:	e024      	b.n	800672c <_dtoa_r+0xe4>
 80066e2:	4b9b      	ldr	r3, [pc, #620]	; (8006950 <_dtoa_r+0x308>)
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	3308      	adds	r3, #8
 80066e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	9800      	ldr	r0, [sp, #0]
 80066ee:	b015      	add	sp, #84	; 0x54
 80066f0:	ecbd 8b02 	vpop	{d8}
 80066f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f8:	4b94      	ldr	r3, [pc, #592]	; (800694c <_dtoa_r+0x304>)
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	3303      	adds	r3, #3
 80066fe:	e7f3      	b.n	80066e8 <_dtoa_r+0xa0>
 8006700:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006704:	2200      	movs	r2, #0
 8006706:	ec51 0b17 	vmov	r0, r1, d7
 800670a:	2300      	movs	r3, #0
 800670c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006710:	f7fa f9e2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006714:	4680      	mov	r8, r0
 8006716:	b158      	cbz	r0, 8006730 <_dtoa_r+0xe8>
 8006718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800671a:	2301      	movs	r3, #1
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8551 	beq.w	80071c8 <_dtoa_r+0xb80>
 8006726:	488b      	ldr	r0, [pc, #556]	; (8006954 <_dtoa_r+0x30c>)
 8006728:	6018      	str	r0, [r3, #0]
 800672a:	1e43      	subs	r3, r0, #1
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	e7dd      	b.n	80066ec <_dtoa_r+0xa4>
 8006730:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006734:	aa12      	add	r2, sp, #72	; 0x48
 8006736:	a913      	add	r1, sp, #76	; 0x4c
 8006738:	4620      	mov	r0, r4
 800673a:	f001 f9e3 	bl	8007b04 <__d2b>
 800673e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006742:	4683      	mov	fp, r0
 8006744:	2d00      	cmp	r5, #0
 8006746:	d07c      	beq.n	8006842 <_dtoa_r+0x1fa>
 8006748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800674a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800674e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006752:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006756:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800675a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800675e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006762:	4b7d      	ldr	r3, [pc, #500]	; (8006958 <_dtoa_r+0x310>)
 8006764:	2200      	movs	r2, #0
 8006766:	4630      	mov	r0, r6
 8006768:	4639      	mov	r1, r7
 800676a:	f7f9 fd95 	bl	8000298 <__aeabi_dsub>
 800676e:	a36e      	add	r3, pc, #440	; (adr r3, 8006928 <_dtoa_r+0x2e0>)
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	f7f9 ff48 	bl	8000608 <__aeabi_dmul>
 8006778:	a36d      	add	r3, pc, #436	; (adr r3, 8006930 <_dtoa_r+0x2e8>)
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	f7f9 fd8d 	bl	800029c <__adddf3>
 8006782:	4606      	mov	r6, r0
 8006784:	4628      	mov	r0, r5
 8006786:	460f      	mov	r7, r1
 8006788:	f7f9 fed4 	bl	8000534 <__aeabi_i2d>
 800678c:	a36a      	add	r3, pc, #424	; (adr r3, 8006938 <_dtoa_r+0x2f0>)
 800678e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006792:	f7f9 ff39 	bl	8000608 <__aeabi_dmul>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	4630      	mov	r0, r6
 800679c:	4639      	mov	r1, r7
 800679e:	f7f9 fd7d 	bl	800029c <__adddf3>
 80067a2:	4606      	mov	r6, r0
 80067a4:	460f      	mov	r7, r1
 80067a6:	f7fa f9df 	bl	8000b68 <__aeabi_d2iz>
 80067aa:	2200      	movs	r2, #0
 80067ac:	4682      	mov	sl, r0
 80067ae:	2300      	movs	r3, #0
 80067b0:	4630      	mov	r0, r6
 80067b2:	4639      	mov	r1, r7
 80067b4:	f7fa f99a 	bl	8000aec <__aeabi_dcmplt>
 80067b8:	b148      	cbz	r0, 80067ce <_dtoa_r+0x186>
 80067ba:	4650      	mov	r0, sl
 80067bc:	f7f9 feba 	bl	8000534 <__aeabi_i2d>
 80067c0:	4632      	mov	r2, r6
 80067c2:	463b      	mov	r3, r7
 80067c4:	f7fa f988 	bl	8000ad8 <__aeabi_dcmpeq>
 80067c8:	b908      	cbnz	r0, 80067ce <_dtoa_r+0x186>
 80067ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067ce:	f1ba 0f16 	cmp.w	sl, #22
 80067d2:	d854      	bhi.n	800687e <_dtoa_r+0x236>
 80067d4:	4b61      	ldr	r3, [pc, #388]	; (800695c <_dtoa_r+0x314>)
 80067d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80067da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067e2:	f7fa f983 	bl	8000aec <__aeabi_dcmplt>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d04b      	beq.n	8006882 <_dtoa_r+0x23a>
 80067ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067ee:	2300      	movs	r3, #0
 80067f0:	930e      	str	r3, [sp, #56]	; 0x38
 80067f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067f4:	1b5d      	subs	r5, r3, r5
 80067f6:	1e6b      	subs	r3, r5, #1
 80067f8:	9304      	str	r3, [sp, #16]
 80067fa:	bf43      	ittte	mi
 80067fc:	2300      	movmi	r3, #0
 80067fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8006802:	9304      	strmi	r3, [sp, #16]
 8006804:	f04f 0800 	movpl.w	r8, #0
 8006808:	f1ba 0f00 	cmp.w	sl, #0
 800680c:	db3b      	blt.n	8006886 <_dtoa_r+0x23e>
 800680e:	9b04      	ldr	r3, [sp, #16]
 8006810:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006814:	4453      	add	r3, sl
 8006816:	9304      	str	r3, [sp, #16]
 8006818:	2300      	movs	r3, #0
 800681a:	9306      	str	r3, [sp, #24]
 800681c:	9b05      	ldr	r3, [sp, #20]
 800681e:	2b09      	cmp	r3, #9
 8006820:	d869      	bhi.n	80068f6 <_dtoa_r+0x2ae>
 8006822:	2b05      	cmp	r3, #5
 8006824:	bfc4      	itt	gt
 8006826:	3b04      	subgt	r3, #4
 8006828:	9305      	strgt	r3, [sp, #20]
 800682a:	9b05      	ldr	r3, [sp, #20]
 800682c:	f1a3 0302 	sub.w	r3, r3, #2
 8006830:	bfcc      	ite	gt
 8006832:	2500      	movgt	r5, #0
 8006834:	2501      	movle	r5, #1
 8006836:	2b03      	cmp	r3, #3
 8006838:	d869      	bhi.n	800690e <_dtoa_r+0x2c6>
 800683a:	e8df f003 	tbb	[pc, r3]
 800683e:	4e2c      	.short	0x4e2c
 8006840:	5a4c      	.short	0x5a4c
 8006842:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006846:	441d      	add	r5, r3
 8006848:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800684c:	2b20      	cmp	r3, #32
 800684e:	bfc1      	itttt	gt
 8006850:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006854:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006858:	fa09 f303 	lslgt.w	r3, r9, r3
 800685c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006860:	bfda      	itte	le
 8006862:	f1c3 0320 	rsble	r3, r3, #32
 8006866:	fa06 f003 	lslle.w	r0, r6, r3
 800686a:	4318      	orrgt	r0, r3
 800686c:	f7f9 fe52 	bl	8000514 <__aeabi_ui2d>
 8006870:	2301      	movs	r3, #1
 8006872:	4606      	mov	r6, r0
 8006874:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006878:	3d01      	subs	r5, #1
 800687a:	9310      	str	r3, [sp, #64]	; 0x40
 800687c:	e771      	b.n	8006762 <_dtoa_r+0x11a>
 800687e:	2301      	movs	r3, #1
 8006880:	e7b6      	b.n	80067f0 <_dtoa_r+0x1a8>
 8006882:	900e      	str	r0, [sp, #56]	; 0x38
 8006884:	e7b5      	b.n	80067f2 <_dtoa_r+0x1aa>
 8006886:	f1ca 0300 	rsb	r3, sl, #0
 800688a:	9306      	str	r3, [sp, #24]
 800688c:	2300      	movs	r3, #0
 800688e:	eba8 080a 	sub.w	r8, r8, sl
 8006892:	930d      	str	r3, [sp, #52]	; 0x34
 8006894:	e7c2      	b.n	800681c <_dtoa_r+0x1d4>
 8006896:	2300      	movs	r3, #0
 8006898:	9308      	str	r3, [sp, #32]
 800689a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800689c:	2b00      	cmp	r3, #0
 800689e:	dc39      	bgt.n	8006914 <_dtoa_r+0x2cc>
 80068a0:	f04f 0901 	mov.w	r9, #1
 80068a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80068a8:	464b      	mov	r3, r9
 80068aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80068ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80068b0:	2200      	movs	r2, #0
 80068b2:	6042      	str	r2, [r0, #4]
 80068b4:	2204      	movs	r2, #4
 80068b6:	f102 0614 	add.w	r6, r2, #20
 80068ba:	429e      	cmp	r6, r3
 80068bc:	6841      	ldr	r1, [r0, #4]
 80068be:	d92f      	bls.n	8006920 <_dtoa_r+0x2d8>
 80068c0:	4620      	mov	r0, r4
 80068c2:	f000 fdfd 	bl	80074c0 <_Balloc>
 80068c6:	9000      	str	r0, [sp, #0]
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d14b      	bne.n	8006964 <_dtoa_r+0x31c>
 80068cc:	4b24      	ldr	r3, [pc, #144]	; (8006960 <_dtoa_r+0x318>)
 80068ce:	4602      	mov	r2, r0
 80068d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80068d4:	e6d1      	b.n	800667a <_dtoa_r+0x32>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e7de      	b.n	8006898 <_dtoa_r+0x250>
 80068da:	2300      	movs	r3, #0
 80068dc:	9308      	str	r3, [sp, #32]
 80068de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e0:	eb0a 0903 	add.w	r9, sl, r3
 80068e4:	f109 0301 	add.w	r3, r9, #1
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	9301      	str	r3, [sp, #4]
 80068ec:	bfb8      	it	lt
 80068ee:	2301      	movlt	r3, #1
 80068f0:	e7dd      	b.n	80068ae <_dtoa_r+0x266>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e7f2      	b.n	80068dc <_dtoa_r+0x294>
 80068f6:	2501      	movs	r5, #1
 80068f8:	2300      	movs	r3, #0
 80068fa:	9305      	str	r3, [sp, #20]
 80068fc:	9508      	str	r5, [sp, #32]
 80068fe:	f04f 39ff 	mov.w	r9, #4294967295
 8006902:	2200      	movs	r2, #0
 8006904:	f8cd 9004 	str.w	r9, [sp, #4]
 8006908:	2312      	movs	r3, #18
 800690a:	9209      	str	r2, [sp, #36]	; 0x24
 800690c:	e7cf      	b.n	80068ae <_dtoa_r+0x266>
 800690e:	2301      	movs	r3, #1
 8006910:	9308      	str	r3, [sp, #32]
 8006912:	e7f4      	b.n	80068fe <_dtoa_r+0x2b6>
 8006914:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006918:	f8cd 9004 	str.w	r9, [sp, #4]
 800691c:	464b      	mov	r3, r9
 800691e:	e7c6      	b.n	80068ae <_dtoa_r+0x266>
 8006920:	3101      	adds	r1, #1
 8006922:	6041      	str	r1, [r0, #4]
 8006924:	0052      	lsls	r2, r2, #1
 8006926:	e7c6      	b.n	80068b6 <_dtoa_r+0x26e>
 8006928:	636f4361 	.word	0x636f4361
 800692c:	3fd287a7 	.word	0x3fd287a7
 8006930:	8b60c8b3 	.word	0x8b60c8b3
 8006934:	3fc68a28 	.word	0x3fc68a28
 8006938:	509f79fb 	.word	0x509f79fb
 800693c:	3fd34413 	.word	0x3fd34413
 8006940:	0800839a 	.word	0x0800839a
 8006944:	080083b1 	.word	0x080083b1
 8006948:	7ff00000 	.word	0x7ff00000
 800694c:	08008396 	.word	0x08008396
 8006950:	0800838d 	.word	0x0800838d
 8006954:	08008269 	.word	0x08008269
 8006958:	3ff80000 	.word	0x3ff80000
 800695c:	080084b0 	.word	0x080084b0
 8006960:	08008410 	.word	0x08008410
 8006964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006966:	9a00      	ldr	r2, [sp, #0]
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	9b01      	ldr	r3, [sp, #4]
 800696c:	2b0e      	cmp	r3, #14
 800696e:	f200 80ad 	bhi.w	8006acc <_dtoa_r+0x484>
 8006972:	2d00      	cmp	r5, #0
 8006974:	f000 80aa 	beq.w	8006acc <_dtoa_r+0x484>
 8006978:	f1ba 0f00 	cmp.w	sl, #0
 800697c:	dd36      	ble.n	80069ec <_dtoa_r+0x3a4>
 800697e:	4ac3      	ldr	r2, [pc, #780]	; (8006c8c <_dtoa_r+0x644>)
 8006980:	f00a 030f 	and.w	r3, sl, #15
 8006984:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006988:	ed93 7b00 	vldr	d7, [r3]
 800698c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006990:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006994:	eeb0 8a47 	vmov.f32	s16, s14
 8006998:	eef0 8a67 	vmov.f32	s17, s15
 800699c:	d016      	beq.n	80069cc <_dtoa_r+0x384>
 800699e:	4bbc      	ldr	r3, [pc, #752]	; (8006c90 <_dtoa_r+0x648>)
 80069a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069a8:	f7f9 ff58 	bl	800085c <__aeabi_ddiv>
 80069ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069b0:	f007 070f 	and.w	r7, r7, #15
 80069b4:	2503      	movs	r5, #3
 80069b6:	4eb6      	ldr	r6, [pc, #728]	; (8006c90 <_dtoa_r+0x648>)
 80069b8:	b957      	cbnz	r7, 80069d0 <_dtoa_r+0x388>
 80069ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069be:	ec53 2b18 	vmov	r2, r3, d8
 80069c2:	f7f9 ff4b 	bl	800085c <__aeabi_ddiv>
 80069c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069ca:	e029      	b.n	8006a20 <_dtoa_r+0x3d8>
 80069cc:	2502      	movs	r5, #2
 80069ce:	e7f2      	b.n	80069b6 <_dtoa_r+0x36e>
 80069d0:	07f9      	lsls	r1, r7, #31
 80069d2:	d508      	bpl.n	80069e6 <_dtoa_r+0x39e>
 80069d4:	ec51 0b18 	vmov	r0, r1, d8
 80069d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069dc:	f7f9 fe14 	bl	8000608 <__aeabi_dmul>
 80069e0:	ec41 0b18 	vmov	d8, r0, r1
 80069e4:	3501      	adds	r5, #1
 80069e6:	107f      	asrs	r7, r7, #1
 80069e8:	3608      	adds	r6, #8
 80069ea:	e7e5      	b.n	80069b8 <_dtoa_r+0x370>
 80069ec:	f000 80a6 	beq.w	8006b3c <_dtoa_r+0x4f4>
 80069f0:	f1ca 0600 	rsb	r6, sl, #0
 80069f4:	4ba5      	ldr	r3, [pc, #660]	; (8006c8c <_dtoa_r+0x644>)
 80069f6:	4fa6      	ldr	r7, [pc, #664]	; (8006c90 <_dtoa_r+0x648>)
 80069f8:	f006 020f 	and.w	r2, r6, #15
 80069fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a08:	f7f9 fdfe 	bl	8000608 <__aeabi_dmul>
 8006a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a10:	1136      	asrs	r6, r6, #4
 8006a12:	2300      	movs	r3, #0
 8006a14:	2502      	movs	r5, #2
 8006a16:	2e00      	cmp	r6, #0
 8006a18:	f040 8085 	bne.w	8006b26 <_dtoa_r+0x4de>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1d2      	bne.n	80069c6 <_dtoa_r+0x37e>
 8006a20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 808c 	beq.w	8006b40 <_dtoa_r+0x4f8>
 8006a28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a2c:	4b99      	ldr	r3, [pc, #612]	; (8006c94 <_dtoa_r+0x64c>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	4630      	mov	r0, r6
 8006a32:	4639      	mov	r1, r7
 8006a34:	f7fa f85a 	bl	8000aec <__aeabi_dcmplt>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	f000 8081 	beq.w	8006b40 <_dtoa_r+0x4f8>
 8006a3e:	9b01      	ldr	r3, [sp, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d07d      	beq.n	8006b40 <_dtoa_r+0x4f8>
 8006a44:	f1b9 0f00 	cmp.w	r9, #0
 8006a48:	dd3c      	ble.n	8006ac4 <_dtoa_r+0x47c>
 8006a4a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006a4e:	9307      	str	r3, [sp, #28]
 8006a50:	2200      	movs	r2, #0
 8006a52:	4b91      	ldr	r3, [pc, #580]	; (8006c98 <_dtoa_r+0x650>)
 8006a54:	4630      	mov	r0, r6
 8006a56:	4639      	mov	r1, r7
 8006a58:	f7f9 fdd6 	bl	8000608 <__aeabi_dmul>
 8006a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a60:	3501      	adds	r5, #1
 8006a62:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006a66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f7f9 fd62 	bl	8000534 <__aeabi_i2d>
 8006a70:	4632      	mov	r2, r6
 8006a72:	463b      	mov	r3, r7
 8006a74:	f7f9 fdc8 	bl	8000608 <__aeabi_dmul>
 8006a78:	4b88      	ldr	r3, [pc, #544]	; (8006c9c <_dtoa_r+0x654>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f7f9 fc0e 	bl	800029c <__adddf3>
 8006a80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a88:	9303      	str	r3, [sp, #12]
 8006a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d15c      	bne.n	8006b4a <_dtoa_r+0x502>
 8006a90:	4b83      	ldr	r3, [pc, #524]	; (8006ca0 <_dtoa_r+0x658>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	4630      	mov	r0, r6
 8006a96:	4639      	mov	r1, r7
 8006a98:	f7f9 fbfe 	bl	8000298 <__aeabi_dsub>
 8006a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	460f      	mov	r7, r1
 8006aa4:	f7fa f840 	bl	8000b28 <__aeabi_dcmpgt>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	f040 8296 	bne.w	8006fda <_dtoa_r+0x992>
 8006aae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ab8:	4639      	mov	r1, r7
 8006aba:	f7fa f817 	bl	8000aec <__aeabi_dcmplt>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f040 8288 	bne.w	8006fd4 <_dtoa_r+0x98c>
 8006ac4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ac8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006acc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f2c0 8158 	blt.w	8006d84 <_dtoa_r+0x73c>
 8006ad4:	f1ba 0f0e 	cmp.w	sl, #14
 8006ad8:	f300 8154 	bgt.w	8006d84 <_dtoa_r+0x73c>
 8006adc:	4b6b      	ldr	r3, [pc, #428]	; (8006c8c <_dtoa_r+0x644>)
 8006ade:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ae2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f280 80e3 	bge.w	8006cb4 <_dtoa_r+0x66c>
 8006aee:	9b01      	ldr	r3, [sp, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f300 80df 	bgt.w	8006cb4 <_dtoa_r+0x66c>
 8006af6:	f040 826d 	bne.w	8006fd4 <_dtoa_r+0x98c>
 8006afa:	4b69      	ldr	r3, [pc, #420]	; (8006ca0 <_dtoa_r+0x658>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	4640      	mov	r0, r8
 8006b00:	4649      	mov	r1, r9
 8006b02:	f7f9 fd81 	bl	8000608 <__aeabi_dmul>
 8006b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b0a:	f7fa f803 	bl	8000b14 <__aeabi_dcmpge>
 8006b0e:	9e01      	ldr	r6, [sp, #4]
 8006b10:	4637      	mov	r7, r6
 8006b12:	2800      	cmp	r0, #0
 8006b14:	f040 8243 	bne.w	8006f9e <_dtoa_r+0x956>
 8006b18:	9d00      	ldr	r5, [sp, #0]
 8006b1a:	2331      	movs	r3, #49	; 0x31
 8006b1c:	f805 3b01 	strb.w	r3, [r5], #1
 8006b20:	f10a 0a01 	add.w	sl, sl, #1
 8006b24:	e23f      	b.n	8006fa6 <_dtoa_r+0x95e>
 8006b26:	07f2      	lsls	r2, r6, #31
 8006b28:	d505      	bpl.n	8006b36 <_dtoa_r+0x4ee>
 8006b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b2e:	f7f9 fd6b 	bl	8000608 <__aeabi_dmul>
 8006b32:	3501      	adds	r5, #1
 8006b34:	2301      	movs	r3, #1
 8006b36:	1076      	asrs	r6, r6, #1
 8006b38:	3708      	adds	r7, #8
 8006b3a:	e76c      	b.n	8006a16 <_dtoa_r+0x3ce>
 8006b3c:	2502      	movs	r5, #2
 8006b3e:	e76f      	b.n	8006a20 <_dtoa_r+0x3d8>
 8006b40:	9b01      	ldr	r3, [sp, #4]
 8006b42:	f8cd a01c 	str.w	sl, [sp, #28]
 8006b46:	930c      	str	r3, [sp, #48]	; 0x30
 8006b48:	e78d      	b.n	8006a66 <_dtoa_r+0x41e>
 8006b4a:	9900      	ldr	r1, [sp, #0]
 8006b4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006b4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b50:	4b4e      	ldr	r3, [pc, #312]	; (8006c8c <_dtoa_r+0x644>)
 8006b52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b56:	4401      	add	r1, r0
 8006b58:	9102      	str	r1, [sp, #8]
 8006b5a:	9908      	ldr	r1, [sp, #32]
 8006b5c:	eeb0 8a47 	vmov.f32	s16, s14
 8006b60:	eef0 8a67 	vmov.f32	s17, s15
 8006b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	d045      	beq.n	8006bfc <_dtoa_r+0x5b4>
 8006b70:	494c      	ldr	r1, [pc, #304]	; (8006ca4 <_dtoa_r+0x65c>)
 8006b72:	2000      	movs	r0, #0
 8006b74:	f7f9 fe72 	bl	800085c <__aeabi_ddiv>
 8006b78:	ec53 2b18 	vmov	r2, r3, d8
 8006b7c:	f7f9 fb8c 	bl	8000298 <__aeabi_dsub>
 8006b80:	9d00      	ldr	r5, [sp, #0]
 8006b82:	ec41 0b18 	vmov	d8, r0, r1
 8006b86:	4639      	mov	r1, r7
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f7f9 ffed 	bl	8000b68 <__aeabi_d2iz>
 8006b8e:	900c      	str	r0, [sp, #48]	; 0x30
 8006b90:	f7f9 fcd0 	bl	8000534 <__aeabi_i2d>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4630      	mov	r0, r6
 8006b9a:	4639      	mov	r1, r7
 8006b9c:	f7f9 fb7c 	bl	8000298 <__aeabi_dsub>
 8006ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ba2:	3330      	adds	r3, #48	; 0x30
 8006ba4:	f805 3b01 	strb.w	r3, [r5], #1
 8006ba8:	ec53 2b18 	vmov	r2, r3, d8
 8006bac:	4606      	mov	r6, r0
 8006bae:	460f      	mov	r7, r1
 8006bb0:	f7f9 ff9c 	bl	8000aec <__aeabi_dcmplt>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d165      	bne.n	8006c84 <_dtoa_r+0x63c>
 8006bb8:	4632      	mov	r2, r6
 8006bba:	463b      	mov	r3, r7
 8006bbc:	4935      	ldr	r1, [pc, #212]	; (8006c94 <_dtoa_r+0x64c>)
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	f7f9 fb6a 	bl	8000298 <__aeabi_dsub>
 8006bc4:	ec53 2b18 	vmov	r2, r3, d8
 8006bc8:	f7f9 ff90 	bl	8000aec <__aeabi_dcmplt>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	f040 80b9 	bne.w	8006d44 <_dtoa_r+0x6fc>
 8006bd2:	9b02      	ldr	r3, [sp, #8]
 8006bd4:	429d      	cmp	r5, r3
 8006bd6:	f43f af75 	beq.w	8006ac4 <_dtoa_r+0x47c>
 8006bda:	4b2f      	ldr	r3, [pc, #188]	; (8006c98 <_dtoa_r+0x650>)
 8006bdc:	ec51 0b18 	vmov	r0, r1, d8
 8006be0:	2200      	movs	r2, #0
 8006be2:	f7f9 fd11 	bl	8000608 <__aeabi_dmul>
 8006be6:	4b2c      	ldr	r3, [pc, #176]	; (8006c98 <_dtoa_r+0x650>)
 8006be8:	ec41 0b18 	vmov	d8, r0, r1
 8006bec:	2200      	movs	r2, #0
 8006bee:	4630      	mov	r0, r6
 8006bf0:	4639      	mov	r1, r7
 8006bf2:	f7f9 fd09 	bl	8000608 <__aeabi_dmul>
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	460f      	mov	r7, r1
 8006bfa:	e7c4      	b.n	8006b86 <_dtoa_r+0x53e>
 8006bfc:	ec51 0b17 	vmov	r0, r1, d7
 8006c00:	f7f9 fd02 	bl	8000608 <__aeabi_dmul>
 8006c04:	9b02      	ldr	r3, [sp, #8]
 8006c06:	9d00      	ldr	r5, [sp, #0]
 8006c08:	930c      	str	r3, [sp, #48]	; 0x30
 8006c0a:	ec41 0b18 	vmov	d8, r0, r1
 8006c0e:	4639      	mov	r1, r7
 8006c10:	4630      	mov	r0, r6
 8006c12:	f7f9 ffa9 	bl	8000b68 <__aeabi_d2iz>
 8006c16:	9011      	str	r0, [sp, #68]	; 0x44
 8006c18:	f7f9 fc8c 	bl	8000534 <__aeabi_i2d>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4630      	mov	r0, r6
 8006c22:	4639      	mov	r1, r7
 8006c24:	f7f9 fb38 	bl	8000298 <__aeabi_dsub>
 8006c28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c2a:	3330      	adds	r3, #48	; 0x30
 8006c2c:	f805 3b01 	strb.w	r3, [r5], #1
 8006c30:	9b02      	ldr	r3, [sp, #8]
 8006c32:	429d      	cmp	r5, r3
 8006c34:	4606      	mov	r6, r0
 8006c36:	460f      	mov	r7, r1
 8006c38:	f04f 0200 	mov.w	r2, #0
 8006c3c:	d134      	bne.n	8006ca8 <_dtoa_r+0x660>
 8006c3e:	4b19      	ldr	r3, [pc, #100]	; (8006ca4 <_dtoa_r+0x65c>)
 8006c40:	ec51 0b18 	vmov	r0, r1, d8
 8006c44:	f7f9 fb2a 	bl	800029c <__adddf3>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	4639      	mov	r1, r7
 8006c50:	f7f9 ff6a 	bl	8000b28 <__aeabi_dcmpgt>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d175      	bne.n	8006d44 <_dtoa_r+0x6fc>
 8006c58:	ec53 2b18 	vmov	r2, r3, d8
 8006c5c:	4911      	ldr	r1, [pc, #68]	; (8006ca4 <_dtoa_r+0x65c>)
 8006c5e:	2000      	movs	r0, #0
 8006c60:	f7f9 fb1a 	bl	8000298 <__aeabi_dsub>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4630      	mov	r0, r6
 8006c6a:	4639      	mov	r1, r7
 8006c6c:	f7f9 ff3e 	bl	8000aec <__aeabi_dcmplt>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	f43f af27 	beq.w	8006ac4 <_dtoa_r+0x47c>
 8006c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c78:	1e6b      	subs	r3, r5, #1
 8006c7a:	930c      	str	r3, [sp, #48]	; 0x30
 8006c7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c80:	2b30      	cmp	r3, #48	; 0x30
 8006c82:	d0f8      	beq.n	8006c76 <_dtoa_r+0x62e>
 8006c84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006c88:	e04a      	b.n	8006d20 <_dtoa_r+0x6d8>
 8006c8a:	bf00      	nop
 8006c8c:	080084b0 	.word	0x080084b0
 8006c90:	08008488 	.word	0x08008488
 8006c94:	3ff00000 	.word	0x3ff00000
 8006c98:	40240000 	.word	0x40240000
 8006c9c:	401c0000 	.word	0x401c0000
 8006ca0:	40140000 	.word	0x40140000
 8006ca4:	3fe00000 	.word	0x3fe00000
 8006ca8:	4baf      	ldr	r3, [pc, #700]	; (8006f68 <_dtoa_r+0x920>)
 8006caa:	f7f9 fcad 	bl	8000608 <__aeabi_dmul>
 8006cae:	4606      	mov	r6, r0
 8006cb0:	460f      	mov	r7, r1
 8006cb2:	e7ac      	b.n	8006c0e <_dtoa_r+0x5c6>
 8006cb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006cb8:	9d00      	ldr	r5, [sp, #0]
 8006cba:	4642      	mov	r2, r8
 8006cbc:	464b      	mov	r3, r9
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	4639      	mov	r1, r7
 8006cc2:	f7f9 fdcb 	bl	800085c <__aeabi_ddiv>
 8006cc6:	f7f9 ff4f 	bl	8000b68 <__aeabi_d2iz>
 8006cca:	9002      	str	r0, [sp, #8]
 8006ccc:	f7f9 fc32 	bl	8000534 <__aeabi_i2d>
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	f7f9 fc98 	bl	8000608 <__aeabi_dmul>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4630      	mov	r0, r6
 8006cde:	4639      	mov	r1, r7
 8006ce0:	f7f9 fada 	bl	8000298 <__aeabi_dsub>
 8006ce4:	9e02      	ldr	r6, [sp, #8]
 8006ce6:	9f01      	ldr	r7, [sp, #4]
 8006ce8:	3630      	adds	r6, #48	; 0x30
 8006cea:	f805 6b01 	strb.w	r6, [r5], #1
 8006cee:	9e00      	ldr	r6, [sp, #0]
 8006cf0:	1bae      	subs	r6, r5, r6
 8006cf2:	42b7      	cmp	r7, r6
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	d137      	bne.n	8006d6a <_dtoa_r+0x722>
 8006cfa:	f7f9 facf 	bl	800029c <__adddf3>
 8006cfe:	4642      	mov	r2, r8
 8006d00:	464b      	mov	r3, r9
 8006d02:	4606      	mov	r6, r0
 8006d04:	460f      	mov	r7, r1
 8006d06:	f7f9 ff0f 	bl	8000b28 <__aeabi_dcmpgt>
 8006d0a:	b9c8      	cbnz	r0, 8006d40 <_dtoa_r+0x6f8>
 8006d0c:	4642      	mov	r2, r8
 8006d0e:	464b      	mov	r3, r9
 8006d10:	4630      	mov	r0, r6
 8006d12:	4639      	mov	r1, r7
 8006d14:	f7f9 fee0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d18:	b110      	cbz	r0, 8006d20 <_dtoa_r+0x6d8>
 8006d1a:	9b02      	ldr	r3, [sp, #8]
 8006d1c:	07d9      	lsls	r1, r3, #31
 8006d1e:	d40f      	bmi.n	8006d40 <_dtoa_r+0x6f8>
 8006d20:	4620      	mov	r0, r4
 8006d22:	4659      	mov	r1, fp
 8006d24:	f000 fc0c 	bl	8007540 <_Bfree>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	702b      	strb	r3, [r5, #0]
 8006d2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d2e:	f10a 0001 	add.w	r0, sl, #1
 8006d32:	6018      	str	r0, [r3, #0]
 8006d34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f43f acd8 	beq.w	80066ec <_dtoa_r+0xa4>
 8006d3c:	601d      	str	r5, [r3, #0]
 8006d3e:	e4d5      	b.n	80066ec <_dtoa_r+0xa4>
 8006d40:	f8cd a01c 	str.w	sl, [sp, #28]
 8006d44:	462b      	mov	r3, r5
 8006d46:	461d      	mov	r5, r3
 8006d48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d4c:	2a39      	cmp	r2, #57	; 0x39
 8006d4e:	d108      	bne.n	8006d62 <_dtoa_r+0x71a>
 8006d50:	9a00      	ldr	r2, [sp, #0]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d1f7      	bne.n	8006d46 <_dtoa_r+0x6fe>
 8006d56:	9a07      	ldr	r2, [sp, #28]
 8006d58:	9900      	ldr	r1, [sp, #0]
 8006d5a:	3201      	adds	r2, #1
 8006d5c:	9207      	str	r2, [sp, #28]
 8006d5e:	2230      	movs	r2, #48	; 0x30
 8006d60:	700a      	strb	r2, [r1, #0]
 8006d62:	781a      	ldrb	r2, [r3, #0]
 8006d64:	3201      	adds	r2, #1
 8006d66:	701a      	strb	r2, [r3, #0]
 8006d68:	e78c      	b.n	8006c84 <_dtoa_r+0x63c>
 8006d6a:	4b7f      	ldr	r3, [pc, #508]	; (8006f68 <_dtoa_r+0x920>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f7f9 fc4b 	bl	8000608 <__aeabi_dmul>
 8006d72:	2200      	movs	r2, #0
 8006d74:	2300      	movs	r3, #0
 8006d76:	4606      	mov	r6, r0
 8006d78:	460f      	mov	r7, r1
 8006d7a:	f7f9 fead 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	d09b      	beq.n	8006cba <_dtoa_r+0x672>
 8006d82:	e7cd      	b.n	8006d20 <_dtoa_r+0x6d8>
 8006d84:	9a08      	ldr	r2, [sp, #32]
 8006d86:	2a00      	cmp	r2, #0
 8006d88:	f000 80c4 	beq.w	8006f14 <_dtoa_r+0x8cc>
 8006d8c:	9a05      	ldr	r2, [sp, #20]
 8006d8e:	2a01      	cmp	r2, #1
 8006d90:	f300 80a8 	bgt.w	8006ee4 <_dtoa_r+0x89c>
 8006d94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d96:	2a00      	cmp	r2, #0
 8006d98:	f000 80a0 	beq.w	8006edc <_dtoa_r+0x894>
 8006d9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006da0:	9e06      	ldr	r6, [sp, #24]
 8006da2:	4645      	mov	r5, r8
 8006da4:	9a04      	ldr	r2, [sp, #16]
 8006da6:	2101      	movs	r1, #1
 8006da8:	441a      	add	r2, r3
 8006daa:	4620      	mov	r0, r4
 8006dac:	4498      	add	r8, r3
 8006dae:	9204      	str	r2, [sp, #16]
 8006db0:	f000 fc82 	bl	80076b8 <__i2b>
 8006db4:	4607      	mov	r7, r0
 8006db6:	2d00      	cmp	r5, #0
 8006db8:	dd0b      	ble.n	8006dd2 <_dtoa_r+0x78a>
 8006dba:	9b04      	ldr	r3, [sp, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	dd08      	ble.n	8006dd2 <_dtoa_r+0x78a>
 8006dc0:	42ab      	cmp	r3, r5
 8006dc2:	9a04      	ldr	r2, [sp, #16]
 8006dc4:	bfa8      	it	ge
 8006dc6:	462b      	movge	r3, r5
 8006dc8:	eba8 0803 	sub.w	r8, r8, r3
 8006dcc:	1aed      	subs	r5, r5, r3
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	9304      	str	r3, [sp, #16]
 8006dd2:	9b06      	ldr	r3, [sp, #24]
 8006dd4:	b1fb      	cbz	r3, 8006e16 <_dtoa_r+0x7ce>
 8006dd6:	9b08      	ldr	r3, [sp, #32]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 809f 	beq.w	8006f1c <_dtoa_r+0x8d4>
 8006dde:	2e00      	cmp	r6, #0
 8006de0:	dd11      	ble.n	8006e06 <_dtoa_r+0x7be>
 8006de2:	4639      	mov	r1, r7
 8006de4:	4632      	mov	r2, r6
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 fd22 	bl	8007830 <__pow5mult>
 8006dec:	465a      	mov	r2, fp
 8006dee:	4601      	mov	r1, r0
 8006df0:	4607      	mov	r7, r0
 8006df2:	4620      	mov	r0, r4
 8006df4:	f000 fc76 	bl	80076e4 <__multiply>
 8006df8:	4659      	mov	r1, fp
 8006dfa:	9007      	str	r0, [sp, #28]
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f000 fb9f 	bl	8007540 <_Bfree>
 8006e02:	9b07      	ldr	r3, [sp, #28]
 8006e04:	469b      	mov	fp, r3
 8006e06:	9b06      	ldr	r3, [sp, #24]
 8006e08:	1b9a      	subs	r2, r3, r6
 8006e0a:	d004      	beq.n	8006e16 <_dtoa_r+0x7ce>
 8006e0c:	4659      	mov	r1, fp
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f000 fd0e 	bl	8007830 <__pow5mult>
 8006e14:	4683      	mov	fp, r0
 8006e16:	2101      	movs	r1, #1
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 fc4d 	bl	80076b8 <__i2b>
 8006e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	4606      	mov	r6, r0
 8006e24:	dd7c      	ble.n	8006f20 <_dtoa_r+0x8d8>
 8006e26:	461a      	mov	r2, r3
 8006e28:	4601      	mov	r1, r0
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f000 fd00 	bl	8007830 <__pow5mult>
 8006e30:	9b05      	ldr	r3, [sp, #20]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	4606      	mov	r6, r0
 8006e36:	dd76      	ble.n	8006f26 <_dtoa_r+0x8de>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9306      	str	r3, [sp, #24]
 8006e3c:	6933      	ldr	r3, [r6, #16]
 8006e3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e42:	6918      	ldr	r0, [r3, #16]
 8006e44:	f000 fbe8 	bl	8007618 <__hi0bits>
 8006e48:	f1c0 0020 	rsb	r0, r0, #32
 8006e4c:	9b04      	ldr	r3, [sp, #16]
 8006e4e:	4418      	add	r0, r3
 8006e50:	f010 001f 	ands.w	r0, r0, #31
 8006e54:	f000 8086 	beq.w	8006f64 <_dtoa_r+0x91c>
 8006e58:	f1c0 0320 	rsb	r3, r0, #32
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	dd7f      	ble.n	8006f60 <_dtoa_r+0x918>
 8006e60:	f1c0 001c 	rsb	r0, r0, #28
 8006e64:	9b04      	ldr	r3, [sp, #16]
 8006e66:	4403      	add	r3, r0
 8006e68:	4480      	add	r8, r0
 8006e6a:	4405      	add	r5, r0
 8006e6c:	9304      	str	r3, [sp, #16]
 8006e6e:	f1b8 0f00 	cmp.w	r8, #0
 8006e72:	dd05      	ble.n	8006e80 <_dtoa_r+0x838>
 8006e74:	4659      	mov	r1, fp
 8006e76:	4642      	mov	r2, r8
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f000 fd33 	bl	80078e4 <__lshift>
 8006e7e:	4683      	mov	fp, r0
 8006e80:	9b04      	ldr	r3, [sp, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	dd05      	ble.n	8006e92 <_dtoa_r+0x84a>
 8006e86:	4631      	mov	r1, r6
 8006e88:	461a      	mov	r2, r3
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f000 fd2a 	bl	80078e4 <__lshift>
 8006e90:	4606      	mov	r6, r0
 8006e92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d069      	beq.n	8006f6c <_dtoa_r+0x924>
 8006e98:	4631      	mov	r1, r6
 8006e9a:	4658      	mov	r0, fp
 8006e9c:	f000 fd8e 	bl	80079bc <__mcmp>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	da63      	bge.n	8006f6c <_dtoa_r+0x924>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	4659      	mov	r1, fp
 8006ea8:	220a      	movs	r2, #10
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f000 fb6a 	bl	8007584 <__multadd>
 8006eb0:	9b08      	ldr	r3, [sp, #32]
 8006eb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006eb6:	4683      	mov	fp, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 818f 	beq.w	80071dc <_dtoa_r+0xb94>
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	220a      	movs	r2, #10
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f000 fb5d 	bl	8007584 <__multadd>
 8006eca:	f1b9 0f00 	cmp.w	r9, #0
 8006ece:	4607      	mov	r7, r0
 8006ed0:	f300 808e 	bgt.w	8006ff0 <_dtoa_r+0x9a8>
 8006ed4:	9b05      	ldr	r3, [sp, #20]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	dc50      	bgt.n	8006f7c <_dtoa_r+0x934>
 8006eda:	e089      	b.n	8006ff0 <_dtoa_r+0x9a8>
 8006edc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ede:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ee2:	e75d      	b.n	8006da0 <_dtoa_r+0x758>
 8006ee4:	9b01      	ldr	r3, [sp, #4]
 8006ee6:	1e5e      	subs	r6, r3, #1
 8006ee8:	9b06      	ldr	r3, [sp, #24]
 8006eea:	42b3      	cmp	r3, r6
 8006eec:	bfbf      	itttt	lt
 8006eee:	9b06      	ldrlt	r3, [sp, #24]
 8006ef0:	9606      	strlt	r6, [sp, #24]
 8006ef2:	1af2      	sublt	r2, r6, r3
 8006ef4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006ef6:	bfb6      	itet	lt
 8006ef8:	189b      	addlt	r3, r3, r2
 8006efa:	1b9e      	subge	r6, r3, r6
 8006efc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006efe:	9b01      	ldr	r3, [sp, #4]
 8006f00:	bfb8      	it	lt
 8006f02:	2600      	movlt	r6, #0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	bfb5      	itete	lt
 8006f08:	eba8 0503 	sublt.w	r5, r8, r3
 8006f0c:	9b01      	ldrge	r3, [sp, #4]
 8006f0e:	2300      	movlt	r3, #0
 8006f10:	4645      	movge	r5, r8
 8006f12:	e747      	b.n	8006da4 <_dtoa_r+0x75c>
 8006f14:	9e06      	ldr	r6, [sp, #24]
 8006f16:	9f08      	ldr	r7, [sp, #32]
 8006f18:	4645      	mov	r5, r8
 8006f1a:	e74c      	b.n	8006db6 <_dtoa_r+0x76e>
 8006f1c:	9a06      	ldr	r2, [sp, #24]
 8006f1e:	e775      	b.n	8006e0c <_dtoa_r+0x7c4>
 8006f20:	9b05      	ldr	r3, [sp, #20]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	dc18      	bgt.n	8006f58 <_dtoa_r+0x910>
 8006f26:	9b02      	ldr	r3, [sp, #8]
 8006f28:	b9b3      	cbnz	r3, 8006f58 <_dtoa_r+0x910>
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f30:	b9a3      	cbnz	r3, 8006f5c <_dtoa_r+0x914>
 8006f32:	9b03      	ldr	r3, [sp, #12]
 8006f34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f38:	0d1b      	lsrs	r3, r3, #20
 8006f3a:	051b      	lsls	r3, r3, #20
 8006f3c:	b12b      	cbz	r3, 8006f4a <_dtoa_r+0x902>
 8006f3e:	9b04      	ldr	r3, [sp, #16]
 8006f40:	3301      	adds	r3, #1
 8006f42:	9304      	str	r3, [sp, #16]
 8006f44:	f108 0801 	add.w	r8, r8, #1
 8006f48:	2301      	movs	r3, #1
 8006f4a:	9306      	str	r3, [sp, #24]
 8006f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f47f af74 	bne.w	8006e3c <_dtoa_r+0x7f4>
 8006f54:	2001      	movs	r0, #1
 8006f56:	e779      	b.n	8006e4c <_dtoa_r+0x804>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e7f6      	b.n	8006f4a <_dtoa_r+0x902>
 8006f5c:	9b02      	ldr	r3, [sp, #8]
 8006f5e:	e7f4      	b.n	8006f4a <_dtoa_r+0x902>
 8006f60:	d085      	beq.n	8006e6e <_dtoa_r+0x826>
 8006f62:	4618      	mov	r0, r3
 8006f64:	301c      	adds	r0, #28
 8006f66:	e77d      	b.n	8006e64 <_dtoa_r+0x81c>
 8006f68:	40240000 	.word	0x40240000
 8006f6c:	9b01      	ldr	r3, [sp, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	dc38      	bgt.n	8006fe4 <_dtoa_r+0x99c>
 8006f72:	9b05      	ldr	r3, [sp, #20]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	dd35      	ble.n	8006fe4 <_dtoa_r+0x99c>
 8006f78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006f7c:	f1b9 0f00 	cmp.w	r9, #0
 8006f80:	d10d      	bne.n	8006f9e <_dtoa_r+0x956>
 8006f82:	4631      	mov	r1, r6
 8006f84:	464b      	mov	r3, r9
 8006f86:	2205      	movs	r2, #5
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 fafb 	bl	8007584 <__multadd>
 8006f8e:	4601      	mov	r1, r0
 8006f90:	4606      	mov	r6, r0
 8006f92:	4658      	mov	r0, fp
 8006f94:	f000 fd12 	bl	80079bc <__mcmp>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	f73f adbd 	bgt.w	8006b18 <_dtoa_r+0x4d0>
 8006f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa0:	9d00      	ldr	r5, [sp, #0]
 8006fa2:	ea6f 0a03 	mvn.w	sl, r3
 8006fa6:	f04f 0800 	mov.w	r8, #0
 8006faa:	4631      	mov	r1, r6
 8006fac:	4620      	mov	r0, r4
 8006fae:	f000 fac7 	bl	8007540 <_Bfree>
 8006fb2:	2f00      	cmp	r7, #0
 8006fb4:	f43f aeb4 	beq.w	8006d20 <_dtoa_r+0x6d8>
 8006fb8:	f1b8 0f00 	cmp.w	r8, #0
 8006fbc:	d005      	beq.n	8006fca <_dtoa_r+0x982>
 8006fbe:	45b8      	cmp	r8, r7
 8006fc0:	d003      	beq.n	8006fca <_dtoa_r+0x982>
 8006fc2:	4641      	mov	r1, r8
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f000 fabb 	bl	8007540 <_Bfree>
 8006fca:	4639      	mov	r1, r7
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f000 fab7 	bl	8007540 <_Bfree>
 8006fd2:	e6a5      	b.n	8006d20 <_dtoa_r+0x6d8>
 8006fd4:	2600      	movs	r6, #0
 8006fd6:	4637      	mov	r7, r6
 8006fd8:	e7e1      	b.n	8006f9e <_dtoa_r+0x956>
 8006fda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006fdc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006fe0:	4637      	mov	r7, r6
 8006fe2:	e599      	b.n	8006b18 <_dtoa_r+0x4d0>
 8006fe4:	9b08      	ldr	r3, [sp, #32]
 8006fe6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 80fd 	beq.w	80071ea <_dtoa_r+0xba2>
 8006ff0:	2d00      	cmp	r5, #0
 8006ff2:	dd05      	ble.n	8007000 <_dtoa_r+0x9b8>
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	462a      	mov	r2, r5
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f000 fc73 	bl	80078e4 <__lshift>
 8006ffe:	4607      	mov	r7, r0
 8007000:	9b06      	ldr	r3, [sp, #24]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d05c      	beq.n	80070c0 <_dtoa_r+0xa78>
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	4620      	mov	r0, r4
 800700a:	f000 fa59 	bl	80074c0 <_Balloc>
 800700e:	4605      	mov	r5, r0
 8007010:	b928      	cbnz	r0, 800701e <_dtoa_r+0x9d6>
 8007012:	4b80      	ldr	r3, [pc, #512]	; (8007214 <_dtoa_r+0xbcc>)
 8007014:	4602      	mov	r2, r0
 8007016:	f240 21ea 	movw	r1, #746	; 0x2ea
 800701a:	f7ff bb2e 	b.w	800667a <_dtoa_r+0x32>
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	3202      	adds	r2, #2
 8007022:	0092      	lsls	r2, r2, #2
 8007024:	f107 010c 	add.w	r1, r7, #12
 8007028:	300c      	adds	r0, #12
 800702a:	f7fe fb3e 	bl	80056aa <memcpy>
 800702e:	2201      	movs	r2, #1
 8007030:	4629      	mov	r1, r5
 8007032:	4620      	mov	r0, r4
 8007034:	f000 fc56 	bl	80078e4 <__lshift>
 8007038:	9b00      	ldr	r3, [sp, #0]
 800703a:	3301      	adds	r3, #1
 800703c:	9301      	str	r3, [sp, #4]
 800703e:	9b00      	ldr	r3, [sp, #0]
 8007040:	444b      	add	r3, r9
 8007042:	9307      	str	r3, [sp, #28]
 8007044:	9b02      	ldr	r3, [sp, #8]
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	46b8      	mov	r8, r7
 800704c:	9306      	str	r3, [sp, #24]
 800704e:	4607      	mov	r7, r0
 8007050:	9b01      	ldr	r3, [sp, #4]
 8007052:	4631      	mov	r1, r6
 8007054:	3b01      	subs	r3, #1
 8007056:	4658      	mov	r0, fp
 8007058:	9302      	str	r3, [sp, #8]
 800705a:	f7ff fa69 	bl	8006530 <quorem>
 800705e:	4603      	mov	r3, r0
 8007060:	3330      	adds	r3, #48	; 0x30
 8007062:	9004      	str	r0, [sp, #16]
 8007064:	4641      	mov	r1, r8
 8007066:	4658      	mov	r0, fp
 8007068:	9308      	str	r3, [sp, #32]
 800706a:	f000 fca7 	bl	80079bc <__mcmp>
 800706e:	463a      	mov	r2, r7
 8007070:	4681      	mov	r9, r0
 8007072:	4631      	mov	r1, r6
 8007074:	4620      	mov	r0, r4
 8007076:	f000 fcbd 	bl	80079f4 <__mdiff>
 800707a:	68c2      	ldr	r2, [r0, #12]
 800707c:	9b08      	ldr	r3, [sp, #32]
 800707e:	4605      	mov	r5, r0
 8007080:	bb02      	cbnz	r2, 80070c4 <_dtoa_r+0xa7c>
 8007082:	4601      	mov	r1, r0
 8007084:	4658      	mov	r0, fp
 8007086:	f000 fc99 	bl	80079bc <__mcmp>
 800708a:	9b08      	ldr	r3, [sp, #32]
 800708c:	4602      	mov	r2, r0
 800708e:	4629      	mov	r1, r5
 8007090:	4620      	mov	r0, r4
 8007092:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007096:	f000 fa53 	bl	8007540 <_Bfree>
 800709a:	9b05      	ldr	r3, [sp, #20]
 800709c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800709e:	9d01      	ldr	r5, [sp, #4]
 80070a0:	ea43 0102 	orr.w	r1, r3, r2
 80070a4:	9b06      	ldr	r3, [sp, #24]
 80070a6:	430b      	orrs	r3, r1
 80070a8:	9b08      	ldr	r3, [sp, #32]
 80070aa:	d10d      	bne.n	80070c8 <_dtoa_r+0xa80>
 80070ac:	2b39      	cmp	r3, #57	; 0x39
 80070ae:	d029      	beq.n	8007104 <_dtoa_r+0xabc>
 80070b0:	f1b9 0f00 	cmp.w	r9, #0
 80070b4:	dd01      	ble.n	80070ba <_dtoa_r+0xa72>
 80070b6:	9b04      	ldr	r3, [sp, #16]
 80070b8:	3331      	adds	r3, #49	; 0x31
 80070ba:	9a02      	ldr	r2, [sp, #8]
 80070bc:	7013      	strb	r3, [r2, #0]
 80070be:	e774      	b.n	8006faa <_dtoa_r+0x962>
 80070c0:	4638      	mov	r0, r7
 80070c2:	e7b9      	b.n	8007038 <_dtoa_r+0x9f0>
 80070c4:	2201      	movs	r2, #1
 80070c6:	e7e2      	b.n	800708e <_dtoa_r+0xa46>
 80070c8:	f1b9 0f00 	cmp.w	r9, #0
 80070cc:	db06      	blt.n	80070dc <_dtoa_r+0xa94>
 80070ce:	9905      	ldr	r1, [sp, #20]
 80070d0:	ea41 0909 	orr.w	r9, r1, r9
 80070d4:	9906      	ldr	r1, [sp, #24]
 80070d6:	ea59 0101 	orrs.w	r1, r9, r1
 80070da:	d120      	bne.n	800711e <_dtoa_r+0xad6>
 80070dc:	2a00      	cmp	r2, #0
 80070de:	ddec      	ble.n	80070ba <_dtoa_r+0xa72>
 80070e0:	4659      	mov	r1, fp
 80070e2:	2201      	movs	r2, #1
 80070e4:	4620      	mov	r0, r4
 80070e6:	9301      	str	r3, [sp, #4]
 80070e8:	f000 fbfc 	bl	80078e4 <__lshift>
 80070ec:	4631      	mov	r1, r6
 80070ee:	4683      	mov	fp, r0
 80070f0:	f000 fc64 	bl	80079bc <__mcmp>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	9b01      	ldr	r3, [sp, #4]
 80070f8:	dc02      	bgt.n	8007100 <_dtoa_r+0xab8>
 80070fa:	d1de      	bne.n	80070ba <_dtoa_r+0xa72>
 80070fc:	07da      	lsls	r2, r3, #31
 80070fe:	d5dc      	bpl.n	80070ba <_dtoa_r+0xa72>
 8007100:	2b39      	cmp	r3, #57	; 0x39
 8007102:	d1d8      	bne.n	80070b6 <_dtoa_r+0xa6e>
 8007104:	9a02      	ldr	r2, [sp, #8]
 8007106:	2339      	movs	r3, #57	; 0x39
 8007108:	7013      	strb	r3, [r2, #0]
 800710a:	462b      	mov	r3, r5
 800710c:	461d      	mov	r5, r3
 800710e:	3b01      	subs	r3, #1
 8007110:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007114:	2a39      	cmp	r2, #57	; 0x39
 8007116:	d050      	beq.n	80071ba <_dtoa_r+0xb72>
 8007118:	3201      	adds	r2, #1
 800711a:	701a      	strb	r2, [r3, #0]
 800711c:	e745      	b.n	8006faa <_dtoa_r+0x962>
 800711e:	2a00      	cmp	r2, #0
 8007120:	dd03      	ble.n	800712a <_dtoa_r+0xae2>
 8007122:	2b39      	cmp	r3, #57	; 0x39
 8007124:	d0ee      	beq.n	8007104 <_dtoa_r+0xabc>
 8007126:	3301      	adds	r3, #1
 8007128:	e7c7      	b.n	80070ba <_dtoa_r+0xa72>
 800712a:	9a01      	ldr	r2, [sp, #4]
 800712c:	9907      	ldr	r1, [sp, #28]
 800712e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007132:	428a      	cmp	r2, r1
 8007134:	d02a      	beq.n	800718c <_dtoa_r+0xb44>
 8007136:	4659      	mov	r1, fp
 8007138:	2300      	movs	r3, #0
 800713a:	220a      	movs	r2, #10
 800713c:	4620      	mov	r0, r4
 800713e:	f000 fa21 	bl	8007584 <__multadd>
 8007142:	45b8      	cmp	r8, r7
 8007144:	4683      	mov	fp, r0
 8007146:	f04f 0300 	mov.w	r3, #0
 800714a:	f04f 020a 	mov.w	r2, #10
 800714e:	4641      	mov	r1, r8
 8007150:	4620      	mov	r0, r4
 8007152:	d107      	bne.n	8007164 <_dtoa_r+0xb1c>
 8007154:	f000 fa16 	bl	8007584 <__multadd>
 8007158:	4680      	mov	r8, r0
 800715a:	4607      	mov	r7, r0
 800715c:	9b01      	ldr	r3, [sp, #4]
 800715e:	3301      	adds	r3, #1
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	e775      	b.n	8007050 <_dtoa_r+0xa08>
 8007164:	f000 fa0e 	bl	8007584 <__multadd>
 8007168:	4639      	mov	r1, r7
 800716a:	4680      	mov	r8, r0
 800716c:	2300      	movs	r3, #0
 800716e:	220a      	movs	r2, #10
 8007170:	4620      	mov	r0, r4
 8007172:	f000 fa07 	bl	8007584 <__multadd>
 8007176:	4607      	mov	r7, r0
 8007178:	e7f0      	b.n	800715c <_dtoa_r+0xb14>
 800717a:	f1b9 0f00 	cmp.w	r9, #0
 800717e:	9a00      	ldr	r2, [sp, #0]
 8007180:	bfcc      	ite	gt
 8007182:	464d      	movgt	r5, r9
 8007184:	2501      	movle	r5, #1
 8007186:	4415      	add	r5, r2
 8007188:	f04f 0800 	mov.w	r8, #0
 800718c:	4659      	mov	r1, fp
 800718e:	2201      	movs	r2, #1
 8007190:	4620      	mov	r0, r4
 8007192:	9301      	str	r3, [sp, #4]
 8007194:	f000 fba6 	bl	80078e4 <__lshift>
 8007198:	4631      	mov	r1, r6
 800719a:	4683      	mov	fp, r0
 800719c:	f000 fc0e 	bl	80079bc <__mcmp>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	dcb2      	bgt.n	800710a <_dtoa_r+0xac2>
 80071a4:	d102      	bne.n	80071ac <_dtoa_r+0xb64>
 80071a6:	9b01      	ldr	r3, [sp, #4]
 80071a8:	07db      	lsls	r3, r3, #31
 80071aa:	d4ae      	bmi.n	800710a <_dtoa_r+0xac2>
 80071ac:	462b      	mov	r3, r5
 80071ae:	461d      	mov	r5, r3
 80071b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071b4:	2a30      	cmp	r2, #48	; 0x30
 80071b6:	d0fa      	beq.n	80071ae <_dtoa_r+0xb66>
 80071b8:	e6f7      	b.n	8006faa <_dtoa_r+0x962>
 80071ba:	9a00      	ldr	r2, [sp, #0]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d1a5      	bne.n	800710c <_dtoa_r+0xac4>
 80071c0:	f10a 0a01 	add.w	sl, sl, #1
 80071c4:	2331      	movs	r3, #49	; 0x31
 80071c6:	e779      	b.n	80070bc <_dtoa_r+0xa74>
 80071c8:	4b13      	ldr	r3, [pc, #76]	; (8007218 <_dtoa_r+0xbd0>)
 80071ca:	f7ff baaf 	b.w	800672c <_dtoa_r+0xe4>
 80071ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f47f aa86 	bne.w	80066e2 <_dtoa_r+0x9a>
 80071d6:	4b11      	ldr	r3, [pc, #68]	; (800721c <_dtoa_r+0xbd4>)
 80071d8:	f7ff baa8 	b.w	800672c <_dtoa_r+0xe4>
 80071dc:	f1b9 0f00 	cmp.w	r9, #0
 80071e0:	dc03      	bgt.n	80071ea <_dtoa_r+0xba2>
 80071e2:	9b05      	ldr	r3, [sp, #20]
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	f73f aec9 	bgt.w	8006f7c <_dtoa_r+0x934>
 80071ea:	9d00      	ldr	r5, [sp, #0]
 80071ec:	4631      	mov	r1, r6
 80071ee:	4658      	mov	r0, fp
 80071f0:	f7ff f99e 	bl	8006530 <quorem>
 80071f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80071f8:	f805 3b01 	strb.w	r3, [r5], #1
 80071fc:	9a00      	ldr	r2, [sp, #0]
 80071fe:	1aaa      	subs	r2, r5, r2
 8007200:	4591      	cmp	r9, r2
 8007202:	ddba      	ble.n	800717a <_dtoa_r+0xb32>
 8007204:	4659      	mov	r1, fp
 8007206:	2300      	movs	r3, #0
 8007208:	220a      	movs	r2, #10
 800720a:	4620      	mov	r0, r4
 800720c:	f000 f9ba 	bl	8007584 <__multadd>
 8007210:	4683      	mov	fp, r0
 8007212:	e7eb      	b.n	80071ec <_dtoa_r+0xba4>
 8007214:	08008410 	.word	0x08008410
 8007218:	08008268 	.word	0x08008268
 800721c:	0800838d 	.word	0x0800838d

08007220 <__sflush_r>:
 8007220:	898a      	ldrh	r2, [r1, #12]
 8007222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007226:	4605      	mov	r5, r0
 8007228:	0710      	lsls	r0, r2, #28
 800722a:	460c      	mov	r4, r1
 800722c:	d458      	bmi.n	80072e0 <__sflush_r+0xc0>
 800722e:	684b      	ldr	r3, [r1, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	dc05      	bgt.n	8007240 <__sflush_r+0x20>
 8007234:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007236:	2b00      	cmp	r3, #0
 8007238:	dc02      	bgt.n	8007240 <__sflush_r+0x20>
 800723a:	2000      	movs	r0, #0
 800723c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007242:	2e00      	cmp	r6, #0
 8007244:	d0f9      	beq.n	800723a <__sflush_r+0x1a>
 8007246:	2300      	movs	r3, #0
 8007248:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800724c:	682f      	ldr	r7, [r5, #0]
 800724e:	602b      	str	r3, [r5, #0]
 8007250:	d032      	beq.n	80072b8 <__sflush_r+0x98>
 8007252:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007254:	89a3      	ldrh	r3, [r4, #12]
 8007256:	075a      	lsls	r2, r3, #29
 8007258:	d505      	bpl.n	8007266 <__sflush_r+0x46>
 800725a:	6863      	ldr	r3, [r4, #4]
 800725c:	1ac0      	subs	r0, r0, r3
 800725e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007260:	b10b      	cbz	r3, 8007266 <__sflush_r+0x46>
 8007262:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007264:	1ac0      	subs	r0, r0, r3
 8007266:	2300      	movs	r3, #0
 8007268:	4602      	mov	r2, r0
 800726a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800726c:	6a21      	ldr	r1, [r4, #32]
 800726e:	4628      	mov	r0, r5
 8007270:	47b0      	blx	r6
 8007272:	1c43      	adds	r3, r0, #1
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	d106      	bne.n	8007286 <__sflush_r+0x66>
 8007278:	6829      	ldr	r1, [r5, #0]
 800727a:	291d      	cmp	r1, #29
 800727c:	d82c      	bhi.n	80072d8 <__sflush_r+0xb8>
 800727e:	4a2a      	ldr	r2, [pc, #168]	; (8007328 <__sflush_r+0x108>)
 8007280:	40ca      	lsrs	r2, r1
 8007282:	07d6      	lsls	r6, r2, #31
 8007284:	d528      	bpl.n	80072d8 <__sflush_r+0xb8>
 8007286:	2200      	movs	r2, #0
 8007288:	6062      	str	r2, [r4, #4]
 800728a:	04d9      	lsls	r1, r3, #19
 800728c:	6922      	ldr	r2, [r4, #16]
 800728e:	6022      	str	r2, [r4, #0]
 8007290:	d504      	bpl.n	800729c <__sflush_r+0x7c>
 8007292:	1c42      	adds	r2, r0, #1
 8007294:	d101      	bne.n	800729a <__sflush_r+0x7a>
 8007296:	682b      	ldr	r3, [r5, #0]
 8007298:	b903      	cbnz	r3, 800729c <__sflush_r+0x7c>
 800729a:	6560      	str	r0, [r4, #84]	; 0x54
 800729c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800729e:	602f      	str	r7, [r5, #0]
 80072a0:	2900      	cmp	r1, #0
 80072a2:	d0ca      	beq.n	800723a <__sflush_r+0x1a>
 80072a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072a8:	4299      	cmp	r1, r3
 80072aa:	d002      	beq.n	80072b2 <__sflush_r+0x92>
 80072ac:	4628      	mov	r0, r5
 80072ae:	f000 fc95 	bl	8007bdc <_free_r>
 80072b2:	2000      	movs	r0, #0
 80072b4:	6360      	str	r0, [r4, #52]	; 0x34
 80072b6:	e7c1      	b.n	800723c <__sflush_r+0x1c>
 80072b8:	6a21      	ldr	r1, [r4, #32]
 80072ba:	2301      	movs	r3, #1
 80072bc:	4628      	mov	r0, r5
 80072be:	47b0      	blx	r6
 80072c0:	1c41      	adds	r1, r0, #1
 80072c2:	d1c7      	bne.n	8007254 <__sflush_r+0x34>
 80072c4:	682b      	ldr	r3, [r5, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0c4      	beq.n	8007254 <__sflush_r+0x34>
 80072ca:	2b1d      	cmp	r3, #29
 80072cc:	d001      	beq.n	80072d2 <__sflush_r+0xb2>
 80072ce:	2b16      	cmp	r3, #22
 80072d0:	d101      	bne.n	80072d6 <__sflush_r+0xb6>
 80072d2:	602f      	str	r7, [r5, #0]
 80072d4:	e7b1      	b.n	800723a <__sflush_r+0x1a>
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072dc:	81a3      	strh	r3, [r4, #12]
 80072de:	e7ad      	b.n	800723c <__sflush_r+0x1c>
 80072e0:	690f      	ldr	r7, [r1, #16]
 80072e2:	2f00      	cmp	r7, #0
 80072e4:	d0a9      	beq.n	800723a <__sflush_r+0x1a>
 80072e6:	0793      	lsls	r3, r2, #30
 80072e8:	680e      	ldr	r6, [r1, #0]
 80072ea:	bf08      	it	eq
 80072ec:	694b      	ldreq	r3, [r1, #20]
 80072ee:	600f      	str	r7, [r1, #0]
 80072f0:	bf18      	it	ne
 80072f2:	2300      	movne	r3, #0
 80072f4:	eba6 0807 	sub.w	r8, r6, r7
 80072f8:	608b      	str	r3, [r1, #8]
 80072fa:	f1b8 0f00 	cmp.w	r8, #0
 80072fe:	dd9c      	ble.n	800723a <__sflush_r+0x1a>
 8007300:	6a21      	ldr	r1, [r4, #32]
 8007302:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007304:	4643      	mov	r3, r8
 8007306:	463a      	mov	r2, r7
 8007308:	4628      	mov	r0, r5
 800730a:	47b0      	blx	r6
 800730c:	2800      	cmp	r0, #0
 800730e:	dc06      	bgt.n	800731e <__sflush_r+0xfe>
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007316:	81a3      	strh	r3, [r4, #12]
 8007318:	f04f 30ff 	mov.w	r0, #4294967295
 800731c:	e78e      	b.n	800723c <__sflush_r+0x1c>
 800731e:	4407      	add	r7, r0
 8007320:	eba8 0800 	sub.w	r8, r8, r0
 8007324:	e7e9      	b.n	80072fa <__sflush_r+0xda>
 8007326:	bf00      	nop
 8007328:	20400001 	.word	0x20400001

0800732c <_fflush_r>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	690b      	ldr	r3, [r1, #16]
 8007330:	4605      	mov	r5, r0
 8007332:	460c      	mov	r4, r1
 8007334:	b913      	cbnz	r3, 800733c <_fflush_r+0x10>
 8007336:	2500      	movs	r5, #0
 8007338:	4628      	mov	r0, r5
 800733a:	bd38      	pop	{r3, r4, r5, pc}
 800733c:	b118      	cbz	r0, 8007346 <_fflush_r+0x1a>
 800733e:	6983      	ldr	r3, [r0, #24]
 8007340:	b90b      	cbnz	r3, 8007346 <_fflush_r+0x1a>
 8007342:	f7fe f8ed 	bl	8005520 <__sinit>
 8007346:	4b14      	ldr	r3, [pc, #80]	; (8007398 <_fflush_r+0x6c>)
 8007348:	429c      	cmp	r4, r3
 800734a:	d11b      	bne.n	8007384 <_fflush_r+0x58>
 800734c:	686c      	ldr	r4, [r5, #4]
 800734e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0ef      	beq.n	8007336 <_fflush_r+0xa>
 8007356:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007358:	07d0      	lsls	r0, r2, #31
 800735a:	d404      	bmi.n	8007366 <_fflush_r+0x3a>
 800735c:	0599      	lsls	r1, r3, #22
 800735e:	d402      	bmi.n	8007366 <_fflush_r+0x3a>
 8007360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007362:	f7fe f9a0 	bl	80056a6 <__retarget_lock_acquire_recursive>
 8007366:	4628      	mov	r0, r5
 8007368:	4621      	mov	r1, r4
 800736a:	f7ff ff59 	bl	8007220 <__sflush_r>
 800736e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007370:	07da      	lsls	r2, r3, #31
 8007372:	4605      	mov	r5, r0
 8007374:	d4e0      	bmi.n	8007338 <_fflush_r+0xc>
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	059b      	lsls	r3, r3, #22
 800737a:	d4dd      	bmi.n	8007338 <_fflush_r+0xc>
 800737c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800737e:	f7fe f993 	bl	80056a8 <__retarget_lock_release_recursive>
 8007382:	e7d9      	b.n	8007338 <_fflush_r+0xc>
 8007384:	4b05      	ldr	r3, [pc, #20]	; (800739c <_fflush_r+0x70>)
 8007386:	429c      	cmp	r4, r3
 8007388:	d101      	bne.n	800738e <_fflush_r+0x62>
 800738a:	68ac      	ldr	r4, [r5, #8]
 800738c:	e7df      	b.n	800734e <_fflush_r+0x22>
 800738e:	4b04      	ldr	r3, [pc, #16]	; (80073a0 <_fflush_r+0x74>)
 8007390:	429c      	cmp	r4, r3
 8007392:	bf08      	it	eq
 8007394:	68ec      	ldreq	r4, [r5, #12]
 8007396:	e7da      	b.n	800734e <_fflush_r+0x22>
 8007398:	08008214 	.word	0x08008214
 800739c:	08008234 	.word	0x08008234
 80073a0:	080081f4 	.word	0x080081f4

080073a4 <_localeconv_r>:
 80073a4:	4800      	ldr	r0, [pc, #0]	; (80073a8 <_localeconv_r+0x4>)
 80073a6:	4770      	bx	lr
 80073a8:	200001a8 	.word	0x200001a8

080073ac <_lseek_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	4d07      	ldr	r5, [pc, #28]	; (80073cc <_lseek_r+0x20>)
 80073b0:	4604      	mov	r4, r0
 80073b2:	4608      	mov	r0, r1
 80073b4:	4611      	mov	r1, r2
 80073b6:	2200      	movs	r2, #0
 80073b8:	602a      	str	r2, [r5, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	f7fa fd4e 	bl	8001e5c <_lseek>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d102      	bne.n	80073ca <_lseek_r+0x1e>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	b103      	cbz	r3, 80073ca <_lseek_r+0x1e>
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	20000c94 	.word	0x20000c94

080073d0 <__swhatbuf_r>:
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	460e      	mov	r6, r1
 80073d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d8:	2900      	cmp	r1, #0
 80073da:	b096      	sub	sp, #88	; 0x58
 80073dc:	4614      	mov	r4, r2
 80073de:	461d      	mov	r5, r3
 80073e0:	da07      	bge.n	80073f2 <__swhatbuf_r+0x22>
 80073e2:	2300      	movs	r3, #0
 80073e4:	602b      	str	r3, [r5, #0]
 80073e6:	89b3      	ldrh	r3, [r6, #12]
 80073e8:	061a      	lsls	r2, r3, #24
 80073ea:	d410      	bmi.n	800740e <__swhatbuf_r+0x3e>
 80073ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073f0:	e00e      	b.n	8007410 <__swhatbuf_r+0x40>
 80073f2:	466a      	mov	r2, sp
 80073f4:	f000 fe26 	bl	8008044 <_fstat_r>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	dbf2      	blt.n	80073e2 <__swhatbuf_r+0x12>
 80073fc:	9a01      	ldr	r2, [sp, #4]
 80073fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007402:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007406:	425a      	negs	r2, r3
 8007408:	415a      	adcs	r2, r3
 800740a:	602a      	str	r2, [r5, #0]
 800740c:	e7ee      	b.n	80073ec <__swhatbuf_r+0x1c>
 800740e:	2340      	movs	r3, #64	; 0x40
 8007410:	2000      	movs	r0, #0
 8007412:	6023      	str	r3, [r4, #0]
 8007414:	b016      	add	sp, #88	; 0x58
 8007416:	bd70      	pop	{r4, r5, r6, pc}

08007418 <__smakebuf_r>:
 8007418:	898b      	ldrh	r3, [r1, #12]
 800741a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800741c:	079d      	lsls	r5, r3, #30
 800741e:	4606      	mov	r6, r0
 8007420:	460c      	mov	r4, r1
 8007422:	d507      	bpl.n	8007434 <__smakebuf_r+0x1c>
 8007424:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	6123      	str	r3, [r4, #16]
 800742c:	2301      	movs	r3, #1
 800742e:	6163      	str	r3, [r4, #20]
 8007430:	b002      	add	sp, #8
 8007432:	bd70      	pop	{r4, r5, r6, pc}
 8007434:	ab01      	add	r3, sp, #4
 8007436:	466a      	mov	r2, sp
 8007438:	f7ff ffca 	bl	80073d0 <__swhatbuf_r>
 800743c:	9900      	ldr	r1, [sp, #0]
 800743e:	4605      	mov	r5, r0
 8007440:	4630      	mov	r0, r6
 8007442:	f7fe f949 	bl	80056d8 <_malloc_r>
 8007446:	b948      	cbnz	r0, 800745c <__smakebuf_r+0x44>
 8007448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800744c:	059a      	lsls	r2, r3, #22
 800744e:	d4ef      	bmi.n	8007430 <__smakebuf_r+0x18>
 8007450:	f023 0303 	bic.w	r3, r3, #3
 8007454:	f043 0302 	orr.w	r3, r3, #2
 8007458:	81a3      	strh	r3, [r4, #12]
 800745a:	e7e3      	b.n	8007424 <__smakebuf_r+0xc>
 800745c:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <__smakebuf_r+0x7c>)
 800745e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	6020      	str	r0, [r4, #0]
 8007464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007468:	81a3      	strh	r3, [r4, #12]
 800746a:	9b00      	ldr	r3, [sp, #0]
 800746c:	6163      	str	r3, [r4, #20]
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	6120      	str	r0, [r4, #16]
 8007472:	b15b      	cbz	r3, 800748c <__smakebuf_r+0x74>
 8007474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007478:	4630      	mov	r0, r6
 800747a:	f000 fdf5 	bl	8008068 <_isatty_r>
 800747e:	b128      	cbz	r0, 800748c <__smakebuf_r+0x74>
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	f023 0303 	bic.w	r3, r3, #3
 8007486:	f043 0301 	orr.w	r3, r3, #1
 800748a:	81a3      	strh	r3, [r4, #12]
 800748c:	89a0      	ldrh	r0, [r4, #12]
 800748e:	4305      	orrs	r5, r0
 8007490:	81a5      	strh	r5, [r4, #12]
 8007492:	e7cd      	b.n	8007430 <__smakebuf_r+0x18>
 8007494:	080054b9 	.word	0x080054b9

08007498 <malloc>:
 8007498:	4b02      	ldr	r3, [pc, #8]	; (80074a4 <malloc+0xc>)
 800749a:	4601      	mov	r1, r0
 800749c:	6818      	ldr	r0, [r3, #0]
 800749e:	f7fe b91b 	b.w	80056d8 <_malloc_r>
 80074a2:	bf00      	nop
 80074a4:	20000054 	.word	0x20000054

080074a8 <__malloc_lock>:
 80074a8:	4801      	ldr	r0, [pc, #4]	; (80074b0 <__malloc_lock+0x8>)
 80074aa:	f7fe b8fc 	b.w	80056a6 <__retarget_lock_acquire_recursive>
 80074ae:	bf00      	nop
 80074b0:	20000c8c 	.word	0x20000c8c

080074b4 <__malloc_unlock>:
 80074b4:	4801      	ldr	r0, [pc, #4]	; (80074bc <__malloc_unlock+0x8>)
 80074b6:	f7fe b8f7 	b.w	80056a8 <__retarget_lock_release_recursive>
 80074ba:	bf00      	nop
 80074bc:	20000c8c 	.word	0x20000c8c

080074c0 <_Balloc>:
 80074c0:	b570      	push	{r4, r5, r6, lr}
 80074c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074c4:	4604      	mov	r4, r0
 80074c6:	460d      	mov	r5, r1
 80074c8:	b976      	cbnz	r6, 80074e8 <_Balloc+0x28>
 80074ca:	2010      	movs	r0, #16
 80074cc:	f7ff ffe4 	bl	8007498 <malloc>
 80074d0:	4602      	mov	r2, r0
 80074d2:	6260      	str	r0, [r4, #36]	; 0x24
 80074d4:	b920      	cbnz	r0, 80074e0 <_Balloc+0x20>
 80074d6:	4b18      	ldr	r3, [pc, #96]	; (8007538 <_Balloc+0x78>)
 80074d8:	4818      	ldr	r0, [pc, #96]	; (800753c <_Balloc+0x7c>)
 80074da:	2166      	movs	r1, #102	; 0x66
 80074dc:	f000 fd82 	bl	8007fe4 <__assert_func>
 80074e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074e4:	6006      	str	r6, [r0, #0]
 80074e6:	60c6      	str	r6, [r0, #12]
 80074e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074ea:	68f3      	ldr	r3, [r6, #12]
 80074ec:	b183      	cbz	r3, 8007510 <_Balloc+0x50>
 80074ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074f6:	b9b8      	cbnz	r0, 8007528 <_Balloc+0x68>
 80074f8:	2101      	movs	r1, #1
 80074fa:	fa01 f605 	lsl.w	r6, r1, r5
 80074fe:	1d72      	adds	r2, r6, #5
 8007500:	0092      	lsls	r2, r2, #2
 8007502:	4620      	mov	r0, r4
 8007504:	f000 fb5a 	bl	8007bbc <_calloc_r>
 8007508:	b160      	cbz	r0, 8007524 <_Balloc+0x64>
 800750a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800750e:	e00e      	b.n	800752e <_Balloc+0x6e>
 8007510:	2221      	movs	r2, #33	; 0x21
 8007512:	2104      	movs	r1, #4
 8007514:	4620      	mov	r0, r4
 8007516:	f000 fb51 	bl	8007bbc <_calloc_r>
 800751a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800751c:	60f0      	str	r0, [r6, #12]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1e4      	bne.n	80074ee <_Balloc+0x2e>
 8007524:	2000      	movs	r0, #0
 8007526:	bd70      	pop	{r4, r5, r6, pc}
 8007528:	6802      	ldr	r2, [r0, #0]
 800752a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800752e:	2300      	movs	r3, #0
 8007530:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007534:	e7f7      	b.n	8007526 <_Balloc+0x66>
 8007536:	bf00      	nop
 8007538:	0800839a 	.word	0x0800839a
 800753c:	08008421 	.word	0x08008421

08007540 <_Bfree>:
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007544:	4605      	mov	r5, r0
 8007546:	460c      	mov	r4, r1
 8007548:	b976      	cbnz	r6, 8007568 <_Bfree+0x28>
 800754a:	2010      	movs	r0, #16
 800754c:	f7ff ffa4 	bl	8007498 <malloc>
 8007550:	4602      	mov	r2, r0
 8007552:	6268      	str	r0, [r5, #36]	; 0x24
 8007554:	b920      	cbnz	r0, 8007560 <_Bfree+0x20>
 8007556:	4b09      	ldr	r3, [pc, #36]	; (800757c <_Bfree+0x3c>)
 8007558:	4809      	ldr	r0, [pc, #36]	; (8007580 <_Bfree+0x40>)
 800755a:	218a      	movs	r1, #138	; 0x8a
 800755c:	f000 fd42 	bl	8007fe4 <__assert_func>
 8007560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007564:	6006      	str	r6, [r0, #0]
 8007566:	60c6      	str	r6, [r0, #12]
 8007568:	b13c      	cbz	r4, 800757a <_Bfree+0x3a>
 800756a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800756c:	6862      	ldr	r2, [r4, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007574:	6021      	str	r1, [r4, #0]
 8007576:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800757a:	bd70      	pop	{r4, r5, r6, pc}
 800757c:	0800839a 	.word	0x0800839a
 8007580:	08008421 	.word	0x08008421

08007584 <__multadd>:
 8007584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007588:	690e      	ldr	r6, [r1, #16]
 800758a:	4607      	mov	r7, r0
 800758c:	4698      	mov	r8, r3
 800758e:	460c      	mov	r4, r1
 8007590:	f101 0014 	add.w	r0, r1, #20
 8007594:	2300      	movs	r3, #0
 8007596:	6805      	ldr	r5, [r0, #0]
 8007598:	b2a9      	uxth	r1, r5
 800759a:	fb02 8101 	mla	r1, r2, r1, r8
 800759e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80075a2:	0c2d      	lsrs	r5, r5, #16
 80075a4:	fb02 c505 	mla	r5, r2, r5, ip
 80075a8:	b289      	uxth	r1, r1
 80075aa:	3301      	adds	r3, #1
 80075ac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80075b0:	429e      	cmp	r6, r3
 80075b2:	f840 1b04 	str.w	r1, [r0], #4
 80075b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80075ba:	dcec      	bgt.n	8007596 <__multadd+0x12>
 80075bc:	f1b8 0f00 	cmp.w	r8, #0
 80075c0:	d022      	beq.n	8007608 <__multadd+0x84>
 80075c2:	68a3      	ldr	r3, [r4, #8]
 80075c4:	42b3      	cmp	r3, r6
 80075c6:	dc19      	bgt.n	80075fc <__multadd+0x78>
 80075c8:	6861      	ldr	r1, [r4, #4]
 80075ca:	4638      	mov	r0, r7
 80075cc:	3101      	adds	r1, #1
 80075ce:	f7ff ff77 	bl	80074c0 <_Balloc>
 80075d2:	4605      	mov	r5, r0
 80075d4:	b928      	cbnz	r0, 80075e2 <__multadd+0x5e>
 80075d6:	4602      	mov	r2, r0
 80075d8:	4b0d      	ldr	r3, [pc, #52]	; (8007610 <__multadd+0x8c>)
 80075da:	480e      	ldr	r0, [pc, #56]	; (8007614 <__multadd+0x90>)
 80075dc:	21b5      	movs	r1, #181	; 0xb5
 80075de:	f000 fd01 	bl	8007fe4 <__assert_func>
 80075e2:	6922      	ldr	r2, [r4, #16]
 80075e4:	3202      	adds	r2, #2
 80075e6:	f104 010c 	add.w	r1, r4, #12
 80075ea:	0092      	lsls	r2, r2, #2
 80075ec:	300c      	adds	r0, #12
 80075ee:	f7fe f85c 	bl	80056aa <memcpy>
 80075f2:	4621      	mov	r1, r4
 80075f4:	4638      	mov	r0, r7
 80075f6:	f7ff ffa3 	bl	8007540 <_Bfree>
 80075fa:	462c      	mov	r4, r5
 80075fc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007600:	3601      	adds	r6, #1
 8007602:	f8c3 8014 	str.w	r8, [r3, #20]
 8007606:	6126      	str	r6, [r4, #16]
 8007608:	4620      	mov	r0, r4
 800760a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800760e:	bf00      	nop
 8007610:	08008410 	.word	0x08008410
 8007614:	08008421 	.word	0x08008421

08007618 <__hi0bits>:
 8007618:	0c03      	lsrs	r3, r0, #16
 800761a:	041b      	lsls	r3, r3, #16
 800761c:	b9d3      	cbnz	r3, 8007654 <__hi0bits+0x3c>
 800761e:	0400      	lsls	r0, r0, #16
 8007620:	2310      	movs	r3, #16
 8007622:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007626:	bf04      	itt	eq
 8007628:	0200      	lsleq	r0, r0, #8
 800762a:	3308      	addeq	r3, #8
 800762c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007630:	bf04      	itt	eq
 8007632:	0100      	lsleq	r0, r0, #4
 8007634:	3304      	addeq	r3, #4
 8007636:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800763a:	bf04      	itt	eq
 800763c:	0080      	lsleq	r0, r0, #2
 800763e:	3302      	addeq	r3, #2
 8007640:	2800      	cmp	r0, #0
 8007642:	db05      	blt.n	8007650 <__hi0bits+0x38>
 8007644:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007648:	f103 0301 	add.w	r3, r3, #1
 800764c:	bf08      	it	eq
 800764e:	2320      	moveq	r3, #32
 8007650:	4618      	mov	r0, r3
 8007652:	4770      	bx	lr
 8007654:	2300      	movs	r3, #0
 8007656:	e7e4      	b.n	8007622 <__hi0bits+0xa>

08007658 <__lo0bits>:
 8007658:	6803      	ldr	r3, [r0, #0]
 800765a:	f013 0207 	ands.w	r2, r3, #7
 800765e:	4601      	mov	r1, r0
 8007660:	d00b      	beq.n	800767a <__lo0bits+0x22>
 8007662:	07da      	lsls	r2, r3, #31
 8007664:	d424      	bmi.n	80076b0 <__lo0bits+0x58>
 8007666:	0798      	lsls	r0, r3, #30
 8007668:	bf49      	itett	mi
 800766a:	085b      	lsrmi	r3, r3, #1
 800766c:	089b      	lsrpl	r3, r3, #2
 800766e:	2001      	movmi	r0, #1
 8007670:	600b      	strmi	r3, [r1, #0]
 8007672:	bf5c      	itt	pl
 8007674:	600b      	strpl	r3, [r1, #0]
 8007676:	2002      	movpl	r0, #2
 8007678:	4770      	bx	lr
 800767a:	b298      	uxth	r0, r3
 800767c:	b9b0      	cbnz	r0, 80076ac <__lo0bits+0x54>
 800767e:	0c1b      	lsrs	r3, r3, #16
 8007680:	2010      	movs	r0, #16
 8007682:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007686:	bf04      	itt	eq
 8007688:	0a1b      	lsreq	r3, r3, #8
 800768a:	3008      	addeq	r0, #8
 800768c:	071a      	lsls	r2, r3, #28
 800768e:	bf04      	itt	eq
 8007690:	091b      	lsreq	r3, r3, #4
 8007692:	3004      	addeq	r0, #4
 8007694:	079a      	lsls	r2, r3, #30
 8007696:	bf04      	itt	eq
 8007698:	089b      	lsreq	r3, r3, #2
 800769a:	3002      	addeq	r0, #2
 800769c:	07da      	lsls	r2, r3, #31
 800769e:	d403      	bmi.n	80076a8 <__lo0bits+0x50>
 80076a0:	085b      	lsrs	r3, r3, #1
 80076a2:	f100 0001 	add.w	r0, r0, #1
 80076a6:	d005      	beq.n	80076b4 <__lo0bits+0x5c>
 80076a8:	600b      	str	r3, [r1, #0]
 80076aa:	4770      	bx	lr
 80076ac:	4610      	mov	r0, r2
 80076ae:	e7e8      	b.n	8007682 <__lo0bits+0x2a>
 80076b0:	2000      	movs	r0, #0
 80076b2:	4770      	bx	lr
 80076b4:	2020      	movs	r0, #32
 80076b6:	4770      	bx	lr

080076b8 <__i2b>:
 80076b8:	b510      	push	{r4, lr}
 80076ba:	460c      	mov	r4, r1
 80076bc:	2101      	movs	r1, #1
 80076be:	f7ff feff 	bl	80074c0 <_Balloc>
 80076c2:	4602      	mov	r2, r0
 80076c4:	b928      	cbnz	r0, 80076d2 <__i2b+0x1a>
 80076c6:	4b05      	ldr	r3, [pc, #20]	; (80076dc <__i2b+0x24>)
 80076c8:	4805      	ldr	r0, [pc, #20]	; (80076e0 <__i2b+0x28>)
 80076ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80076ce:	f000 fc89 	bl	8007fe4 <__assert_func>
 80076d2:	2301      	movs	r3, #1
 80076d4:	6144      	str	r4, [r0, #20]
 80076d6:	6103      	str	r3, [r0, #16]
 80076d8:	bd10      	pop	{r4, pc}
 80076da:	bf00      	nop
 80076dc:	08008410 	.word	0x08008410
 80076e0:	08008421 	.word	0x08008421

080076e4 <__multiply>:
 80076e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e8:	4614      	mov	r4, r2
 80076ea:	690a      	ldr	r2, [r1, #16]
 80076ec:	6923      	ldr	r3, [r4, #16]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	bfb8      	it	lt
 80076f2:	460b      	movlt	r3, r1
 80076f4:	460d      	mov	r5, r1
 80076f6:	bfbc      	itt	lt
 80076f8:	4625      	movlt	r5, r4
 80076fa:	461c      	movlt	r4, r3
 80076fc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007700:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007704:	68ab      	ldr	r3, [r5, #8]
 8007706:	6869      	ldr	r1, [r5, #4]
 8007708:	eb0a 0709 	add.w	r7, sl, r9
 800770c:	42bb      	cmp	r3, r7
 800770e:	b085      	sub	sp, #20
 8007710:	bfb8      	it	lt
 8007712:	3101      	addlt	r1, #1
 8007714:	f7ff fed4 	bl	80074c0 <_Balloc>
 8007718:	b930      	cbnz	r0, 8007728 <__multiply+0x44>
 800771a:	4602      	mov	r2, r0
 800771c:	4b42      	ldr	r3, [pc, #264]	; (8007828 <__multiply+0x144>)
 800771e:	4843      	ldr	r0, [pc, #268]	; (800782c <__multiply+0x148>)
 8007720:	f240 115d 	movw	r1, #349	; 0x15d
 8007724:	f000 fc5e 	bl	8007fe4 <__assert_func>
 8007728:	f100 0614 	add.w	r6, r0, #20
 800772c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007730:	4633      	mov	r3, r6
 8007732:	2200      	movs	r2, #0
 8007734:	4543      	cmp	r3, r8
 8007736:	d31e      	bcc.n	8007776 <__multiply+0x92>
 8007738:	f105 0c14 	add.w	ip, r5, #20
 800773c:	f104 0314 	add.w	r3, r4, #20
 8007740:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007744:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007748:	9202      	str	r2, [sp, #8]
 800774a:	ebac 0205 	sub.w	r2, ip, r5
 800774e:	3a15      	subs	r2, #21
 8007750:	f022 0203 	bic.w	r2, r2, #3
 8007754:	3204      	adds	r2, #4
 8007756:	f105 0115 	add.w	r1, r5, #21
 800775a:	458c      	cmp	ip, r1
 800775c:	bf38      	it	cc
 800775e:	2204      	movcc	r2, #4
 8007760:	9201      	str	r2, [sp, #4]
 8007762:	9a02      	ldr	r2, [sp, #8]
 8007764:	9303      	str	r3, [sp, #12]
 8007766:	429a      	cmp	r2, r3
 8007768:	d808      	bhi.n	800777c <__multiply+0x98>
 800776a:	2f00      	cmp	r7, #0
 800776c:	dc55      	bgt.n	800781a <__multiply+0x136>
 800776e:	6107      	str	r7, [r0, #16]
 8007770:	b005      	add	sp, #20
 8007772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007776:	f843 2b04 	str.w	r2, [r3], #4
 800777a:	e7db      	b.n	8007734 <__multiply+0x50>
 800777c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007780:	f1ba 0f00 	cmp.w	sl, #0
 8007784:	d020      	beq.n	80077c8 <__multiply+0xe4>
 8007786:	f105 0e14 	add.w	lr, r5, #20
 800778a:	46b1      	mov	r9, r6
 800778c:	2200      	movs	r2, #0
 800778e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007792:	f8d9 b000 	ldr.w	fp, [r9]
 8007796:	b2a1      	uxth	r1, r4
 8007798:	fa1f fb8b 	uxth.w	fp, fp
 800779c:	fb0a b101 	mla	r1, sl, r1, fp
 80077a0:	4411      	add	r1, r2
 80077a2:	f8d9 2000 	ldr.w	r2, [r9]
 80077a6:	0c24      	lsrs	r4, r4, #16
 80077a8:	0c12      	lsrs	r2, r2, #16
 80077aa:	fb0a 2404 	mla	r4, sl, r4, r2
 80077ae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80077b2:	b289      	uxth	r1, r1
 80077b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80077b8:	45f4      	cmp	ip, lr
 80077ba:	f849 1b04 	str.w	r1, [r9], #4
 80077be:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80077c2:	d8e4      	bhi.n	800778e <__multiply+0xaa>
 80077c4:	9901      	ldr	r1, [sp, #4]
 80077c6:	5072      	str	r2, [r6, r1]
 80077c8:	9a03      	ldr	r2, [sp, #12]
 80077ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077ce:	3304      	adds	r3, #4
 80077d0:	f1b9 0f00 	cmp.w	r9, #0
 80077d4:	d01f      	beq.n	8007816 <__multiply+0x132>
 80077d6:	6834      	ldr	r4, [r6, #0]
 80077d8:	f105 0114 	add.w	r1, r5, #20
 80077dc:	46b6      	mov	lr, r6
 80077de:	f04f 0a00 	mov.w	sl, #0
 80077e2:	880a      	ldrh	r2, [r1, #0]
 80077e4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80077e8:	fb09 b202 	mla	r2, r9, r2, fp
 80077ec:	4492      	add	sl, r2
 80077ee:	b2a4      	uxth	r4, r4
 80077f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80077f4:	f84e 4b04 	str.w	r4, [lr], #4
 80077f8:	f851 4b04 	ldr.w	r4, [r1], #4
 80077fc:	f8be 2000 	ldrh.w	r2, [lr]
 8007800:	0c24      	lsrs	r4, r4, #16
 8007802:	fb09 2404 	mla	r4, r9, r4, r2
 8007806:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800780a:	458c      	cmp	ip, r1
 800780c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007810:	d8e7      	bhi.n	80077e2 <__multiply+0xfe>
 8007812:	9a01      	ldr	r2, [sp, #4]
 8007814:	50b4      	str	r4, [r6, r2]
 8007816:	3604      	adds	r6, #4
 8007818:	e7a3      	b.n	8007762 <__multiply+0x7e>
 800781a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1a5      	bne.n	800776e <__multiply+0x8a>
 8007822:	3f01      	subs	r7, #1
 8007824:	e7a1      	b.n	800776a <__multiply+0x86>
 8007826:	bf00      	nop
 8007828:	08008410 	.word	0x08008410
 800782c:	08008421 	.word	0x08008421

08007830 <__pow5mult>:
 8007830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007834:	4615      	mov	r5, r2
 8007836:	f012 0203 	ands.w	r2, r2, #3
 800783a:	4606      	mov	r6, r0
 800783c:	460f      	mov	r7, r1
 800783e:	d007      	beq.n	8007850 <__pow5mult+0x20>
 8007840:	4c25      	ldr	r4, [pc, #148]	; (80078d8 <__pow5mult+0xa8>)
 8007842:	3a01      	subs	r2, #1
 8007844:	2300      	movs	r3, #0
 8007846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800784a:	f7ff fe9b 	bl	8007584 <__multadd>
 800784e:	4607      	mov	r7, r0
 8007850:	10ad      	asrs	r5, r5, #2
 8007852:	d03d      	beq.n	80078d0 <__pow5mult+0xa0>
 8007854:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007856:	b97c      	cbnz	r4, 8007878 <__pow5mult+0x48>
 8007858:	2010      	movs	r0, #16
 800785a:	f7ff fe1d 	bl	8007498 <malloc>
 800785e:	4602      	mov	r2, r0
 8007860:	6270      	str	r0, [r6, #36]	; 0x24
 8007862:	b928      	cbnz	r0, 8007870 <__pow5mult+0x40>
 8007864:	4b1d      	ldr	r3, [pc, #116]	; (80078dc <__pow5mult+0xac>)
 8007866:	481e      	ldr	r0, [pc, #120]	; (80078e0 <__pow5mult+0xb0>)
 8007868:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800786c:	f000 fbba 	bl	8007fe4 <__assert_func>
 8007870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007874:	6004      	str	r4, [r0, #0]
 8007876:	60c4      	str	r4, [r0, #12]
 8007878:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800787c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007880:	b94c      	cbnz	r4, 8007896 <__pow5mult+0x66>
 8007882:	f240 2171 	movw	r1, #625	; 0x271
 8007886:	4630      	mov	r0, r6
 8007888:	f7ff ff16 	bl	80076b8 <__i2b>
 800788c:	2300      	movs	r3, #0
 800788e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007892:	4604      	mov	r4, r0
 8007894:	6003      	str	r3, [r0, #0]
 8007896:	f04f 0900 	mov.w	r9, #0
 800789a:	07eb      	lsls	r3, r5, #31
 800789c:	d50a      	bpl.n	80078b4 <__pow5mult+0x84>
 800789e:	4639      	mov	r1, r7
 80078a0:	4622      	mov	r2, r4
 80078a2:	4630      	mov	r0, r6
 80078a4:	f7ff ff1e 	bl	80076e4 <__multiply>
 80078a8:	4639      	mov	r1, r7
 80078aa:	4680      	mov	r8, r0
 80078ac:	4630      	mov	r0, r6
 80078ae:	f7ff fe47 	bl	8007540 <_Bfree>
 80078b2:	4647      	mov	r7, r8
 80078b4:	106d      	asrs	r5, r5, #1
 80078b6:	d00b      	beq.n	80078d0 <__pow5mult+0xa0>
 80078b8:	6820      	ldr	r0, [r4, #0]
 80078ba:	b938      	cbnz	r0, 80078cc <__pow5mult+0x9c>
 80078bc:	4622      	mov	r2, r4
 80078be:	4621      	mov	r1, r4
 80078c0:	4630      	mov	r0, r6
 80078c2:	f7ff ff0f 	bl	80076e4 <__multiply>
 80078c6:	6020      	str	r0, [r4, #0]
 80078c8:	f8c0 9000 	str.w	r9, [r0]
 80078cc:	4604      	mov	r4, r0
 80078ce:	e7e4      	b.n	800789a <__pow5mult+0x6a>
 80078d0:	4638      	mov	r0, r7
 80078d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078d6:	bf00      	nop
 80078d8:	08008578 	.word	0x08008578
 80078dc:	0800839a 	.word	0x0800839a
 80078e0:	08008421 	.word	0x08008421

080078e4 <__lshift>:
 80078e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e8:	460c      	mov	r4, r1
 80078ea:	6849      	ldr	r1, [r1, #4]
 80078ec:	6923      	ldr	r3, [r4, #16]
 80078ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078f2:	68a3      	ldr	r3, [r4, #8]
 80078f4:	4607      	mov	r7, r0
 80078f6:	4691      	mov	r9, r2
 80078f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078fc:	f108 0601 	add.w	r6, r8, #1
 8007900:	42b3      	cmp	r3, r6
 8007902:	db0b      	blt.n	800791c <__lshift+0x38>
 8007904:	4638      	mov	r0, r7
 8007906:	f7ff fddb 	bl	80074c0 <_Balloc>
 800790a:	4605      	mov	r5, r0
 800790c:	b948      	cbnz	r0, 8007922 <__lshift+0x3e>
 800790e:	4602      	mov	r2, r0
 8007910:	4b28      	ldr	r3, [pc, #160]	; (80079b4 <__lshift+0xd0>)
 8007912:	4829      	ldr	r0, [pc, #164]	; (80079b8 <__lshift+0xd4>)
 8007914:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007918:	f000 fb64 	bl	8007fe4 <__assert_func>
 800791c:	3101      	adds	r1, #1
 800791e:	005b      	lsls	r3, r3, #1
 8007920:	e7ee      	b.n	8007900 <__lshift+0x1c>
 8007922:	2300      	movs	r3, #0
 8007924:	f100 0114 	add.w	r1, r0, #20
 8007928:	f100 0210 	add.w	r2, r0, #16
 800792c:	4618      	mov	r0, r3
 800792e:	4553      	cmp	r3, sl
 8007930:	db33      	blt.n	800799a <__lshift+0xb6>
 8007932:	6920      	ldr	r0, [r4, #16]
 8007934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007938:	f104 0314 	add.w	r3, r4, #20
 800793c:	f019 091f 	ands.w	r9, r9, #31
 8007940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007944:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007948:	d02b      	beq.n	80079a2 <__lshift+0xbe>
 800794a:	f1c9 0e20 	rsb	lr, r9, #32
 800794e:	468a      	mov	sl, r1
 8007950:	2200      	movs	r2, #0
 8007952:	6818      	ldr	r0, [r3, #0]
 8007954:	fa00 f009 	lsl.w	r0, r0, r9
 8007958:	4302      	orrs	r2, r0
 800795a:	f84a 2b04 	str.w	r2, [sl], #4
 800795e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007962:	459c      	cmp	ip, r3
 8007964:	fa22 f20e 	lsr.w	r2, r2, lr
 8007968:	d8f3      	bhi.n	8007952 <__lshift+0x6e>
 800796a:	ebac 0304 	sub.w	r3, ip, r4
 800796e:	3b15      	subs	r3, #21
 8007970:	f023 0303 	bic.w	r3, r3, #3
 8007974:	3304      	adds	r3, #4
 8007976:	f104 0015 	add.w	r0, r4, #21
 800797a:	4584      	cmp	ip, r0
 800797c:	bf38      	it	cc
 800797e:	2304      	movcc	r3, #4
 8007980:	50ca      	str	r2, [r1, r3]
 8007982:	b10a      	cbz	r2, 8007988 <__lshift+0xa4>
 8007984:	f108 0602 	add.w	r6, r8, #2
 8007988:	3e01      	subs	r6, #1
 800798a:	4638      	mov	r0, r7
 800798c:	612e      	str	r6, [r5, #16]
 800798e:	4621      	mov	r1, r4
 8007990:	f7ff fdd6 	bl	8007540 <_Bfree>
 8007994:	4628      	mov	r0, r5
 8007996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800799a:	f842 0f04 	str.w	r0, [r2, #4]!
 800799e:	3301      	adds	r3, #1
 80079a0:	e7c5      	b.n	800792e <__lshift+0x4a>
 80079a2:	3904      	subs	r1, #4
 80079a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80079ac:	459c      	cmp	ip, r3
 80079ae:	d8f9      	bhi.n	80079a4 <__lshift+0xc0>
 80079b0:	e7ea      	b.n	8007988 <__lshift+0xa4>
 80079b2:	bf00      	nop
 80079b4:	08008410 	.word	0x08008410
 80079b8:	08008421 	.word	0x08008421

080079bc <__mcmp>:
 80079bc:	b530      	push	{r4, r5, lr}
 80079be:	6902      	ldr	r2, [r0, #16]
 80079c0:	690c      	ldr	r4, [r1, #16]
 80079c2:	1b12      	subs	r2, r2, r4
 80079c4:	d10e      	bne.n	80079e4 <__mcmp+0x28>
 80079c6:	f100 0314 	add.w	r3, r0, #20
 80079ca:	3114      	adds	r1, #20
 80079cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80079d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80079d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80079d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80079dc:	42a5      	cmp	r5, r4
 80079de:	d003      	beq.n	80079e8 <__mcmp+0x2c>
 80079e0:	d305      	bcc.n	80079ee <__mcmp+0x32>
 80079e2:	2201      	movs	r2, #1
 80079e4:	4610      	mov	r0, r2
 80079e6:	bd30      	pop	{r4, r5, pc}
 80079e8:	4283      	cmp	r3, r0
 80079ea:	d3f3      	bcc.n	80079d4 <__mcmp+0x18>
 80079ec:	e7fa      	b.n	80079e4 <__mcmp+0x28>
 80079ee:	f04f 32ff 	mov.w	r2, #4294967295
 80079f2:	e7f7      	b.n	80079e4 <__mcmp+0x28>

080079f4 <__mdiff>:
 80079f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f8:	460c      	mov	r4, r1
 80079fa:	4606      	mov	r6, r0
 80079fc:	4611      	mov	r1, r2
 80079fe:	4620      	mov	r0, r4
 8007a00:	4617      	mov	r7, r2
 8007a02:	f7ff ffdb 	bl	80079bc <__mcmp>
 8007a06:	1e05      	subs	r5, r0, #0
 8007a08:	d110      	bne.n	8007a2c <__mdiff+0x38>
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f7ff fd57 	bl	80074c0 <_Balloc>
 8007a12:	b930      	cbnz	r0, 8007a22 <__mdiff+0x2e>
 8007a14:	4b39      	ldr	r3, [pc, #228]	; (8007afc <__mdiff+0x108>)
 8007a16:	4602      	mov	r2, r0
 8007a18:	f240 2132 	movw	r1, #562	; 0x232
 8007a1c:	4838      	ldr	r0, [pc, #224]	; (8007b00 <__mdiff+0x10c>)
 8007a1e:	f000 fae1 	bl	8007fe4 <__assert_func>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2c:	bfa4      	itt	ge
 8007a2e:	463b      	movge	r3, r7
 8007a30:	4627      	movge	r7, r4
 8007a32:	4630      	mov	r0, r6
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	bfa6      	itte	ge
 8007a38:	461c      	movge	r4, r3
 8007a3a:	2500      	movge	r5, #0
 8007a3c:	2501      	movlt	r5, #1
 8007a3e:	f7ff fd3f 	bl	80074c0 <_Balloc>
 8007a42:	b920      	cbnz	r0, 8007a4e <__mdiff+0x5a>
 8007a44:	4b2d      	ldr	r3, [pc, #180]	; (8007afc <__mdiff+0x108>)
 8007a46:	4602      	mov	r2, r0
 8007a48:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a4c:	e7e6      	b.n	8007a1c <__mdiff+0x28>
 8007a4e:	693e      	ldr	r6, [r7, #16]
 8007a50:	60c5      	str	r5, [r0, #12]
 8007a52:	6925      	ldr	r5, [r4, #16]
 8007a54:	f107 0114 	add.w	r1, r7, #20
 8007a58:	f104 0914 	add.w	r9, r4, #20
 8007a5c:	f100 0e14 	add.w	lr, r0, #20
 8007a60:	f107 0210 	add.w	r2, r7, #16
 8007a64:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007a68:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007a6c:	46f2      	mov	sl, lr
 8007a6e:	2700      	movs	r7, #0
 8007a70:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a78:	fa1f f883 	uxth.w	r8, r3
 8007a7c:	fa17 f78b 	uxtah	r7, r7, fp
 8007a80:	0c1b      	lsrs	r3, r3, #16
 8007a82:	eba7 0808 	sub.w	r8, r7, r8
 8007a86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a8e:	fa1f f888 	uxth.w	r8, r8
 8007a92:	141f      	asrs	r7, r3, #16
 8007a94:	454d      	cmp	r5, r9
 8007a96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a9a:	f84a 3b04 	str.w	r3, [sl], #4
 8007a9e:	d8e7      	bhi.n	8007a70 <__mdiff+0x7c>
 8007aa0:	1b2b      	subs	r3, r5, r4
 8007aa2:	3b15      	subs	r3, #21
 8007aa4:	f023 0303 	bic.w	r3, r3, #3
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	3415      	adds	r4, #21
 8007aac:	42a5      	cmp	r5, r4
 8007aae:	bf38      	it	cc
 8007ab0:	2304      	movcc	r3, #4
 8007ab2:	4419      	add	r1, r3
 8007ab4:	4473      	add	r3, lr
 8007ab6:	469e      	mov	lr, r3
 8007ab8:	460d      	mov	r5, r1
 8007aba:	4565      	cmp	r5, ip
 8007abc:	d30e      	bcc.n	8007adc <__mdiff+0xe8>
 8007abe:	f10c 0203 	add.w	r2, ip, #3
 8007ac2:	1a52      	subs	r2, r2, r1
 8007ac4:	f022 0203 	bic.w	r2, r2, #3
 8007ac8:	3903      	subs	r1, #3
 8007aca:	458c      	cmp	ip, r1
 8007acc:	bf38      	it	cc
 8007ace:	2200      	movcc	r2, #0
 8007ad0:	441a      	add	r2, r3
 8007ad2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007ad6:	b17b      	cbz	r3, 8007af8 <__mdiff+0x104>
 8007ad8:	6106      	str	r6, [r0, #16]
 8007ada:	e7a5      	b.n	8007a28 <__mdiff+0x34>
 8007adc:	f855 8b04 	ldr.w	r8, [r5], #4
 8007ae0:	fa17 f488 	uxtah	r4, r7, r8
 8007ae4:	1422      	asrs	r2, r4, #16
 8007ae6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007aea:	b2a4      	uxth	r4, r4
 8007aec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007af0:	f84e 4b04 	str.w	r4, [lr], #4
 8007af4:	1417      	asrs	r7, r2, #16
 8007af6:	e7e0      	b.n	8007aba <__mdiff+0xc6>
 8007af8:	3e01      	subs	r6, #1
 8007afa:	e7ea      	b.n	8007ad2 <__mdiff+0xde>
 8007afc:	08008410 	.word	0x08008410
 8007b00:	08008421 	.word	0x08008421

08007b04 <__d2b>:
 8007b04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b08:	4689      	mov	r9, r1
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	ec57 6b10 	vmov	r6, r7, d0
 8007b10:	4690      	mov	r8, r2
 8007b12:	f7ff fcd5 	bl	80074c0 <_Balloc>
 8007b16:	4604      	mov	r4, r0
 8007b18:	b930      	cbnz	r0, 8007b28 <__d2b+0x24>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	4b25      	ldr	r3, [pc, #148]	; (8007bb4 <__d2b+0xb0>)
 8007b1e:	4826      	ldr	r0, [pc, #152]	; (8007bb8 <__d2b+0xb4>)
 8007b20:	f240 310a 	movw	r1, #778	; 0x30a
 8007b24:	f000 fa5e 	bl	8007fe4 <__assert_func>
 8007b28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007b2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b30:	bb35      	cbnz	r5, 8007b80 <__d2b+0x7c>
 8007b32:	2e00      	cmp	r6, #0
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	d028      	beq.n	8007b8a <__d2b+0x86>
 8007b38:	4668      	mov	r0, sp
 8007b3a:	9600      	str	r6, [sp, #0]
 8007b3c:	f7ff fd8c 	bl	8007658 <__lo0bits>
 8007b40:	9900      	ldr	r1, [sp, #0]
 8007b42:	b300      	cbz	r0, 8007b86 <__d2b+0x82>
 8007b44:	9a01      	ldr	r2, [sp, #4]
 8007b46:	f1c0 0320 	rsb	r3, r0, #32
 8007b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	40c2      	lsrs	r2, r0
 8007b52:	6163      	str	r3, [r4, #20]
 8007b54:	9201      	str	r2, [sp, #4]
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	61a3      	str	r3, [r4, #24]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bf14      	ite	ne
 8007b5e:	2202      	movne	r2, #2
 8007b60:	2201      	moveq	r2, #1
 8007b62:	6122      	str	r2, [r4, #16]
 8007b64:	b1d5      	cbz	r5, 8007b9c <__d2b+0x98>
 8007b66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b6a:	4405      	add	r5, r0
 8007b6c:	f8c9 5000 	str.w	r5, [r9]
 8007b70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b74:	f8c8 0000 	str.w	r0, [r8]
 8007b78:	4620      	mov	r0, r4
 8007b7a:	b003      	add	sp, #12
 8007b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b84:	e7d5      	b.n	8007b32 <__d2b+0x2e>
 8007b86:	6161      	str	r1, [r4, #20]
 8007b88:	e7e5      	b.n	8007b56 <__d2b+0x52>
 8007b8a:	a801      	add	r0, sp, #4
 8007b8c:	f7ff fd64 	bl	8007658 <__lo0bits>
 8007b90:	9b01      	ldr	r3, [sp, #4]
 8007b92:	6163      	str	r3, [r4, #20]
 8007b94:	2201      	movs	r2, #1
 8007b96:	6122      	str	r2, [r4, #16]
 8007b98:	3020      	adds	r0, #32
 8007b9a:	e7e3      	b.n	8007b64 <__d2b+0x60>
 8007b9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ba0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ba4:	f8c9 0000 	str.w	r0, [r9]
 8007ba8:	6918      	ldr	r0, [r3, #16]
 8007baa:	f7ff fd35 	bl	8007618 <__hi0bits>
 8007bae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bb2:	e7df      	b.n	8007b74 <__d2b+0x70>
 8007bb4:	08008410 	.word	0x08008410
 8007bb8:	08008421 	.word	0x08008421

08007bbc <_calloc_r>:
 8007bbc:	b513      	push	{r0, r1, r4, lr}
 8007bbe:	434a      	muls	r2, r1
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	9201      	str	r2, [sp, #4]
 8007bc4:	f7fd fd88 	bl	80056d8 <_malloc_r>
 8007bc8:	4604      	mov	r4, r0
 8007bca:	b118      	cbz	r0, 8007bd4 <_calloc_r+0x18>
 8007bcc:	9a01      	ldr	r2, [sp, #4]
 8007bce:	2100      	movs	r1, #0
 8007bd0:	f7fd fd79 	bl	80056c6 <memset>
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	b002      	add	sp, #8
 8007bd8:	bd10      	pop	{r4, pc}
	...

08007bdc <_free_r>:
 8007bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bde:	2900      	cmp	r1, #0
 8007be0:	d048      	beq.n	8007c74 <_free_r+0x98>
 8007be2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007be6:	9001      	str	r0, [sp, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f1a1 0404 	sub.w	r4, r1, #4
 8007bee:	bfb8      	it	lt
 8007bf0:	18e4      	addlt	r4, r4, r3
 8007bf2:	f7ff fc59 	bl	80074a8 <__malloc_lock>
 8007bf6:	4a20      	ldr	r2, [pc, #128]	; (8007c78 <_free_r+0x9c>)
 8007bf8:	9801      	ldr	r0, [sp, #4]
 8007bfa:	6813      	ldr	r3, [r2, #0]
 8007bfc:	4615      	mov	r5, r2
 8007bfe:	b933      	cbnz	r3, 8007c0e <_free_r+0x32>
 8007c00:	6063      	str	r3, [r4, #4]
 8007c02:	6014      	str	r4, [r2, #0]
 8007c04:	b003      	add	sp, #12
 8007c06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c0a:	f7ff bc53 	b.w	80074b4 <__malloc_unlock>
 8007c0e:	42a3      	cmp	r3, r4
 8007c10:	d90b      	bls.n	8007c2a <_free_r+0x4e>
 8007c12:	6821      	ldr	r1, [r4, #0]
 8007c14:	1862      	adds	r2, r4, r1
 8007c16:	4293      	cmp	r3, r2
 8007c18:	bf04      	itt	eq
 8007c1a:	681a      	ldreq	r2, [r3, #0]
 8007c1c:	685b      	ldreq	r3, [r3, #4]
 8007c1e:	6063      	str	r3, [r4, #4]
 8007c20:	bf04      	itt	eq
 8007c22:	1852      	addeq	r2, r2, r1
 8007c24:	6022      	streq	r2, [r4, #0]
 8007c26:	602c      	str	r4, [r5, #0]
 8007c28:	e7ec      	b.n	8007c04 <_free_r+0x28>
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	b10b      	cbz	r3, 8007c34 <_free_r+0x58>
 8007c30:	42a3      	cmp	r3, r4
 8007c32:	d9fa      	bls.n	8007c2a <_free_r+0x4e>
 8007c34:	6811      	ldr	r1, [r2, #0]
 8007c36:	1855      	adds	r5, r2, r1
 8007c38:	42a5      	cmp	r5, r4
 8007c3a:	d10b      	bne.n	8007c54 <_free_r+0x78>
 8007c3c:	6824      	ldr	r4, [r4, #0]
 8007c3e:	4421      	add	r1, r4
 8007c40:	1854      	adds	r4, r2, r1
 8007c42:	42a3      	cmp	r3, r4
 8007c44:	6011      	str	r1, [r2, #0]
 8007c46:	d1dd      	bne.n	8007c04 <_free_r+0x28>
 8007c48:	681c      	ldr	r4, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	6053      	str	r3, [r2, #4]
 8007c4e:	4421      	add	r1, r4
 8007c50:	6011      	str	r1, [r2, #0]
 8007c52:	e7d7      	b.n	8007c04 <_free_r+0x28>
 8007c54:	d902      	bls.n	8007c5c <_free_r+0x80>
 8007c56:	230c      	movs	r3, #12
 8007c58:	6003      	str	r3, [r0, #0]
 8007c5a:	e7d3      	b.n	8007c04 <_free_r+0x28>
 8007c5c:	6825      	ldr	r5, [r4, #0]
 8007c5e:	1961      	adds	r1, r4, r5
 8007c60:	428b      	cmp	r3, r1
 8007c62:	bf04      	itt	eq
 8007c64:	6819      	ldreq	r1, [r3, #0]
 8007c66:	685b      	ldreq	r3, [r3, #4]
 8007c68:	6063      	str	r3, [r4, #4]
 8007c6a:	bf04      	itt	eq
 8007c6c:	1949      	addeq	r1, r1, r5
 8007c6e:	6021      	streq	r1, [r4, #0]
 8007c70:	6054      	str	r4, [r2, #4]
 8007c72:	e7c7      	b.n	8007c04 <_free_r+0x28>
 8007c74:	b003      	add	sp, #12
 8007c76:	bd30      	pop	{r4, r5, pc}
 8007c78:	200006dc 	.word	0x200006dc

08007c7c <__sfputc_r>:
 8007c7c:	6893      	ldr	r3, [r2, #8]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	b410      	push	{r4}
 8007c84:	6093      	str	r3, [r2, #8]
 8007c86:	da08      	bge.n	8007c9a <__sfputc_r+0x1e>
 8007c88:	6994      	ldr	r4, [r2, #24]
 8007c8a:	42a3      	cmp	r3, r4
 8007c8c:	db01      	blt.n	8007c92 <__sfputc_r+0x16>
 8007c8e:	290a      	cmp	r1, #10
 8007c90:	d103      	bne.n	8007c9a <__sfputc_r+0x1e>
 8007c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c96:	f7fe bb69 	b.w	800636c <__swbuf_r>
 8007c9a:	6813      	ldr	r3, [r2, #0]
 8007c9c:	1c58      	adds	r0, r3, #1
 8007c9e:	6010      	str	r0, [r2, #0]
 8007ca0:	7019      	strb	r1, [r3, #0]
 8007ca2:	4608      	mov	r0, r1
 8007ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <__sfputs_r>:
 8007caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cac:	4606      	mov	r6, r0
 8007cae:	460f      	mov	r7, r1
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	18d5      	adds	r5, r2, r3
 8007cb4:	42ac      	cmp	r4, r5
 8007cb6:	d101      	bne.n	8007cbc <__sfputs_r+0x12>
 8007cb8:	2000      	movs	r0, #0
 8007cba:	e007      	b.n	8007ccc <__sfputs_r+0x22>
 8007cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cc0:	463a      	mov	r2, r7
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f7ff ffda 	bl	8007c7c <__sfputc_r>
 8007cc8:	1c43      	adds	r3, r0, #1
 8007cca:	d1f3      	bne.n	8007cb4 <__sfputs_r+0xa>
 8007ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cd0 <_vfiprintf_r>:
 8007cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd4:	460d      	mov	r5, r1
 8007cd6:	b09d      	sub	sp, #116	; 0x74
 8007cd8:	4614      	mov	r4, r2
 8007cda:	4698      	mov	r8, r3
 8007cdc:	4606      	mov	r6, r0
 8007cde:	b118      	cbz	r0, 8007ce8 <_vfiprintf_r+0x18>
 8007ce0:	6983      	ldr	r3, [r0, #24]
 8007ce2:	b90b      	cbnz	r3, 8007ce8 <_vfiprintf_r+0x18>
 8007ce4:	f7fd fc1c 	bl	8005520 <__sinit>
 8007ce8:	4b89      	ldr	r3, [pc, #548]	; (8007f10 <_vfiprintf_r+0x240>)
 8007cea:	429d      	cmp	r5, r3
 8007cec:	d11b      	bne.n	8007d26 <_vfiprintf_r+0x56>
 8007cee:	6875      	ldr	r5, [r6, #4]
 8007cf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cf2:	07d9      	lsls	r1, r3, #31
 8007cf4:	d405      	bmi.n	8007d02 <_vfiprintf_r+0x32>
 8007cf6:	89ab      	ldrh	r3, [r5, #12]
 8007cf8:	059a      	lsls	r2, r3, #22
 8007cfa:	d402      	bmi.n	8007d02 <_vfiprintf_r+0x32>
 8007cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cfe:	f7fd fcd2 	bl	80056a6 <__retarget_lock_acquire_recursive>
 8007d02:	89ab      	ldrh	r3, [r5, #12]
 8007d04:	071b      	lsls	r3, r3, #28
 8007d06:	d501      	bpl.n	8007d0c <_vfiprintf_r+0x3c>
 8007d08:	692b      	ldr	r3, [r5, #16]
 8007d0a:	b9eb      	cbnz	r3, 8007d48 <_vfiprintf_r+0x78>
 8007d0c:	4629      	mov	r1, r5
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f7fe fb90 	bl	8006434 <__swsetup_r>
 8007d14:	b1c0      	cbz	r0, 8007d48 <_vfiprintf_r+0x78>
 8007d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d18:	07dc      	lsls	r4, r3, #31
 8007d1a:	d50e      	bpl.n	8007d3a <_vfiprintf_r+0x6a>
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	b01d      	add	sp, #116	; 0x74
 8007d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d26:	4b7b      	ldr	r3, [pc, #492]	; (8007f14 <_vfiprintf_r+0x244>)
 8007d28:	429d      	cmp	r5, r3
 8007d2a:	d101      	bne.n	8007d30 <_vfiprintf_r+0x60>
 8007d2c:	68b5      	ldr	r5, [r6, #8]
 8007d2e:	e7df      	b.n	8007cf0 <_vfiprintf_r+0x20>
 8007d30:	4b79      	ldr	r3, [pc, #484]	; (8007f18 <_vfiprintf_r+0x248>)
 8007d32:	429d      	cmp	r5, r3
 8007d34:	bf08      	it	eq
 8007d36:	68f5      	ldreq	r5, [r6, #12]
 8007d38:	e7da      	b.n	8007cf0 <_vfiprintf_r+0x20>
 8007d3a:	89ab      	ldrh	r3, [r5, #12]
 8007d3c:	0598      	lsls	r0, r3, #22
 8007d3e:	d4ed      	bmi.n	8007d1c <_vfiprintf_r+0x4c>
 8007d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d42:	f7fd fcb1 	bl	80056a8 <__retarget_lock_release_recursive>
 8007d46:	e7e9      	b.n	8007d1c <_vfiprintf_r+0x4c>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d4c:	2320      	movs	r3, #32
 8007d4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d52:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d56:	2330      	movs	r3, #48	; 0x30
 8007d58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f1c <_vfiprintf_r+0x24c>
 8007d5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d60:	f04f 0901 	mov.w	r9, #1
 8007d64:	4623      	mov	r3, r4
 8007d66:	469a      	mov	sl, r3
 8007d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d6c:	b10a      	cbz	r2, 8007d72 <_vfiprintf_r+0xa2>
 8007d6e:	2a25      	cmp	r2, #37	; 0x25
 8007d70:	d1f9      	bne.n	8007d66 <_vfiprintf_r+0x96>
 8007d72:	ebba 0b04 	subs.w	fp, sl, r4
 8007d76:	d00b      	beq.n	8007d90 <_vfiprintf_r+0xc0>
 8007d78:	465b      	mov	r3, fp
 8007d7a:	4622      	mov	r2, r4
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	4630      	mov	r0, r6
 8007d80:	f7ff ff93 	bl	8007caa <__sfputs_r>
 8007d84:	3001      	adds	r0, #1
 8007d86:	f000 80aa 	beq.w	8007ede <_vfiprintf_r+0x20e>
 8007d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d8c:	445a      	add	r2, fp
 8007d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8007d90:	f89a 3000 	ldrb.w	r3, [sl]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 80a2 	beq.w	8007ede <_vfiprintf_r+0x20e>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007da4:	f10a 0a01 	add.w	sl, sl, #1
 8007da8:	9304      	str	r3, [sp, #16]
 8007daa:	9307      	str	r3, [sp, #28]
 8007dac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007db0:	931a      	str	r3, [sp, #104]	; 0x68
 8007db2:	4654      	mov	r4, sl
 8007db4:	2205      	movs	r2, #5
 8007db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dba:	4858      	ldr	r0, [pc, #352]	; (8007f1c <_vfiprintf_r+0x24c>)
 8007dbc:	f7f8 fa18 	bl	80001f0 <memchr>
 8007dc0:	9a04      	ldr	r2, [sp, #16]
 8007dc2:	b9d8      	cbnz	r0, 8007dfc <_vfiprintf_r+0x12c>
 8007dc4:	06d1      	lsls	r1, r2, #27
 8007dc6:	bf44      	itt	mi
 8007dc8:	2320      	movmi	r3, #32
 8007dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dce:	0713      	lsls	r3, r2, #28
 8007dd0:	bf44      	itt	mi
 8007dd2:	232b      	movmi	r3, #43	; 0x2b
 8007dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8007ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8007dde:	d015      	beq.n	8007e0c <_vfiprintf_r+0x13c>
 8007de0:	9a07      	ldr	r2, [sp, #28]
 8007de2:	4654      	mov	r4, sl
 8007de4:	2000      	movs	r0, #0
 8007de6:	f04f 0c0a 	mov.w	ip, #10
 8007dea:	4621      	mov	r1, r4
 8007dec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007df0:	3b30      	subs	r3, #48	; 0x30
 8007df2:	2b09      	cmp	r3, #9
 8007df4:	d94e      	bls.n	8007e94 <_vfiprintf_r+0x1c4>
 8007df6:	b1b0      	cbz	r0, 8007e26 <_vfiprintf_r+0x156>
 8007df8:	9207      	str	r2, [sp, #28]
 8007dfa:	e014      	b.n	8007e26 <_vfiprintf_r+0x156>
 8007dfc:	eba0 0308 	sub.w	r3, r0, r8
 8007e00:	fa09 f303 	lsl.w	r3, r9, r3
 8007e04:	4313      	orrs	r3, r2
 8007e06:	9304      	str	r3, [sp, #16]
 8007e08:	46a2      	mov	sl, r4
 8007e0a:	e7d2      	b.n	8007db2 <_vfiprintf_r+0xe2>
 8007e0c:	9b03      	ldr	r3, [sp, #12]
 8007e0e:	1d19      	adds	r1, r3, #4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	9103      	str	r1, [sp, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	bfbb      	ittet	lt
 8007e18:	425b      	neglt	r3, r3
 8007e1a:	f042 0202 	orrlt.w	r2, r2, #2
 8007e1e:	9307      	strge	r3, [sp, #28]
 8007e20:	9307      	strlt	r3, [sp, #28]
 8007e22:	bfb8      	it	lt
 8007e24:	9204      	strlt	r2, [sp, #16]
 8007e26:	7823      	ldrb	r3, [r4, #0]
 8007e28:	2b2e      	cmp	r3, #46	; 0x2e
 8007e2a:	d10c      	bne.n	8007e46 <_vfiprintf_r+0x176>
 8007e2c:	7863      	ldrb	r3, [r4, #1]
 8007e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e30:	d135      	bne.n	8007e9e <_vfiprintf_r+0x1ce>
 8007e32:	9b03      	ldr	r3, [sp, #12]
 8007e34:	1d1a      	adds	r2, r3, #4
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	9203      	str	r2, [sp, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	bfb8      	it	lt
 8007e3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e42:	3402      	adds	r4, #2
 8007e44:	9305      	str	r3, [sp, #20]
 8007e46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f2c <_vfiprintf_r+0x25c>
 8007e4a:	7821      	ldrb	r1, [r4, #0]
 8007e4c:	2203      	movs	r2, #3
 8007e4e:	4650      	mov	r0, sl
 8007e50:	f7f8 f9ce 	bl	80001f0 <memchr>
 8007e54:	b140      	cbz	r0, 8007e68 <_vfiprintf_r+0x198>
 8007e56:	2340      	movs	r3, #64	; 0x40
 8007e58:	eba0 000a 	sub.w	r0, r0, sl
 8007e5c:	fa03 f000 	lsl.w	r0, r3, r0
 8007e60:	9b04      	ldr	r3, [sp, #16]
 8007e62:	4303      	orrs	r3, r0
 8007e64:	3401      	adds	r4, #1
 8007e66:	9304      	str	r3, [sp, #16]
 8007e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e6c:	482c      	ldr	r0, [pc, #176]	; (8007f20 <_vfiprintf_r+0x250>)
 8007e6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e72:	2206      	movs	r2, #6
 8007e74:	f7f8 f9bc 	bl	80001f0 <memchr>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d03f      	beq.n	8007efc <_vfiprintf_r+0x22c>
 8007e7c:	4b29      	ldr	r3, [pc, #164]	; (8007f24 <_vfiprintf_r+0x254>)
 8007e7e:	bb1b      	cbnz	r3, 8007ec8 <_vfiprintf_r+0x1f8>
 8007e80:	9b03      	ldr	r3, [sp, #12]
 8007e82:	3307      	adds	r3, #7
 8007e84:	f023 0307 	bic.w	r3, r3, #7
 8007e88:	3308      	adds	r3, #8
 8007e8a:	9303      	str	r3, [sp, #12]
 8007e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e8e:	443b      	add	r3, r7
 8007e90:	9309      	str	r3, [sp, #36]	; 0x24
 8007e92:	e767      	b.n	8007d64 <_vfiprintf_r+0x94>
 8007e94:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e98:	460c      	mov	r4, r1
 8007e9a:	2001      	movs	r0, #1
 8007e9c:	e7a5      	b.n	8007dea <_vfiprintf_r+0x11a>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	3401      	adds	r4, #1
 8007ea2:	9305      	str	r3, [sp, #20]
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	f04f 0c0a 	mov.w	ip, #10
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eb0:	3a30      	subs	r2, #48	; 0x30
 8007eb2:	2a09      	cmp	r2, #9
 8007eb4:	d903      	bls.n	8007ebe <_vfiprintf_r+0x1ee>
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0c5      	beq.n	8007e46 <_vfiprintf_r+0x176>
 8007eba:	9105      	str	r1, [sp, #20]
 8007ebc:	e7c3      	b.n	8007e46 <_vfiprintf_r+0x176>
 8007ebe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e7f0      	b.n	8007eaa <_vfiprintf_r+0x1da>
 8007ec8:	ab03      	add	r3, sp, #12
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	462a      	mov	r2, r5
 8007ece:	4b16      	ldr	r3, [pc, #88]	; (8007f28 <_vfiprintf_r+0x258>)
 8007ed0:	a904      	add	r1, sp, #16
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f7fd fcfa 	bl	80058cc <_printf_float>
 8007ed8:	4607      	mov	r7, r0
 8007eda:	1c78      	adds	r0, r7, #1
 8007edc:	d1d6      	bne.n	8007e8c <_vfiprintf_r+0x1bc>
 8007ede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ee0:	07d9      	lsls	r1, r3, #31
 8007ee2:	d405      	bmi.n	8007ef0 <_vfiprintf_r+0x220>
 8007ee4:	89ab      	ldrh	r3, [r5, #12]
 8007ee6:	059a      	lsls	r2, r3, #22
 8007ee8:	d402      	bmi.n	8007ef0 <_vfiprintf_r+0x220>
 8007eea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eec:	f7fd fbdc 	bl	80056a8 <__retarget_lock_release_recursive>
 8007ef0:	89ab      	ldrh	r3, [r5, #12]
 8007ef2:	065b      	lsls	r3, r3, #25
 8007ef4:	f53f af12 	bmi.w	8007d1c <_vfiprintf_r+0x4c>
 8007ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007efa:	e711      	b.n	8007d20 <_vfiprintf_r+0x50>
 8007efc:	ab03      	add	r3, sp, #12
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	462a      	mov	r2, r5
 8007f02:	4b09      	ldr	r3, [pc, #36]	; (8007f28 <_vfiprintf_r+0x258>)
 8007f04:	a904      	add	r1, sp, #16
 8007f06:	4630      	mov	r0, r6
 8007f08:	f7fd ff84 	bl	8005e14 <_printf_i>
 8007f0c:	e7e4      	b.n	8007ed8 <_vfiprintf_r+0x208>
 8007f0e:	bf00      	nop
 8007f10:	08008214 	.word	0x08008214
 8007f14:	08008234 	.word	0x08008234
 8007f18:	080081f4 	.word	0x080081f4
 8007f1c:	08008584 	.word	0x08008584
 8007f20:	0800858e 	.word	0x0800858e
 8007f24:	080058cd 	.word	0x080058cd
 8007f28:	08007cab 	.word	0x08007cab
 8007f2c:	0800858a 	.word	0x0800858a

08007f30 <_putc_r>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	460d      	mov	r5, r1
 8007f34:	4614      	mov	r4, r2
 8007f36:	4606      	mov	r6, r0
 8007f38:	b118      	cbz	r0, 8007f42 <_putc_r+0x12>
 8007f3a:	6983      	ldr	r3, [r0, #24]
 8007f3c:	b90b      	cbnz	r3, 8007f42 <_putc_r+0x12>
 8007f3e:	f7fd faef 	bl	8005520 <__sinit>
 8007f42:	4b1c      	ldr	r3, [pc, #112]	; (8007fb4 <_putc_r+0x84>)
 8007f44:	429c      	cmp	r4, r3
 8007f46:	d124      	bne.n	8007f92 <_putc_r+0x62>
 8007f48:	6874      	ldr	r4, [r6, #4]
 8007f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f4c:	07d8      	lsls	r0, r3, #31
 8007f4e:	d405      	bmi.n	8007f5c <_putc_r+0x2c>
 8007f50:	89a3      	ldrh	r3, [r4, #12]
 8007f52:	0599      	lsls	r1, r3, #22
 8007f54:	d402      	bmi.n	8007f5c <_putc_r+0x2c>
 8007f56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f58:	f7fd fba5 	bl	80056a6 <__retarget_lock_acquire_recursive>
 8007f5c:	68a3      	ldr	r3, [r4, #8]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	60a3      	str	r3, [r4, #8]
 8007f64:	da05      	bge.n	8007f72 <_putc_r+0x42>
 8007f66:	69a2      	ldr	r2, [r4, #24]
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	db1c      	blt.n	8007fa6 <_putc_r+0x76>
 8007f6c:	b2eb      	uxtb	r3, r5
 8007f6e:	2b0a      	cmp	r3, #10
 8007f70:	d019      	beq.n	8007fa6 <_putc_r+0x76>
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	1c5a      	adds	r2, r3, #1
 8007f76:	6022      	str	r2, [r4, #0]
 8007f78:	701d      	strb	r5, [r3, #0]
 8007f7a:	b2ed      	uxtb	r5, r5
 8007f7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f7e:	07da      	lsls	r2, r3, #31
 8007f80:	d405      	bmi.n	8007f8e <_putc_r+0x5e>
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	059b      	lsls	r3, r3, #22
 8007f86:	d402      	bmi.n	8007f8e <_putc_r+0x5e>
 8007f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f8a:	f7fd fb8d 	bl	80056a8 <__retarget_lock_release_recursive>
 8007f8e:	4628      	mov	r0, r5
 8007f90:	bd70      	pop	{r4, r5, r6, pc}
 8007f92:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <_putc_r+0x88>)
 8007f94:	429c      	cmp	r4, r3
 8007f96:	d101      	bne.n	8007f9c <_putc_r+0x6c>
 8007f98:	68b4      	ldr	r4, [r6, #8]
 8007f9a:	e7d6      	b.n	8007f4a <_putc_r+0x1a>
 8007f9c:	4b07      	ldr	r3, [pc, #28]	; (8007fbc <_putc_r+0x8c>)
 8007f9e:	429c      	cmp	r4, r3
 8007fa0:	bf08      	it	eq
 8007fa2:	68f4      	ldreq	r4, [r6, #12]
 8007fa4:	e7d1      	b.n	8007f4a <_putc_r+0x1a>
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	4622      	mov	r2, r4
 8007faa:	4630      	mov	r0, r6
 8007fac:	f7fe f9de 	bl	800636c <__swbuf_r>
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	e7e3      	b.n	8007f7c <_putc_r+0x4c>
 8007fb4:	08008214 	.word	0x08008214
 8007fb8:	08008234 	.word	0x08008234
 8007fbc:	080081f4 	.word	0x080081f4

08007fc0 <_read_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4d07      	ldr	r5, [pc, #28]	; (8007fe0 <_read_r+0x20>)
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	4608      	mov	r0, r1
 8007fc8:	4611      	mov	r1, r2
 8007fca:	2200      	movs	r2, #0
 8007fcc:	602a      	str	r2, [r5, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f7f9 fee4 	bl	8001d9c <_read>
 8007fd4:	1c43      	adds	r3, r0, #1
 8007fd6:	d102      	bne.n	8007fde <_read_r+0x1e>
 8007fd8:	682b      	ldr	r3, [r5, #0]
 8007fda:	b103      	cbz	r3, 8007fde <_read_r+0x1e>
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	bd38      	pop	{r3, r4, r5, pc}
 8007fe0:	20000c94 	.word	0x20000c94

08007fe4 <__assert_func>:
 8007fe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007fe6:	4614      	mov	r4, r2
 8007fe8:	461a      	mov	r2, r3
 8007fea:	4b09      	ldr	r3, [pc, #36]	; (8008010 <__assert_func+0x2c>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4605      	mov	r5, r0
 8007ff0:	68d8      	ldr	r0, [r3, #12]
 8007ff2:	b14c      	cbz	r4, 8008008 <__assert_func+0x24>
 8007ff4:	4b07      	ldr	r3, [pc, #28]	; (8008014 <__assert_func+0x30>)
 8007ff6:	9100      	str	r1, [sp, #0]
 8007ff8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ffc:	4906      	ldr	r1, [pc, #24]	; (8008018 <__assert_func+0x34>)
 8007ffe:	462b      	mov	r3, r5
 8008000:	f000 f80e 	bl	8008020 <fiprintf>
 8008004:	f000 f85f 	bl	80080c6 <abort>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__assert_func+0x38>)
 800800a:	461c      	mov	r4, r3
 800800c:	e7f3      	b.n	8007ff6 <__assert_func+0x12>
 800800e:	bf00      	nop
 8008010:	20000054 	.word	0x20000054
 8008014:	08008595 	.word	0x08008595
 8008018:	080085a2 	.word	0x080085a2
 800801c:	080085d0 	.word	0x080085d0

08008020 <fiprintf>:
 8008020:	b40e      	push	{r1, r2, r3}
 8008022:	b503      	push	{r0, r1, lr}
 8008024:	4601      	mov	r1, r0
 8008026:	ab03      	add	r3, sp, #12
 8008028:	4805      	ldr	r0, [pc, #20]	; (8008040 <fiprintf+0x20>)
 800802a:	f853 2b04 	ldr.w	r2, [r3], #4
 800802e:	6800      	ldr	r0, [r0, #0]
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	f7ff fe4d 	bl	8007cd0 <_vfiprintf_r>
 8008036:	b002      	add	sp, #8
 8008038:	f85d eb04 	ldr.w	lr, [sp], #4
 800803c:	b003      	add	sp, #12
 800803e:	4770      	bx	lr
 8008040:	20000054 	.word	0x20000054

08008044 <_fstat_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	4d07      	ldr	r5, [pc, #28]	; (8008064 <_fstat_r+0x20>)
 8008048:	2300      	movs	r3, #0
 800804a:	4604      	mov	r4, r0
 800804c:	4608      	mov	r0, r1
 800804e:	4611      	mov	r1, r2
 8008050:	602b      	str	r3, [r5, #0]
 8008052:	f7f9 fee8 	bl	8001e26 <_fstat>
 8008056:	1c43      	adds	r3, r0, #1
 8008058:	d102      	bne.n	8008060 <_fstat_r+0x1c>
 800805a:	682b      	ldr	r3, [r5, #0]
 800805c:	b103      	cbz	r3, 8008060 <_fstat_r+0x1c>
 800805e:	6023      	str	r3, [r4, #0]
 8008060:	bd38      	pop	{r3, r4, r5, pc}
 8008062:	bf00      	nop
 8008064:	20000c94 	.word	0x20000c94

08008068 <_isatty_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4d06      	ldr	r5, [pc, #24]	; (8008084 <_isatty_r+0x1c>)
 800806c:	2300      	movs	r3, #0
 800806e:	4604      	mov	r4, r0
 8008070:	4608      	mov	r0, r1
 8008072:	602b      	str	r3, [r5, #0]
 8008074:	f7f9 fee7 	bl	8001e46 <_isatty>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d102      	bne.n	8008082 <_isatty_r+0x1a>
 800807c:	682b      	ldr	r3, [r5, #0]
 800807e:	b103      	cbz	r3, 8008082 <_isatty_r+0x1a>
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	20000c94 	.word	0x20000c94

08008088 <__ascii_mbtowc>:
 8008088:	b082      	sub	sp, #8
 800808a:	b901      	cbnz	r1, 800808e <__ascii_mbtowc+0x6>
 800808c:	a901      	add	r1, sp, #4
 800808e:	b142      	cbz	r2, 80080a2 <__ascii_mbtowc+0x1a>
 8008090:	b14b      	cbz	r3, 80080a6 <__ascii_mbtowc+0x1e>
 8008092:	7813      	ldrb	r3, [r2, #0]
 8008094:	600b      	str	r3, [r1, #0]
 8008096:	7812      	ldrb	r2, [r2, #0]
 8008098:	1e10      	subs	r0, r2, #0
 800809a:	bf18      	it	ne
 800809c:	2001      	movne	r0, #1
 800809e:	b002      	add	sp, #8
 80080a0:	4770      	bx	lr
 80080a2:	4610      	mov	r0, r2
 80080a4:	e7fb      	b.n	800809e <__ascii_mbtowc+0x16>
 80080a6:	f06f 0001 	mvn.w	r0, #1
 80080aa:	e7f8      	b.n	800809e <__ascii_mbtowc+0x16>

080080ac <__ascii_wctomb>:
 80080ac:	b149      	cbz	r1, 80080c2 <__ascii_wctomb+0x16>
 80080ae:	2aff      	cmp	r2, #255	; 0xff
 80080b0:	bf85      	ittet	hi
 80080b2:	238a      	movhi	r3, #138	; 0x8a
 80080b4:	6003      	strhi	r3, [r0, #0]
 80080b6:	700a      	strbls	r2, [r1, #0]
 80080b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80080bc:	bf98      	it	ls
 80080be:	2001      	movls	r0, #1
 80080c0:	4770      	bx	lr
 80080c2:	4608      	mov	r0, r1
 80080c4:	4770      	bx	lr

080080c6 <abort>:
 80080c6:	b508      	push	{r3, lr}
 80080c8:	2006      	movs	r0, #6
 80080ca:	f000 f82b 	bl	8008124 <raise>
 80080ce:	2001      	movs	r0, #1
 80080d0:	f7f9 fe5a 	bl	8001d88 <_exit>

080080d4 <_raise_r>:
 80080d4:	291f      	cmp	r1, #31
 80080d6:	b538      	push	{r3, r4, r5, lr}
 80080d8:	4604      	mov	r4, r0
 80080da:	460d      	mov	r5, r1
 80080dc:	d904      	bls.n	80080e8 <_raise_r+0x14>
 80080de:	2316      	movs	r3, #22
 80080e0:	6003      	str	r3, [r0, #0]
 80080e2:	f04f 30ff 	mov.w	r0, #4294967295
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080ea:	b112      	cbz	r2, 80080f2 <_raise_r+0x1e>
 80080ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080f0:	b94b      	cbnz	r3, 8008106 <_raise_r+0x32>
 80080f2:	4620      	mov	r0, r4
 80080f4:	f000 f830 	bl	8008158 <_getpid_r>
 80080f8:	462a      	mov	r2, r5
 80080fa:	4601      	mov	r1, r0
 80080fc:	4620      	mov	r0, r4
 80080fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008102:	f000 b817 	b.w	8008134 <_kill_r>
 8008106:	2b01      	cmp	r3, #1
 8008108:	d00a      	beq.n	8008120 <_raise_r+0x4c>
 800810a:	1c59      	adds	r1, r3, #1
 800810c:	d103      	bne.n	8008116 <_raise_r+0x42>
 800810e:	2316      	movs	r3, #22
 8008110:	6003      	str	r3, [r0, #0]
 8008112:	2001      	movs	r0, #1
 8008114:	e7e7      	b.n	80080e6 <_raise_r+0x12>
 8008116:	2400      	movs	r4, #0
 8008118:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800811c:	4628      	mov	r0, r5
 800811e:	4798      	blx	r3
 8008120:	2000      	movs	r0, #0
 8008122:	e7e0      	b.n	80080e6 <_raise_r+0x12>

08008124 <raise>:
 8008124:	4b02      	ldr	r3, [pc, #8]	; (8008130 <raise+0xc>)
 8008126:	4601      	mov	r1, r0
 8008128:	6818      	ldr	r0, [r3, #0]
 800812a:	f7ff bfd3 	b.w	80080d4 <_raise_r>
 800812e:	bf00      	nop
 8008130:	20000054 	.word	0x20000054

08008134 <_kill_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	4d07      	ldr	r5, [pc, #28]	; (8008154 <_kill_r+0x20>)
 8008138:	2300      	movs	r3, #0
 800813a:	4604      	mov	r4, r0
 800813c:	4608      	mov	r0, r1
 800813e:	4611      	mov	r1, r2
 8008140:	602b      	str	r3, [r5, #0]
 8008142:	f7f9 fe11 	bl	8001d68 <_kill>
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	d102      	bne.n	8008150 <_kill_r+0x1c>
 800814a:	682b      	ldr	r3, [r5, #0]
 800814c:	b103      	cbz	r3, 8008150 <_kill_r+0x1c>
 800814e:	6023      	str	r3, [r4, #0]
 8008150:	bd38      	pop	{r3, r4, r5, pc}
 8008152:	bf00      	nop
 8008154:	20000c94 	.word	0x20000c94

08008158 <_getpid_r>:
 8008158:	f7f9 bdfe 	b.w	8001d58 <_getpid>

0800815c <_init>:
 800815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815e:	bf00      	nop
 8008160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008162:	bc08      	pop	{r3}
 8008164:	469e      	mov	lr, r3
 8008166:	4770      	bx	lr

08008168 <_fini>:
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	bf00      	nop
 800816c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816e:	bc08      	pop	{r3}
 8008170:	469e      	mov	lr, r3
 8008172:	4770      	bx	lr
