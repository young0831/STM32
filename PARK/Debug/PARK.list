
PARK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bee4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800c088  0800c088  0001c088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c57c  0800c57c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c57c  0800c57c  0001c57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c584  0800c584  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c584  0800c584  0001c584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c588  0800c588  0001c588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c58c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050a8  200001e8  0800c774  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005290  0800c774  00025290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000262e1  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004616  00000000  00000000  000464f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b00  00000000  00000000  0004ab10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001990  00000000  00000000  0004c610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a301  00000000  00000000  0004dfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f05c  00000000  00000000  000682a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e9fb  00000000  00000000  000872fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00125cf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008420  00000000  00000000  00125d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c06c 	.word	0x0800c06c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800c06c 	.word	0x0800c06c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <BMP180_ReadCalibrationCoefficients>:
uint16_t AC4, AC5, AC6;

// 보정 계수 읽기 함수
// I2C 인터페이스를 통해 BMP180의 보정 데이터를 읽어오는 함수
void BMP180_ReadCalibrationCoefficients(I2C_HandleTypeDef *hi2c)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af04      	add	r7, sp, #16
 8000eb6:	6078      	str	r0, [r7, #4]
   // calib_data 배열(22바이트 크기)은 보정 데이터 전체 저장
    uint8_t calib_data[22];
    // BMP180의 보정 데이터 영역(주소 0xAA부터 22바이트)을 읽어옴
    // I2C_MEMADD_SIZE_8BIT는 메모리 주소가 8비트 크기임을 나타내고 HAL_MAX_DELAY는 최대 대기 시간을 의미
    HAL_I2C_Mem_Read(hi2c, BMP180_ADDRESS, BMP180_REG_CALIB_START, I2C_MEMADD_SIZE_8BIT, calib_data, 22, HAL_MAX_DELAY);
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	9302      	str	r3, [sp, #8]
 8000ebe:	2316      	movs	r3, #22
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	22aa      	movs	r2, #170	; 0xaa
 8000ecc:	21ee      	movs	r1, #238	; 0xee
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f002 fa6a 	bl	80033a8 <HAL_I2C_Mem_Read>
    // 보정 데이터는 8비트 단위로 읽어오므로 상우 ㅣ바이트와 하위 바이트를 결합하여 16비트값으로 만듦
    // (calib_data[0] << 8 | calib_data[1])는 첫 번째 16비트 값(AC1)을 만듦
    // 나머지 보정 계수들도 같은 방식으로 계산
    // 부호 있는 값은 (int16_t)로, 부호 없는 값은 (uint16_t)로 캐스팅
    AC1 = (int16_t)(calib_data[0] << 8 | calib_data[1]);
 8000ed4:	7a3b      	ldrb	r3, [r7, #8]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	7a7b      	ldrb	r3, [r7, #9]
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b21a      	sxth	r2, r3
 8000ee2:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <BMP180_ReadCalibrationCoefficients+0xf8>)
 8000ee4:	801a      	strh	r2, [r3, #0]
    AC2 = (int16_t)(calib_data[2] << 8 | calib_data[3]);
 8000ee6:	7abb      	ldrb	r3, [r7, #10]
 8000ee8:	021b      	lsls	r3, r3, #8
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	7afb      	ldrb	r3, [r7, #11]
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b21a      	sxth	r2, r3
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <BMP180_ReadCalibrationCoefficients+0xfc>)
 8000ef6:	801a      	strh	r2, [r3, #0]
    AC3 = (int16_t)(calib_data[4] << 8 | calib_data[5]);
 8000ef8:	7b3b      	ldrb	r3, [r7, #12]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	7b7b      	ldrb	r3, [r7, #13]
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <BMP180_ReadCalibrationCoefficients+0x100>)
 8000f08:	801a      	strh	r2, [r3, #0]
    AC4 = (uint16_t)(calib_data[6] << 8 | calib_data[7]);
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <BMP180_ReadCalibrationCoefficients+0x104>)
 8000f1c:	801a      	strh	r2, [r3, #0]
    AC5 = (uint16_t)(calib_data[8] << 8 | calib_data[9]);
 8000f1e:	7c3b      	ldrb	r3, [r7, #16]
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	b21a      	sxth	r2, r3
 8000f24:	7c7b      	ldrb	r3, [r7, #17]
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <BMP180_ReadCalibrationCoefficients+0x108>)
 8000f30:	801a      	strh	r2, [r3, #0]
    AC6 = (uint16_t)(calib_data[10] << 8 | calib_data[11]);
 8000f32:	7cbb      	ldrb	r3, [r7, #18]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	7cfb      	ldrb	r3, [r7, #19]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <BMP180_ReadCalibrationCoefficients+0x10c>)
 8000f44:	801a      	strh	r2, [r3, #0]
    B1  = (int16_t)(calib_data[12] << 8 | calib_data[13]);
 8000f46:	7d3b      	ldrb	r3, [r7, #20]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	7d7b      	ldrb	r3, [r7, #21]
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <BMP180_ReadCalibrationCoefficients+0x110>)
 8000f56:	801a      	strh	r2, [r3, #0]
    B2  = (int16_t)(calib_data[14] << 8 | calib_data[15]);
 8000f58:	7dbb      	ldrb	r3, [r7, #22]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <BMP180_ReadCalibrationCoefficients+0x114>)
 8000f68:	801a      	strh	r2, [r3, #0]
    MB  = (int16_t)(calib_data[16] << 8 | calib_data[17]);
 8000f6a:	7e3b      	ldrb	r3, [r7, #24]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	7e7b      	ldrb	r3, [r7, #25]
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <BMP180_ReadCalibrationCoefficients+0x118>)
 8000f7a:	801a      	strh	r2, [r3, #0]
    MC  = (int16_t)(calib_data[18] << 8 | calib_data[19]);
 8000f7c:	7ebb      	ldrb	r3, [r7, #26]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	7efb      	ldrb	r3, [r7, #27]
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <BMP180_ReadCalibrationCoefficients+0x11c>)
 8000f8c:	801a      	strh	r2, [r3, #0]
    MD  = (int16_t)(calib_data[20] << 8 | calib_data[21]);
 8000f8e:	7f3b      	ldrb	r3, [r7, #28]
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	b21a      	sxth	r2, r3
 8000f94:	7f7b      	ldrb	r3, [r7, #29]
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <BMP180_ReadCalibrationCoefficients+0x120>)
 8000f9e:	801a      	strh	r2, [r3, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20004bea 	.word	0x20004bea
 8000fac:	20004bf4 	.word	0x20004bf4
 8000fb0:	20004bf6 	.word	0x20004bf6
 8000fb4:	20004bf0 	.word	0x20004bf0
 8000fb8:	20004bee 	.word	0x20004bee
 8000fbc:	20004bec 	.word	0x20004bec
 8000fc0:	20004bfa 	.word	0x20004bfa
 8000fc4:	20004bf8 	.word	0x20004bf8
 8000fc8:	20004bf2 	.word	0x20004bf2
 8000fcc:	20004bfc 	.word	0x20004bfc
 8000fd0:	20004be8 	.word	0x20004be8

08000fd4 <BMP180_ReadRawTemperature>:

// 원시 온도 값 읽기
// 온도 측정을 위해 센서에 명령을 보내고 원시 온도 데이터를 읽어오는 함수
int16_t BMP180_ReadRawTemperature(I2C_HandleTypeDef *hi2c)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af04      	add	r7, sp, #16
 8000fda:	6078      	str	r0, [r7, #4]
   // cmd 변수에 온도 측정 명령어(0x2E)를 저장
    uint8_t cmd = BMP180_CMD_READ_TEMP;
 8000fdc:	232e      	movs	r3, #46	; 0x2e
 8000fde:	73fb      	strb	r3, [r7, #15]
    // BMP180의 제어 레지스터(0xF4)에 온도 측정 명령어 사용
    HAL_I2C_Mem_Write(hi2c, BMP180_ADDRESS, BMP180_REG_CONTROL, I2C_MEMADD_SIZE_8BIT, &cmd, 1, HAL_MAX_DELAY);
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	f107 030f 	add.w	r3, r7, #15
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	22f4      	movs	r2, #244	; 0xf4
 8000ff4:	21ee      	movs	r1, #238	; 0xee
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f002 f8dc 	bl	80031b4 <HAL_I2C_Mem_Write>
    // 센서가 온도 측정을 완료할 때까지 대기 시간
    HAL_Delay(5);
 8000ffc:	2005      	movs	r0, #5
 8000ffe:	f001 fc2d 	bl	800285c <HAL_Delay>
    // 0xF6 주소에서 2바이트를 읽어와 원시 온도 데이터(raw 배열) 저장
    uint8_t raw[2];
    HAL_I2C_Mem_Read(hi2c, BMP180_ADDRESS, BMP180_REG_OUT_MSB, I2C_MEMADD_SIZE_8BIT, raw, 2, HAL_MAX_DELAY);
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2302      	movs	r3, #2
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	22f6      	movs	r2, #246	; 0xf6
 8001016:	21ee      	movs	r1, #238	; 0xee
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f002 f9c5 	bl	80033a8 <HAL_I2C_Mem_Read>
    // 상위 바이트와 하위 바이트를 결합하여 16비트 정수형 온도 값을 반환
    return (int16_t)((raw[0] << 8) | raw[1]);
 800101e:	7b3b      	ldrb	r3, [r7, #12]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	7b7b      	ldrb	r3, [r7, #13]
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21b      	sxth	r3, r3
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <BMP180_ReadRawPressure>:

// 원시 기압 값 읽기 (oss: oversampling setting, 0~3)
// 기압 측정을 위해 원기 기압 데이터를 읽어오는 함수
int32_t BMP180_ReadRawPressure(I2C_HandleTypeDef *hi2c, uint8_t oss)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af04      	add	r7, sp, #16
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	70fb      	strb	r3, [r7, #3]
   // oss는 oversampling setting으로 0~3 사이의 값을 사용
   // 기압 명령어에 oversampling 지트를 추가하기 위해 (oss << 6)을 더함
    uint8_t cmd = BMP180_CMD_READ_PRESS + (oss << 6);
 8001040:	78fb      	ldrb	r3, [r7, #3]
 8001042:	019b      	lsls	r3, r3, #6
 8001044:	b2db      	uxtb	r3, r3
 8001046:	3334      	adds	r3, #52	; 0x34
 8001048:	b2db      	uxtb	r3, r3
 800104a:	72fb      	strb	r3, [r7, #11]
    // 제어 레지스터 (0xF4)에 기압 측정 명령어 사용
    HAL_I2C_Mem_Write(hi2c, BMP180_ADDRESS, BMP180_REG_CONTROL, I2C_MEMADD_SIZE_8BIT, &cmd, 1, HAL_MAX_DELAY);
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2301      	movs	r3, #1
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	f107 030b 	add.w	r3, r7, #11
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	22f4      	movs	r2, #244	; 0xf4
 8001060:	21ee      	movs	r1, #238	; 0xee
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f002 f8a6 	bl	80031b4 <HAL_I2C_Mem_Write>
    // oversampling 설정에 따라 측정 완료까지 대기해야 하는 시간이 달라짐
    // oss가 0이면 5ms, 1이면 8ms, 2이면 14ms, 3이면 26ms 대기
    // 잘못된 값이 들어올 경우 기본적으로 5ms 대기
    switch(oss)
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d81a      	bhi.n	80010a4 <BMP180_ReadRawPressure+0x70>
 800106e:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <BMP180_ReadRawPressure+0x40>)
 8001070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001074:	08001085 	.word	0x08001085
 8001078:	0800108d 	.word	0x0800108d
 800107c:	08001095 	.word	0x08001095
 8001080:	0800109d 	.word	0x0800109d
    {
        case 0: HAL_Delay(5);  break;
 8001084:	2005      	movs	r0, #5
 8001086:	f001 fbe9 	bl	800285c <HAL_Delay>
 800108a:	e00f      	b.n	80010ac <BMP180_ReadRawPressure+0x78>
        case 1: HAL_Delay(8);  break;
 800108c:	2008      	movs	r0, #8
 800108e:	f001 fbe5 	bl	800285c <HAL_Delay>
 8001092:	e00b      	b.n	80010ac <BMP180_ReadRawPressure+0x78>
        case 2: HAL_Delay(14); break;
 8001094:	200e      	movs	r0, #14
 8001096:	f001 fbe1 	bl	800285c <HAL_Delay>
 800109a:	e007      	b.n	80010ac <BMP180_ReadRawPressure+0x78>
        case 3: HAL_Delay(26); break;
 800109c:	201a      	movs	r0, #26
 800109e:	f001 fbdd 	bl	800285c <HAL_Delay>
 80010a2:	e003      	b.n	80010ac <BMP180_ReadRawPressure+0x78>
        default: HAL_Delay(5); break;
 80010a4:	2005      	movs	r0, #5
 80010a6:	f001 fbd9 	bl	800285c <HAL_Delay>
 80010aa:	bf00      	nop
    }
    //0xF6 주소에서 3바이트를 읽어옴, 이 데이터는 기압 측정의 결과를 포함
    uint8_t raw[3];
    HAL_I2C_Mem_Read(hi2c, BMP180_ADDRESS, BMP180_REG_OUT_MSB, I2C_MEMADD_SIZE_8BIT, raw, 3, HAL_MAX_DELAY);
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	2303      	movs	r3, #3
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2301      	movs	r3, #1
 80010be:	22f6      	movs	r2, #246	; 0xf6
 80010c0:	21ee      	movs	r1, #238	; 0xee
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f002 f970 	bl	80033a8 <HAL_I2C_Mem_Read>
    // 읽어온 3바이트 데이터를 결합하여 24비트 정수형 값을 만든 후 oversampling 설정에 따라 오른쪽으로 시프트하여 최종 원시 기압 값(up)을 계산
    // 계산괸 up 값을 반환
    int32_t up = (((int32_t)raw[0] << 16) | ((int32_t)raw[1] << 8) | raw[2]) >> (8 - oss);
 80010c8:	7a3b      	ldrb	r3, [r7, #8]
 80010ca:	041a      	lsls	r2, r3, #16
 80010cc:	7a7b      	ldrb	r3, [r7, #9]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	4313      	orrs	r3, r2
 80010d2:	7aba      	ldrb	r2, [r7, #10]
 80010d4:	431a      	orrs	r2, r3
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	f1c3 0308 	rsb	r3, r3, #8
 80010dc:	fa42 f303 	asr.w	r3, r2, r3
 80010e0:	60fb      	str	r3, [r7, #12]
    return up;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <BMP180_ComputeTemperature>:

// 온도 계산 함수 (BMP180 데이터시트에 따른 계산식)
// 반환값은 0.1°C 단위의 온도 값
// 원시 온도 값(UT)을 이용하여 보정된 온도를 계산하는 함수
int32_t BMP180_ComputeTemperature(int16_t UT)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
   // 중간 계산에 사용할 변수 X1, X2, B5 선언
    int32_t X1, X2, B5;
    // 데이터 시트에 따른 공식의 일부로 UT에서 AC6을 빼고 AC5를 곱한 후 2^15로 나누기 위해 비트 시프트 연산 (>> 15)을 수행
    X1 = ((UT - AC6) * AC5) >> 15;
 80010f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fa:	4a11      	ldr	r2, [pc, #68]	; (8001140 <BMP180_ComputeTemperature+0x54>)
 80010fc:	8812      	ldrh	r2, [r2, #0]
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	4a10      	ldr	r2, [pc, #64]	; (8001144 <BMP180_ComputeTemperature+0x58>)
 8001102:	8812      	ldrh	r2, [r2, #0]
 8001104:	fb02 f303 	mul.w	r3, r2, r3
 8001108:	13db      	asrs	r3, r3, #15
 800110a:	617b      	str	r3, [r7, #20]
    // MC를 2^11(2048)배한 후 X1과 MD의 합으로 나눔
    // 이 계산은 온도 보정을 위한 중간 단계
    X2 = (MC << 11) / (X1 + MD);
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <BMP180_ComputeTemperature+0x5c>)
 800110e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001112:	02da      	lsls	r2, r3, #11
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <BMP180_ComputeTemperature+0x60>)
 8001116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111a:	4619      	mov	r1, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	440b      	add	r3, r1
 8001120:	fb92 f3f3 	sdiv	r3, r2, r3
 8001124:	613b      	str	r3, [r7, #16]
    // X1과 X2를 더해 B5값을 얻음, B5는 최종 온도 계산에 중요한 중간 변수
    B5 = X1 + X2;
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
    // B5에 8을 더한 후 2^4(16)로 나눠 최종 보정 온도 구함
    // 반환 값을 0.1도 단위의 온도
    return (B5 + 8) >> 4;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3308      	adds	r3, #8
 8001132:	111b      	asrs	r3, r3, #4
}
 8001134:	4618      	mov	r0, r3
 8001136:	371c      	adds	r7, #28
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	20004bec 	.word	0x20004bec
 8001144:	20004bee 	.word	0x20004bee
 8001148:	20004bfc 	.word	0x20004bfc
 800114c:	20004be8 	.word	0x20004be8

08001150 <BMP180_ComputePressure>:

// 기압 계산 함수 (BMP180 데이터시트에 따른 계산식)
// 단, 내부에서 온도 보정 값(B5)을 다시 계산합니다.
// 온도 보정을 포함하여 원시 기압(UP)과 온도(UT)를 이용해 보정된 기압 계산
int32_t BMP180_ComputePressure(int32_t UT, int32_t UP, uint8_t oss)
{
 8001150:	b480      	push	{r7}
 8001152:	b08f      	sub	sp, #60	; 0x3c
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	4613      	mov	r3, r2
 800115c:	71fb      	strb	r3, [r7, #7]
    int32_t X1, X2, B5, B6, X3, p;
    uint32_t B4, B7;

    // 온도 보정 계산
    // 기압 계산 시에도 온도 보정 값(B5)이 필요하므로 앞서 온도 계산과 동일한 공식으로 B5를 재계산
    X1 = ((UT - AC6) * AC5) >> 15;
 800115e:	4b56      	ldr	r3, [pc, #344]	; (80012b8 <BMP180_ComputePressure+0x168>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	1a9b      	subs	r3, r3, r2
 8001168:	4a54      	ldr	r2, [pc, #336]	; (80012bc <BMP180_ComputePressure+0x16c>)
 800116a:	8812      	ldrh	r2, [r2, #0]
 800116c:	fb02 f303 	mul.w	r3, r2, r3
 8001170:	13db      	asrs	r3, r3, #15
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
    X2 = (MC << 11) / (X1 + MD);
 8001174:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <BMP180_ComputePressure+0x170>)
 8001176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117a:	02da      	lsls	r2, r3, #11
 800117c:	4b51      	ldr	r3, [pc, #324]	; (80012c4 <BMP180_ComputePressure+0x174>)
 800117e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001182:	4619      	mov	r1, r3
 8001184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001186:	440b      	add	r3, r1
 8001188:	fb92 f3f3 	sdiv	r3, r2, r3
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
    B5 = X1 + X2;
 800118e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001192:	4413      	add	r3, r2
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28

    // 기압 보정 계산
    // B5에서 4000을 빼서 B6을 구함, 기압 보정 공식의 일부
    B6 = B5 - 4000;
 8001196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001198:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    // B6의 제곱을 오른쪽으로 12비트 시프트한 후 B2와 곱하고 다시 2^11(시프트 11)로 나눔
    X1 = (B2 * ((B6 * B6) >> 12)) >> 11;
 800119e:	4b4a      	ldr	r3, [pc, #296]	; (80012c8 <BMP180_ComputePressure+0x178>)
 80011a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a4:	461a      	mov	r2, r3
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	fb03 f303 	mul.w	r3, r3, r3
 80011ac:	131b      	asrs	r3, r3, #12
 80011ae:	fb03 f302 	mul.w	r3, r3, r2
 80011b2:	12db      	asrs	r3, r3, #11
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
    // AC2와 B6을 곱한 후 2^11로 나눈 값을 X2에 저장하고 X1과 X2를 더해 X3을 구함
    X2 = (AC2 * B6) >> 11;
 80011b6:	4b45      	ldr	r3, [pc, #276]	; (80012cc <BMP180_ComputePressure+0x17c>)
 80011b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011bc:	461a      	mov	r2, r3
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	fb03 f302 	mul.w	r3, r3, r2
 80011c4:	12db      	asrs	r3, r3, #11
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    X3 = X1 + X2;
 80011c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011cc:	4413      	add	r3, r2
 80011ce:	623b      	str	r3, [r7, #32]
    // AC1에 4를 곱하고 X3를 더한 후 oversampling setting(oss)에 따라 왼쪽 시프트를 수행하고 2를 더한 후 4로 나누어 B3를 계산
    int32_t B3 = (((AC1 * 4 + X3) << oss) + 2) / 4;
 80011d0:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <BMP180_ComputePressure+0x180>)
 80011d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d6:	009a      	lsls	r2, r3, #2
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	441a      	add	r2, r3
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	3302      	adds	r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da00      	bge.n	80011ea <BMP180_ComputePressure+0x9a>
 80011e8:	3303      	adds	r3, #3
 80011ea:	109b      	asrs	r3, r3, #2
 80011ec:	61fb      	str	r3, [r7, #28]
    // AC3와 B6를 곱한 값을 오른쪽으로  13비트 시프트하여 X1
    X1 = (AC3 * B6) >> 13;
 80011ee:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <BMP180_ComputePressure+0x184>)
 80011f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f4:	461a      	mov	r2, r3
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	fb03 f302 	mul.w	r3, r3, r2
 80011fc:	135b      	asrs	r3, r3, #13
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
    // B6의 제곱을 오른쪽으로 12비트 시프트한 후 B1과 곱하고 2^16으로 나눈 값을 X2
    X2 = (B1 * ((B6 * B6) >> 12)) >> 16;
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <BMP180_ComputePressure+0x188>)
 8001202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001206:	461a      	mov	r2, r3
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	fb03 f303 	mul.w	r3, r3, r3
 800120e:	131b      	asrs	r3, r3, #12
 8001210:	fb03 f302 	mul.w	r3, r3, r2
 8001214:	141b      	asrs	r3, r3, #16
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
    // X1과 X2를 더하고 2를 더한 후 2^2(4)로 나누어 최종 X3
    X3 = ((X1 + X2) + 2) >> 2;
 8001218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800121a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121c:	4413      	add	r3, r2
 800121e:	3302      	adds	r3, #2
 8001220:	109b      	asrs	r3, r3, #2
 8001222:	623b      	str	r3, [r7, #32]
    // X3에 32768을 더한 후 AC4와 곱하고 오른쪽으로 15비트 시프트하여 B4값을 계산
    // B4는 보정 과정의 분모 역할
    B4 = (AC4 * (uint32_t)(X3 + 32768)) >> 15;
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <BMP180_ComputePressure+0x18c>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001230:	fb03 f302 	mul.w	r3, r3, r2
 8001234:	0bdb      	lsrs	r3, r3, #15
 8001236:	61bb      	str	r3, [r7, #24]
    // 원시 기압 값 UP에서 B3를 뺀 후 50000을 oversampling에 맞게 오른쪽으로 시프트한 값과 곱하여 B7을 계산
    B7 = ((uint32_t)UP - B3) * (50000 >> oss);
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	79fa      	ldrb	r2, [r7, #7]
 8001240:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001244:	fa41 f202 	asr.w	r2, r1, r2
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	617b      	str	r3, [r7, #20]

    // B7의 값에 따라 두 가지 경우로 나누어 p값을 계산
    // 조건문은 B7이 0x80000000보다 작은지 확인하여 p를 B4로 나누고 2를 곱하는 방식으로 계산
    if(B7 < 0x80000000)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db06      	blt.n	8001262 <BMP180_ComputePressure+0x112>
        p = (B7 * 2) / B4;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	005a      	lsls	r2, r3, #1
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fbb2 f3f3 	udiv	r3, r2, r3
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
 8001260:	e005      	b.n	800126e <BMP180_ComputePressure+0x11e>
    else
        p = (B7 / B4) * 2;
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	637b      	str	r3, [r7, #52]	; 0x34

    // p를 오른쪽으로  8비트 시프트한 후 제곱하여 X1에 저장하고 다시 3038을 곱한 후 2^16으로 나눔
    X1 = (p >> 8) * (p >> 8);
 800126e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001270:	121b      	asrs	r3, r3, #8
 8001272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001274:	1212      	asrs	r2, r2, #8
 8001276:	fb02 f303 	mul.w	r3, r2, r3
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
    X1 = (X1 * 3038) >> 16;
 800127c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127e:	f640 32de 	movw	r2, #3038	; 0xbde
 8001282:	fb02 f303 	mul.w	r3, r2, r3
 8001286:	141b      	asrs	r3, r3, #16
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
    // X2는 p에 -7357을 곱한 후 2^16으로 나눔
    X2 = (-7357 * p) >> 16;
 800128a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <BMP180_ComputePressure+0x190>)
 800128e:	fb02 f303 	mul.w	r3, r2, r3
 8001292:	141b      	asrs	r3, r3, #16
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
    // X1, X2 그리고 3791을 더한 후 2^4(16)로 나누어 p에 더함
    // 이 계산을 통해 최종 보정된 기압 값 도출
    p = p + (((X1 + X2 + 3791) >> 4));
 8001296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129a:	4413      	add	r3, r2
 800129c:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80012a0:	111b      	asrs	r3, r3, #4
 80012a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012a4:	4413      	add	r3, r2
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34

    // 계산된 기압 p값을 반환, 단위는 파스칼(Pa)
    return p; // 단위: Pa
 80012a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	373c      	adds	r7, #60	; 0x3c
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20004bec 	.word	0x20004bec
 80012bc:	20004bee 	.word	0x20004bee
 80012c0:	20004bfc 	.word	0x20004bfc
 80012c4:	20004be8 	.word	0x20004be8
 80012c8:	20004bf8 	.word	0x20004bf8
 80012cc:	20004bf4 	.word	0x20004bf4
 80012d0:	20004bea 	.word	0x20004bea
 80012d4:	20004bf6 	.word	0x20004bf6
 80012d8:	20004bfa 	.word	0x20004bfa
 80012dc:	20004bf0 	.word	0x20004bf0
 80012e0:	ffffe343 	.word	0xffffe343

080012e4 <bmp_main>:

// BMP180 센서로부터 데이터를 읽어 LCD와 UART로 출력하는 메인 함수
void bmp_main(void)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b0ab      	sub	sp, #172	; 0xac
 80012e8:	af02      	add	r7, sp, #8
   // lcd_line1, lcd_line2는 16자를 저장할 문자열 배열, LCD의 각 행에 출력할 내용 저장
   char lcd_line1[17];
   char lcd_line2[17];

   // I2C LCD 초기화
   i2c_lcd_init(); // LCD 초기화 함수
 80012ea:	f000 f9b3 	bl	8001654 <i2c_lcd_init>

    // BMP180 보정 계수 읽기
   // BMP180 센서의 보정 데이터를 읽어와 전역 변수들(AC1~MD)에 저장
   // hi2c3 핸들러를 사용하여 I2C통신으로 센서의 EEPROM 영역에서 데이터를 읽어옴
    BMP180_ReadCalibrationCoefficients(&hi2c3);
 80012ee:	4848      	ldr	r0, [pc, #288]	; (8001410 <bmp_main+0x12c>)
 80012f0:	f7ff fdde 	bl	8000eb0 <BMP180_ReadCalibrationCoefficients>
    // 센서 측정 및 출력 작업을 계속 반복하기 위해 무한 루프 시작
    while(1)
    {
        // 원시 온도 및 기압 읽기
       // BMP180_ReadRawTemperature함수를 호출하여 원시 온도 값(UT)를 읽어옴
        int16_t UT = BMP180_ReadRawTemperature(&hi2c3);
 80012f4:	4846      	ldr	r0, [pc, #280]	; (8001410 <bmp_main+0x12c>)
 80012f6:	f7ff fe6d 	bl	8000fd4 <BMP180_ReadRawTemperature>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        // BMP180_ReadRawPressure함수를 호출하여 원시 기압 값(UP)을 읽음, oversampling setting을 0으로 사용
        int32_t UP = BMP180_ReadRawPressure(&hi2c3, 0);
 8001300:	2100      	movs	r1, #0
 8001302:	4843      	ldr	r0, [pc, #268]	; (8001410 <bmp_main+0x12c>)
 8001304:	f7ff fe96 	bl	8001034 <BMP180_ReadRawPressure>
 8001308:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

        // 온도 계산 (0.1°C 단위)
        // 읽어온 UT값을 이용하여 보정된 온도 계산
        // 반환 값은 0.1도 단위
        int32_t temperature = BMP180_ComputeTemperature(UT);
 800130c:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff feeb 	bl	80010ec <BMP180_ComputeTemperature>
 8001316:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        // 보정식을 이용한 실제 기압 계산 (Pa 단위 -> hPa로 변환)
        // UT와 UP값을 사용해 보정된 기압 계산
        int32_t pressure = BMP180_ComputePressure(UT, UP, 0) / 100;
 800131a:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 800131e:	2200      	movs	r2, #0
 8001320:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff13 	bl	8001150 <BMP180_ComputePressure>
 800132a:	4603      	mov	r3, r0
 800132c:	4a39      	ldr	r2, [pc, #228]	; (8001414 <bmp_main+0x130>)
 800132e:	fb82 1203 	smull	r1, r2, r2, r3
 8001332:	1152      	asrs	r2, r2, #5
 8001334:	17db      	asrs	r3, r3, #31
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

        // 첫 번째 줄에 온도값, 두 번째 줄에 기압값을 문자열로 포맷
        sprintf(lcd_line1, "Temp: %2ld.%ld C", temperature / 10, abs(temperature) % 10);
 800133c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001340:	4a35      	ldr	r2, [pc, #212]	; (8001418 <bmp_main+0x134>)
 8001342:	fb82 1203 	smull	r1, r2, r2, r3
 8001346:	1092      	asrs	r2, r2, #2
 8001348:	17db      	asrs	r3, r3, #31
 800134a:	1ad4      	subs	r4, r2, r3
 800134c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001350:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001354:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001358:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <bmp_main+0x134>)
 800135a:	fb83 1302 	smull	r1, r3, r3, r2
 800135e:	1099      	asrs	r1, r3, #2
 8001360:	17d3      	asrs	r3, r2, #31
 8001362:	1ac9      	subs	r1, r1, r3
 8001364:	460b      	mov	r3, r1
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	1ad1      	subs	r1, r2, r3
 800136e:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001372:	460b      	mov	r3, r1
 8001374:	4622      	mov	r2, r4
 8001376:	4929      	ldr	r1, [pc, #164]	; (800141c <bmp_main+0x138>)
 8001378:	f008 fdc0 	bl	8009efc <siprintf>
        sprintf(lcd_line2, "Press: %4ld hPa", pressure);
 800137c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001380:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001384:	4926      	ldr	r1, [pc, #152]	; (8001420 <bmp_main+0x13c>)
 8001386:	4618      	mov	r0, r3
 8001388:	f008 fdb8 	bl	8009efc <siprintf>

        // LCD 출력
        move_cursor(0, 0);
 800138c:	2100      	movs	r1, #0
 800138e:	2000      	movs	r0, #0
 8001390:	f000 f98e 	bl	80016b0 <move_cursor>
        lcd_string(lcd_line1);
 8001394:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001398:	4618      	mov	r0, r3
 800139a:	f000 f974 	bl	8001686 <lcd_string>
        move_cursor(1, 0);
 800139e:	2100      	movs	r1, #0
 80013a0:	2001      	movs	r0, #1
 80013a2:	f000 f985 	bl	80016b0 <move_cursor>
        lcd_string(lcd_line2);
 80013a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f96b 	bl	8001686 <lcd_string>
        HAL_Delay(500);
 80013b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013b4:	f001 fa52 	bl	800285c <HAL_Delay>

        // UART를 통해 결과 출력 (온도는 소수 첫째자리까지 출력)
        char msg[100];
        sprintf(msg, "Temp: %ld.%ld C, Pressure: %ld hPa\r\n", temperature / 10, abs(temperature) % 10, pressure);
 80013b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013bc:	4a16      	ldr	r2, [pc, #88]	; (8001418 <bmp_main+0x134>)
 80013be:	fb82 1203 	smull	r1, r2, r2, r3
 80013c2:	1092      	asrs	r2, r2, #2
 80013c4:	17db      	asrs	r3, r3, #31
 80013c6:	1ad4      	subs	r4, r2, r3
 80013c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013cc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80013d0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80013d4:	4b10      	ldr	r3, [pc, #64]	; (8001418 <bmp_main+0x134>)
 80013d6:	fb83 1302 	smull	r1, r3, r3, r2
 80013da:	1099      	asrs	r1, r3, #2
 80013dc:	17d3      	asrs	r3, r2, #31
 80013de:	1ac9      	subs	r1, r1, r3
 80013e0:	460b      	mov	r3, r1
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	1ad1      	subs	r1, r2, r3
 80013ea:	1d38      	adds	r0, r7, #4
 80013ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	460b      	mov	r3, r1
 80013f4:	4622      	mov	r2, r4
 80013f6:	490b      	ldr	r1, [pc, #44]	; (8001424 <bmp_main+0x140>)
 80013f8:	f008 fd80 	bl	8009efc <siprintf>
        printf("%s", msg);
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	4619      	mov	r1, r3
 8001400:	4809      	ldr	r0, [pc, #36]	; (8001428 <bmp_main+0x144>)
 8001402:	f008 fce9 	bl	8009dd8 <iprintf>
        HAL_Delay(500); // 1초 주기로 측정
 8001406:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800140a:	f001 fa27 	bl	800285c <HAL_Delay>
    {
 800140e:	e771      	b.n	80012f4 <bmp_main+0x10>
 8001410:	20004c04 	.word	0x20004c04
 8001414:	51eb851f 	.word	0x51eb851f
 8001418:	66666667 	.word	0x66666667
 800141c:	0800c088 	.word	0x0800c088
 8001420:	0800c09c 	.word	0x0800c09c
 8001424:	0800c0ac 	.word	0x0800c0ac
 8001428:	0800c0d4 	.word	0x0800c0d4

0800142c <button_led_toggle_test>:

void button_led_toggle_test(void);
int get_button( GPIO_TypeDef *GPIO, int GPIO_Pin, int button_num);

void button_led_toggle_test(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	GPIOC->PUPDR |= 0x55; // 하위 4개 핀(Pin 0~3) PUPDR 각각 01 설정 → Pull-up 활성화
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <button_led_toggle_test+0x90>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <button_led_toggle_test+0x90>)
 8001436:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 800143a:	60d3      	str	r3, [r2, #12]
	if(get_button( GPIOC, GPIO_PIN_0, BTN0 ) == BUTTON_PRESS)
 800143c:	2200      	movs	r2, #0
 800143e:	2101      	movs	r1, #1
 8001440:	481e      	ldr	r0, [pc, #120]	; (80014bc <button_led_toggle_test+0x90>)
 8001442:	f000 f841 	bl	80014c8 <get_button>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d103      	bne.n	8001454 <button_led_toggle_test+0x28>
	{
		HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_0 );
 800144c:	2101      	movs	r1, #1
 800144e:	481c      	ldr	r0, [pc, #112]	; (80014c0 <button_led_toggle_test+0x94>)
 8001450:	f001 fd51 	bl	8002ef6 <HAL_GPIO_TogglePin>
	}
	if(get_button( GPIOC, GPIO_PIN_1, BTN1 ) == BUTTON_PRESS)
 8001454:	2201      	movs	r2, #1
 8001456:	2102      	movs	r1, #2
 8001458:	4818      	ldr	r0, [pc, #96]	; (80014bc <button_led_toggle_test+0x90>)
 800145a:	f000 f835 	bl	80014c8 <get_button>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d103      	bne.n	800146c <button_led_toggle_test+0x40>
	{
		HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_1 );
 8001464:	2102      	movs	r1, #2
 8001466:	4816      	ldr	r0, [pc, #88]	; (80014c0 <button_led_toggle_test+0x94>)
 8001468:	f001 fd45 	bl	8002ef6 <HAL_GPIO_TogglePin>
	}
	if(get_button( GPIOC, GPIO_PIN_2, BTN2 ) == BUTTON_PRESS)
 800146c:	2202      	movs	r2, #2
 800146e:	2104      	movs	r1, #4
 8001470:	4812      	ldr	r0, [pc, #72]	; (80014bc <button_led_toggle_test+0x90>)
 8001472:	f000 f829 	bl	80014c8 <get_button>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d103      	bne.n	8001484 <button_led_toggle_test+0x58>
	{
		HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_2 );
 800147c:	2104      	movs	r1, #4
 800147e:	4810      	ldr	r0, [pc, #64]	; (80014c0 <button_led_toggle_test+0x94>)
 8001480:	f001 fd39 	bl	8002ef6 <HAL_GPIO_TogglePin>
	}
	if(get_button( GPIOC, GPIO_PIN_3, BTN3 ) == BUTTON_PRESS)
 8001484:	2203      	movs	r2, #3
 8001486:	2108      	movs	r1, #8
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <button_led_toggle_test+0x90>)
 800148a:	f000 f81d 	bl	80014c8 <get_button>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d103      	bne.n	800149c <button_led_toggle_test+0x70>
	{
		HAL_GPIO_TogglePin( GPIOB, GPIO_PIN_3 );
 8001494:	2108      	movs	r1, #8
 8001496:	480a      	ldr	r0, [pc, #40]	; (80014c0 <button_led_toggle_test+0x94>)
 8001498:	f001 fd2d 	bl	8002ef6 <HAL_GPIO_TogglePin>
	}
	if(get_button( GPIOC, GPIO_PIN_13, BTN4 ) == BUTTON_PRESS) //Demo blue button
 800149c:	2204      	movs	r2, #4
 800149e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <button_led_toggle_test+0x90>)
 80014a4:	f000 f810 	bl	80014c8 <get_button>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d103      	bne.n	80014b6 <button_led_toggle_test+0x8a>
	{
		HAL_GPIO_TogglePin( GPIOA, GPIO_PIN_5 );
 80014ae:	2120      	movs	r1, #32
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <button_led_toggle_test+0x98>)
 80014b2:	f001 fd20 	bl	8002ef6 <HAL_GPIO_TogglePin>
	}
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020000 	.word	0x40020000

080014c8 <get_button>:

int get_button( GPIO_TypeDef *GPIO, int GPIO_Pin, int button_num)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE};
	// 	지역 변수에 static을 쓰면 전역 변수처럼 함수를 빠져 나갔다 다시 들어 와도 값을 유지 한다.
	int currtn_state;

	currtn_state = HAL_GPIO_ReadPin(GPIO, GPIO_Pin);   // 버튼을 읽는다.
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4619      	mov	r1, r3
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f001 fcda 	bl	8002e94 <HAL_GPIO_ReadPin>
 80014e0:	4603      	mov	r3, r0
 80014e2:	617b      	str	r3, [r7, #20]
	if (currtn_state == BUTTON_PRESS && button_status[button_num] == BUTTON_RELEASE)  // 버튼이 처음 눌려진 noise high
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10f      	bne.n	800150a <get_button+0x42>
 80014ea:	4a14      	ldr	r2, [pc, #80]	; (800153c <get_button+0x74>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4413      	add	r3, r2
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d109      	bne.n	800150a <get_button+0x42>
	{
		HAL_Delay(60);   // noise가 지나가기를 기다린다.
 80014f6:	203c      	movs	r0, #60	; 0x3c
 80014f8:	f001 f9b0 	bl	800285c <HAL_Delay>
		button_status[button_num] = BUTTON_PRESS;   // noise가 지나간 상태의 High 상태
 80014fc:	4a0f      	ldr	r2, [pc, #60]	; (800153c <get_button+0x74>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
		return BUTTON_RELEASE;   // 아직은 완전히 눌렸다 떼어진 상태가 아니다.
 8001506:	2301      	movs	r3, #1
 8001508:	e013      	b.n	8001532 <get_button+0x6a>
	}
	else if (currtn_state== BUTTON_RELEASE && button_status[button_num] == BUTTON_PRESS)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d10f      	bne.n	8001530 <get_button+0x68>
 8001510:	4a0a      	ldr	r2, [pc, #40]	; (800153c <get_button+0x74>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d109      	bne.n	8001530 <get_button+0x68>
	{
		HAL_Delay(60);
 800151c:	203c      	movs	r0, #60	; 0x3c
 800151e:	f001 f99d 	bl	800285c <HAL_Delay>
		button_status[button_num] = BUTTON_RELEASE;   // 다음 버튼 체크를 위해서 초기화
 8001522:	4a06      	ldr	r2, [pc, #24]	; (800153c <get_button+0x74>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
		return BUTTON_PRESS;   // 완전히 1번 눌렸다 떼어진 상태로 인정
 800152c:	2300      	movs	r3, #0
 800152e:	e000      	b.n	8001532 <get_button+0x6a>
	}

	return BUTTON_RELEASE;   // 버튼이 open상태
 8001530:	2301      	movs	r3, #1
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000000 	.word	0x20000000

08001540 <LCD_Enable>:
		HAL_Delay(500); // 0.5초 대기
	}
#endif
}

void LCD_Enable(void) {
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001544:	2201      	movs	r2, #1
 8001546:	2102      	movs	r1, #2
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <LCD_Enable+0x28>)
 800154a:	f001 fcbb 	bl	8002ec4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800154e:	2001      	movs	r0, #1
 8001550:	f001 f984 	bl	800285c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2102      	movs	r1, #2
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <LCD_Enable+0x28>)
 800155a:	f001 fcb3 	bl	8002ec4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800155e:	2001      	movs	r0, #1
 8001560:	f001 f97c 	bl	800285c <HAL_Delay>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40020400 	.word	0x40020400

0800156c <LCD_Send4Bits>:

void LCD_Send4Bits(uint8_t data) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data >> 0) & 0x01);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	2104      	movs	r1, #4
 8001582:	4815      	ldr	r0, [pc, #84]	; (80015d8 <LCD_Send4Bits+0x6c>)
 8001584:	f001 fc9e 	bl	8002ec4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data >> 1) & 0x01);
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	085b      	lsrs	r3, r3, #1
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	2108      	movs	r1, #8
 8001598:	480f      	ldr	r0, [pc, #60]	; (80015d8 <LCD_Send4Bits+0x6c>)
 800159a:	f001 fc93 	bl	8002ec4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data >> 2) & 0x01);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	461a      	mov	r2, r3
 80015ac:	2110      	movs	r1, #16
 80015ae:	480a      	ldr	r0, [pc, #40]	; (80015d8 <LCD_Send4Bits+0x6c>)
 80015b0:	f001 fc88 	bl	8002ec4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data >> 3) & 0x01);
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	08db      	lsrs	r3, r3, #3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	2120      	movs	r1, #32
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <LCD_Send4Bits+0x6c>)
 80015c6:	f001 fc7d 	bl	8002ec4 <HAL_GPIO_WritePin>
    LCD_Enable();
 80015ca:	f7ff ffb9 	bl	8001540 <LCD_Enable>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40020400 	.word	0x40020400

080015dc <LCD_SendCommand>:


// ========================= LCD 명령어 전송 함수 =========================
#if 1
void LCD_SendCommand(uint8_t cmd)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2101      	movs	r1, #1
 80015ea:	480a      	ldr	r0, [pc, #40]	; (8001614 <LCD_SendCommand+0x38>)
 80015ec:	f001 fc6a 	bl	8002ec4 <HAL_GPIO_WritePin>
    LCD_Send4Bits(cmd >> 4);   // 상위 4비트
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ffb8 	bl	800156c <LCD_Send4Bits>
    LCD_Send4Bits(cmd & 0x0F); // 하위 4비트
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ffb1 	bl	800156c <LCD_Send4Bits>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40020400 	.word	0x40020400

08001618 <LCD_SendData>:
#endif

// ========================= LCD 데이터(문자) 전송 함수 =========================
#if 1
void LCD_SendData(uint8_t data)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	2101      	movs	r1, #1
 8001626:	480a      	ldr	r0, [pc, #40]	; (8001650 <LCD_SendData+0x38>)
 8001628:	f001 fc4c 	bl	8002ec4 <HAL_GPIO_WritePin>
    LCD_Send4Bits(data >> 4);
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	b2db      	uxtb	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff9a 	bl	800156c <LCD_Send4Bits>
    LCD_Send4Bits(data & 0x0F);
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff93 	bl	800156c <LCD_Send4Bits>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40020400 	.word	0x40020400

08001654 <i2c_lcd_init>:
	return;
}
#endif
// ========================= LCD 초기화 =========================

void i2c_lcd_init(void){
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	LCD_SendCommand(0x33); // 초기화 과정 (데이터시트 참고)
 8001658:	2033      	movs	r0, #51	; 0x33
 800165a:	f7ff ffbf 	bl	80015dc <LCD_SendCommand>
	LCD_SendCommand(0x32); // 4-bit 모드 설정
 800165e:	2032      	movs	r0, #50	; 0x32
 8001660:	f7ff ffbc 	bl	80015dc <LCD_SendCommand>
	LCD_SendCommand(0x28); // Function set: 4-bit, 2-line, 5x8 dots
 8001664:	2028      	movs	r0, #40	; 0x28
 8001666:	f7ff ffb9 	bl	80015dc <LCD_SendCommand>
	LCD_SendCommand(DISPLAY_ON); // 화면 ON, 커서 OFF, 블링크 OFF (i2c_lcd.h 에 정의되어야 함)
 800166a:	200c      	movs	r0, #12
 800166c:	f7ff ffb6 	bl	80015dc <LCD_SendCommand>
	LCD_SendCommand(0x06); // Entry Mode: Increment cursor
 8001670:	2006      	movs	r0, #6
 8001672:	f7ff ffb3 	bl	80015dc <LCD_SendCommand>
	LCD_SendCommand(CLEAR_DISPLAY); // 화면 클리어
 8001676:	2001      	movs	r0, #1
 8001678:	f7ff ffb0 	bl	80015dc <LCD_SendCommand>
	HAL_Delay(2); // LCD는 클리어 후 대기 필요
 800167c:	2002      	movs	r0, #2
 800167e:	f001 f8ed 	bl	800285c <HAL_Delay>
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}

08001686 <lcd_string>:

// ========================= 문자열 출력 =========================

void lcd_string(uint8_t *str){
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
	// 문자열 끝(null 문자)까지 반복
	while(*str) LCD_SendData(*str++);
 800168e:	e006      	b.n	800169e <lcd_string+0x18>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ffbd 	bl	8001618 <LCD_SendData>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f4      	bne.n	8001690 <lcd_string+0xa>
}
 80016a6:	bf00      	nop
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <move_cursor>:

// ========================= 커서 이동 =========================

void move_cursor(uint8_t row, uint8_t column){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	460a      	mov	r2, r1
 80016ba:	71fb      	strb	r3, [r7, #7]
 80016bc:	4613      	mov	r3, r2
 80016be:	71bb      	strb	r3, [r7, #6]
	// 커서 이동 명령어
	// 1st line : 0x80 | column
	// 2nd line : 0x80 | 0x40 | column
	LCD_SendCommand(0x80 | row<<6 | column);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	019b      	lsls	r3, r3, #6
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	79bb      	ldrb	r3, [r7, #6]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff82 	bl	80015dc <LCD_SendCommand>
	return;
 80016d8:	bf00      	nop
}
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80016e8:	1d39      	adds	r1, r7, #4
 80016ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ee:	2201      	movs	r2, #1
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <__io_putchar+0x20>)
 80016f2:	f004 f83a 	bl	800576a <HAL_UART_Transmit>

  return ch;
 80016f6:	687b      	ldr	r3, [r7, #4]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20004e84 	.word	0x20004e84

08001704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001708:	f001 f866 	bl	80027d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800170c:	f000 f858 	bl	80017c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001710:	f000 faf4 	bl	8001cfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001714:	f000 fac8 	bl	8001ca8 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8001718:	f000 faa2 	bl	8001c60 <MX_TIM11_Init>
  MX_TIM2_Init();
 800171c:	f000 f978 	bl	8001a10 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001720:	f000 f8b6 	bl	8001890 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001724:	f000 f9c0 	bl	8001aa8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001728:	f000 fa34 	bl	8001b94 <MX_TIM5_Init>
  MX_SPI2_Init();
 800172c:	f000 f93a 	bl	80019a4 <MX_SPI2_Init>
  MX_I2C3_Init();
 8001730:	f000 f90a 	bl	8001948 <MX_I2C3_Init>
  MX_I2C2_Init();
 8001734:	f000 f8da 	bl	80018ec <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001738:	2201      	movs	r2, #1
 800173a:	4914      	ldr	r1, [pc, #80]	; (800178c <main+0x88>)
 800173c:	4814      	ldr	r0, [pc, #80]	; (8001790 <main+0x8c>)
 800173e:	f004 f8a6 	bl	800588e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001742:	4814      	ldr	r0, [pc, #80]	; (8001794 <main+0x90>)
 8001744:	f003 f930 	bl	80049a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);	// for make delay_us
 8001748:	4813      	ldr	r0, [pc, #76]	; (8001798 <main+0x94>)
 800174a:	f003 f92d 	bl	80049a8 <HAL_TIM_Base_Start_IT>
  //i2c_lcd_main();
  //led_main();
  //dht11_main();
  //dotmatrix_main_func();
  //dotmatrix_main_test();
  bmp_main();
 800174e:	f7ff fdc9 	bl	80012e4 <bmp_main>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001752:	f004 ffc9 	bl	80066e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001756:	4a11      	ldr	r2, [pc, #68]	; (800179c <main+0x98>)
 8001758:	2100      	movs	r1, #0
 800175a:	4811      	ldr	r0, [pc, #68]	; (80017a0 <main+0x9c>)
 800175c:	f005 f80e 	bl	800677c <osThreadNew>
 8001760:	4603      	mov	r3, r0
 8001762:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <main+0xa0>)
 8001764:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001766:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <main+0xa4>)
 8001768:	2100      	movs	r1, #0
 800176a:	4810      	ldr	r0, [pc, #64]	; (80017ac <main+0xa8>)
 800176c:	f005 f806 	bl	800677c <osThreadNew>
 8001770:	4603      	mov	r3, r0
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <main+0xac>)
 8001774:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8001776:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <main+0xb0>)
 8001778:	2100      	movs	r1, #0
 800177a:	480f      	ldr	r0, [pc, #60]	; (80017b8 <main+0xb4>)
 800177c:	f004 fffe 	bl	800677c <osThreadNew>
 8001780:	4603      	mov	r3, r0
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <main+0xb8>)
 8001784:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001786:	f004 ffd3 	bl	8006730 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800178a:	e7fe      	b.n	800178a <main+0x86>
 800178c:	20004e34 	.word	0x20004e34
 8001790:	20004e84 	.word	0x20004e84
 8001794:	20004de8 	.word	0x20004de8
 8001798:	20004e3c 	.word	0x20004e3c
 800179c:	0800c114 	.word	0x0800c114
 80017a0:	08001e25 	.word	0x08001e25
 80017a4:	20004c00 	.word	0x20004c00
 80017a8:	0800c138 	.word	0x0800c138
 80017ac:	08001e41 	.word	0x08001e41
 80017b0:	20004e30 	.word	0x20004e30
 80017b4:	0800c15c 	.word	0x0800c15c
 80017b8:	08001e55 	.word	0x08001e55
 80017bc:	20004e38 	.word	0x20004e38

080017c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b094      	sub	sp, #80	; 0x50
 80017c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c6:	f107 0320 	add.w	r3, r7, #32
 80017ca:	2230      	movs	r2, #48	; 0x30
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f007 fe35 	bl	800943e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	4b27      	ldr	r3, [pc, #156]	; (8001888 <SystemClock_Config+0xc8>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	4a26      	ldr	r2, [pc, #152]	; (8001888 <SystemClock_Config+0xc8>)
 80017ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f2:	6413      	str	r3, [r2, #64]	; 0x40
 80017f4:	4b24      	ldr	r3, [pc, #144]	; (8001888 <SystemClock_Config+0xc8>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001800:	2300      	movs	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <SystemClock_Config+0xcc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a20      	ldr	r2, [pc, #128]	; (800188c <SystemClock_Config+0xcc>)
 800180a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <SystemClock_Config+0xcc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800181c:	2302      	movs	r3, #2
 800181e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001820:	2301      	movs	r3, #1
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001824:	2310      	movs	r3, #16
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001828:	2302      	movs	r3, #2
 800182a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800182c:	2300      	movs	r3, #0
 800182e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001830:	2308      	movs	r3, #8
 8001832:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001834:	2354      	movs	r3, #84	; 0x54
 8001836:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001838:	2302      	movs	r3, #2
 800183a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800183c:	2304      	movs	r3, #4
 800183e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001840:	f107 0320 	add.w	r3, r7, #32
 8001844:	4618      	mov	r0, r3
 8001846:	f002 fb31 	bl	8003eac <HAL_RCC_OscConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001850:	f000 fb28 	bl	8001ea4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001854:	230f      	movs	r3, #15
 8001856:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001858:	2302      	movs	r3, #2
 800185a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001864:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	2102      	movs	r1, #2
 8001870:	4618      	mov	r0, r3
 8001872:	f002 fd93 	bl	800439c <HAL_RCC_ClockConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800187c:	f000 fb12 	bl	8001ea4 <Error_Handler>
  }
}
 8001880:	bf00      	nop
 8001882:	3750      	adds	r7, #80	; 0x50
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	40007000 	.word	0x40007000

08001890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_I2C1_Init+0x50>)
 8001896:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <MX_I2C1_Init+0x54>)
 8001898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_I2C1_Init+0x50>)
 800189c:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <MX_I2C1_Init+0x58>)
 800189e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_I2C1_Init+0x50>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_I2C1_Init+0x50>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_I2C1_Init+0x50>)
 80018ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <MX_I2C1_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_I2C1_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <MX_I2C1_Init+0x50>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_I2C1_Init+0x50>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <MX_I2C1_Init+0x50>)
 80018ce:	f001 fb2d 	bl	8002f2c <HAL_I2C_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018d8:	f000 fae4 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20004cb0 	.word	0x20004cb0
 80018e4:	40005400 	.word	0x40005400
 80018e8:	000186a0 	.word	0x000186a0

080018ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_I2C2_Init+0x50>)
 80018f2:	4a13      	ldr	r2, [pc, #76]	; (8001940 <MX_I2C2_Init+0x54>)
 80018f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_I2C2_Init+0x50>)
 80018f8:	4a12      	ldr	r2, [pc, #72]	; (8001944 <MX_I2C2_Init+0x58>)
 80018fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_I2C2_Init+0x50>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <MX_I2C2_Init+0x50>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_I2C2_Init+0x50>)
 800190a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800190e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <MX_I2C2_Init+0x50>)
 8001912:	2200      	movs	r2, #0
 8001914:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_I2C2_Init+0x50>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <MX_I2C2_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <MX_I2C2_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	; (800193c <MX_I2C2_Init+0x50>)
 800192a:	f001 faff 	bl	8002f2c <HAL_I2C_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001934:	f000 fab6 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20004d04 	.word	0x20004d04
 8001940:	40005800 	.word	0x40005800
 8001944:	000186a0 	.word	0x000186a0

08001948 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_I2C3_Init+0x50>)
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <MX_I2C3_Init+0x54>)
 8001950:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_I2C3_Init+0x50>)
 8001954:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <MX_I2C3_Init+0x58>)
 8001956:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_I2C3_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_I2C3_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_I2C3_Init+0x50>)
 8001966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800196a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <MX_I2C3_Init+0x50>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_I2C3_Init+0x50>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <MX_I2C3_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_I2C3_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <MX_I2C3_Init+0x50>)
 8001986:	f001 fad1 	bl	8002f2c <HAL_I2C_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001990:	f000 fa88 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20004c04 	.word	0x20004c04
 800199c:	40005c00 	.word	0x40005c00
 80019a0:	000186a0 	.word	0x000186a0

080019a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019a8:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019aa:	4a18      	ldr	r2, [pc, #96]	; (8001a0c <MX_SPI2_Init+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019b6:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019d8:	2200      	movs	r2, #0
 80019da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019f0:	220a      	movs	r2, #10
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019f4:	4804      	ldr	r0, [pc, #16]	; (8001a08 <MX_SPI2_Init+0x64>)
 80019f6:	f002 feff 	bl	80047f8 <HAL_SPI_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a00:	f000 fa50 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20004c58 	.word	0x20004c58
 8001a0c:	40003800 	.word	0x40003800

08001a10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a24:	463b      	mov	r3, r7
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <MX_TIM2_Init+0x94>)
 8001a2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <MX_TIM2_Init+0x94>)
 8001a36:	2253      	movs	r2, #83	; 0x53
 8001a38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_TIM2_Init+0x94>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <MX_TIM2_Init+0x94>)
 8001a42:	f04f 32ff 	mov.w	r2, #4294967295
 8001a46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <MX_TIM2_Init+0x94>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <MX_TIM2_Init+0x94>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a54:	4813      	ldr	r0, [pc, #76]	; (8001aa4 <MX_TIM2_Init+0x94>)
 8001a56:	f002 ff58 	bl	800490a <HAL_TIM_Base_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a60:	f000 fa20 	bl	8001ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <MX_TIM2_Init+0x94>)
 8001a72:	f003 fa15 	bl	8004ea0 <HAL_TIM_ConfigClockSource>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a7c:	f000 fa12 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a88:	463b      	mov	r3, r7
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_TIM2_Init+0x94>)
 8001a8e:	f003 fd9d 	bl	80055cc <HAL_TIMEx_MasterConfigSynchronization>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a98:	f000 fa04 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20004e3c 	.word	0x20004e3c

08001aa8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08e      	sub	sp, #56	; 0x38
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001abc:	f107 0320 	add.w	r3, r7, #32
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
 8001ad4:	615a      	str	r2, [r3, #20]
 8001ad6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ad8:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <MX_TIM3_Init+0xe4>)
 8001ada:	4a2d      	ldr	r2, [pc, #180]	; (8001b90 <MX_TIM3_Init+0xe8>)
 8001adc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 52.5-1;
 8001ade:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <MX_TIM3_Init+0xe4>)
 8001ae0:	2233      	movs	r2, #51	; 0x33
 8001ae2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae4:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <MX_TIM3_Init+0xe4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400-1;
 8001aea:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <MX_TIM3_Init+0xe4>)
 8001aec:	f240 128f 	movw	r2, #399	; 0x18f
 8001af0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <MX_TIM3_Init+0xe4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <MX_TIM3_Init+0xe4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001afe:	4823      	ldr	r0, [pc, #140]	; (8001b8c <MX_TIM3_Init+0xe4>)
 8001b00:	f002 ff03 	bl	800490a <HAL_TIM_Base_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001b0a:	f000 f9cb 	bl	8001ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	481c      	ldr	r0, [pc, #112]	; (8001b8c <MX_TIM3_Init+0xe4>)
 8001b1c:	f003 f9c0 	bl	8004ea0 <HAL_TIM_ConfigClockSource>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b26:	f000 f9bd 	bl	8001ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b2a:	4818      	ldr	r0, [pc, #96]	; (8001b8c <MX_TIM3_Init+0xe4>)
 8001b2c:	f002 ff9e 	bl	8004a6c <HAL_TIM_PWM_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001b36:	f000 f9b5 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b42:	f107 0320 	add.w	r3, r7, #32
 8001b46:	4619      	mov	r1, r3
 8001b48:	4810      	ldr	r0, [pc, #64]	; (8001b8c <MX_TIM3_Init+0xe4>)
 8001b4a:	f003 fd3f 	bl	80055cc <HAL_TIMEx_MasterConfigSynchronization>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b54:	f000 f9a6 	bl	8001ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b58:	2360      	movs	r3, #96	; 0x60
 8001b5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8001b5c:	23c7      	movs	r3, #199	; 0xc7
 8001b5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4807      	ldr	r0, [pc, #28]	; (8001b8c <MX_TIM3_Init+0xe4>)
 8001b70:	f003 f8d4 	bl	8004d1c <HAL_TIM_PWM_ConfigChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001b7a:	f000 f993 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b7e:	4803      	ldr	r0, [pc, #12]	; (8001b8c <MX_TIM3_Init+0xe4>)
 8001b80:	f000 fb8c 	bl	800229c <HAL_TIM_MspPostInit>

}
 8001b84:	bf00      	nop
 8001b86:	3738      	adds	r7, #56	; 0x38
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20004da0 	.word	0x20004da0
 8001b90:	40000400 	.word	0x40000400

08001b94 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9a:	f107 0320 	add.w	r3, r7, #32
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]
 8001bb2:	615a      	str	r2, [r3, #20]
 8001bb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bb6:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <MX_TIM5_Init+0xc4>)
 8001bb8:	4a28      	ldr	r2, [pc, #160]	; (8001c5c <MX_TIM5_Init+0xc8>)
 8001bba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1680-1;
 8001bbc:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <MX_TIM5_Init+0xc4>)
 8001bbe:	f240 628f 	movw	r2, #1679	; 0x68f
 8001bc2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <MX_TIM5_Init+0xc4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001bca:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <MX_TIM5_Init+0xc4>)
 8001bcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bd0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <MX_TIM5_Init+0xc4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <MX_TIM5_Init+0xc4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001bde:	481e      	ldr	r0, [pc, #120]	; (8001c58 <MX_TIM5_Init+0xc4>)
 8001be0:	f002 ff44 	bl	8004a6c <HAL_TIM_PWM_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001bea:	f000 f95b 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bf6:	f107 0320 	add.w	r3, r7, #32
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4816      	ldr	r0, [pc, #88]	; (8001c58 <MX_TIM5_Init+0xc4>)
 8001bfe:	f003 fce5 	bl	80055cc <HAL_TIMEx_MasterConfigSynchronization>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001c08:	f000 f94c 	bl	8001ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c0c:	2360      	movs	r3, #96	; 0x60
 8001c0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	2200      	movs	r2, #0
 8001c20:	4619      	mov	r1, r3
 8001c22:	480d      	ldr	r0, [pc, #52]	; (8001c58 <MX_TIM5_Init+0xc4>)
 8001c24:	f003 f87a 	bl	8004d1c <HAL_TIM_PWM_ConfigChannel>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001c2e:	f000 f939 	bl	8001ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2204      	movs	r2, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	4807      	ldr	r0, [pc, #28]	; (8001c58 <MX_TIM5_Init+0xc4>)
 8001c3a:	f003 f86f 	bl	8004d1c <HAL_TIM_PWM_ConfigChannel>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001c44:	f000 f92e 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c48:	4803      	ldr	r0, [pc, #12]	; (8001c58 <MX_TIM5_Init+0xc4>)
 8001c4a:	f000 fb27 	bl	800229c <HAL_TIM_MspPostInit>

}
 8001c4e:	bf00      	nop
 8001c50:	3728      	adds	r7, #40	; 0x28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20004d58 	.word	0x20004d58
 8001c5c:	40000c00 	.word	0x40000c00

08001c60 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_TIM11_Init+0x40>)
 8001c66:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <MX_TIM11_Init+0x44>)
 8001c68:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <MX_TIM11_Init+0x40>)
 8001c6c:	2253      	movs	r2, #83	; 0x53
 8001c6e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <MX_TIM11_Init+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <MX_TIM11_Init+0x40>)
 8001c78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c7c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <MX_TIM11_Init+0x40>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_TIM11_Init+0x40>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_TIM11_Init+0x40>)
 8001c8c:	f002 fe3d 	bl	800490a <HAL_TIM_Base_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001c96:	f000 f905 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20004de8 	.word	0x20004de8
 8001ca4:	40014800 	.word	0x40014800

08001ca8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cae:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <MX_USART2_UART_Init+0x50>)
 8001cb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cce:	220c      	movs	r2, #12
 8001cd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cde:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <MX_USART2_UART_Init+0x4c>)
 8001ce0:	f003 fcf6 	bl	80056d0 <HAL_UART_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cea:	f000 f8db 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20004e84 	.word	0x20004e84
 8001cf8:	40004400 	.word	0x40004400

08001cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <MX_GPIO_Init+0x118>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a3e      	ldr	r2, [pc, #248]	; (8001e14 <MX_GPIO_Init+0x118>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b3c      	ldr	r3, [pc, #240]	; (8001e14 <MX_GPIO_Init+0x118>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <MX_GPIO_Init+0x118>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a37      	ldr	r2, [pc, #220]	; (8001e14 <MX_GPIO_Init+0x118>)
 8001d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <MX_GPIO_Init+0x118>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <MX_GPIO_Init+0x118>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a30      	ldr	r2, [pc, #192]	; (8001e14 <MX_GPIO_Init+0x118>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <MX_GPIO_Init+0x118>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <MX_GPIO_Init+0x118>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a29      	ldr	r2, [pc, #164]	; (8001e14 <MX_GPIO_Init+0x118>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <MX_GPIO_Init+0x118>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CE_DS1302_Pin|IO_DS1302_Pin|CLK_DS1302_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8001d88:	4823      	ldr	r0, [pc, #140]	; (8001e18 <MX_GPIO_Init+0x11c>)
 8001d8a:	f001 f89b 	bl	8002ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|Latch_Pin
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f242 013f 	movw	r1, #8255	; 0x203f
 8001d94:	4821      	ldr	r0, [pc, #132]	; (8001e1c <MX_GPIO_Init+0x120>)
 8001d96:	f001 f895 	bl	8002ec4 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001da0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	481b      	ldr	r0, [pc, #108]	; (8001e20 <MX_GPIO_Init+0x124>)
 8001db2:	f000 feeb 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8001db6:	230f      	movs	r3, #15
 8001db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4815      	ldr	r0, [pc, #84]	; (8001e20 <MX_GPIO_Init+0x124>)
 8001dca:	f000 fedf 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin CE_DS1302_Pin IO_DS1302_Pin CLK_DS1302_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CE_DS1302_Pin|IO_DS1302_Pin|CLK_DS1302_Pin;
 8001dce:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4619      	mov	r1, r3
 8001de6:	480c      	ldr	r0, [pc, #48]	; (8001e18 <MX_GPIO_Init+0x11c>)
 8001de8:	f000 fed0 	bl	8002b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin LCD_D4_Pin Latch_Pin
                           LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D4_Pin|Latch_Pin
 8001dec:	f242 033f 	movw	r3, #8255	; 0x203f
 8001df0:	617b      	str	r3, [r7, #20]
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df2:	2301      	movs	r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	4805      	ldr	r0, [pc, #20]	; (8001e1c <MX_GPIO_Init+0x120>)
 8001e06:	f000 fec1 	bl	8002b8c <HAL_GPIO_Init>

}
 8001e0a:	bf00      	nop
 8001e0c:	3728      	adds	r7, #40	; 0x28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020800 	.word	0x40020800

08001e24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	4803      	ldr	r0, [pc, #12]	; (8001e3c <StartDefaultTask+0x18>)
 8001e30:	f001 f861 	bl	8002ef6 <HAL_GPIO_TogglePin>
	  osDelay(50); //
 8001e34:	2032      	movs	r0, #50	; 0x32
 8001e36:	f004 fd33 	bl	80068a0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001e3a:	e7f7      	b.n	8001e2c <StartDefaultTask+0x8>
 8001e3c:	40020000 	.word	0x40020000

08001e40 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  button_led_toggle_test();
 8001e48:	f7ff faf0 	bl	800142c <button_led_toggle_test>
	  osDelay(1);
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f004 fd27 	bl	80068a0 <osDelay>
	  button_led_toggle_test();
 8001e52:	e7f9      	b.n	8001e48 <StartTask02+0x8>

08001e54 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f004 fd1f 	bl	80068a0 <osDelay>
 8001e62:	e7fb      	b.n	8001e5c <StartTask03+0x8>

08001e64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e76:	f000 fcd1 	bl	800281c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM11) {
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d104      	bne.n	8001e8e <HAL_TIM_PeriodElapsedCallback+0x2a>
	  TIM11_1ms_counter++;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001e8c:	6013      	str	r3, [r2, #0]
    }
  /* USER CODE END Callback 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40014400 	.word	0x40014400
 8001e9c:	40014800 	.word	0x40014800
 8001ea0:	20000204 	.word	0x20000204

08001ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea8:	b672      	cpsid	i
}
 8001eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eac:	e7fe      	b.n	8001eac <Error_Handler+0x8>
	...

08001eb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_MspInit+0x54>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <HAL_MspInit+0x54>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_MspInit+0x54>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_MspInit+0x54>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <HAL_MspInit+0x54>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_MspInit+0x54>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	210f      	movs	r1, #15
 8001ef2:	f06f 0001 	mvn.w	r0, #1
 8001ef6:	f000 fd8d 	bl	8002a14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800

08001f08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08e      	sub	sp, #56	; 0x38
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a64      	ldr	r2, [pc, #400]	; (80020b8 <HAL_I2C_MspInit+0x1b0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d12c      	bne.n	8001f84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
 8001f2e:	4b63      	ldr	r3, [pc, #396]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a62      	ldr	r2, [pc, #392]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b60      	ldr	r3, [pc, #384]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	623b      	str	r3, [r7, #32]
 8001f44:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f46:	23c0      	movs	r3, #192	; 0xc0
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f4a:	2312      	movs	r3, #18
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f56:	2304      	movs	r3, #4
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4857      	ldr	r0, [pc, #348]	; (80020c0 <HAL_I2C_MspInit+0x1b8>)
 8001f62:	f000 fe13 	bl	8002b8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	4b54      	ldr	r3, [pc, #336]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4a53      	ldr	r2, [pc, #332]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8001f70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
 8001f76:	4b51      	ldr	r3, [pc, #324]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f82:	e094      	b.n	80020ae <HAL_I2C_MspInit+0x1a6>
  else if(hi2c->Instance==I2C2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a4e      	ldr	r2, [pc, #312]	; (80020c4 <HAL_I2C_MspInit+0x1bc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d13e      	bne.n	800200c <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a49      	ldr	r2, [pc, #292]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb0:	2312      	movs	r3, #18
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	483e      	ldr	r0, [pc, #248]	; (80020c0 <HAL_I2C_MspInit+0x1b8>)
 8001fc8:	f000 fde0 	bl	8002b8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd2:	2312      	movs	r3, #18
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001fde:	2309      	movs	r3, #9
 8001fe0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4835      	ldr	r0, [pc, #212]	; (80020c0 <HAL_I2C_MspInit+0x1b8>)
 8001fea:	f000 fdcf 	bl	8002b8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	4b32      	ldr	r3, [pc, #200]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	4a31      	ldr	r2, [pc, #196]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8001ff8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffe:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697b      	ldr	r3, [r7, #20]
}
 800200a:	e050      	b.n	80020ae <HAL_I2C_MspInit+0x1a6>
  else if(hi2c->Instance==I2C3)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a2d      	ldr	r2, [pc, #180]	; (80020c8 <HAL_I2C_MspInit+0x1c0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d14b      	bne.n	80020ae <HAL_I2C_MspInit+0x1a6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	4b28      	ldr	r3, [pc, #160]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a27      	ldr	r2, [pc, #156]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b25      	ldr	r3, [pc, #148]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a20      	ldr	r2, [pc, #128]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800204e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002054:	2312      	movs	r3, #18
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002060:	2304      	movs	r3, #4
 8002062:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002068:	4619      	mov	r1, r3
 800206a:	4818      	ldr	r0, [pc, #96]	; (80020cc <HAL_I2C_MspInit+0x1c4>)
 800206c:	f000 fd8e 	bl	8002b8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002076:	2312      	movs	r3, #18
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207e:	2303      	movs	r3, #3
 8002080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002082:	2304      	movs	r3, #4
 8002084:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208a:	4619      	mov	r1, r3
 800208c:	4810      	ldr	r0, [pc, #64]	; (80020d0 <HAL_I2C_MspInit+0x1c8>)
 800208e:	f000 fd7d 	bl	8002b8c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a08      	ldr	r2, [pc, #32]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 800209c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_I2C_MspInit+0x1b4>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
}
 80020ae:	bf00      	nop
 80020b0:	3738      	adds	r7, #56	; 0x38
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40005400 	.word	0x40005400
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020400 	.word	0x40020400
 80020c4:	40005800 	.word	0x40005800
 80020c8:	40005c00 	.word	0x40005c00
 80020cc:	40020800 	.word	0x40020800
 80020d0:	40020000 	.word	0x40020000

080020d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a28      	ldr	r2, [pc, #160]	; (8002194 <HAL_SPI_MspInit+0xc0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d14a      	bne.n	800218c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	4b27      	ldr	r3, [pc, #156]	; (8002198 <HAL_SPI_MspInit+0xc4>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a26      	ldr	r2, [pc, #152]	; (8002198 <HAL_SPI_MspInit+0xc4>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_SPI_MspInit+0xc4>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_SPI_MspInit+0xc4>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <HAL_SPI_MspInit+0xc4>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_SPI_MspInit+0xc4>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_SPI_MspInit+0xc4>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a18      	ldr	r2, [pc, #96]	; (8002198 <HAL_SPI_MspInit+0xc4>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_SPI_MspInit+0xc4>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    PC7     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800214a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800214e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	2303      	movs	r3, #3
 800215a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800215c:	2305      	movs	r3, #5
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	4619      	mov	r1, r3
 8002166:	480d      	ldr	r0, [pc, #52]	; (800219c <HAL_SPI_MspInit+0xc8>)
 8002168:	f000 fd10 	bl	8002b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002178:	2303      	movs	r3, #3
 800217a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800217c:	2305      	movs	r3, #5
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4619      	mov	r1, r3
 8002186:	4806      	ldr	r0, [pc, #24]	; (80021a0 <HAL_SPI_MspInit+0xcc>)
 8002188:	f000 fd00 	bl	8002b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800218c:	bf00      	nop
 800218e:	3728      	adds	r7, #40	; 0x28
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40003800 	.word	0x40003800
 8002198:	40023800 	.word	0x40023800
 800219c:	40020400 	.word	0x40020400
 80021a0:	40020800 	.word	0x40020800

080021a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d10e      	bne.n	80021d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <HAL_TIM_Base_MspInit+0xa8>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a23      	ldr	r2, [pc, #140]	; (800224c <HAL_TIM_Base_MspInit+0xa8>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b21      	ldr	r3, [pc, #132]	; (800224c <HAL_TIM_Base_MspInit+0xa8>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80021d2:	e036      	b.n	8002242 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <HAL_TIM_Base_MspInit+0xac>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d116      	bne.n	800220c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	4b1a      	ldr	r3, [pc, #104]	; (800224c <HAL_TIM_Base_MspInit+0xa8>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a19      	ldr	r2, [pc, #100]	; (800224c <HAL_TIM_Base_MspInit+0xa8>)
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <HAL_TIM_Base_MspInit+0xa8>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2105      	movs	r1, #5
 80021fe:	201d      	movs	r0, #29
 8002200:	f000 fc08 	bl	8002a14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002204:	201d      	movs	r0, #29
 8002206:	f000 fc21 	bl	8002a4c <HAL_NVIC_EnableIRQ>
}
 800220a:	e01a      	b.n	8002242 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a10      	ldr	r2, [pc, #64]	; (8002254 <HAL_TIM_Base_MspInit+0xb0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d115      	bne.n	8002242 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <HAL_TIM_Base_MspInit+0xa8>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	4a0b      	ldr	r2, [pc, #44]	; (800224c <HAL_TIM_Base_MspInit+0xa8>)
 8002220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002224:	6453      	str	r3, [r2, #68]	; 0x44
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_TIM_Base_MspInit+0xa8>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2105      	movs	r1, #5
 8002236:	201a      	movs	r0, #26
 8002238:	f000 fbec 	bl	8002a14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800223c:	201a      	movs	r0, #26
 800223e:	f000 fc05 	bl	8002a4c <HAL_NVIC_EnableIRQ>
}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40000400 	.word	0x40000400
 8002254:	40014800 	.word	0x40014800

08002258 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <HAL_TIM_PWM_MspInit+0x3c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d10d      	bne.n	8002286 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_TIM_PWM_MspInit+0x40>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <HAL_TIM_PWM_MspInit+0x40>)
 8002274:	f043 0308 	orr.w	r3, r3, #8
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <HAL_TIM_PWM_MspInit+0x40>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40000c00 	.word	0x40000c00
 8002298:	40023800 	.word	0x40023800

0800229c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a24      	ldr	r2, [pc, #144]	; (800234c <HAL_TIM_MspPostInit+0xb0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d11e      	bne.n	80022fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_TIM_MspPostInit+0xb4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a22      	ldr	r2, [pc, #136]	; (8002350 <HAL_TIM_MspPostInit+0xb4>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_TIM_MspPostInit+0xb4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = buzzer_Pin;
 80022da:	2340      	movs	r3, #64	; 0x40
 80022dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022ea:	2302      	movs	r3, #2
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	4619      	mov	r1, r3
 80022f4:	4817      	ldr	r0, [pc, #92]	; (8002354 <HAL_TIM_MspPostInit+0xb8>)
 80022f6:	f000 fc49 	bl	8002b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80022fa:	e022      	b.n	8002342 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a15      	ldr	r2, [pc, #84]	; (8002358 <HAL_TIM_MspPostInit+0xbc>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d11d      	bne.n	8002342 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_TIM_MspPostInit+0xb4>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a10      	ldr	r2, [pc, #64]	; (8002350 <HAL_TIM_MspPostInit+0xb4>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_TIM_MspPostInit+0xb4>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DHT11_Pin|SERVO_Pin;
 8002322:	2303      	movs	r3, #3
 8002324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002332:	2302      	movs	r3, #2
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4619      	mov	r1, r3
 800233c:	4805      	ldr	r0, [pc, #20]	; (8002354 <HAL_TIM_MspPostInit+0xb8>)
 800233e:	f000 fc25 	bl	8002b8c <HAL_GPIO_Init>
}
 8002342:	bf00      	nop
 8002344:	3728      	adds	r7, #40	; 0x28
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40000400 	.word	0x40000400
 8002350:	40023800 	.word	0x40023800
 8002354:	40020000 	.word	0x40020000
 8002358:	40000c00 	.word	0x40000c00

0800235c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	; 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <HAL_UART_MspInit+0x94>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d133      	bne.n	80023e6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_UART_MspInit+0x98>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a1b      	ldr	r2, [pc, #108]	; (80023f4 <HAL_UART_MspInit+0x98>)
 8002388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_UART_MspInit+0x98>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_UART_MspInit+0x98>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <HAL_UART_MspInit+0x98>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_UART_MspInit+0x98>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023b6:	230c      	movs	r3, #12
 80023b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023c6:	2307      	movs	r3, #7
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4619      	mov	r1, r3
 80023d0:	4809      	ldr	r0, [pc, #36]	; (80023f8 <HAL_UART_MspInit+0x9c>)
 80023d2:	f000 fbdb 	bl	8002b8c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2105      	movs	r1, #5
 80023da:	2026      	movs	r0, #38	; 0x26
 80023dc:	f000 fb1a 	bl	8002a14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023e0:	2026      	movs	r0, #38	; 0x26
 80023e2:	f000 fb33 	bl	8002a4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023e6:	bf00      	nop
 80023e8:	3728      	adds	r7, #40	; 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40004400 	.word	0x40004400
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020000 	.word	0x40020000

080023fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08c      	sub	sp, #48	; 0x30
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800240c:	2200      	movs	r2, #0
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	2019      	movs	r0, #25
 8002412:	f000 faff 	bl	8002a14 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002416:	2019      	movs	r0, #25
 8002418:	f000 fb18 	bl	8002a4c <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	4b1e      	ldr	r3, [pc, #120]	; (800249c <HAL_InitTick+0xa0>)
 8002422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002424:	4a1d      	ldr	r2, [pc, #116]	; (800249c <HAL_InitTick+0xa0>)
 8002426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242a:	6453      	str	r3, [r2, #68]	; 0x44
 800242c:	4b1b      	ldr	r3, [pc, #108]	; (800249c <HAL_InitTick+0xa0>)
 800242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002438:	f107 0210 	add.w	r2, r7, #16
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f002 f9a6 	bl	8004794 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002448:	f002 f990 	bl	800476c <HAL_RCC_GetPCLK2Freq>
 800244c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002450:	4a13      	ldr	r2, [pc, #76]	; (80024a0 <HAL_InitTick+0xa4>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	0c9b      	lsrs	r3, r3, #18
 8002458:	3b01      	subs	r3, #1
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_InitTick+0xa8>)
 800245e:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <HAL_InitTick+0xac>)
 8002460:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <HAL_InitTick+0xa8>)
 8002464:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002468:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800246a:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <HAL_InitTick+0xa8>)
 800246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <HAL_InitTick+0xa8>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_InitTick+0xa8>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 800247c:	4809      	ldr	r0, [pc, #36]	; (80024a4 <HAL_InitTick+0xa8>)
 800247e:	f002 fa44 	bl	800490a <HAL_TIM_Base_Init>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d104      	bne.n	8002492 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8002488:	4806      	ldr	r0, [pc, #24]	; (80024a4 <HAL_InitTick+0xa8>)
 800248a:	f002 fa8d 	bl	80049a8 <HAL_TIM_Base_Start_IT>
 800248e:	4603      	mov	r3, r0
 8002490:	e000      	b.n	8002494 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
}
 8002494:	4618      	mov	r0, r3
 8002496:	3730      	adds	r7, #48	; 0x30
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40023800 	.word	0x40023800
 80024a0:	431bde83 	.word	0x431bde83
 80024a4:	20004ec8 	.word	0x20004ec8
 80024a8:	40014400 	.word	0x40014400

080024ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <NMI_Handler+0x4>

080024b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b6:	e7fe      	b.n	80024b6 <HardFault_Handler+0x4>

080024b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <MemManage_Handler+0x4>

080024be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c2:	e7fe      	b.n	80024c2 <BusFault_Handler+0x4>

080024c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <UsageFault_Handler+0x4>

080024ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80024de:	f002 fb14 	bl	8004b0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20004ec8 	.word	0x20004ec8

080024ec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80024f2:	f002 fb0a 	bl	8004b0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20004de8 	.word	0x20004de8

08002500 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <TIM3_IRQHandler+0x10>)
 8002506:	f002 fb00 	bl	8004b0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20004da0 	.word	0x20004da0

08002514 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <USART2_IRQHandler+0x10>)
 800251a:	f003 f9e9 	bl	80058f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20004e84 	.word	0x20004e84

08002528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
	return 1;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <_kill>:

int _kill(int pid, int sig)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002542:	f006 fe4b 	bl	80091dc <__errno>
 8002546:	4603      	mov	r3, r0
 8002548:	2216      	movs	r2, #22
 800254a:	601a      	str	r2, [r3, #0]
	return -1;
 800254c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <_exit>:

void _exit (int status)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002560:	f04f 31ff 	mov.w	r1, #4294967295
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ffe7 	bl	8002538 <_kill>
	while (1) {}		/* Make sure we hang here */
 800256a:	e7fe      	b.n	800256a <_exit+0x12>

0800256c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	e00a      	b.n	8002594 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800257e:	f3af 8000 	nop.w
 8002582:	4601      	mov	r1, r0
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	60ba      	str	r2, [r7, #8]
 800258a:	b2ca      	uxtb	r2, r1
 800258c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3301      	adds	r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	dbf0      	blt.n	800257e <_read+0x12>
	}

return len;
 800259c:	687b      	ldr	r3, [r7, #4]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b086      	sub	sp, #24
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	e009      	b.n	80025cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	60ba      	str	r2, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff f88d 	bl	80016e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3301      	adds	r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	dbf1      	blt.n	80025b8 <_write+0x12>
	}
	return len;
 80025d4:	687b      	ldr	r3, [r7, #4]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <_close>:

int _close(int file)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
	return -1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002606:	605a      	str	r2, [r3, #4]
	return 0;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <_isatty>:

int _isatty(int file)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
	return 1;
 800261e:	2301      	movs	r3, #1
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
	return 0;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002650:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <_sbrk+0x5c>)
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <_sbrk+0x60>)
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <_sbrk+0x64>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002664:	4b11      	ldr	r3, [pc, #68]	; (80026ac <_sbrk+0x64>)
 8002666:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <_sbrk+0x68>)
 8002668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <_sbrk+0x64>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	429a      	cmp	r2, r3
 8002676:	d207      	bcs.n	8002688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002678:	f006 fdb0 	bl	80091dc <__errno>
 800267c:	4603      	mov	r3, r0
 800267e:	220c      	movs	r2, #12
 8002680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
 8002686:	e009      	b.n	800269c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002688:	4b08      	ldr	r3, [pc, #32]	; (80026ac <_sbrk+0x64>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <_sbrk+0x64>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	4a05      	ldr	r2, [pc, #20]	; (80026ac <_sbrk+0x64>)
 8002698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800269a:	68fb      	ldr	r3, [r7, #12]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20020000 	.word	0x20020000
 80026a8:	00000400 	.word	0x00000400
 80026ac:	20000208 	.word	0x20000208
 80026b0:	20005290 	.word	0x20005290

080026b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <SystemInit+0x20>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <SystemInit+0x20>)
 80026c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <HAL_UART_RxCpltCallback>:
  * 예) comportmaster로 부터 1char를 수신하면 HAL_UART_RxCpltCallback으로 진입
  * 	9600bps인 경우 RxCpltCallback를 수행 후 1ms이내에는 빠져 나가야 한다.
  * 	115200bps 						   86us
   */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	volatile static int i = 0;	// buffer의 index


	if (huart == &huart2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a22      	ldr	r2, [pc, #136]	; (800276c <HAL_UART_RxCpltCallback+0x94>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d13d      	bne.n	8002764 <HAL_UART_RxCpltCallback+0x8c>
	{
		if(rx_data == '\n')
 80026e8:	4b21      	ldr	r3, [pc, #132]	; (8002770 <HAL_UART_RxCpltCallback+0x98>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b0a      	cmp	r3, #10
 80026ee:	d122      	bne.n	8002736 <HAL_UART_RxCpltCallback+0x5e>
		{
			rx_buff[rear++][i] = 0; // 문장의 끝은 항상 0
 80026f0:	4b20      	ldr	r3, [pc, #128]	; (8002774 <HAL_UART_RxCpltCallback+0x9c>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	1c53      	adds	r3, r2, #1
 80026f6:	491f      	ldr	r1, [pc, #124]	; (8002774 <HAL_UART_RxCpltCallback+0x9c>)
 80026f8:	600b      	str	r3, [r1, #0]
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	481f      	ldr	r0, [pc, #124]	; (800277c <HAL_UART_RxCpltCallback+0xa4>)
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4403      	add	r3, r0
 800270a:	440b      	add	r3, r1
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
			rear %= COMMAND_NUMBER; // 원형큐
 8002710:	4b18      	ldr	r3, [pc, #96]	; (8002774 <HAL_UART_RxCpltCallback+0x9c>)
 8002712:	6819      	ldr	r1, [r3, #0]
 8002714:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <HAL_UART_RxCpltCallback+0xa8>)
 8002716:	fb83 2301 	smull	r2, r3, r3, r1
 800271a:	10da      	asrs	r2, r3, #3
 800271c:	17cb      	asrs	r3, r1, #31
 800271e:	1ad2      	subs	r2, r2, r3
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	1aca      	subs	r2, r1, r3
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_UART_RxCpltCallback+0x9c>)
 800272c:	601a      	str	r2, [r3, #0]
			i = 0; // 새로오는건 버퍼에 새로우 채워야함 (다른 메시지니치!)
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	e011      	b.n	800275a <HAL_UART_RxCpltCallback+0x82>
			// 큐 full 여부 확인
		}
		else
		{
			// 그래야 버퍼에 넣기 (push)
			rx_buff[rear][i++] = rx_data;
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <HAL_UART_RxCpltCallback+0x9c>)
 8002738:	6819      	ldr	r1, [r3, #0]
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	1c53      	adds	r3, r2, #1
 8002740:	480d      	ldr	r0, [pc, #52]	; (8002778 <HAL_UART_RxCpltCallback+0xa0>)
 8002742:	6003      	str	r3, [r0, #0]
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_UART_RxCpltCallback+0x98>)
 8002746:	781c      	ldrb	r4, [r3, #0]
 8002748:	480c      	ldr	r0, [pc, #48]	; (800277c <HAL_UART_RxCpltCallback+0xa4>)
 800274a:	460b      	mov	r3, r1
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4403      	add	r3, r0
 8002754:	4413      	add	r3, r2
 8002756:	4622      	mov	r2, r4
 8002758:	701a      	strb	r2, [r3, #0]
			// command length 확인
		}
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);	// 주의 : 반드시 집어 넣어야 다음 INT가 발생
 800275a:	2201      	movs	r2, #1
 800275c:	4904      	ldr	r1, [pc, #16]	; (8002770 <HAL_UART_RxCpltCallback+0x98>)
 800275e:	4803      	ldr	r0, [pc, #12]	; (800276c <HAL_UART_RxCpltCallback+0x94>)
 8002760:	f003 f895 	bl	800588e <HAL_UART_Receive_IT>
	}
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bd90      	pop	{r4, r7, pc}
 800276c:	20004e84 	.word	0x20004e84
 8002770:	20004e34 	.word	0x20004e34
 8002774:	20004f10 	.word	0x20004f10
 8002778:	2000020c 	.word	0x2000020c
 800277c:	20004f14 	.word	0x20004f14
 8002780:	66666667 	.word	0x66666667

08002784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002788:	480d      	ldr	r0, [pc, #52]	; (80027c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800278a:	490e      	ldr	r1, [pc, #56]	; (80027c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800278c:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800278e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002790:	e002      	b.n	8002798 <LoopCopyDataInit>

08002792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002796:	3304      	adds	r3, #4

08002798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800279a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800279c:	d3f9      	bcc.n	8002792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800279e:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027a0:	4c0b      	ldr	r4, [pc, #44]	; (80027d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a4:	e001      	b.n	80027aa <LoopFillZerobss>

080027a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a8:	3204      	adds	r2, #4

080027aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027ac:	d3fb      	bcc.n	80027a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027ae:	f7ff ff81 	bl	80026b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027b2:	f006 fe0f 	bl	80093d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027b6:	f7fe ffa5 	bl	8001704 <main>
  bx  lr    
 80027ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80027c8:	0800c58c 	.word	0x0800c58c
  ldr r2, =_sbss
 80027cc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80027d0:	20005290 	.word	0x20005290

080027d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027d4:	e7fe      	b.n	80027d4 <ADC_IRQHandler>
	...

080027d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027dc:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <HAL_Init+0x40>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0d      	ldr	r2, [pc, #52]	; (8002818 <HAL_Init+0x40>)
 80027e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_Init+0x40>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <HAL_Init+0x40>)
 80027ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f4:	4b08      	ldr	r3, [pc, #32]	; (8002818 <HAL_Init+0x40>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a07      	ldr	r2, [pc, #28]	; (8002818 <HAL_Init+0x40>)
 80027fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002800:	2003      	movs	r0, #3
 8002802:	f000 f8fc 	bl	80029fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002806:	200f      	movs	r0, #15
 8002808:	f7ff fdf8 	bl	80023fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800280c:	f7ff fb50 	bl	8001eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023c00 	.word	0x40023c00

0800281c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_IncTick+0x20>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_IncTick+0x24>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4413      	add	r3, r2
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <HAL_IncTick+0x24>)
 800282e:	6013      	str	r3, [r2, #0]
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000010 	.word	0x20000010
 8002840:	2000523c 	.word	0x2000523c

08002844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return uwTick;
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_GetTick+0x14>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	2000523c 	.word	0x2000523c

0800285c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff ffee 	bl	8002844 <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d005      	beq.n	8002882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_Delay+0x44>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002882:	bf00      	nop
 8002884:	f7ff ffde 	bl	8002844 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	429a      	cmp	r2, r3
 8002892:	d8f7      	bhi.n	8002884 <HAL_Delay+0x28>
  {
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000010 	.word	0x20000010

080028a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <__NVIC_GetPriorityGrouping+0x18>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	2b00      	cmp	r3, #0
 8002918:	db0b      	blt.n	8002932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4907      	ldr	r1, [pc, #28]	; (8002940 <__NVIC_EnableIRQ+0x38>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2001      	movs	r0, #1
 800292a:	fa00 f202 	lsl.w	r2, r0, r2
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000e100 	.word	0xe000e100

08002944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	2b00      	cmp	r3, #0
 8002956:	db0a      	blt.n	800296e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	490c      	ldr	r1, [pc, #48]	; (8002990 <__NVIC_SetPriority+0x4c>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	0112      	lsls	r2, r2, #4
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	440b      	add	r3, r1
 8002968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800296c:	e00a      	b.n	8002984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4908      	ldr	r1, [pc, #32]	; (8002994 <__NVIC_SetPriority+0x50>)
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	3b04      	subs	r3, #4
 800297c:	0112      	lsls	r2, r2, #4
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	440b      	add	r3, r1
 8002982:	761a      	strb	r2, [r3, #24]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000e100 	.word	0xe000e100
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	; 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f1c3 0307 	rsb	r3, r3, #7
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	bf28      	it	cs
 80029b6:	2304      	movcs	r3, #4
 80029b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3304      	adds	r3, #4
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d902      	bls.n	80029c8 <NVIC_EncodePriority+0x30>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3b03      	subs	r3, #3
 80029c6:	e000      	b.n	80029ca <NVIC_EncodePriority+0x32>
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	401a      	ands	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e0:	f04f 31ff 	mov.w	r1, #4294967295
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	43d9      	mvns	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	4313      	orrs	r3, r2
         );
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3724      	adds	r7, #36	; 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff ff4c 	bl	80028a4 <__NVIC_SetPriorityGrouping>
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a26:	f7ff ff61 	bl	80028ec <__NVIC_GetPriorityGrouping>
 8002a2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	6978      	ldr	r0, [r7, #20]
 8002a32:	f7ff ffb1 	bl	8002998 <NVIC_EncodePriority>
 8002a36:	4602      	mov	r2, r0
 8002a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff ff80 	bl	8002944 <__NVIC_SetPriority>
}
 8002a44:	bf00      	nop
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff ff54 	bl	8002908 <__NVIC_EnableIRQ>
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a76:	f7ff fee5 	bl	8002844 <HAL_GetTick>
 8002a7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d008      	beq.n	8002a9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2280      	movs	r2, #128	; 0x80
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e052      	b.n	8002b40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0216 	bic.w	r2, r2, #22
 8002aa8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d103      	bne.n	8002aca <HAL_DMA_Abort+0x62>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0208 	bic.w	r2, r2, #8
 8002ad8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0201 	bic.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aea:	e013      	b.n	8002b14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aec:	f7ff feaa 	bl	8002844 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d90c      	bls.n	8002b14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2220      	movs	r2, #32
 8002afe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2203      	movs	r2, #3
 8002b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e015      	b.n	8002b40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1e4      	bne.n	8002aec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	223f      	movs	r2, #63	; 0x3f
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d004      	beq.n	8002b66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2280      	movs	r2, #128	; 0x80
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00c      	b.n	8002b80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2205      	movs	r2, #5
 8002b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	; 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	e159      	b.n	8002e5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ba8:	2201      	movs	r2, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	f040 8148 	bne.w	8002e56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d005      	beq.n	8002bde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d130      	bne.n	8002c40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	2203      	movs	r2, #3
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c14:	2201      	movs	r2, #1
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 0201 	and.w	r2, r3, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d017      	beq.n	8002c7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	2203      	movs	r2, #3
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d123      	bne.n	8002cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	08da      	lsrs	r2, r3, #3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3208      	adds	r2, #8
 8002c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	220f      	movs	r2, #15
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	08da      	lsrs	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3208      	adds	r2, #8
 8002cca:	69b9      	ldr	r1, [r7, #24]
 8002ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0203 	and.w	r2, r3, #3
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80a2 	beq.w	8002e56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	4b57      	ldr	r3, [pc, #348]	; (8002e74 <HAL_GPIO_Init+0x2e8>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	4a56      	ldr	r2, [pc, #344]	; (8002e74 <HAL_GPIO_Init+0x2e8>)
 8002d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d20:	6453      	str	r3, [r2, #68]	; 0x44
 8002d22:	4b54      	ldr	r3, [pc, #336]	; (8002e74 <HAL_GPIO_Init+0x2e8>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d2e:	4a52      	ldr	r2, [pc, #328]	; (8002e78 <HAL_GPIO_Init+0x2ec>)
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	089b      	lsrs	r3, r3, #2
 8002d34:	3302      	adds	r3, #2
 8002d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	220f      	movs	r2, #15
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a49      	ldr	r2, [pc, #292]	; (8002e7c <HAL_GPIO_Init+0x2f0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d019      	beq.n	8002d8e <HAL_GPIO_Init+0x202>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a48      	ldr	r2, [pc, #288]	; (8002e80 <HAL_GPIO_Init+0x2f4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d013      	beq.n	8002d8a <HAL_GPIO_Init+0x1fe>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a47      	ldr	r2, [pc, #284]	; (8002e84 <HAL_GPIO_Init+0x2f8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00d      	beq.n	8002d86 <HAL_GPIO_Init+0x1fa>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a46      	ldr	r2, [pc, #280]	; (8002e88 <HAL_GPIO_Init+0x2fc>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d007      	beq.n	8002d82 <HAL_GPIO_Init+0x1f6>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a45      	ldr	r2, [pc, #276]	; (8002e8c <HAL_GPIO_Init+0x300>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d101      	bne.n	8002d7e <HAL_GPIO_Init+0x1f2>
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	e008      	b.n	8002d90 <HAL_GPIO_Init+0x204>
 8002d7e:	2307      	movs	r3, #7
 8002d80:	e006      	b.n	8002d90 <HAL_GPIO_Init+0x204>
 8002d82:	2303      	movs	r3, #3
 8002d84:	e004      	b.n	8002d90 <HAL_GPIO_Init+0x204>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e002      	b.n	8002d90 <HAL_GPIO_Init+0x204>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <HAL_GPIO_Init+0x204>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	f002 0203 	and.w	r2, r2, #3
 8002d96:	0092      	lsls	r2, r2, #2
 8002d98:	4093      	lsls	r3, r2
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002da0:	4935      	ldr	r1, [pc, #212]	; (8002e78 <HAL_GPIO_Init+0x2ec>)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	3302      	adds	r3, #2
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dae:	4b38      	ldr	r3, [pc, #224]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd2:	4a2f      	ldr	r2, [pc, #188]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dd8:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dfc:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e02:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e26:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e50:	4a0f      	ldr	r2, [pc, #60]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b0f      	cmp	r3, #15
 8002e60:	f67f aea2 	bls.w	8002ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	3724      	adds	r7, #36	; 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40013800 	.word	0x40013800
 8002e7c:	40020000 	.word	0x40020000
 8002e80:	40020400 	.word	0x40020400
 8002e84:	40020800 	.word	0x40020800
 8002e88:	40020c00 	.word	0x40020c00
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40013c00 	.word	0x40013c00

08002e94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	887b      	ldrh	r3, [r7, #2]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
 8002eb0:	e001      	b.n	8002eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	807b      	strh	r3, [r7, #2]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ed4:	787b      	ldrb	r3, [r7, #1]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eda:	887a      	ldrh	r2, [r7, #2]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ee0:	e003      	b.n	8002eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ee2:	887b      	ldrh	r3, [r7, #2]
 8002ee4:	041a      	lsls	r2, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	619a      	str	r2, [r3, #24]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b085      	sub	sp, #20
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	460b      	mov	r3, r1
 8002f00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f08:	887a      	ldrh	r2, [r7, #2]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	041a      	lsls	r2, r3, #16
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	43d9      	mvns	r1, r3
 8002f14:	887b      	ldrh	r3, [r7, #2]
 8002f16:	400b      	ands	r3, r1
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	619a      	str	r2, [r3, #24]
}
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e12b      	b.n	8003196 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fe ffd8 	bl	8001f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	; 0x24
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f90:	f001 fbd8 	bl	8004744 <HAL_RCC_GetPCLK1Freq>
 8002f94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4a81      	ldr	r2, [pc, #516]	; (80031a0 <HAL_I2C_Init+0x274>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d807      	bhi.n	8002fb0 <HAL_I2C_Init+0x84>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a80      	ldr	r2, [pc, #512]	; (80031a4 <HAL_I2C_Init+0x278>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	bf94      	ite	ls
 8002fa8:	2301      	movls	r3, #1
 8002faa:	2300      	movhi	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	e006      	b.n	8002fbe <HAL_I2C_Init+0x92>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4a7d      	ldr	r2, [pc, #500]	; (80031a8 <HAL_I2C_Init+0x27c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	bf94      	ite	ls
 8002fb8:	2301      	movls	r3, #1
 8002fba:	2300      	movhi	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e0e7      	b.n	8003196 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4a78      	ldr	r2, [pc, #480]	; (80031ac <HAL_I2C_Init+0x280>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	0c9b      	lsrs	r3, r3, #18
 8002fd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4a6a      	ldr	r2, [pc, #424]	; (80031a0 <HAL_I2C_Init+0x274>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d802      	bhi.n	8003000 <HAL_I2C_Init+0xd4>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	e009      	b.n	8003014 <HAL_I2C_Init+0xe8>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	4a69      	ldr	r2, [pc, #420]	; (80031b0 <HAL_I2C_Init+0x284>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	3301      	adds	r3, #1
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003026:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	495c      	ldr	r1, [pc, #368]	; (80031a0 <HAL_I2C_Init+0x274>)
 8003030:	428b      	cmp	r3, r1
 8003032:	d819      	bhi.n	8003068 <HAL_I2C_Init+0x13c>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1e59      	subs	r1, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003042:	1c59      	adds	r1, r3, #1
 8003044:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003048:	400b      	ands	r3, r1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_I2C_Init+0x138>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1e59      	subs	r1, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fbb1 f3f3 	udiv	r3, r1, r3
 800305c:	3301      	adds	r3, #1
 800305e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003062:	e051      	b.n	8003108 <HAL_I2C_Init+0x1dc>
 8003064:	2304      	movs	r3, #4
 8003066:	e04f      	b.n	8003108 <HAL_I2C_Init+0x1dc>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d111      	bne.n	8003094 <HAL_I2C_Init+0x168>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1e58      	subs	r0, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	440b      	add	r3, r1
 800307e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003082:	3301      	adds	r3, #1
 8003084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	e012      	b.n	80030ba <HAL_I2C_Init+0x18e>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1e58      	subs	r0, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	0099      	lsls	r1, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030aa:	3301      	adds	r3, #1
 80030ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_I2C_Init+0x196>
 80030be:	2301      	movs	r3, #1
 80030c0:	e022      	b.n	8003108 <HAL_I2C_Init+0x1dc>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10e      	bne.n	80030e8 <HAL_I2C_Init+0x1bc>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1e58      	subs	r0, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	460b      	mov	r3, r1
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	440b      	add	r3, r1
 80030d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030dc:	3301      	adds	r3, #1
 80030de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e6:	e00f      	b.n	8003108 <HAL_I2C_Init+0x1dc>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	1e58      	subs	r0, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	0099      	lsls	r1, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003104:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	6809      	ldr	r1, [r1, #0]
 800310c:	4313      	orrs	r3, r2
 800310e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69da      	ldr	r2, [r3, #28]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003136:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6911      	ldr	r1, [r2, #16]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68d2      	ldr	r2, [r2, #12]
 8003142:	4311      	orrs	r1, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	430b      	orrs	r3, r1
 800314a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	000186a0 	.word	0x000186a0
 80031a4:	001e847f 	.word	0x001e847f
 80031a8:	003d08ff 	.word	0x003d08ff
 80031ac:	431bde83 	.word	0x431bde83
 80031b0:	10624dd3 	.word	0x10624dd3

080031b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	4608      	mov	r0, r1
 80031be:	4611      	mov	r1, r2
 80031c0:	461a      	mov	r2, r3
 80031c2:	4603      	mov	r3, r0
 80031c4:	817b      	strh	r3, [r7, #10]
 80031c6:	460b      	mov	r3, r1
 80031c8:	813b      	strh	r3, [r7, #8]
 80031ca:	4613      	mov	r3, r2
 80031cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031ce:	f7ff fb39 	bl	8002844 <HAL_GetTick>
 80031d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b20      	cmp	r3, #32
 80031de:	f040 80d9 	bne.w	8003394 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	2319      	movs	r3, #25
 80031e8:	2201      	movs	r2, #1
 80031ea:	496d      	ldr	r1, [pc, #436]	; (80033a0 <HAL_I2C_Mem_Write+0x1ec>)
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 fc7f 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031f8:	2302      	movs	r3, #2
 80031fa:	e0cc      	b.n	8003396 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_I2C_Mem_Write+0x56>
 8003206:	2302      	movs	r3, #2
 8003208:	e0c5      	b.n	8003396 <HAL_I2C_Mem_Write+0x1e2>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b01      	cmp	r3, #1
 800321e:	d007      	beq.n	8003230 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800323e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2221      	movs	r2, #33	; 0x21
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2240      	movs	r2, #64	; 0x40
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a3a      	ldr	r2, [r7, #32]
 800325a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003260:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4a4d      	ldr	r2, [pc, #308]	; (80033a4 <HAL_I2C_Mem_Write+0x1f0>)
 8003270:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003272:	88f8      	ldrh	r0, [r7, #6]
 8003274:	893a      	ldrh	r2, [r7, #8]
 8003276:	8979      	ldrh	r1, [r7, #10]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	4603      	mov	r3, r0
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 fab6 	bl	80037f4 <I2C_RequestMemoryWrite>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d052      	beq.n	8003334 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e081      	b.n	8003396 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 fd00 	bl	8003c9c <I2C_WaitOnTXEFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00d      	beq.n	80032be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d107      	bne.n	80032ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e06b      	b.n	8003396 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	781a      	ldrb	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d11b      	bne.n	8003334 <HAL_I2C_Mem_Write+0x180>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003300:	2b00      	cmp	r3, #0
 8003302:	d017      	beq.n	8003334 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1aa      	bne.n	8003292 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fcec 	bl	8003d1e <I2C_WaitOnBTFFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00d      	beq.n	8003368 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	2b04      	cmp	r3, #4
 8003352:	d107      	bne.n	8003364 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003362:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e016      	b.n	8003396 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	e000      	b.n	8003396 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003394:	2302      	movs	r3, #2
  }
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	00100002 	.word	0x00100002
 80033a4:	ffff0000 	.word	0xffff0000

080033a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08c      	sub	sp, #48	; 0x30
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	4608      	mov	r0, r1
 80033b2:	4611      	mov	r1, r2
 80033b4:	461a      	mov	r2, r3
 80033b6:	4603      	mov	r3, r0
 80033b8:	817b      	strh	r3, [r7, #10]
 80033ba:	460b      	mov	r3, r1
 80033bc:	813b      	strh	r3, [r7, #8]
 80033be:	4613      	mov	r3, r2
 80033c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033c2:	f7ff fa3f 	bl	8002844 <HAL_GetTick>
 80033c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	f040 8208 	bne.w	80037e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	2319      	movs	r3, #25
 80033dc:	2201      	movs	r2, #1
 80033de:	497b      	ldr	r1, [pc, #492]	; (80035cc <HAL_I2C_Mem_Read+0x224>)
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 fb85 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80033ec:	2302      	movs	r3, #2
 80033ee:	e1fb      	b.n	80037e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_I2C_Mem_Read+0x56>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e1f4      	b.n	80037e8 <HAL_I2C_Mem_Read+0x440>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d007      	beq.n	8003424 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003432:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2222      	movs	r2, #34	; 0x22
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2240      	movs	r2, #64	; 0x40
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800344e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003454:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a5b      	ldr	r2, [pc, #364]	; (80035d0 <HAL_I2C_Mem_Read+0x228>)
 8003464:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003466:	88f8      	ldrh	r0, [r7, #6]
 8003468:	893a      	ldrh	r2, [r7, #8]
 800346a:	8979      	ldrh	r1, [r7, #10]
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	4603      	mov	r3, r0
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fa52 	bl	8003920 <I2C_RequestMemoryRead>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e1b0      	b.n	80037e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	2b00      	cmp	r3, #0
 800348c:	d113      	bne.n	80034b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348e:	2300      	movs	r3, #0
 8003490:	623b      	str	r3, [r7, #32]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	623b      	str	r3, [r7, #32]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	623b      	str	r3, [r7, #32]
 80034a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e184      	b.n	80037c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d11b      	bne.n	80034f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	61fb      	str	r3, [r7, #28]
 80034e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	e164      	b.n	80037c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d11b      	bne.n	8003536 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800351c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800351e:	2300      	movs	r3, #0
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	e144      	b.n	80037c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800354c:	e138      	b.n	80037c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	2b03      	cmp	r3, #3
 8003554:	f200 80f1 	bhi.w	800373a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355c:	2b01      	cmp	r3, #1
 800355e:	d123      	bne.n	80035a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003562:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fc1b 	bl	8003da0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e139      	b.n	80037e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035a6:	e10b      	b.n	80037c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d14e      	bne.n	800364e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b6:	2200      	movs	r2, #0
 80035b8:	4906      	ldr	r1, [pc, #24]	; (80035d4 <HAL_I2C_Mem_Read+0x22c>)
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fa98 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e10e      	b.n	80037e8 <HAL_I2C_Mem_Read+0x440>
 80035ca:	bf00      	nop
 80035cc:	00100002 	.word	0x00100002
 80035d0:	ffff0000 	.word	0xffff0000
 80035d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800364c:	e0b8      	b.n	80037c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	2200      	movs	r2, #0
 8003656:	4966      	ldr	r1, [pc, #408]	; (80037f0 <HAL_I2C_Mem_Read+0x448>)
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fa49 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0bf      	b.n	80037e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691a      	ldr	r2, [r3, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b0:	2200      	movs	r2, #0
 80036b2:	494f      	ldr	r1, [pc, #316]	; (80037f0 <HAL_I2C_Mem_Read+0x448>)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fa1b 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e091      	b.n	80037e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003738:	e042      	b.n	80037c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800373a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 fb2e 	bl	8003da0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e04c      	b.n	80037e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b04      	cmp	r3, #4
 800378c:	d118      	bne.n	80037c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f47f aec2 	bne.w	800354e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e000      	b.n	80037e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80037e6:	2302      	movs	r3, #2
  }
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3728      	adds	r7, #40	; 0x28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	00010004 	.word	0x00010004

080037f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	4608      	mov	r0, r1
 80037fe:	4611      	mov	r1, r2
 8003800:	461a      	mov	r2, r3
 8003802:	4603      	mov	r3, r0
 8003804:	817b      	strh	r3, [r7, #10]
 8003806:	460b      	mov	r3, r1
 8003808:	813b      	strh	r3, [r7, #8]
 800380a:	4613      	mov	r3, r2
 800380c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	2200      	movs	r2, #0
 8003826:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f960 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00d      	beq.n	8003852 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003844:	d103      	bne.n	800384e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800384c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e05f      	b.n	8003912 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003860:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	6a3a      	ldr	r2, [r7, #32]
 8003866:	492d      	ldr	r1, [pc, #180]	; (800391c <I2C_RequestMemoryWrite+0x128>)
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f998 	bl	8003b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e04c      	b.n	8003912 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800388e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003890:	6a39      	ldr	r1, [r7, #32]
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 fa02 	bl	8003c9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d107      	bne.n	80038b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e02b      	b.n	8003912 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038ba:	88fb      	ldrh	r3, [r7, #6]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d105      	bne.n	80038cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038c0:	893b      	ldrh	r3, [r7, #8]
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	611a      	str	r2, [r3, #16]
 80038ca:	e021      	b.n	8003910 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038cc:	893b      	ldrh	r3, [r7, #8]
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038dc:	6a39      	ldr	r1, [r7, #32]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f9dc 	bl	8003c9c <I2C_WaitOnTXEFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d107      	bne.n	8003902 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003900:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e005      	b.n	8003912 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003906:	893b      	ldrh	r3, [r7, #8]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	00010002 	.word	0x00010002

08003920 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	4608      	mov	r0, r1
 800392a:	4611      	mov	r1, r2
 800392c:	461a      	mov	r2, r3
 800392e:	4603      	mov	r3, r0
 8003930:	817b      	strh	r3, [r7, #10]
 8003932:	460b      	mov	r3, r1
 8003934:	813b      	strh	r3, [r7, #8]
 8003936:	4613      	mov	r3, r2
 8003938:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003948:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003958:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	2200      	movs	r2, #0
 8003962:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f8c2 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00d      	beq.n	800398e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003980:	d103      	bne.n	800398a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e0aa      	b.n	8003ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800398e:	897b      	ldrh	r3, [r7, #10]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800399c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	6a3a      	ldr	r2, [r7, #32]
 80039a2:	4952      	ldr	r1, [pc, #328]	; (8003aec <I2C_RequestMemoryRead+0x1cc>)
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f8fa 	bl	8003b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e097      	b.n	8003ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039cc:	6a39      	ldr	r1, [r7, #32]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f964 	bl	8003c9c <I2C_WaitOnTXEFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00d      	beq.n	80039f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d107      	bne.n	80039f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e076      	b.n	8003ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039f6:	88fb      	ldrh	r3, [r7, #6]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d105      	bne.n	8003a08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039fc:	893b      	ldrh	r3, [r7, #8]
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	611a      	str	r2, [r3, #16]
 8003a06:	e021      	b.n	8003a4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a08:	893b      	ldrh	r3, [r7, #8]
 8003a0a:	0a1b      	lsrs	r3, r3, #8
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	6a39      	ldr	r1, [r7, #32]
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f93e 	bl	8003c9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00d      	beq.n	8003a42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d107      	bne.n	8003a3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e050      	b.n	8003ae4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a42:	893b      	ldrh	r3, [r7, #8]
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4e:	6a39      	ldr	r1, [r7, #32]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f923 	bl	8003c9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00d      	beq.n	8003a78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d107      	bne.n	8003a74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e035      	b.n	8003ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f82b 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00d      	beq.n	8003abc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aae:	d103      	bne.n	8003ab8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e013      	b.n	8003ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003abc:	897b      	ldrh	r3, [r7, #10]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	6a3a      	ldr	r2, [r7, #32]
 8003ad0:	4906      	ldr	r1, [pc, #24]	; (8003aec <I2C_RequestMemoryRead+0x1cc>)
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f863 	bl	8003b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	00010002 	.word	0x00010002

08003af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b00:	e025      	b.n	8003b4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d021      	beq.n	8003b4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0a:	f7fe fe9b 	bl	8002844 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d302      	bcc.n	8003b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d116      	bne.n	8003b4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f043 0220 	orr.w	r2, r3, #32
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e023      	b.n	8003b96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	0c1b      	lsrs	r3, r3, #16
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d10d      	bne.n	8003b74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	43da      	mvns	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4013      	ands	r3, r2
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	bf0c      	ite	eq
 8003b6a:	2301      	moveq	r3, #1
 8003b6c:	2300      	movne	r3, #0
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	461a      	mov	r2, r3
 8003b72:	e00c      	b.n	8003b8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	43da      	mvns	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	bf0c      	ite	eq
 8003b86:	2301      	moveq	r3, #1
 8003b88:	2300      	movne	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d0b6      	beq.n	8003b02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bac:	e051      	b.n	8003c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbc:	d123      	bne.n	8003c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bcc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f043 0204 	orr.w	r2, r3, #4
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e046      	b.n	8003c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0c:	d021      	beq.n	8003c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0e:	f7fe fe19 	bl	8002844 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d302      	bcc.n	8003c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d116      	bne.n	8003c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f043 0220 	orr.w	r2, r3, #32
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e020      	b.n	8003c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d10c      	bne.n	8003c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	43da      	mvns	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4013      	ands	r3, r2
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bf14      	ite	ne
 8003c6e:	2301      	movne	r3, #1
 8003c70:	2300      	moveq	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	e00b      	b.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	43da      	mvns	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4013      	ands	r3, r2
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d18d      	bne.n	8003bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ca8:	e02d      	b.n	8003d06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f8ce 	bl	8003e4c <I2C_IsAcknowledgeFailed>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e02d      	b.n	8003d16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d021      	beq.n	8003d06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc2:	f7fe fdbf 	bl	8002844 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d302      	bcc.n	8003cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d116      	bne.n	8003d06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f043 0220 	orr.w	r2, r3, #32
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e007      	b.n	8003d16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d10:	2b80      	cmp	r3, #128	; 0x80
 8003d12:	d1ca      	bne.n	8003caa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d2a:	e02d      	b.n	8003d88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f88d 	bl	8003e4c <I2C_IsAcknowledgeFailed>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e02d      	b.n	8003d98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d021      	beq.n	8003d88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d44:	f7fe fd7e 	bl	8002844 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d302      	bcc.n	8003d5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d116      	bne.n	8003d88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	f043 0220 	orr.w	r2, r3, #32
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e007      	b.n	8003d98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d1ca      	bne.n	8003d2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dac:	e042      	b.n	8003e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	2b10      	cmp	r3, #16
 8003dba:	d119      	bne.n	8003df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0210 	mvn.w	r2, #16
 8003dc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e029      	b.n	8003e44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df0:	f7fe fd28 	bl	8002844 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d302      	bcc.n	8003e06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d116      	bne.n	8003e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	f043 0220 	orr.w	r2, r3, #32
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e007      	b.n	8003e44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3e:	2b40      	cmp	r3, #64	; 0x40
 8003e40:	d1b5      	bne.n	8003dae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e62:	d11b      	bne.n	8003e9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	f043 0204 	orr.w	r2, r3, #4
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e264      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d075      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eca:	4ba3      	ldr	r3, [pc, #652]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 030c 	and.w	r3, r3, #12
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ed6:	4ba0      	ldr	r3, [pc, #640]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d112      	bne.n	8003f08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ee2:	4b9d      	ldr	r3, [pc, #628]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eee:	d10b      	bne.n	8003f08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef0:	4b99      	ldr	r3, [pc, #612]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d05b      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x108>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d157      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e23f      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f10:	d106      	bne.n	8003f20 <HAL_RCC_OscConfig+0x74>
 8003f12:	4b91      	ldr	r3, [pc, #580]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a90      	ldr	r2, [pc, #576]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e01d      	b.n	8003f5c <HAL_RCC_OscConfig+0xb0>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f28:	d10c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x98>
 8003f2a:	4b8b      	ldr	r3, [pc, #556]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a8a      	ldr	r2, [pc, #552]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	4b88      	ldr	r3, [pc, #544]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a87      	ldr	r2, [pc, #540]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	e00b      	b.n	8003f5c <HAL_RCC_OscConfig+0xb0>
 8003f44:	4b84      	ldr	r3, [pc, #528]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a83      	ldr	r2, [pc, #524]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	4b81      	ldr	r3, [pc, #516]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a80      	ldr	r2, [pc, #512]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d013      	beq.n	8003f8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fe fc6e 	bl	8002844 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f6c:	f7fe fc6a 	bl	8002844 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	; 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e204      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7e:	4b76      	ldr	r3, [pc, #472]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0xc0>
 8003f8a:	e014      	b.n	8003fb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8c:	f7fe fc5a 	bl	8002844 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f94:	f7fe fc56 	bl	8002844 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b64      	cmp	r3, #100	; 0x64
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e1f0      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa6:	4b6c      	ldr	r3, [pc, #432]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f0      	bne.n	8003f94 <HAL_RCC_OscConfig+0xe8>
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d063      	beq.n	800408a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fc2:	4b65      	ldr	r3, [pc, #404]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00b      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fce:	4b62      	ldr	r3, [pc, #392]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d11c      	bne.n	8004014 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fda:	4b5f      	ldr	r3, [pc, #380]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d116      	bne.n	8004014 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe6:	4b5c      	ldr	r3, [pc, #368]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_RCC_OscConfig+0x152>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d001      	beq.n	8003ffe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e1c4      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffe:	4b56      	ldr	r3, [pc, #344]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	4952      	ldr	r1, [pc, #328]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 800400e:	4313      	orrs	r3, r2
 8004010:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004012:	e03a      	b.n	800408a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d020      	beq.n	800405e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800401c:	4b4f      	ldr	r3, [pc, #316]	; (800415c <HAL_RCC_OscConfig+0x2b0>)
 800401e:	2201      	movs	r2, #1
 8004020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004022:	f7fe fc0f 	bl	8002844 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800402a:	f7fe fc0b 	bl	8002844 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e1a5      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403c:	4b46      	ldr	r3, [pc, #280]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f0      	beq.n	800402a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004048:	4b43      	ldr	r3, [pc, #268]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4940      	ldr	r1, [pc, #256]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	4313      	orrs	r3, r2
 800405a:	600b      	str	r3, [r1, #0]
 800405c:	e015      	b.n	800408a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800405e:	4b3f      	ldr	r3, [pc, #252]	; (800415c <HAL_RCC_OscConfig+0x2b0>)
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fe fbee 	bl	8002844 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800406c:	f7fe fbea 	bl	8002844 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e184      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800407e:	4b36      	ldr	r3, [pc, #216]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d030      	beq.n	80040f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d016      	beq.n	80040cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800409e:	4b30      	ldr	r3, [pc, #192]	; (8004160 <HAL_RCC_OscConfig+0x2b4>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a4:	f7fe fbce 	bl	8002844 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ac:	f7fe fbca 	bl	8002844 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e164      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040be:	4b26      	ldr	r3, [pc, #152]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCC_OscConfig+0x200>
 80040ca:	e015      	b.n	80040f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040cc:	4b24      	ldr	r3, [pc, #144]	; (8004160 <HAL_RCC_OscConfig+0x2b4>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d2:	f7fe fbb7 	bl	8002844 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040da:	f7fe fbb3 	bl	8002844 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e14d      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ec:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 80040ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f0      	bne.n	80040da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80a0 	beq.w	8004246 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004106:	2300      	movs	r3, #0
 8004108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800410a:	4b13      	ldr	r3, [pc, #76]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10f      	bne.n	8004136 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	4a0e      	ldr	r2, [pc, #56]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004124:	6413      	str	r3, [r2, #64]	; 0x40
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004132:	2301      	movs	r3, #1
 8004134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004136:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <HAL_RCC_OscConfig+0x2b8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d121      	bne.n	8004186 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004142:	4b08      	ldr	r3, [pc, #32]	; (8004164 <HAL_RCC_OscConfig+0x2b8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a07      	ldr	r2, [pc, #28]	; (8004164 <HAL_RCC_OscConfig+0x2b8>)
 8004148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800414e:	f7fe fb79 	bl	8002844 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	e011      	b.n	800417a <HAL_RCC_OscConfig+0x2ce>
 8004156:	bf00      	nop
 8004158:	40023800 	.word	0x40023800
 800415c:	42470000 	.word	0x42470000
 8004160:	42470e80 	.word	0x42470e80
 8004164:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004168:	f7fe fb6c 	bl	8002844 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e106      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417a:	4b85      	ldr	r3, [pc, #532]	; (8004390 <HAL_RCC_OscConfig+0x4e4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d106      	bne.n	800419c <HAL_RCC_OscConfig+0x2f0>
 800418e:	4b81      	ldr	r3, [pc, #516]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	4a80      	ldr	r2, [pc, #512]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	6713      	str	r3, [r2, #112]	; 0x70
 800419a:	e01c      	b.n	80041d6 <HAL_RCC_OscConfig+0x32a>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b05      	cmp	r3, #5
 80041a2:	d10c      	bne.n	80041be <HAL_RCC_OscConfig+0x312>
 80041a4:	4b7b      	ldr	r3, [pc, #492]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	4a7a      	ldr	r2, [pc, #488]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 80041aa:	f043 0304 	orr.w	r3, r3, #4
 80041ae:	6713      	str	r3, [r2, #112]	; 0x70
 80041b0:	4b78      	ldr	r3, [pc, #480]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b4:	4a77      	ldr	r2, [pc, #476]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	6713      	str	r3, [r2, #112]	; 0x70
 80041bc:	e00b      	b.n	80041d6 <HAL_RCC_OscConfig+0x32a>
 80041be:	4b75      	ldr	r3, [pc, #468]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 80041c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c2:	4a74      	ldr	r2, [pc, #464]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ca:	4b72      	ldr	r3, [pc, #456]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	4a71      	ldr	r2, [pc, #452]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 80041d0:	f023 0304 	bic.w	r3, r3, #4
 80041d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d015      	beq.n	800420a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041de:	f7fe fb31 	bl	8002844 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fe fb2d 	bl	8002844 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e0c5      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fc:	4b65      	ldr	r3, [pc, #404]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0ee      	beq.n	80041e6 <HAL_RCC_OscConfig+0x33a>
 8004208:	e014      	b.n	8004234 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800420a:	f7fe fb1b 	bl	8002844 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004210:	e00a      	b.n	8004228 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fe fb17 	bl	8002844 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004220:	4293      	cmp	r3, r2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e0af      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004228:	4b5a      	ldr	r3, [pc, #360]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ee      	bne.n	8004212 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d105      	bne.n	8004246 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800423a:	4b56      	ldr	r3, [pc, #344]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	4a55      	ldr	r2, [pc, #340]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 8004240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004244:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 809b 	beq.w	8004386 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004250:	4b50      	ldr	r3, [pc, #320]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b08      	cmp	r3, #8
 800425a:	d05c      	beq.n	8004316 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d141      	bne.n	80042e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004264:	4b4c      	ldr	r3, [pc, #304]	; (8004398 <HAL_RCC_OscConfig+0x4ec>)
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426a:	f7fe faeb 	bl	8002844 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004272:	f7fe fae7 	bl	8002844 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e081      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004284:	4b43      	ldr	r3, [pc, #268]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1f0      	bne.n	8004272 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	019b      	lsls	r3, r3, #6
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	3b01      	subs	r3, #1
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	061b      	lsls	r3, r3, #24
 80042b4:	4937      	ldr	r1, [pc, #220]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042ba:	4b37      	ldr	r3, [pc, #220]	; (8004398 <HAL_RCC_OscConfig+0x4ec>)
 80042bc:	2201      	movs	r2, #1
 80042be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fe fac0 	bl	8002844 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c8:	f7fe fabc 	bl	8002844 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e056      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042da:	4b2e      	ldr	r3, [pc, #184]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x41c>
 80042e6:	e04e      	b.n	8004386 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e8:	4b2b      	ldr	r3, [pc, #172]	; (8004398 <HAL_RCC_OscConfig+0x4ec>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ee:	f7fe faa9 	bl	8002844 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f6:	f7fe faa5 	bl	8002844 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e03f      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004308:	4b22      	ldr	r3, [pc, #136]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f0      	bne.n	80042f6 <HAL_RCC_OscConfig+0x44a>
 8004314:	e037      	b.n	8004386 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e032      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004322:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <HAL_RCC_OscConfig+0x4e8>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d028      	beq.n	8004382 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800433a:	429a      	cmp	r2, r3
 800433c:	d121      	bne.n	8004382 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004348:	429a      	cmp	r2, r3
 800434a:	d11a      	bne.n	8004382 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004352:	4013      	ands	r3, r2
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004358:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800435a:	4293      	cmp	r3, r2
 800435c:	d111      	bne.n	8004382 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	3b01      	subs	r3, #1
 800436c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800436e:	429a      	cmp	r2, r3
 8004370:	d107      	bne.n	8004382 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800437e:	429a      	cmp	r2, r3
 8004380:	d001      	beq.n	8004386 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40007000 	.word	0x40007000
 8004394:	40023800 	.word	0x40023800
 8004398:	42470060 	.word	0x42470060

0800439c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0cc      	b.n	800454a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043b0:	4b68      	ldr	r3, [pc, #416]	; (8004554 <HAL_RCC_ClockConfig+0x1b8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d90c      	bls.n	80043d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043be:	4b65      	ldr	r3, [pc, #404]	; (8004554 <HAL_RCC_ClockConfig+0x1b8>)
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c6:	4b63      	ldr	r3, [pc, #396]	; (8004554 <HAL_RCC_ClockConfig+0x1b8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0b8      	b.n	800454a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d020      	beq.n	8004426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043f0:	4b59      	ldr	r3, [pc, #356]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	4a58      	ldr	r2, [pc, #352]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004408:	4b53      	ldr	r3, [pc, #332]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4a52      	ldr	r2, [pc, #328]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004414:	4b50      	ldr	r3, [pc, #320]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	494d      	ldr	r1, [pc, #308]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d044      	beq.n	80044bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d107      	bne.n	800444a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443a:	4b47      	ldr	r3, [pc, #284]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d119      	bne.n	800447a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e07f      	b.n	800454a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b02      	cmp	r3, #2
 8004450:	d003      	beq.n	800445a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004456:	2b03      	cmp	r3, #3
 8004458:	d107      	bne.n	800446a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445a:	4b3f      	ldr	r3, [pc, #252]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d109      	bne.n	800447a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e06f      	b.n	800454a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446a:	4b3b      	ldr	r3, [pc, #236]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e067      	b.n	800454a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800447a:	4b37      	ldr	r3, [pc, #220]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f023 0203 	bic.w	r2, r3, #3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	4934      	ldr	r1, [pc, #208]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	4313      	orrs	r3, r2
 800448a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800448c:	f7fe f9da 	bl	8002844 <HAL_GetTick>
 8004490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004492:	e00a      	b.n	80044aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004494:	f7fe f9d6 	bl	8002844 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e04f      	b.n	800454a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044aa:	4b2b      	ldr	r3, [pc, #172]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 020c 	and.w	r2, r3, #12
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d1eb      	bne.n	8004494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044bc:	4b25      	ldr	r3, [pc, #148]	; (8004554 <HAL_RCC_ClockConfig+0x1b8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d20c      	bcs.n	80044e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ca:	4b22      	ldr	r3, [pc, #136]	; (8004554 <HAL_RCC_ClockConfig+0x1b8>)
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d2:	4b20      	ldr	r3, [pc, #128]	; (8004554 <HAL_RCC_ClockConfig+0x1b8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d001      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e032      	b.n	800454a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044f0:	4b19      	ldr	r3, [pc, #100]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4916      	ldr	r1, [pc, #88]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d009      	beq.n	8004522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800450e:	4b12      	ldr	r3, [pc, #72]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	490e      	ldr	r1, [pc, #56]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	4313      	orrs	r3, r2
 8004520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004522:	f000 f821 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 8004526:	4602      	mov	r2, r0
 8004528:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	091b      	lsrs	r3, r3, #4
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	490a      	ldr	r1, [pc, #40]	; (800455c <HAL_RCC_ClockConfig+0x1c0>)
 8004534:	5ccb      	ldrb	r3, [r1, r3]
 8004536:	fa22 f303 	lsr.w	r3, r2, r3
 800453a:	4a09      	ldr	r2, [pc, #36]	; (8004560 <HAL_RCC_ClockConfig+0x1c4>)
 800453c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800453e:	4b09      	ldr	r3, [pc, #36]	; (8004564 <HAL_RCC_ClockConfig+0x1c8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f7fd ff5a 	bl	80023fc <HAL_InitTick>

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40023c00 	.word	0x40023c00
 8004558:	40023800 	.word	0x40023800
 800455c:	0800c180 	.word	0x0800c180
 8004560:	20000008 	.word	0x20000008
 8004564:	2000000c 	.word	0x2000000c

08004568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004568:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	607b      	str	r3, [r7, #4]
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	2300      	movs	r3, #0
 800457a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004580:	4b67      	ldr	r3, [pc, #412]	; (8004720 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 030c 	and.w	r3, r3, #12
 8004588:	2b08      	cmp	r3, #8
 800458a:	d00d      	beq.n	80045a8 <HAL_RCC_GetSysClockFreq+0x40>
 800458c:	2b08      	cmp	r3, #8
 800458e:	f200 80bd 	bhi.w	800470c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0x34>
 8004596:	2b04      	cmp	r3, #4
 8004598:	d003      	beq.n	80045a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800459a:	e0b7      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800459c:	4b61      	ldr	r3, [pc, #388]	; (8004724 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800459e:	60bb      	str	r3, [r7, #8]
       break;
 80045a0:	e0b7      	b.n	8004712 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045a2:	4b61      	ldr	r3, [pc, #388]	; (8004728 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80045a4:	60bb      	str	r3, [r7, #8]
      break;
 80045a6:	e0b4      	b.n	8004712 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045a8:	4b5d      	ldr	r3, [pc, #372]	; (8004720 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045b2:	4b5b      	ldr	r3, [pc, #364]	; (8004720 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d04d      	beq.n	800465a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045be:	4b58      	ldr	r3, [pc, #352]	; (8004720 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	099b      	lsrs	r3, r3, #6
 80045c4:	461a      	mov	r2, r3
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045ce:	f04f 0100 	mov.w	r1, #0
 80045d2:	ea02 0800 	and.w	r8, r2, r0
 80045d6:	ea03 0901 	and.w	r9, r3, r1
 80045da:	4640      	mov	r0, r8
 80045dc:	4649      	mov	r1, r9
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	014b      	lsls	r3, r1, #5
 80045e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045ec:	0142      	lsls	r2, r0, #5
 80045ee:	4610      	mov	r0, r2
 80045f0:	4619      	mov	r1, r3
 80045f2:	ebb0 0008 	subs.w	r0, r0, r8
 80045f6:	eb61 0109 	sbc.w	r1, r1, r9
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	018b      	lsls	r3, r1, #6
 8004604:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004608:	0182      	lsls	r2, r0, #6
 800460a:	1a12      	subs	r2, r2, r0
 800460c:	eb63 0301 	sbc.w	r3, r3, r1
 8004610:	f04f 0000 	mov.w	r0, #0
 8004614:	f04f 0100 	mov.w	r1, #0
 8004618:	00d9      	lsls	r1, r3, #3
 800461a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800461e:	00d0      	lsls	r0, r2, #3
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	eb12 0208 	adds.w	r2, r2, r8
 8004628:	eb43 0309 	adc.w	r3, r3, r9
 800462c:	f04f 0000 	mov.w	r0, #0
 8004630:	f04f 0100 	mov.w	r1, #0
 8004634:	0259      	lsls	r1, r3, #9
 8004636:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800463a:	0250      	lsls	r0, r2, #9
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4610      	mov	r0, r2
 8004642:	4619      	mov	r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	461a      	mov	r2, r3
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	f7fc fab4 	bl	8000bb8 <__aeabi_uldivmod>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4613      	mov	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	e04a      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800465a:	4b31      	ldr	r3, [pc, #196]	; (8004720 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	099b      	lsrs	r3, r3, #6
 8004660:	461a      	mov	r2, r3
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	f240 10ff 	movw	r0, #511	; 0x1ff
 800466a:	f04f 0100 	mov.w	r1, #0
 800466e:	ea02 0400 	and.w	r4, r2, r0
 8004672:	ea03 0501 	and.w	r5, r3, r1
 8004676:	4620      	mov	r0, r4
 8004678:	4629      	mov	r1, r5
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	014b      	lsls	r3, r1, #5
 8004684:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004688:	0142      	lsls	r2, r0, #5
 800468a:	4610      	mov	r0, r2
 800468c:	4619      	mov	r1, r3
 800468e:	1b00      	subs	r0, r0, r4
 8004690:	eb61 0105 	sbc.w	r1, r1, r5
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	018b      	lsls	r3, r1, #6
 800469e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046a2:	0182      	lsls	r2, r0, #6
 80046a4:	1a12      	subs	r2, r2, r0
 80046a6:	eb63 0301 	sbc.w	r3, r3, r1
 80046aa:	f04f 0000 	mov.w	r0, #0
 80046ae:	f04f 0100 	mov.w	r1, #0
 80046b2:	00d9      	lsls	r1, r3, #3
 80046b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046b8:	00d0      	lsls	r0, r2, #3
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	1912      	adds	r2, r2, r4
 80046c0:	eb45 0303 	adc.w	r3, r5, r3
 80046c4:	f04f 0000 	mov.w	r0, #0
 80046c8:	f04f 0100 	mov.w	r1, #0
 80046cc:	0299      	lsls	r1, r3, #10
 80046ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80046d2:	0290      	lsls	r0, r2, #10
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4610      	mov	r0, r2
 80046da:	4619      	mov	r1, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	461a      	mov	r2, r3
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	f7fc fa68 	bl	8000bb8 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4613      	mov	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	0c1b      	lsrs	r3, r3, #16
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	3301      	adds	r3, #1
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	fbb2 f3f3 	udiv	r3, r2, r3
 8004708:	60bb      	str	r3, [r7, #8]
      break;
 800470a:	e002      	b.n	8004712 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800470e:	60bb      	str	r3, [r7, #8]
      break;
 8004710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004712:	68bb      	ldr	r3, [r7, #8]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800471e:	bf00      	nop
 8004720:	40023800 	.word	0x40023800
 8004724:	00f42400 	.word	0x00f42400
 8004728:	007a1200 	.word	0x007a1200

0800472c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004730:	4b03      	ldr	r3, [pc, #12]	; (8004740 <HAL_RCC_GetHCLKFreq+0x14>)
 8004732:	681b      	ldr	r3, [r3, #0]
}
 8004734:	4618      	mov	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	20000008 	.word	0x20000008

08004744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004748:	f7ff fff0 	bl	800472c <HAL_RCC_GetHCLKFreq>
 800474c:	4602      	mov	r2, r0
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	0a9b      	lsrs	r3, r3, #10
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	4903      	ldr	r1, [pc, #12]	; (8004768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800475a:	5ccb      	ldrb	r3, [r1, r3]
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004760:	4618      	mov	r0, r3
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40023800 	.word	0x40023800
 8004768:	0800c190 	.word	0x0800c190

0800476c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004770:	f7ff ffdc 	bl	800472c <HAL_RCC_GetHCLKFreq>
 8004774:	4602      	mov	r2, r0
 8004776:	4b05      	ldr	r3, [pc, #20]	; (800478c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	0b5b      	lsrs	r3, r3, #13
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	4903      	ldr	r1, [pc, #12]	; (8004790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004782:	5ccb      	ldrb	r3, [r1, r3]
 8004784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004788:	4618      	mov	r0, r3
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40023800 	.word	0x40023800
 8004790:	0800c190 	.word	0x0800c190

08004794 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	220f      	movs	r2, #15
 80047a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047a4:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <HAL_RCC_GetClockConfig+0x5c>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 0203 	and.w	r2, r3, #3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80047b0:	4b0f      	ldr	r3, [pc, #60]	; (80047f0 <HAL_RCC_GetClockConfig+0x5c>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80047bc:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <HAL_RCC_GetClockConfig+0x5c>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80047c8:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <HAL_RCC_GetClockConfig+0x5c>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	08db      	lsrs	r3, r3, #3
 80047ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047d6:	4b07      	ldr	r3, [pc, #28]	; (80047f4 <HAL_RCC_GetClockConfig+0x60>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0207 	and.w	r2, r3, #7
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	601a      	str	r2, [r3, #0]
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40023800 	.word	0x40023800
 80047f4:	40023c00 	.word	0x40023c00

080047f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e07b      	b.n	8004902 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	2b00      	cmp	r3, #0
 8004810:	d108      	bne.n	8004824 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800481a:	d009      	beq.n	8004830 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	61da      	str	r2, [r3, #28]
 8004822:	e005      	b.n	8004830 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fd fc42 	bl	80020d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004866:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b4:	ea42 0103 	orr.w	r1, r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	f003 0104 	and.w	r1, r3, #4
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	f003 0210 	and.w	r2, r3, #16
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b082      	sub	sp, #8
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e041      	b.n	80049a0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d106      	bne.n	8004936 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7fd fc37 	bl	80021a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2202      	movs	r2, #2
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3304      	adds	r3, #4
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f000 fb99 	bl	8005080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d001      	beq.n	80049c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e044      	b.n	8004a4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1e      	ldr	r2, [pc, #120]	; (8004a58 <HAL_TIM_Base_Start_IT+0xb0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d018      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x6c>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ea:	d013      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x6c>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1a      	ldr	r2, [pc, #104]	; (8004a5c <HAL_TIM_Base_Start_IT+0xb4>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00e      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x6c>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <HAL_TIM_Base_Start_IT+0xb8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d009      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x6c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a17      	ldr	r2, [pc, #92]	; (8004a64 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x6c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a16      	ldr	r2, [pc, #88]	; (8004a68 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d111      	bne.n	8004a38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b06      	cmp	r3, #6
 8004a24:	d010      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0201 	orr.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a36:	e007      	b.n	8004a48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	40000400 	.word	0x40000400
 8004a60:	40000800 	.word	0x40000800
 8004a64:	40000c00 	.word	0x40000c00
 8004a68:	40014000 	.word	0x40014000

08004a6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e041      	b.n	8004b02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fd fbe0 	bl	8002258 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f000 fae8 	bl	8005080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d122      	bne.n	8004b66 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d11b      	bne.n	8004b66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f06f 0202 	mvn.w	r2, #2
 8004b36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fa78 	bl	8005042 <HAL_TIM_IC_CaptureCallback>
 8004b52:	e005      	b.n	8004b60 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fa6a 	bl	800502e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fa7b 	bl	8005056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d122      	bne.n	8004bba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d11b      	bne.n	8004bba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f06f 0204 	mvn.w	r2, #4
 8004b8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fa4e 	bl	8005042 <HAL_TIM_IC_CaptureCallback>
 8004ba6:	e005      	b.n	8004bb4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fa40 	bl	800502e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fa51 	bl	8005056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d122      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d11b      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f06f 0208 	mvn.w	r2, #8
 8004bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2204      	movs	r2, #4
 8004be4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fa24 	bl	8005042 <HAL_TIM_IC_CaptureCallback>
 8004bfa:	e005      	b.n	8004c08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fa16 	bl	800502e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fa27 	bl	8005056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d122      	bne.n	8004c62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d11b      	bne.n	8004c62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f06f 0210 	mvn.w	r2, #16
 8004c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2208      	movs	r2, #8
 8004c38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f9fa 	bl	8005042 <HAL_TIM_IC_CaptureCallback>
 8004c4e:	e005      	b.n	8004c5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f9ec 	bl	800502e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f9fd 	bl	8005056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d10e      	bne.n	8004c8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d107      	bne.n	8004c8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f06f 0201 	mvn.w	r2, #1
 8004c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7fd f8eb 	bl	8001e64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c98:	2b80      	cmp	r3, #128	; 0x80
 8004c9a:	d10e      	bne.n	8004cba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca6:	2b80      	cmp	r3, #128	; 0x80
 8004ca8:	d107      	bne.n	8004cba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fd01 	bl	80056bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc4:	2b40      	cmp	r3, #64	; 0x40
 8004cc6:	d10e      	bne.n	8004ce6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d107      	bne.n	8004ce6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f9c2 	bl	800506a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f003 0320 	and.w	r3, r3, #32
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d10e      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d107      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f06f 0220 	mvn.w	r2, #32
 8004d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fccb 	bl	80056a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e0ae      	b.n	8004e98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b0c      	cmp	r3, #12
 8004d46:	f200 809f 	bhi.w	8004e88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d4a:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004d85 	.word	0x08004d85
 8004d54:	08004e89 	.word	0x08004e89
 8004d58:	08004e89 	.word	0x08004e89
 8004d5c:	08004e89 	.word	0x08004e89
 8004d60:	08004dc5 	.word	0x08004dc5
 8004d64:	08004e89 	.word	0x08004e89
 8004d68:	08004e89 	.word	0x08004e89
 8004d6c:	08004e89 	.word	0x08004e89
 8004d70:	08004e07 	.word	0x08004e07
 8004d74:	08004e89 	.word	0x08004e89
 8004d78:	08004e89 	.word	0x08004e89
 8004d7c:	08004e89 	.word	0x08004e89
 8004d80:	08004e47 	.word	0x08004e47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f9f8 	bl	8005180 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0208 	orr.w	r2, r2, #8
 8004d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0204 	bic.w	r2, r2, #4
 8004dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6999      	ldr	r1, [r3, #24]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	619a      	str	r2, [r3, #24]
      break;
 8004dc2:	e064      	b.n	8004e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fa3e 	bl	800524c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6999      	ldr	r1, [r3, #24]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	021a      	lsls	r2, r3, #8
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	619a      	str	r2, [r3, #24]
      break;
 8004e04:	e043      	b.n	8004e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fa89 	bl	8005324 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69da      	ldr	r2, [r3, #28]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0208 	orr.w	r2, r2, #8
 8004e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0204 	bic.w	r2, r2, #4
 8004e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69d9      	ldr	r1, [r3, #28]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	61da      	str	r2, [r3, #28]
      break;
 8004e44:	e023      	b.n	8004e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fad3 	bl	80053f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69d9      	ldr	r1, [r3, #28]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	021a      	lsls	r2, r3, #8
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	61da      	str	r2, [r3, #28]
      break;
 8004e86:	e002      	b.n	8004e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_TIM_ConfigClockSource+0x1c>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e0b4      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x186>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ef4:	d03e      	beq.n	8004f74 <HAL_TIM_ConfigClockSource+0xd4>
 8004ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004efa:	f200 8087 	bhi.w	800500c <HAL_TIM_ConfigClockSource+0x16c>
 8004efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f02:	f000 8086 	beq.w	8005012 <HAL_TIM_ConfigClockSource+0x172>
 8004f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f0a:	d87f      	bhi.n	800500c <HAL_TIM_ConfigClockSource+0x16c>
 8004f0c:	2b70      	cmp	r3, #112	; 0x70
 8004f0e:	d01a      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0xa6>
 8004f10:	2b70      	cmp	r3, #112	; 0x70
 8004f12:	d87b      	bhi.n	800500c <HAL_TIM_ConfigClockSource+0x16c>
 8004f14:	2b60      	cmp	r3, #96	; 0x60
 8004f16:	d050      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0x11a>
 8004f18:	2b60      	cmp	r3, #96	; 0x60
 8004f1a:	d877      	bhi.n	800500c <HAL_TIM_ConfigClockSource+0x16c>
 8004f1c:	2b50      	cmp	r3, #80	; 0x50
 8004f1e:	d03c      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0xfa>
 8004f20:	2b50      	cmp	r3, #80	; 0x50
 8004f22:	d873      	bhi.n	800500c <HAL_TIM_ConfigClockSource+0x16c>
 8004f24:	2b40      	cmp	r3, #64	; 0x40
 8004f26:	d058      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x13a>
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	d86f      	bhi.n	800500c <HAL_TIM_ConfigClockSource+0x16c>
 8004f2c:	2b30      	cmp	r3, #48	; 0x30
 8004f2e:	d064      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x15a>
 8004f30:	2b30      	cmp	r3, #48	; 0x30
 8004f32:	d86b      	bhi.n	800500c <HAL_TIM_ConfigClockSource+0x16c>
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	d060      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x15a>
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	d867      	bhi.n	800500c <HAL_TIM_ConfigClockSource+0x16c>
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d05c      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x15a>
 8004f40:	2b10      	cmp	r3, #16
 8004f42:	d05a      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x15a>
 8004f44:	e062      	b.n	800500c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6899      	ldr	r1, [r3, #8]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f000 fb19 	bl	800558c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	609a      	str	r2, [r3, #8]
      break;
 8004f72:	e04f      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6818      	ldr	r0, [r3, #0]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	6899      	ldr	r1, [r3, #8]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f000 fb02 	bl	800558c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f96:	609a      	str	r2, [r3, #8]
      break;
 8004f98:	e03c      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6859      	ldr	r1, [r3, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f000 fa76 	bl	8005498 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2150      	movs	r1, #80	; 0x50
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 facf 	bl	8005556 <TIM_ITRx_SetConfig>
      break;
 8004fb8:	e02c      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6859      	ldr	r1, [r3, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f000 fa95 	bl	80054f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2160      	movs	r1, #96	; 0x60
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fabf 	bl	8005556 <TIM_ITRx_SetConfig>
      break;
 8004fd8:	e01c      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6859      	ldr	r1, [r3, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f000 fa56 	bl	8005498 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2140      	movs	r1, #64	; 0x40
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 faaf 	bl	8005556 <TIM_ITRx_SetConfig>
      break;
 8004ff8:	e00c      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f000 faa6 	bl	8005556 <TIM_ITRx_SetConfig>
      break;
 800500a:	e003      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	73fb      	strb	r3, [r7, #15]
      break;
 8005010:	e000      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005024:	7bfb      	ldrb	r3, [r7, #15]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a34      	ldr	r2, [pc, #208]	; (8005164 <TIM_Base_SetConfig+0xe4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00f      	beq.n	80050b8 <TIM_Base_SetConfig+0x38>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509e:	d00b      	beq.n	80050b8 <TIM_Base_SetConfig+0x38>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a31      	ldr	r2, [pc, #196]	; (8005168 <TIM_Base_SetConfig+0xe8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_Base_SetConfig+0x38>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a30      	ldr	r2, [pc, #192]	; (800516c <TIM_Base_SetConfig+0xec>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_Base_SetConfig+0x38>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a2f      	ldr	r2, [pc, #188]	; (8005170 <TIM_Base_SetConfig+0xf0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d108      	bne.n	80050ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a25      	ldr	r2, [pc, #148]	; (8005164 <TIM_Base_SetConfig+0xe4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d01b      	beq.n	800510a <TIM_Base_SetConfig+0x8a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d8:	d017      	beq.n	800510a <TIM_Base_SetConfig+0x8a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a22      	ldr	r2, [pc, #136]	; (8005168 <TIM_Base_SetConfig+0xe8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <TIM_Base_SetConfig+0x8a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a21      	ldr	r2, [pc, #132]	; (800516c <TIM_Base_SetConfig+0xec>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00f      	beq.n	800510a <TIM_Base_SetConfig+0x8a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a20      	ldr	r2, [pc, #128]	; (8005170 <TIM_Base_SetConfig+0xf0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00b      	beq.n	800510a <TIM_Base_SetConfig+0x8a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a1f      	ldr	r2, [pc, #124]	; (8005174 <TIM_Base_SetConfig+0xf4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d007      	beq.n	800510a <TIM_Base_SetConfig+0x8a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1e      	ldr	r2, [pc, #120]	; (8005178 <TIM_Base_SetConfig+0xf8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_Base_SetConfig+0x8a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a1d      	ldr	r2, [pc, #116]	; (800517c <TIM_Base_SetConfig+0xfc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d108      	bne.n	800511c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a08      	ldr	r2, [pc, #32]	; (8005164 <TIM_Base_SetConfig+0xe4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d103      	bne.n	8005150 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	615a      	str	r2, [r3, #20]
}
 8005156:	bf00      	nop
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40010000 	.word	0x40010000
 8005168:	40000400 	.word	0x40000400
 800516c:	40000800 	.word	0x40000800
 8005170:	40000c00 	.word	0x40000c00
 8005174:	40014000 	.word	0x40014000
 8005178:	40014400 	.word	0x40014400
 800517c:	40014800 	.word	0x40014800

08005180 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	f023 0201 	bic.w	r2, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0303 	bic.w	r3, r3, #3
 80051b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f023 0302 	bic.w	r3, r3, #2
 80051c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a1c      	ldr	r2, [pc, #112]	; (8005248 <TIM_OC1_SetConfig+0xc8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d10c      	bne.n	80051f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 0308 	bic.w	r3, r3, #8
 80051e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f023 0304 	bic.w	r3, r3, #4
 80051f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a13      	ldr	r2, [pc, #76]	; (8005248 <TIM_OC1_SetConfig+0xc8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d111      	bne.n	8005222 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800520c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	621a      	str	r2, [r3, #32]
}
 800523c:	bf00      	nop
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	40010000 	.word	0x40010000

0800524c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f023 0210 	bic.w	r2, r3, #16
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800527a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f023 0320 	bic.w	r3, r3, #32
 8005296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a1e      	ldr	r2, [pc, #120]	; (8005320 <TIM_OC2_SetConfig+0xd4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d10d      	bne.n	80052c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a15      	ldr	r2, [pc, #84]	; (8005320 <TIM_OC2_SetConfig+0xd4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d113      	bne.n	80052f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	621a      	str	r2, [r3, #32]
}
 8005312:	bf00      	nop
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40010000 	.word	0x40010000

08005324 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0303 	bic.w	r3, r3, #3
 800535a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800536c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a1d      	ldr	r2, [pc, #116]	; (80053f4 <TIM_OC3_SetConfig+0xd0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d10d      	bne.n	800539e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	021b      	lsls	r3, r3, #8
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800539c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a14      	ldr	r2, [pc, #80]	; (80053f4 <TIM_OC3_SetConfig+0xd0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d113      	bne.n	80053ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	621a      	str	r2, [r3, #32]
}
 80053e8:	bf00      	nop
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	40010000 	.word	0x40010000

080053f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	021b      	lsls	r3, r3, #8
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	031b      	lsls	r3, r3, #12
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a10      	ldr	r2, [pc, #64]	; (8005494 <TIM_OC4_SetConfig+0x9c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d109      	bne.n	800546c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800545e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	019b      	lsls	r3, r3, #6
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	621a      	str	r2, [r3, #32]
}
 8005486:	bf00      	nop
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40010000 	.word	0x40010000

08005498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f023 0201 	bic.w	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f023 030a 	bic.w	r3, r3, #10
 80054d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	621a      	str	r2, [r3, #32]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b087      	sub	sp, #28
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f023 0210 	bic.w	r2, r3, #16
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005520:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	031b      	lsls	r3, r3, #12
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005532:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	621a      	str	r2, [r3, #32]
}
 800554a:	bf00      	nop
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005556:	b480      	push	{r7}
 8005558:	b085      	sub	sp, #20
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	f043 0307 	orr.w	r3, r3, #7
 8005578:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	609a      	str	r2, [r3, #8]
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	021a      	lsls	r2, r3, #8
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	431a      	orrs	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	609a      	str	r2, [r3, #8]
}
 80055c0:	bf00      	nop
 80055c2:	371c      	adds	r7, #28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e050      	b.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a1c      	ldr	r2, [pc, #112]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d018      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005630:	d013      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a18      	ldr	r2, [pc, #96]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00e      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a16      	ldr	r2, [pc, #88]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d009      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a15      	ldr	r2, [pc, #84]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d004      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a13      	ldr	r2, [pc, #76]	; (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d10c      	bne.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	4313      	orrs	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40010000 	.word	0x40010000
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800
 80056a0:	40000c00 	.word	0x40000c00
 80056a4:	40014000 	.word	0x40014000

080056a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e03f      	b.n	8005762 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fc fe30 	bl	800235c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2224      	movs	r2, #36	; 0x24
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005712:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fddb 	bl	80062d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695a      	ldr	r2, [r3, #20]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005738:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005748:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b08a      	sub	sp, #40	; 0x28
 800576e:	af02      	add	r7, sp, #8
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	4613      	mov	r3, r2
 8005778:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b20      	cmp	r3, #32
 8005788:	d17c      	bne.n	8005884 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_UART_Transmit+0x2c>
 8005790:	88fb      	ldrh	r3, [r7, #6]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e075      	b.n	8005886 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_UART_Transmit+0x3e>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e06e      	b.n	8005886 <HAL_UART_Transmit+0x11c>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2221      	movs	r2, #33	; 0x21
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057be:	f7fd f841 	bl	8002844 <HAL_GetTick>
 80057c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	88fa      	ldrh	r2, [r7, #6]
 80057c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	88fa      	ldrh	r2, [r7, #6]
 80057ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d8:	d108      	bne.n	80057ec <HAL_UART_Transmit+0x82>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d104      	bne.n	80057ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057e2:	2300      	movs	r3, #0
 80057e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	e003      	b.n	80057f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057f0:	2300      	movs	r3, #0
 80057f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80057fc:	e02a      	b.n	8005854 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2200      	movs	r2, #0
 8005806:	2180      	movs	r1, #128	; 0x80
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 fb1f 	bl	8005e4c <UART_WaitOnFlagUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e036      	b.n	8005886 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10b      	bne.n	8005836 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800582c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	3302      	adds	r3, #2
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	e007      	b.n	8005846 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	781a      	ldrb	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	3301      	adds	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800584a:	b29b      	uxth	r3, r3
 800584c:	3b01      	subs	r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1cf      	bne.n	80057fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2200      	movs	r2, #0
 8005866:	2140      	movs	r1, #64	; 0x40
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 faef 	bl	8005e4c <UART_WaitOnFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e006      	b.n	8005886 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	e000      	b.n	8005886 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005884:	2302      	movs	r3, #2
  }
}
 8005886:	4618      	mov	r0, r3
 8005888:	3720      	adds	r7, #32
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	4613      	mov	r3, r2
 800589a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d11d      	bne.n	80058e4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <HAL_UART_Receive_IT+0x26>
 80058ae:	88fb      	ldrh	r3, [r7, #6]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e016      	b.n	80058e6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_UART_Receive_IT+0x38>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e00f      	b.n	80058e6 <HAL_UART_Receive_IT+0x58>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058d4:	88fb      	ldrh	r3, [r7, #6]
 80058d6:	461a      	mov	r2, r3
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 fb24 	bl	8005f28 <UART_Start_Receive_IT>
 80058e0:	4603      	mov	r3, r0
 80058e2:	e000      	b.n	80058e6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80058e4:	2302      	movs	r3, #2
  }
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b0ba      	sub	sp, #232	; 0xe8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005916:	2300      	movs	r3, #0
 8005918:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800591c:	2300      	movs	r3, #0
 800591e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800592e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10f      	bne.n	8005956 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <HAL_UART_IRQHandler+0x66>
 8005942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fc03 	bl	800615a <UART_Receive_IT>
      return;
 8005954:	e256      	b.n	8005e04 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005956:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 80de 	beq.w	8005b1c <HAL_UART_IRQHandler+0x22c>
 8005960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d106      	bne.n	800597a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800596c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005970:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 80d1 	beq.w	8005b1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800597a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00b      	beq.n	800599e <HAL_UART_IRQHandler+0xae>
 8005986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800598a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f043 0201 	orr.w	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800599e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00b      	beq.n	80059c2 <HAL_UART_IRQHandler+0xd2>
 80059aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d005      	beq.n	80059c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	f043 0202 	orr.w	r2, r3, #2
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00b      	beq.n	80059e6 <HAL_UART_IRQHandler+0xf6>
 80059ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d005      	beq.n	80059e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f043 0204 	orr.w	r2, r3, #4
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d011      	beq.n	8005a16 <HAL_UART_IRQHandler+0x126>
 80059f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f6:	f003 0320 	and.w	r3, r3, #32
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d105      	bne.n	8005a0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d005      	beq.n	8005a16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f043 0208 	orr.w	r2, r3, #8
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 81ed 	beq.w	8005dfa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a24:	f003 0320 	and.w	r3, r3, #32
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <HAL_UART_IRQHandler+0x14e>
 8005a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fb8e 	bl	800615a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a48:	2b40      	cmp	r3, #64	; 0x40
 8005a4a:	bf0c      	ite	eq
 8005a4c:	2301      	moveq	r3, #1
 8005a4e:	2300      	movne	r3, #0
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f003 0308 	and.w	r3, r3, #8
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d103      	bne.n	8005a6a <HAL_UART_IRQHandler+0x17a>
 8005a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d04f      	beq.n	8005b0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fa96 	bl	8005f9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7a:	2b40      	cmp	r3, #64	; 0x40
 8005a7c:	d141      	bne.n	8005b02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3314      	adds	r3, #20
 8005a84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3314      	adds	r3, #20
 8005aa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005aaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ab6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ac2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1d9      	bne.n	8005a7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d013      	beq.n	8005afa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	4a7d      	ldr	r2, [pc, #500]	; (8005ccc <HAL_UART_IRQHandler+0x3dc>)
 8005ad8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fd f832 	bl	8002b48 <HAL_DMA_Abort_IT>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d016      	beq.n	8005b18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005af4:	4610      	mov	r0, r2
 8005af6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af8:	e00e      	b.n	8005b18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f990 	bl	8005e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b00:	e00a      	b.n	8005b18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f98c 	bl	8005e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b08:	e006      	b.n	8005b18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f988 	bl	8005e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b16:	e170      	b.n	8005dfa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b18:	bf00      	nop
    return;
 8005b1a:	e16e      	b.n	8005dfa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	f040 814a 	bne.w	8005dba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 8143 	beq.w	8005dba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 813c 	beq.w	8005dba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b42:	2300      	movs	r3, #0
 8005b44:	60bb      	str	r3, [r7, #8]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60bb      	str	r3, [r7, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	60bb      	str	r3, [r7, #8]
 8005b56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b62:	2b40      	cmp	r3, #64	; 0x40
 8005b64:	f040 80b4 	bne.w	8005cd0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8140 	beq.w	8005dfe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b86:	429a      	cmp	r2, r3
 8005b88:	f080 8139 	bcs.w	8005dfe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b9e:	f000 8088 	beq.w	8005cb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005bce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1d9      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3314      	adds	r3, #20
 8005bf4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c00:	f023 0301 	bic.w	r3, r3, #1
 8005c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3314      	adds	r3, #20
 8005c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e1      	bne.n	8005bee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3314      	adds	r3, #20
 8005c30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3314      	adds	r3, #20
 8005c4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e3      	bne.n	8005c2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	330c      	adds	r3, #12
 8005c76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7a:	e853 3f00 	ldrex	r3, [r3]
 8005c7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c82:	f023 0310 	bic.w	r3, r3, #16
 8005c86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	330c      	adds	r3, #12
 8005c90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c94:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e3      	bne.n	8005c70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fc fedb 	bl	8002a68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f8b6 	bl	8005e34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cc8:	e099      	b.n	8005dfe <HAL_UART_IRQHandler+0x50e>
 8005cca:	bf00      	nop
 8005ccc:	08006063 	.word	0x08006063
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 808b 	beq.w	8005e02 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005cec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 8086 	beq.w	8005e02 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	330c      	adds	r3, #12
 8005cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	330c      	adds	r3, #12
 8005d16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d1a:	647a      	str	r2, [r7, #68]	; 0x44
 8005d1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e3      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3314      	adds	r3, #20
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	f023 0301 	bic.w	r3, r3, #1
 8005d44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3314      	adds	r3, #20
 8005d4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d52:	633a      	str	r2, [r7, #48]	; 0x30
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e3      	bne.n	8005d2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	330c      	adds	r3, #12
 8005d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0310 	bic.w	r3, r3, #16
 8005d8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	330c      	adds	r3, #12
 8005d94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d98:	61fa      	str	r2, [r7, #28]
 8005d9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	69b9      	ldr	r1, [r7, #24]
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	617b      	str	r3, [r7, #20]
   return(result);
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e3      	bne.n	8005d74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005db0:	4619      	mov	r1, r3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f83e 	bl	8005e34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005db8:	e023      	b.n	8005e02 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <HAL_UART_IRQHandler+0x4ea>
 8005dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f959 	bl	800608a <UART_Transmit_IT>
    return;
 8005dd8:	e014      	b.n	8005e04 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00e      	beq.n	8005e04 <HAL_UART_IRQHandler+0x514>
 8005de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f999 	bl	800612a <UART_EndTransmit_IT>
    return;
 8005df8:	e004      	b.n	8005e04 <HAL_UART_IRQHandler+0x514>
    return;
 8005dfa:	bf00      	nop
 8005dfc:	e002      	b.n	8005e04 <HAL_UART_IRQHandler+0x514>
      return;
 8005dfe:	bf00      	nop
 8005e00:	e000      	b.n	8005e04 <HAL_UART_IRQHandler+0x514>
      return;
 8005e02:	bf00      	nop
  }
}
 8005e04:	37e8      	adds	r7, #232	; 0xe8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop

08005e0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b090      	sub	sp, #64	; 0x40
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e5c:	e050      	b.n	8005f00 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e64:	d04c      	beq.n	8005f00 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e6c:	f7fc fcea 	bl	8002844 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d241      	bcs.n	8005f00 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	330c      	adds	r3, #12
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	330c      	adds	r3, #12
 8005e9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e9c:	637a      	str	r2, [r7, #52]	; 0x34
 8005e9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e5      	bne.n	8005e7c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3314      	adds	r3, #20
 8005eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f023 0301 	bic.w	r3, r3, #1
 8005ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3314      	adds	r3, #20
 8005ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ed0:	623a      	str	r2, [r7, #32]
 8005ed2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	69f9      	ldr	r1, [r7, #28]
 8005ed6:	6a3a      	ldr	r2, [r7, #32]
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e5      	bne.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e00f      	b.n	8005f20 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	bf0c      	ite	eq
 8005f10:	2301      	moveq	r3, #1
 8005f12:	2300      	movne	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	461a      	mov	r2, r3
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d09f      	beq.n	8005e5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3740      	adds	r7, #64	; 0x40
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	4613      	mov	r3, r2
 8005f34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	88fa      	ldrh	r2, [r7, #6]
 8005f40:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	88fa      	ldrh	r2, [r7, #6]
 8005f46:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2222      	movs	r2, #34	; 0x22
 8005f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f6c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695a      	ldr	r2, [r3, #20]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0201 	orr.w	r2, r2, #1
 8005f7c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0220 	orr.w	r2, r2, #32
 8005f8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b095      	sub	sp, #84	; 0x54
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	330c      	adds	r3, #12
 8005faa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fae:	e853 3f00 	ldrex	r3, [r3]
 8005fb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	330c      	adds	r3, #12
 8005fc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fc4:	643a      	str	r2, [r7, #64]	; 0x40
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e5      	bne.n	8005fa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3314      	adds	r3, #20
 8005fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3314      	adds	r3, #20
 8005ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ff8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e5      	bne.n	8005fd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	2b01      	cmp	r3, #1
 8006012:	d119      	bne.n	8006048 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	60bb      	str	r3, [r7, #8]
   return(result);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f023 0310 	bic.w	r3, r3, #16
 800602a:	647b      	str	r3, [r7, #68]	; 0x44
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006034:	61ba      	str	r2, [r7, #24]
 8006036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6979      	ldr	r1, [r7, #20]
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	613b      	str	r3, [r7, #16]
   return(result);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e5      	bne.n	8006014 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006056:	bf00      	nop
 8006058:	3754      	adds	r7, #84	; 0x54
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f7ff fecf 	bl	8005e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006082:	bf00      	nop
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800608a:	b480      	push	{r7}
 800608c:	b085      	sub	sp, #20
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b21      	cmp	r3, #33	; 0x21
 800609c:	d13e      	bne.n	800611c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a6:	d114      	bne.n	80060d2 <UART_Transmit_IT+0x48>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d110      	bne.n	80060d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	1c9a      	adds	r2, r3, #2
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	621a      	str	r2, [r3, #32]
 80060d0:	e008      	b.n	80060e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	1c59      	adds	r1, r3, #1
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6211      	str	r1, [r2, #32]
 80060dc:	781a      	ldrb	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	3b01      	subs	r3, #1
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	4619      	mov	r1, r3
 80060f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10f      	bne.n	8006118 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006106:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006116:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	e000      	b.n	800611e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800611c:	2302      	movs	r3, #2
  }
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006140:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff fe5e 	bl	8005e0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b08c      	sub	sp, #48	; 0x30
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b22      	cmp	r3, #34	; 0x22
 800616c:	f040 80ab 	bne.w	80062c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006178:	d117      	bne.n	80061aa <UART_Receive_IT+0x50>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d113      	bne.n	80061aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006182:	2300      	movs	r3, #0
 8006184:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	b29b      	uxth	r3, r3
 8006194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006198:	b29a      	uxth	r2, r3
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a2:	1c9a      	adds	r2, r3, #2
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	629a      	str	r2, [r3, #40]	; 0x28
 80061a8:	e026      	b.n	80061f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061b0:	2300      	movs	r3, #0
 80061b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061bc:	d007      	beq.n	80061ce <UART_Receive_IT+0x74>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10a      	bne.n	80061dc <UART_Receive_IT+0x82>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d106      	bne.n	80061dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	e008      	b.n	80061ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29b      	uxth	r3, r3
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	4619      	mov	r1, r3
 8006206:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006208:	2b00      	cmp	r3, #0
 800620a:	d15a      	bne.n	80062c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0220 	bic.w	r2, r2, #32
 800621a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800622a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695a      	ldr	r2, [r3, #20]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0201 	bic.w	r2, r2, #1
 800623a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006248:	2b01      	cmp	r3, #1
 800624a:	d135      	bne.n	80062b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	330c      	adds	r3, #12
 8006258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	613b      	str	r3, [r7, #16]
   return(result);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f023 0310 	bic.w	r3, r3, #16
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	330c      	adds	r3, #12
 8006270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006272:	623a      	str	r2, [r7, #32]
 8006274:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	69f9      	ldr	r1, [r7, #28]
 8006278:	6a3a      	ldr	r2, [r7, #32]
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e5      	bne.n	8006252 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	2b10      	cmp	r3, #16
 8006292:	d10a      	bne.n	80062aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff fdbf 	bl	8005e34 <HAL_UARTEx_RxEventCallback>
 80062b6:	e002      	b.n	80062be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7fc fa0d 	bl	80026d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	e002      	b.n	80062c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e000      	b.n	80062c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80062c6:	2302      	movs	r3, #2
  }
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3730      	adds	r7, #48	; 0x30
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	b09f      	sub	sp, #124	; 0x7c
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e6:	68d9      	ldr	r1, [r3, #12]
 80062e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	ea40 0301 	orr.w	r3, r0, r1
 80062f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	431a      	orrs	r2, r3
 80062fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	431a      	orrs	r2, r3
 8006302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	4313      	orrs	r3, r2
 8006308:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800630a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006314:	f021 010c 	bic.w	r1, r1, #12
 8006318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800631e:	430b      	orrs	r3, r1
 8006320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800632c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800632e:	6999      	ldr	r1, [r3, #24]
 8006330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	ea40 0301 	orr.w	r3, r0, r1
 8006338:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800633a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	4bc5      	ldr	r3, [pc, #788]	; (8006654 <UART_SetConfig+0x384>)
 8006340:	429a      	cmp	r2, r3
 8006342:	d004      	beq.n	800634e <UART_SetConfig+0x7e>
 8006344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	4bc3      	ldr	r3, [pc, #780]	; (8006658 <UART_SetConfig+0x388>)
 800634a:	429a      	cmp	r2, r3
 800634c:	d103      	bne.n	8006356 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800634e:	f7fe fa0d 	bl	800476c <HAL_RCC_GetPCLK2Freq>
 8006352:	6778      	str	r0, [r7, #116]	; 0x74
 8006354:	e002      	b.n	800635c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006356:	f7fe f9f5 	bl	8004744 <HAL_RCC_GetPCLK1Freq>
 800635a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800635c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006364:	f040 80b6 	bne.w	80064d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800636a:	461c      	mov	r4, r3
 800636c:	f04f 0500 	mov.w	r5, #0
 8006370:	4622      	mov	r2, r4
 8006372:	462b      	mov	r3, r5
 8006374:	1891      	adds	r1, r2, r2
 8006376:	6439      	str	r1, [r7, #64]	; 0x40
 8006378:	415b      	adcs	r3, r3
 800637a:	647b      	str	r3, [r7, #68]	; 0x44
 800637c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006380:	1912      	adds	r2, r2, r4
 8006382:	eb45 0303 	adc.w	r3, r5, r3
 8006386:	f04f 0000 	mov.w	r0, #0
 800638a:	f04f 0100 	mov.w	r1, #0
 800638e:	00d9      	lsls	r1, r3, #3
 8006390:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006394:	00d0      	lsls	r0, r2, #3
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	1911      	adds	r1, r2, r4
 800639c:	6639      	str	r1, [r7, #96]	; 0x60
 800639e:	416b      	adcs	r3, r5
 80063a0:	667b      	str	r3, [r7, #100]	; 0x64
 80063a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	461a      	mov	r2, r3
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	1891      	adds	r1, r2, r2
 80063ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80063b0:	415b      	adcs	r3, r3
 80063b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80063b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80063bc:	f7fa fbfc 	bl	8000bb8 <__aeabi_uldivmod>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4ba5      	ldr	r3, [pc, #660]	; (800665c <UART_SetConfig+0x38c>)
 80063c6:	fba3 2302 	umull	r2, r3, r3, r2
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	011e      	lsls	r6, r3, #4
 80063ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063d0:	461c      	mov	r4, r3
 80063d2:	f04f 0500 	mov.w	r5, #0
 80063d6:	4622      	mov	r2, r4
 80063d8:	462b      	mov	r3, r5
 80063da:	1891      	adds	r1, r2, r2
 80063dc:	6339      	str	r1, [r7, #48]	; 0x30
 80063de:	415b      	adcs	r3, r3
 80063e0:	637b      	str	r3, [r7, #52]	; 0x34
 80063e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80063e6:	1912      	adds	r2, r2, r4
 80063e8:	eb45 0303 	adc.w	r3, r5, r3
 80063ec:	f04f 0000 	mov.w	r0, #0
 80063f0:	f04f 0100 	mov.w	r1, #0
 80063f4:	00d9      	lsls	r1, r3, #3
 80063f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063fa:	00d0      	lsls	r0, r2, #3
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	1911      	adds	r1, r2, r4
 8006402:	65b9      	str	r1, [r7, #88]	; 0x58
 8006404:	416b      	adcs	r3, r5
 8006406:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	461a      	mov	r2, r3
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	1891      	adds	r1, r2, r2
 8006414:	62b9      	str	r1, [r7, #40]	; 0x28
 8006416:	415b      	adcs	r3, r3
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800641a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800641e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006422:	f7fa fbc9 	bl	8000bb8 <__aeabi_uldivmod>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4b8c      	ldr	r3, [pc, #560]	; (800665c <UART_SetConfig+0x38c>)
 800642c:	fba3 1302 	umull	r1, r3, r3, r2
 8006430:	095b      	lsrs	r3, r3, #5
 8006432:	2164      	movs	r1, #100	; 0x64
 8006434:	fb01 f303 	mul.w	r3, r1, r3
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	3332      	adds	r3, #50	; 0x32
 800643e:	4a87      	ldr	r2, [pc, #540]	; (800665c <UART_SetConfig+0x38c>)
 8006440:	fba2 2303 	umull	r2, r3, r2, r3
 8006444:	095b      	lsrs	r3, r3, #5
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800644c:	441e      	add	r6, r3
 800644e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006450:	4618      	mov	r0, r3
 8006452:	f04f 0100 	mov.w	r1, #0
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	1894      	adds	r4, r2, r2
 800645c:	623c      	str	r4, [r7, #32]
 800645e:	415b      	adcs	r3, r3
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
 8006462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006466:	1812      	adds	r2, r2, r0
 8006468:	eb41 0303 	adc.w	r3, r1, r3
 800646c:	f04f 0400 	mov.w	r4, #0
 8006470:	f04f 0500 	mov.w	r5, #0
 8006474:	00dd      	lsls	r5, r3, #3
 8006476:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800647a:	00d4      	lsls	r4, r2, #3
 800647c:	4622      	mov	r2, r4
 800647e:	462b      	mov	r3, r5
 8006480:	1814      	adds	r4, r2, r0
 8006482:	653c      	str	r4, [r7, #80]	; 0x50
 8006484:	414b      	adcs	r3, r1
 8006486:	657b      	str	r3, [r7, #84]	; 0x54
 8006488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	461a      	mov	r2, r3
 800648e:	f04f 0300 	mov.w	r3, #0
 8006492:	1891      	adds	r1, r2, r2
 8006494:	61b9      	str	r1, [r7, #24]
 8006496:	415b      	adcs	r3, r3
 8006498:	61fb      	str	r3, [r7, #28]
 800649a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800649e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80064a2:	f7fa fb89 	bl	8000bb8 <__aeabi_uldivmod>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4b6c      	ldr	r3, [pc, #432]	; (800665c <UART_SetConfig+0x38c>)
 80064ac:	fba3 1302 	umull	r1, r3, r3, r2
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	2164      	movs	r1, #100	; 0x64
 80064b4:	fb01 f303 	mul.w	r3, r1, r3
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	3332      	adds	r3, #50	; 0x32
 80064be:	4a67      	ldr	r2, [pc, #412]	; (800665c <UART_SetConfig+0x38c>)
 80064c0:	fba2 2303 	umull	r2, r3, r2, r3
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	f003 0207 	and.w	r2, r3, #7
 80064ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4432      	add	r2, r6
 80064d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064d2:	e0b9      	b.n	8006648 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064d6:	461c      	mov	r4, r3
 80064d8:	f04f 0500 	mov.w	r5, #0
 80064dc:	4622      	mov	r2, r4
 80064de:	462b      	mov	r3, r5
 80064e0:	1891      	adds	r1, r2, r2
 80064e2:	6139      	str	r1, [r7, #16]
 80064e4:	415b      	adcs	r3, r3
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80064ec:	1912      	adds	r2, r2, r4
 80064ee:	eb45 0303 	adc.w	r3, r5, r3
 80064f2:	f04f 0000 	mov.w	r0, #0
 80064f6:	f04f 0100 	mov.w	r1, #0
 80064fa:	00d9      	lsls	r1, r3, #3
 80064fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006500:	00d0      	lsls	r0, r2, #3
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	eb12 0804 	adds.w	r8, r2, r4
 800650a:	eb43 0905 	adc.w	r9, r3, r5
 800650e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	4618      	mov	r0, r3
 8006514:	f04f 0100 	mov.w	r1, #0
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	008b      	lsls	r3, r1, #2
 8006522:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006526:	0082      	lsls	r2, r0, #2
 8006528:	4640      	mov	r0, r8
 800652a:	4649      	mov	r1, r9
 800652c:	f7fa fb44 	bl	8000bb8 <__aeabi_uldivmod>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4b49      	ldr	r3, [pc, #292]	; (800665c <UART_SetConfig+0x38c>)
 8006536:	fba3 2302 	umull	r2, r3, r3, r2
 800653a:	095b      	lsrs	r3, r3, #5
 800653c:	011e      	lsls	r6, r3, #4
 800653e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006540:	4618      	mov	r0, r3
 8006542:	f04f 0100 	mov.w	r1, #0
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	1894      	adds	r4, r2, r2
 800654c:	60bc      	str	r4, [r7, #8]
 800654e:	415b      	adcs	r3, r3
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006556:	1812      	adds	r2, r2, r0
 8006558:	eb41 0303 	adc.w	r3, r1, r3
 800655c:	f04f 0400 	mov.w	r4, #0
 8006560:	f04f 0500 	mov.w	r5, #0
 8006564:	00dd      	lsls	r5, r3, #3
 8006566:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800656a:	00d4      	lsls	r4, r2, #3
 800656c:	4622      	mov	r2, r4
 800656e:	462b      	mov	r3, r5
 8006570:	1814      	adds	r4, r2, r0
 8006572:	64bc      	str	r4, [r7, #72]	; 0x48
 8006574:	414b      	adcs	r3, r1
 8006576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	4618      	mov	r0, r3
 800657e:	f04f 0100 	mov.w	r1, #0
 8006582:	f04f 0200 	mov.w	r2, #0
 8006586:	f04f 0300 	mov.w	r3, #0
 800658a:	008b      	lsls	r3, r1, #2
 800658c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006590:	0082      	lsls	r2, r0, #2
 8006592:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006596:	f7fa fb0f 	bl	8000bb8 <__aeabi_uldivmod>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4b2f      	ldr	r3, [pc, #188]	; (800665c <UART_SetConfig+0x38c>)
 80065a0:	fba3 1302 	umull	r1, r3, r3, r2
 80065a4:	095b      	lsrs	r3, r3, #5
 80065a6:	2164      	movs	r1, #100	; 0x64
 80065a8:	fb01 f303 	mul.w	r3, r1, r3
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	3332      	adds	r3, #50	; 0x32
 80065b2:	4a2a      	ldr	r2, [pc, #168]	; (800665c <UART_SetConfig+0x38c>)
 80065b4:	fba2 2303 	umull	r2, r3, r2, r3
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065be:	441e      	add	r6, r3
 80065c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065c2:	4618      	mov	r0, r3
 80065c4:	f04f 0100 	mov.w	r1, #0
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	1894      	adds	r4, r2, r2
 80065ce:	603c      	str	r4, [r7, #0]
 80065d0:	415b      	adcs	r3, r3
 80065d2:	607b      	str	r3, [r7, #4]
 80065d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065d8:	1812      	adds	r2, r2, r0
 80065da:	eb41 0303 	adc.w	r3, r1, r3
 80065de:	f04f 0400 	mov.w	r4, #0
 80065e2:	f04f 0500 	mov.w	r5, #0
 80065e6:	00dd      	lsls	r5, r3, #3
 80065e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80065ec:	00d4      	lsls	r4, r2, #3
 80065ee:	4622      	mov	r2, r4
 80065f0:	462b      	mov	r3, r5
 80065f2:	eb12 0a00 	adds.w	sl, r2, r0
 80065f6:	eb43 0b01 	adc.w	fp, r3, r1
 80065fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	4618      	mov	r0, r3
 8006600:	f04f 0100 	mov.w	r1, #0
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	008b      	lsls	r3, r1, #2
 800660e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006612:	0082      	lsls	r2, r0, #2
 8006614:	4650      	mov	r0, sl
 8006616:	4659      	mov	r1, fp
 8006618:	f7fa face 	bl	8000bb8 <__aeabi_uldivmod>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4b0e      	ldr	r3, [pc, #56]	; (800665c <UART_SetConfig+0x38c>)
 8006622:	fba3 1302 	umull	r1, r3, r3, r2
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	2164      	movs	r1, #100	; 0x64
 800662a:	fb01 f303 	mul.w	r3, r1, r3
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	3332      	adds	r3, #50	; 0x32
 8006634:	4a09      	ldr	r2, [pc, #36]	; (800665c <UART_SetConfig+0x38c>)
 8006636:	fba2 2303 	umull	r2, r3, r2, r3
 800663a:	095b      	lsrs	r3, r3, #5
 800663c:	f003 020f 	and.w	r2, r3, #15
 8006640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4432      	add	r2, r6
 8006646:	609a      	str	r2, [r3, #8]
}
 8006648:	bf00      	nop
 800664a:	377c      	adds	r7, #124	; 0x7c
 800664c:	46bd      	mov	sp, r7
 800664e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006652:	bf00      	nop
 8006654:	40011000 	.word	0x40011000
 8006658:	40011400 	.word	0x40011400
 800665c:	51eb851f 	.word	0x51eb851f

08006660 <__NVIC_SetPriority>:
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	6039      	str	r1, [r7, #0]
 800666a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800666c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006670:	2b00      	cmp	r3, #0
 8006672:	db0a      	blt.n	800668a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	b2da      	uxtb	r2, r3
 8006678:	490c      	ldr	r1, [pc, #48]	; (80066ac <__NVIC_SetPriority+0x4c>)
 800667a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800667e:	0112      	lsls	r2, r2, #4
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	440b      	add	r3, r1
 8006684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006688:	e00a      	b.n	80066a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	b2da      	uxtb	r2, r3
 800668e:	4908      	ldr	r1, [pc, #32]	; (80066b0 <__NVIC_SetPriority+0x50>)
 8006690:	79fb      	ldrb	r3, [r7, #7]
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	3b04      	subs	r3, #4
 8006698:	0112      	lsls	r2, r2, #4
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	440b      	add	r3, r1
 800669e:	761a      	strb	r2, [r3, #24]
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	e000e100 	.word	0xe000e100
 80066b0:	e000ed00 	.word	0xe000ed00

080066b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80066b8:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <SysTick_Handler+0x1c>)
 80066ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80066bc:	f001 fd28 	bl	8008110 <xTaskGetSchedulerState>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d001      	beq.n	80066ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80066c6:	f002 fb0f 	bl	8008ce8 <xPortSysTickHandler>
  }
}
 80066ca:	bf00      	nop
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	e000e010 	.word	0xe000e010

080066d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80066d8:	2100      	movs	r1, #0
 80066da:	f06f 0004 	mvn.w	r0, #4
 80066de:	f7ff ffbf 	bl	8006660 <__NVIC_SetPriority>
#endif
}
 80066e2:	bf00      	nop
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066ee:	f3ef 8305 	mrs	r3, IPSR
 80066f2:	603b      	str	r3, [r7, #0]
  return(result);
 80066f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80066fa:	f06f 0305 	mvn.w	r3, #5
 80066fe:	607b      	str	r3, [r7, #4]
 8006700:	e00c      	b.n	800671c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006702:	4b0a      	ldr	r3, [pc, #40]	; (800672c <osKernelInitialize+0x44>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d105      	bne.n	8006716 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800670a:	4b08      	ldr	r3, [pc, #32]	; (800672c <osKernelInitialize+0x44>)
 800670c:	2201      	movs	r2, #1
 800670e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006710:	2300      	movs	r3, #0
 8006712:	607b      	str	r3, [r7, #4]
 8006714:	e002      	b.n	800671c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006716:	f04f 33ff 	mov.w	r3, #4294967295
 800671a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800671c:	687b      	ldr	r3, [r7, #4]
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	20000210 	.word	0x20000210

08006730 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006736:	f3ef 8305 	mrs	r3, IPSR
 800673a:	603b      	str	r3, [r7, #0]
  return(result);
 800673c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006742:	f06f 0305 	mvn.w	r3, #5
 8006746:	607b      	str	r3, [r7, #4]
 8006748:	e010      	b.n	800676c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800674a:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <osKernelStart+0x48>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d109      	bne.n	8006766 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006752:	f7ff ffbf 	bl	80066d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006756:	4b08      	ldr	r3, [pc, #32]	; (8006778 <osKernelStart+0x48>)
 8006758:	2202      	movs	r2, #2
 800675a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800675c:	f001 f87c 	bl	8007858 <vTaskStartScheduler>
      stat = osOK;
 8006760:	2300      	movs	r3, #0
 8006762:	607b      	str	r3, [r7, #4]
 8006764:	e002      	b.n	800676c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006766:	f04f 33ff 	mov.w	r3, #4294967295
 800676a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800676c:	687b      	ldr	r3, [r7, #4]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20000210 	.word	0x20000210

0800677c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b08e      	sub	sp, #56	; 0x38
 8006780:	af04      	add	r7, sp, #16
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006788:	2300      	movs	r3, #0
 800678a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800678c:	f3ef 8305 	mrs	r3, IPSR
 8006790:	617b      	str	r3, [r7, #20]
  return(result);
 8006792:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006794:	2b00      	cmp	r3, #0
 8006796:	d17e      	bne.n	8006896 <osThreadNew+0x11a>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d07b      	beq.n	8006896 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800679e:	2380      	movs	r3, #128	; 0x80
 80067a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80067a2:	2318      	movs	r3, #24
 80067a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80067aa:	f04f 33ff 	mov.w	r3, #4294967295
 80067ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d045      	beq.n	8006842 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <osThreadNew+0x48>
        name = attr->name;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d008      	beq.n	80067ea <osThreadNew+0x6e>
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	2b38      	cmp	r3, #56	; 0x38
 80067dc:	d805      	bhi.n	80067ea <osThreadNew+0x6e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <osThreadNew+0x72>
        return (NULL);
 80067ea:	2300      	movs	r3, #0
 80067ec:	e054      	b.n	8006898 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	089b      	lsrs	r3, r3, #2
 80067fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00e      	beq.n	8006824 <osThreadNew+0xa8>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	2bbb      	cmp	r3, #187	; 0xbb
 800680c:	d90a      	bls.n	8006824 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006812:	2b00      	cmp	r3, #0
 8006814:	d006      	beq.n	8006824 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <osThreadNew+0xa8>
        mem = 1;
 800681e:	2301      	movs	r3, #1
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	e010      	b.n	8006846 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10c      	bne.n	8006846 <osThreadNew+0xca>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d108      	bne.n	8006846 <osThreadNew+0xca>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <osThreadNew+0xca>
          mem = 0;
 800683c:	2300      	movs	r3, #0
 800683e:	61bb      	str	r3, [r7, #24]
 8006840:	e001      	b.n	8006846 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d110      	bne.n	800686e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006854:	9202      	str	r2, [sp, #8]
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	6a3a      	ldr	r2, [r7, #32]
 8006860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 fe0c 	bl	8007480 <xTaskCreateStatic>
 8006868:	4603      	mov	r3, r0
 800686a:	613b      	str	r3, [r7, #16]
 800686c:	e013      	b.n	8006896 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d110      	bne.n	8006896 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	b29a      	uxth	r2, r3
 8006878:	f107 0310 	add.w	r3, r7, #16
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 fe57 	bl	800753a <xTaskCreate>
 800688c:	4603      	mov	r3, r0
 800688e:	2b01      	cmp	r3, #1
 8006890:	d001      	beq.n	8006896 <osThreadNew+0x11a>
            hTask = NULL;
 8006892:	2300      	movs	r3, #0
 8006894:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006896:	693b      	ldr	r3, [r7, #16]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3728      	adds	r7, #40	; 0x28
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068a8:	f3ef 8305 	mrs	r3, IPSR
 80068ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80068ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <osDelay+0x1c>
    stat = osErrorISR;
 80068b4:	f06f 0305 	mvn.w	r3, #5
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	e007      	b.n	80068cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80068bc:	2300      	movs	r3, #0
 80068be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 ff92 	bl	80077f0 <vTaskDelay>
    }
  }

  return (stat);
 80068cc:	68fb      	ldr	r3, [r7, #12]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4a07      	ldr	r2, [pc, #28]	; (8006904 <vApplicationGetIdleTaskMemory+0x2c>)
 80068e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	4a06      	ldr	r2, [pc, #24]	; (8006908 <vApplicationGetIdleTaskMemory+0x30>)
 80068ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2280      	movs	r2, #128	; 0x80
 80068f4:	601a      	str	r2, [r3, #0]
}
 80068f6:	bf00      	nop
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20000214 	.word	0x20000214
 8006908:	200002d0 	.word	0x200002d0

0800690c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4a07      	ldr	r2, [pc, #28]	; (8006938 <vApplicationGetTimerTaskMemory+0x2c>)
 800691c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	4a06      	ldr	r2, [pc, #24]	; (800693c <vApplicationGetTimerTaskMemory+0x30>)
 8006922:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800692a:	601a      	str	r2, [r3, #0]
}
 800692c:	bf00      	nop
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	200004d0 	.word	0x200004d0
 800693c:	2000058c 	.word	0x2000058c

08006940 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f103 0208 	add.w	r2, r3, #8
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f04f 32ff 	mov.w	r2, #4294967295
 8006958:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f103 0208 	add.w	r2, r3, #8
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f103 0208 	add.w	r2, r3, #8
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800699a:	b480      	push	{r7}
 800699c:	b085      	sub	sp, #20
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	601a      	str	r2, [r3, #0]
}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069e2:	b480      	push	{r7}
 80069e4:	b085      	sub	sp, #20
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d103      	bne.n	8006a02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	e00c      	b.n	8006a1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	3308      	adds	r3, #8
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	e002      	b.n	8006a10 <vListInsert+0x2e>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d2f6      	bcs.n	8006a0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	601a      	str	r2, [r3, #0]
}
 8006a48:	bf00      	nop
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	6892      	ldr	r2, [r2, #8]
 8006a6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	6852      	ldr	r2, [r2, #4]
 8006a74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d103      	bne.n	8006a88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	1e5a      	subs	r2, r3, #1
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ad2:	f002 f877 	bl	8008bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ade:	68f9      	ldr	r1, [r7, #12]
 8006ae0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ae2:	fb01 f303 	mul.w	r3, r1, r3
 8006ae6:	441a      	add	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b02:	3b01      	subs	r3, #1
 8006b04:	68f9      	ldr	r1, [r7, #12]
 8006b06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b08:	fb01 f303 	mul.w	r3, r1, r3
 8006b0c:	441a      	add	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	22ff      	movs	r2, #255	; 0xff
 8006b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	22ff      	movs	r2, #255	; 0xff
 8006b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d114      	bne.n	8006b52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01a      	beq.n	8006b66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3310      	adds	r3, #16
 8006b34:	4618      	mov	r0, r3
 8006b36:	f001 f929 	bl	8007d8c <xTaskRemoveFromEventList>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d012      	beq.n	8006b66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b40:	4b0c      	ldr	r3, [pc, #48]	; (8006b74 <xQueueGenericReset+0xcc>)
 8006b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	e009      	b.n	8006b66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3310      	adds	r3, #16
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff fef2 	bl	8006940 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3324      	adds	r3, #36	; 0x24
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff feed 	bl	8006940 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b66:	f002 f85d 	bl	8008c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b6a:	2301      	movs	r3, #1
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	e000ed04 	.word	0xe000ed04

08006b78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08e      	sub	sp, #56	; 0x38
 8006b7c:	af02      	add	r7, sp, #8
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10a      	bne.n	8006ba2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b9e:	bf00      	nop
 8006ba0:	e7fe      	b.n	8006ba0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10a      	bne.n	8006bbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bba:	bf00      	nop
 8006bbc:	e7fe      	b.n	8006bbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <xQueueGenericCreateStatic+0x52>
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <xQueueGenericCreateStatic+0x56>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <xQueueGenericCreateStatic+0x58>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10a      	bne.n	8006bea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	623b      	str	r3, [r7, #32]
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d102      	bne.n	8006bf6 <xQueueGenericCreateStatic+0x7e>
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <xQueueGenericCreateStatic+0x82>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e000      	b.n	8006bfc <xQueueGenericCreateStatic+0x84>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	61fb      	str	r3, [r7, #28]
}
 8006c12:	bf00      	nop
 8006c14:	e7fe      	b.n	8006c14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c16:	2350      	movs	r3, #80	; 0x50
 8006c18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2b50      	cmp	r3, #80	; 0x50
 8006c1e:	d00a      	beq.n	8006c36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	61bb      	str	r3, [r7, #24]
}
 8006c32:	bf00      	nop
 8006c34:	e7fe      	b.n	8006c34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00d      	beq.n	8006c5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	4613      	mov	r3, r2
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 f805 	bl	8006c68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3730      	adds	r7, #48	; 0x30
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d103      	bne.n	8006c84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	e002      	b.n	8006c8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c96:	2101      	movs	r1, #1
 8006c98:	69b8      	ldr	r0, [r7, #24]
 8006c9a:	f7ff ff05 	bl	8006aa8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	78fa      	ldrb	r2, [r7, #3]
 8006ca2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ca6:	bf00      	nop
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08e      	sub	sp, #56	; 0x38
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10a      	bne.n	8006ce2 <xQueueGenericSend+0x32>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006cde:	bf00      	nop
 8006ce0:	e7fe      	b.n	8006ce0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d103      	bne.n	8006cf0 <xQueueGenericSend+0x40>
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <xQueueGenericSend+0x44>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <xQueueGenericSend+0x46>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10a      	bne.n	8006d10 <xQueueGenericSend+0x60>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d0c:	bf00      	nop
 8006d0e:	e7fe      	b.n	8006d0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d103      	bne.n	8006d1e <xQueueGenericSend+0x6e>
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d101      	bne.n	8006d22 <xQueueGenericSend+0x72>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e000      	b.n	8006d24 <xQueueGenericSend+0x74>
 8006d22:	2300      	movs	r3, #0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10a      	bne.n	8006d3e <xQueueGenericSend+0x8e>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	623b      	str	r3, [r7, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	e7fe      	b.n	8006d3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d3e:	f001 f9e7 	bl	8008110 <xTaskGetSchedulerState>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d102      	bne.n	8006d4e <xQueueGenericSend+0x9e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <xQueueGenericSend+0xa2>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <xQueueGenericSend+0xa4>
 8006d52:	2300      	movs	r3, #0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10a      	bne.n	8006d6e <xQueueGenericSend+0xbe>
	__asm volatile
 8006d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	61fb      	str	r3, [r7, #28]
}
 8006d6a:	bf00      	nop
 8006d6c:	e7fe      	b.n	8006d6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d6e:	f001 ff29 	bl	8008bc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d302      	bcc.n	8006d84 <xQueueGenericSend+0xd4>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d129      	bne.n	8006dd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	68b9      	ldr	r1, [r7, #8]
 8006d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d8a:	f000 fa0b 	bl	80071a4 <prvCopyDataToQueue>
 8006d8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d010      	beq.n	8006dba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	3324      	adds	r3, #36	; 0x24
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fff5 	bl	8007d8c <xTaskRemoveFromEventList>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d013      	beq.n	8006dd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006da8:	4b3f      	ldr	r3, [pc, #252]	; (8006ea8 <xQueueGenericSend+0x1f8>)
 8006daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	e00a      	b.n	8006dd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d007      	beq.n	8006dd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006dc0:	4b39      	ldr	r3, [pc, #228]	; (8006ea8 <xQueueGenericSend+0x1f8>)
 8006dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006dd0:	f001 ff28 	bl	8008c24 <vPortExitCritical>
				return pdPASS;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e063      	b.n	8006ea0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d103      	bne.n	8006de6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dde:	f001 ff21 	bl	8008c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	e05c      	b.n	8006ea0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d106      	bne.n	8006dfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dec:	f107 0314 	add.w	r3, r7, #20
 8006df0:	4618      	mov	r0, r3
 8006df2:	f001 f82f 	bl	8007e54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006df6:	2301      	movs	r3, #1
 8006df8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006dfa:	f001 ff13 	bl	8008c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dfe:	f000 fd9b 	bl	8007938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e02:	f001 fedf 	bl	8008bc4 <vPortEnterCritical>
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e0c:	b25b      	sxtb	r3, r3
 8006e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e12:	d103      	bne.n	8006e1c <xQueueGenericSend+0x16c>
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e22:	b25b      	sxtb	r3, r3
 8006e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e28:	d103      	bne.n	8006e32 <xQueueGenericSend+0x182>
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e32:	f001 fef7 	bl	8008c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e36:	1d3a      	adds	r2, r7, #4
 8006e38:	f107 0314 	add.w	r3, r7, #20
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f001 f81e 	bl	8007e80 <xTaskCheckForTimeOut>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d124      	bne.n	8006e94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e4c:	f000 faa2 	bl	8007394 <prvIsQueueFull>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d018      	beq.n	8006e88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e58:	3310      	adds	r3, #16
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 ff44 	bl	8007cec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e66:	f000 fa2d 	bl	80072c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e6a:	f000 fd73 	bl	8007954 <xTaskResumeAll>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f47f af7c 	bne.w	8006d6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006e76:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <xQueueGenericSend+0x1f8>)
 8006e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	e772      	b.n	8006d6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e8a:	f000 fa1b 	bl	80072c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e8e:	f000 fd61 	bl	8007954 <xTaskResumeAll>
 8006e92:	e76c      	b.n	8006d6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e96:	f000 fa15 	bl	80072c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e9a:	f000 fd5b 	bl	8007954 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3738      	adds	r7, #56	; 0x38
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b090      	sub	sp, #64	; 0x40
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10a      	bne.n	8006eda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d103      	bne.n	8006ee8 <xQueueGenericSendFromISR+0x3c>
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <xQueueGenericSendFromISR+0x40>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e000      	b.n	8006eee <xQueueGenericSendFromISR+0x42>
 8006eec:	2300      	movs	r3, #0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f04:	bf00      	nop
 8006f06:	e7fe      	b.n	8006f06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d103      	bne.n	8006f16 <xQueueGenericSendFromISR+0x6a>
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <xQueueGenericSendFromISR+0x6e>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <xQueueGenericSendFromISR+0x70>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	623b      	str	r3, [r7, #32]
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f36:	f001 ff27 	bl	8008d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f3a:	f3ef 8211 	mrs	r2, BASEPRI
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	61fa      	str	r2, [r7, #28]
 8006f50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d302      	bcc.n	8006f68 <xQueueGenericSendFromISR+0xbc>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d12f      	bne.n	8006fc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	68b9      	ldr	r1, [r7, #8]
 8006f7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f7e:	f000 f911 	bl	80071a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8a:	d112      	bne.n	8006fb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d016      	beq.n	8006fc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f96:	3324      	adds	r3, #36	; 0x24
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fef7 	bl	8007d8c <xTaskRemoveFromEventList>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00e      	beq.n	8006fc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00b      	beq.n	8006fc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	e007      	b.n	8006fc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	b25a      	sxtb	r2, r3
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006fc6:	e001      	b.n	8006fcc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006fd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3740      	adds	r7, #64	; 0x40
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08c      	sub	sp, #48	; 0x30
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <xQueueReceive+0x30>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	623b      	str	r3, [r7, #32]
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d103      	bne.n	8007022 <xQueueReceive+0x3e>
 800701a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <xQueueReceive+0x42>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <xQueueReceive+0x44>
 8007026:	2300      	movs	r3, #0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <xQueueReceive+0x5e>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	61fb      	str	r3, [r7, #28]
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007042:	f001 f865 	bl	8008110 <xTaskGetSchedulerState>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d102      	bne.n	8007052 <xQueueReceive+0x6e>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <xQueueReceive+0x72>
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <xQueueReceive+0x74>
 8007056:	2300      	movs	r3, #0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <xQueueReceive+0x8e>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	61bb      	str	r3, [r7, #24]
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007072:	f001 fda7 	bl	8008bc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	2b00      	cmp	r3, #0
 8007080:	d01f      	beq.n	80070c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007082:	68b9      	ldr	r1, [r7, #8]
 8007084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007086:	f000 f8f7 	bl	8007278 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	1e5a      	subs	r2, r3, #1
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00f      	beq.n	80070ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	3310      	adds	r3, #16
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fe74 	bl	8007d8c <xTaskRemoveFromEventList>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d007      	beq.n	80070ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070aa:	4b3d      	ldr	r3, [pc, #244]	; (80071a0 <xQueueReceive+0x1bc>)
 80070ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070ba:	f001 fdb3 	bl	8008c24 <vPortExitCritical>
				return pdPASS;
 80070be:	2301      	movs	r3, #1
 80070c0:	e069      	b.n	8007196 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d103      	bne.n	80070d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070c8:	f001 fdac 	bl	8008c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070cc:	2300      	movs	r3, #0
 80070ce:	e062      	b.n	8007196 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d106      	bne.n	80070e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070d6:	f107 0310 	add.w	r3, r7, #16
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 feba 	bl	8007e54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070e0:	2301      	movs	r3, #1
 80070e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070e4:	f001 fd9e 	bl	8008c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070e8:	f000 fc26 	bl	8007938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070ec:	f001 fd6a 	bl	8008bc4 <vPortEnterCritical>
 80070f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070f6:	b25b      	sxtb	r3, r3
 80070f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fc:	d103      	bne.n	8007106 <xQueueReceive+0x122>
 80070fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800710c:	b25b      	sxtb	r3, r3
 800710e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007112:	d103      	bne.n	800711c <xQueueReceive+0x138>
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800711c:	f001 fd82 	bl	8008c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007120:	1d3a      	adds	r2, r7, #4
 8007122:	f107 0310 	add.w	r3, r7, #16
 8007126:	4611      	mov	r1, r2
 8007128:	4618      	mov	r0, r3
 800712a:	f000 fea9 	bl	8007e80 <xTaskCheckForTimeOut>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d123      	bne.n	800717c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007136:	f000 f917 	bl	8007368 <prvIsQueueEmpty>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d017      	beq.n	8007170 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	3324      	adds	r3, #36	; 0x24
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	4611      	mov	r1, r2
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fdcf 	bl	8007cec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800714e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007150:	f000 f8b8 	bl	80072c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007154:	f000 fbfe 	bl	8007954 <xTaskResumeAll>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d189      	bne.n	8007072 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800715e:	4b10      	ldr	r3, [pc, #64]	; (80071a0 <xQueueReceive+0x1bc>)
 8007160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	e780      	b.n	8007072 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007172:	f000 f8a7 	bl	80072c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007176:	f000 fbed 	bl	8007954 <xTaskResumeAll>
 800717a:	e77a      	b.n	8007072 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800717c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800717e:	f000 f8a1 	bl	80072c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007182:	f000 fbe7 	bl	8007954 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007188:	f000 f8ee 	bl	8007368 <prvIsQueueEmpty>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	f43f af6f 	beq.w	8007072 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007194:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007196:	4618      	mov	r0, r3
 8007198:	3730      	adds	r7, #48	; 0x30
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	e000ed04 	.word	0xe000ed04

080071a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071b0:	2300      	movs	r3, #0
 80071b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10d      	bne.n	80071de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d14d      	bne.n	8007266 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 ffbc 	bl	800814c <xTaskPriorityDisinherit>
 80071d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	609a      	str	r2, [r3, #8]
 80071dc:	e043      	b.n	8007266 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d119      	bne.n	8007218 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6858      	ldr	r0, [r3, #4]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	461a      	mov	r2, r3
 80071ee:	68b9      	ldr	r1, [r7, #8]
 80071f0:	f002 f917 	bl	8009422 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fc:	441a      	add	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	429a      	cmp	r2, r3
 800720c:	d32b      	bcc.n	8007266 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	e026      	b.n	8007266 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	68d8      	ldr	r0, [r3, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	461a      	mov	r2, r3
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	f002 f8fd 	bl	8009422 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	425b      	negs	r3, r3
 8007232:	441a      	add	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	429a      	cmp	r2, r3
 8007242:	d207      	bcs.n	8007254 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724c:	425b      	negs	r3, r3
 800724e:	441a      	add	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b02      	cmp	r3, #2
 8007258:	d105      	bne.n	8007266 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	3b01      	subs	r3, #1
 8007264:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800726e:	697b      	ldr	r3, [r7, #20]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	2b00      	cmp	r3, #0
 8007288:	d018      	beq.n	80072bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	441a      	add	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d303      	bcc.n	80072ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68d9      	ldr	r1, [r3, #12]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b4:	461a      	mov	r2, r3
 80072b6:	6838      	ldr	r0, [r7, #0]
 80072b8:	f002 f8b3 	bl	8009422 <memcpy>
	}
}
 80072bc:	bf00      	nop
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072cc:	f001 fc7a 	bl	8008bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072d8:	e011      	b.n	80072fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d012      	beq.n	8007308 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3324      	adds	r3, #36	; 0x24
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fd50 	bl	8007d8c <xTaskRemoveFromEventList>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80072f2:	f000 fe27 	bl	8007f44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007302:	2b00      	cmp	r3, #0
 8007304:	dce9      	bgt.n	80072da <prvUnlockQueue+0x16>
 8007306:	e000      	b.n	800730a <prvUnlockQueue+0x46>
					break;
 8007308:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	22ff      	movs	r2, #255	; 0xff
 800730e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007312:	f001 fc87 	bl	8008c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007316:	f001 fc55 	bl	8008bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007320:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007322:	e011      	b.n	8007348 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d012      	beq.n	8007352 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3310      	adds	r3, #16
 8007330:	4618      	mov	r0, r3
 8007332:	f000 fd2b 	bl	8007d8c <xTaskRemoveFromEventList>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800733c:	f000 fe02 	bl	8007f44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	3b01      	subs	r3, #1
 8007344:	b2db      	uxtb	r3, r3
 8007346:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007348:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800734c:	2b00      	cmp	r3, #0
 800734e:	dce9      	bgt.n	8007324 <prvUnlockQueue+0x60>
 8007350:	e000      	b.n	8007354 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007352:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	22ff      	movs	r2, #255	; 0xff
 8007358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800735c:	f001 fc62 	bl	8008c24 <vPortExitCritical>
}
 8007360:	bf00      	nop
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007370:	f001 fc28 	bl	8008bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007378:	2b00      	cmp	r3, #0
 800737a:	d102      	bne.n	8007382 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800737c:	2301      	movs	r3, #1
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	e001      	b.n	8007386 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007386:	f001 fc4d 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 800738a:	68fb      	ldr	r3, [r7, #12]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800739c:	f001 fc12 	bl	8008bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d102      	bne.n	80073b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073ac:	2301      	movs	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	e001      	b.n	80073b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073b6:	f001 fc35 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 80073ba:	68fb      	ldr	r3, [r7, #12]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073ce:	2300      	movs	r3, #0
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	e014      	b.n	80073fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80073d4:	4a0f      	ldr	r2, [pc, #60]	; (8007414 <vQueueAddToRegistry+0x50>)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10b      	bne.n	80073f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80073e0:	490c      	ldr	r1, [pc, #48]	; (8007414 <vQueueAddToRegistry+0x50>)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80073ea:	4a0a      	ldr	r2, [pc, #40]	; (8007414 <vQueueAddToRegistry+0x50>)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	4413      	add	r3, r2
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80073f6:	e006      	b.n	8007406 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3301      	adds	r3, #1
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b07      	cmp	r3, #7
 8007402:	d9e7      	bls.n	80073d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	20005240 	.word	0x20005240

08007418 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007428:	f001 fbcc 	bl	8008bc4 <vPortEnterCritical>
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007432:	b25b      	sxtb	r3, r3
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007438:	d103      	bne.n	8007442 <vQueueWaitForMessageRestricted+0x2a>
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007448:	b25b      	sxtb	r3, r3
 800744a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744e:	d103      	bne.n	8007458 <vQueueWaitForMessageRestricted+0x40>
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007458:	f001 fbe4 	bl	8008c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	2b00      	cmp	r3, #0
 8007462:	d106      	bne.n	8007472 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	3324      	adds	r3, #36	; 0x24
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	68b9      	ldr	r1, [r7, #8]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fc61 	bl	8007d34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007472:	6978      	ldr	r0, [r7, #20]
 8007474:	f7ff ff26 	bl	80072c4 <prvUnlockQueue>
	}
 8007478:	bf00      	nop
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08e      	sub	sp, #56	; 0x38
 8007484:	af04      	add	r7, sp, #16
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800748e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10a      	bne.n	80074aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	623b      	str	r3, [r7, #32]
}
 80074a6:	bf00      	nop
 80074a8:	e7fe      	b.n	80074a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10a      	bne.n	80074c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	61fb      	str	r3, [r7, #28]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074c6:	23bc      	movs	r3, #188	; 0xbc
 80074c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2bbc      	cmp	r3, #188	; 0xbc
 80074ce:	d00a      	beq.n	80074e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	61bb      	str	r3, [r7, #24]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d01e      	beq.n	800752c <xTaskCreateStatic+0xac>
 80074ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d01b      	beq.n	800752c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	2202      	movs	r2, #2
 8007502:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007506:	2300      	movs	r3, #0
 8007508:	9303      	str	r3, [sp, #12]
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	9302      	str	r3, [sp, #8]
 800750e:	f107 0314 	add.w	r3, r7, #20
 8007512:	9301      	str	r3, [sp, #4]
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 f850 	bl	80075c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007526:	f000 f8f3 	bl	8007710 <prvAddNewTaskToReadyList>
 800752a:	e001      	b.n	8007530 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007530:	697b      	ldr	r3, [r7, #20]
	}
 8007532:	4618      	mov	r0, r3
 8007534:	3728      	adds	r7, #40	; 0x28
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800753a:	b580      	push	{r7, lr}
 800753c:	b08c      	sub	sp, #48	; 0x30
 800753e:	af04      	add	r7, sp, #16
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	603b      	str	r3, [r7, #0]
 8007546:	4613      	mov	r3, r2
 8007548:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800754a:	88fb      	ldrh	r3, [r7, #6]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4618      	mov	r0, r3
 8007550:	f001 fc5a 	bl	8008e08 <pvPortMalloc>
 8007554:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00e      	beq.n	800757a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800755c:	20bc      	movs	r0, #188	; 0xbc
 800755e:	f001 fc53 	bl	8008e08 <pvPortMalloc>
 8007562:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	631a      	str	r2, [r3, #48]	; 0x30
 8007570:	e005      	b.n	800757e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007572:	6978      	ldr	r0, [r7, #20]
 8007574:	f001 fd14 	bl	8008fa0 <vPortFree>
 8007578:	e001      	b.n	800757e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d017      	beq.n	80075b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800758c:	88fa      	ldrh	r2, [r7, #6]
 800758e:	2300      	movs	r3, #0
 8007590:	9303      	str	r3, [sp, #12]
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	9302      	str	r3, [sp, #8]
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	68b9      	ldr	r1, [r7, #8]
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 f80e 	bl	80075c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075a8:	69f8      	ldr	r0, [r7, #28]
 80075aa:	f000 f8b1 	bl	8007710 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075ae:	2301      	movs	r3, #1
 80075b0:	61bb      	str	r3, [r7, #24]
 80075b2:	e002      	b.n	80075ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075b4:	f04f 33ff 	mov.w	r3, #4294967295
 80075b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075ba:	69bb      	ldr	r3, [r7, #24]
	}
 80075bc:	4618      	mov	r0, r3
 80075be:	3720      	adds	r7, #32
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b088      	sub	sp, #32
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	461a      	mov	r2, r3
 80075dc:	21a5      	movs	r1, #165	; 0xa5
 80075de:	f001 ff2e 	bl	800943e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80075ec:	3b01      	subs	r3, #1
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	f023 0307 	bic.w	r3, r3, #7
 80075fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	617b      	str	r3, [r7, #20]
}
 8007618:	bf00      	nop
 800761a:	e7fe      	b.n	800761a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d01f      	beq.n	8007662 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007622:	2300      	movs	r3, #0
 8007624:	61fb      	str	r3, [r7, #28]
 8007626:	e012      	b.n	800764e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	4413      	add	r3, r2
 800762e:	7819      	ldrb	r1, [r3, #0]
 8007630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	4413      	add	r3, r2
 8007636:	3334      	adds	r3, #52	; 0x34
 8007638:	460a      	mov	r2, r1
 800763a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	4413      	add	r3, r2
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d006      	beq.n	8007656 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	3301      	adds	r3, #1
 800764c:	61fb      	str	r3, [r7, #28]
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	2b0f      	cmp	r3, #15
 8007652:	d9e9      	bls.n	8007628 <prvInitialiseNewTask+0x64>
 8007654:	e000      	b.n	8007658 <prvInitialiseNewTask+0x94>
			{
				break;
 8007656:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007660:	e003      	b.n	800766a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	2b37      	cmp	r3, #55	; 0x37
 800766e:	d901      	bls.n	8007674 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007670:	2337      	movs	r3, #55	; 0x37
 8007672:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007678:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800767e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	2200      	movs	r2, #0
 8007684:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	3304      	adds	r3, #4
 800768a:	4618      	mov	r0, r3
 800768c:	f7ff f978 	bl	8006980 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	3318      	adds	r3, #24
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff f973 	bl	8006980 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800769e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c2:	3354      	adds	r3, #84	; 0x54
 80076c4:	2260      	movs	r2, #96	; 0x60
 80076c6:	2100      	movs	r1, #0
 80076c8:	4618      	mov	r0, r3
 80076ca:	f001 feb8 	bl	800943e <memset>
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	4a0c      	ldr	r2, [pc, #48]	; (8007704 <prvInitialiseNewTask+0x140>)
 80076d2:	659a      	str	r2, [r3, #88]	; 0x58
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	4a0c      	ldr	r2, [pc, #48]	; (8007708 <prvInitialiseNewTask+0x144>)
 80076d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	4a0b      	ldr	r2, [pc, #44]	; (800770c <prvInitialiseNewTask+0x148>)
 80076de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	68f9      	ldr	r1, [r7, #12]
 80076e4:	69b8      	ldr	r0, [r7, #24]
 80076e6:	f001 f941 	bl	800896c <pxPortInitialiseStack>
 80076ea:	4602      	mov	r2, r0
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076fc:	bf00      	nop
 80076fe:	3720      	adds	r7, #32
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	0800c1b8 	.word	0x0800c1b8
 8007708:	0800c1d8 	.word	0x0800c1d8
 800770c:	0800c198 	.word	0x0800c198

08007710 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007718:	f001 fa54 	bl	8008bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800771c:	4b2d      	ldr	r3, [pc, #180]	; (80077d4 <prvAddNewTaskToReadyList+0xc4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	4a2c      	ldr	r2, [pc, #176]	; (80077d4 <prvAddNewTaskToReadyList+0xc4>)
 8007724:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007726:	4b2c      	ldr	r3, [pc, #176]	; (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d109      	bne.n	8007742 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800772e:	4a2a      	ldr	r2, [pc, #168]	; (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007734:	4b27      	ldr	r3, [pc, #156]	; (80077d4 <prvAddNewTaskToReadyList+0xc4>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d110      	bne.n	800775e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800773c:	f000 fc26 	bl	8007f8c <prvInitialiseTaskLists>
 8007740:	e00d      	b.n	800775e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007742:	4b26      	ldr	r3, [pc, #152]	; (80077dc <prvAddNewTaskToReadyList+0xcc>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d109      	bne.n	800775e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800774a:	4b23      	ldr	r3, [pc, #140]	; (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	429a      	cmp	r2, r3
 8007756:	d802      	bhi.n	800775e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007758:	4a1f      	ldr	r2, [pc, #124]	; (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800775e:	4b20      	ldr	r3, [pc, #128]	; (80077e0 <prvAddNewTaskToReadyList+0xd0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3301      	adds	r3, #1
 8007764:	4a1e      	ldr	r2, [pc, #120]	; (80077e0 <prvAddNewTaskToReadyList+0xd0>)
 8007766:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007768:	4b1d      	ldr	r3, [pc, #116]	; (80077e0 <prvAddNewTaskToReadyList+0xd0>)
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007774:	4b1b      	ldr	r3, [pc, #108]	; (80077e4 <prvAddNewTaskToReadyList+0xd4>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	429a      	cmp	r2, r3
 800777a:	d903      	bls.n	8007784 <prvAddNewTaskToReadyList+0x74>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	4a18      	ldr	r2, [pc, #96]	; (80077e4 <prvAddNewTaskToReadyList+0xd4>)
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007788:	4613      	mov	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4a15      	ldr	r2, [pc, #84]	; (80077e8 <prvAddNewTaskToReadyList+0xd8>)
 8007792:	441a      	add	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3304      	adds	r3, #4
 8007798:	4619      	mov	r1, r3
 800779a:	4610      	mov	r0, r2
 800779c:	f7ff f8fd 	bl	800699a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077a0:	f001 fa40 	bl	8008c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077a4:	4b0d      	ldr	r3, [pc, #52]	; (80077dc <prvAddNewTaskToReadyList+0xcc>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00e      	beq.n	80077ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077ac:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d207      	bcs.n	80077ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077ba:	4b0c      	ldr	r3, [pc, #48]	; (80077ec <prvAddNewTaskToReadyList+0xdc>)
 80077bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077ca:	bf00      	nop
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20000e60 	.word	0x20000e60
 80077d8:	2000098c 	.word	0x2000098c
 80077dc:	20000e6c 	.word	0x20000e6c
 80077e0:	20000e7c 	.word	0x20000e7c
 80077e4:	20000e68 	.word	0x20000e68
 80077e8:	20000990 	.word	0x20000990
 80077ec:	e000ed04 	.word	0xe000ed04

080077f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077f8:	2300      	movs	r3, #0
 80077fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d017      	beq.n	8007832 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007802:	4b13      	ldr	r3, [pc, #76]	; (8007850 <vTaskDelay+0x60>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <vTaskDelay+0x30>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	60bb      	str	r3, [r7, #8]
}
 800781c:	bf00      	nop
 800781e:	e7fe      	b.n	800781e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007820:	f000 f88a 	bl	8007938 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007824:	2100      	movs	r1, #0
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fcfe 	bl	8008228 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800782c:	f000 f892 	bl	8007954 <xTaskResumeAll>
 8007830:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d107      	bne.n	8007848 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007838:	4b06      	ldr	r3, [pc, #24]	; (8007854 <vTaskDelay+0x64>)
 800783a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007848:	bf00      	nop
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20000e88 	.word	0x20000e88
 8007854:	e000ed04 	.word	0xe000ed04

08007858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08a      	sub	sp, #40	; 0x28
 800785c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800785e:	2300      	movs	r3, #0
 8007860:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007862:	2300      	movs	r3, #0
 8007864:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007866:	463a      	mov	r2, r7
 8007868:	1d39      	adds	r1, r7, #4
 800786a:	f107 0308 	add.w	r3, r7, #8
 800786e:	4618      	mov	r0, r3
 8007870:	f7ff f832 	bl	80068d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	9202      	str	r2, [sp, #8]
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	2300      	movs	r3, #0
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	2300      	movs	r3, #0
 8007884:	460a      	mov	r2, r1
 8007886:	4924      	ldr	r1, [pc, #144]	; (8007918 <vTaskStartScheduler+0xc0>)
 8007888:	4824      	ldr	r0, [pc, #144]	; (800791c <vTaskStartScheduler+0xc4>)
 800788a:	f7ff fdf9 	bl	8007480 <xTaskCreateStatic>
 800788e:	4603      	mov	r3, r0
 8007890:	4a23      	ldr	r2, [pc, #140]	; (8007920 <vTaskStartScheduler+0xc8>)
 8007892:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007894:	4b22      	ldr	r3, [pc, #136]	; (8007920 <vTaskStartScheduler+0xc8>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800789c:	2301      	movs	r3, #1
 800789e:	617b      	str	r3, [r7, #20]
 80078a0:	e001      	b.n	80078a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d102      	bne.n	80078b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078ac:	f000 fd10 	bl	80082d0 <xTimerCreateTimerTask>
 80078b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d11b      	bne.n	80078f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	613b      	str	r3, [r7, #16]
}
 80078ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078cc:	4b15      	ldr	r3, [pc, #84]	; (8007924 <vTaskStartScheduler+0xcc>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3354      	adds	r3, #84	; 0x54
 80078d2:	4a15      	ldr	r2, [pc, #84]	; (8007928 <vTaskStartScheduler+0xd0>)
 80078d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078d6:	4b15      	ldr	r3, [pc, #84]	; (800792c <vTaskStartScheduler+0xd4>)
 80078d8:	f04f 32ff 	mov.w	r2, #4294967295
 80078dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078de:	4b14      	ldr	r3, [pc, #80]	; (8007930 <vTaskStartScheduler+0xd8>)
 80078e0:	2201      	movs	r2, #1
 80078e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078e4:	4b13      	ldr	r3, [pc, #76]	; (8007934 <vTaskStartScheduler+0xdc>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078ea:	f001 f8c9 	bl	8008a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078ee:	e00e      	b.n	800790e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f6:	d10a      	bne.n	800790e <vTaskStartScheduler+0xb6>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	60fb      	str	r3, [r7, #12]
}
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <vTaskStartScheduler+0xb4>
}
 800790e:	bf00      	nop
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	0800c0fc 	.word	0x0800c0fc
 800791c:	08007f5d 	.word	0x08007f5d
 8007920:	20000e84 	.word	0x20000e84
 8007924:	2000098c 	.word	0x2000098c
 8007928:	20000018 	.word	0x20000018
 800792c:	20000e80 	.word	0x20000e80
 8007930:	20000e6c 	.word	0x20000e6c
 8007934:	20000e64 	.word	0x20000e64

08007938 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800793c:	4b04      	ldr	r3, [pc, #16]	; (8007950 <vTaskSuspendAll+0x18>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3301      	adds	r3, #1
 8007942:	4a03      	ldr	r2, [pc, #12]	; (8007950 <vTaskSuspendAll+0x18>)
 8007944:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007946:	bf00      	nop
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	20000e88 	.word	0x20000e88

08007954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800795e:	2300      	movs	r3, #0
 8007960:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007962:	4b42      	ldr	r3, [pc, #264]	; (8007a6c <xTaskResumeAll+0x118>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10a      	bne.n	8007980 <xTaskResumeAll+0x2c>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	603b      	str	r3, [r7, #0]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007980:	f001 f920 	bl	8008bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007984:	4b39      	ldr	r3, [pc, #228]	; (8007a6c <xTaskResumeAll+0x118>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3b01      	subs	r3, #1
 800798a:	4a38      	ldr	r2, [pc, #224]	; (8007a6c <xTaskResumeAll+0x118>)
 800798c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800798e:	4b37      	ldr	r3, [pc, #220]	; (8007a6c <xTaskResumeAll+0x118>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d162      	bne.n	8007a5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007996:	4b36      	ldr	r3, [pc, #216]	; (8007a70 <xTaskResumeAll+0x11c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d05e      	beq.n	8007a5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800799e:	e02f      	b.n	8007a00 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079a0:	4b34      	ldr	r3, [pc, #208]	; (8007a74 <xTaskResumeAll+0x120>)
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3318      	adds	r3, #24
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7ff f851 	bl	8006a54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3304      	adds	r3, #4
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff f84c 	bl	8006a54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c0:	4b2d      	ldr	r3, [pc, #180]	; (8007a78 <xTaskResumeAll+0x124>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d903      	bls.n	80079d0 <xTaskResumeAll+0x7c>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	4a2a      	ldr	r2, [pc, #168]	; (8007a78 <xTaskResumeAll+0x124>)
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d4:	4613      	mov	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4a27      	ldr	r2, [pc, #156]	; (8007a7c <xTaskResumeAll+0x128>)
 80079de:	441a      	add	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3304      	adds	r3, #4
 80079e4:	4619      	mov	r1, r3
 80079e6:	4610      	mov	r0, r2
 80079e8:	f7fe ffd7 	bl	800699a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f0:	4b23      	ldr	r3, [pc, #140]	; (8007a80 <xTaskResumeAll+0x12c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d302      	bcc.n	8007a00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80079fa:	4b22      	ldr	r3, [pc, #136]	; (8007a84 <xTaskResumeAll+0x130>)
 80079fc:	2201      	movs	r2, #1
 80079fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a00:	4b1c      	ldr	r3, [pc, #112]	; (8007a74 <xTaskResumeAll+0x120>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1cb      	bne.n	80079a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a0e:	f000 fb5f 	bl	80080d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a12:	4b1d      	ldr	r3, [pc, #116]	; (8007a88 <xTaskResumeAll+0x134>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d010      	beq.n	8007a40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a1e:	f000 f847 	bl	8007ab0 <xTaskIncrementTick>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a28:	4b16      	ldr	r3, [pc, #88]	; (8007a84 <xTaskResumeAll+0x130>)
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1f1      	bne.n	8007a1e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a3a:	4b13      	ldr	r3, [pc, #76]	; (8007a88 <xTaskResumeAll+0x134>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a40:	4b10      	ldr	r3, [pc, #64]	; (8007a84 <xTaskResumeAll+0x130>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d009      	beq.n	8007a5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <xTaskResumeAll+0x138>)
 8007a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a5c:	f001 f8e2 	bl	8008c24 <vPortExitCritical>

	return xAlreadyYielded;
 8007a60:	68bb      	ldr	r3, [r7, #8]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000e88 	.word	0x20000e88
 8007a70:	20000e60 	.word	0x20000e60
 8007a74:	20000e20 	.word	0x20000e20
 8007a78:	20000e68 	.word	0x20000e68
 8007a7c:	20000990 	.word	0x20000990
 8007a80:	2000098c 	.word	0x2000098c
 8007a84:	20000e74 	.word	0x20000e74
 8007a88:	20000e70 	.word	0x20000e70
 8007a8c:	e000ed04 	.word	0xe000ed04

08007a90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a96:	4b05      	ldr	r3, [pc, #20]	; (8007aac <xTaskGetTickCount+0x1c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a9c:	687b      	ldr	r3, [r7, #4]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	20000e64 	.word	0x20000e64

08007ab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aba:	4b4f      	ldr	r3, [pc, #316]	; (8007bf8 <xTaskIncrementTick+0x148>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f040 808f 	bne.w	8007be2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ac4:	4b4d      	ldr	r3, [pc, #308]	; (8007bfc <xTaskIncrementTick+0x14c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007acc:	4a4b      	ldr	r2, [pc, #300]	; (8007bfc <xTaskIncrementTick+0x14c>)
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d120      	bne.n	8007b1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ad8:	4b49      	ldr	r3, [pc, #292]	; (8007c00 <xTaskIncrementTick+0x150>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <xTaskIncrementTick+0x48>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	603b      	str	r3, [r7, #0]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <xTaskIncrementTick+0x46>
 8007af8:	4b41      	ldr	r3, [pc, #260]	; (8007c00 <xTaskIncrementTick+0x150>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	60fb      	str	r3, [r7, #12]
 8007afe:	4b41      	ldr	r3, [pc, #260]	; (8007c04 <xTaskIncrementTick+0x154>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a3f      	ldr	r2, [pc, #252]	; (8007c00 <xTaskIncrementTick+0x150>)
 8007b04:	6013      	str	r3, [r2, #0]
 8007b06:	4a3f      	ldr	r2, [pc, #252]	; (8007c04 <xTaskIncrementTick+0x154>)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	4b3e      	ldr	r3, [pc, #248]	; (8007c08 <xTaskIncrementTick+0x158>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3301      	adds	r3, #1
 8007b12:	4a3d      	ldr	r2, [pc, #244]	; (8007c08 <xTaskIncrementTick+0x158>)
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	f000 fadb 	bl	80080d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b1a:	4b3c      	ldr	r3, [pc, #240]	; (8007c0c <xTaskIncrementTick+0x15c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d349      	bcc.n	8007bb8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b24:	4b36      	ldr	r3, [pc, #216]	; (8007c00 <xTaskIncrementTick+0x150>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b2e:	4b37      	ldr	r3, [pc, #220]	; (8007c0c <xTaskIncrementTick+0x15c>)
 8007b30:	f04f 32ff 	mov.w	r2, #4294967295
 8007b34:	601a      	str	r2, [r3, #0]
					break;
 8007b36:	e03f      	b.n	8007bb8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b38:	4b31      	ldr	r3, [pc, #196]	; (8007c00 <xTaskIncrementTick+0x150>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d203      	bcs.n	8007b58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b50:	4a2e      	ldr	r2, [pc, #184]	; (8007c0c <xTaskIncrementTick+0x15c>)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b56:	e02f      	b.n	8007bb8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fe ff79 	bl	8006a54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d004      	beq.n	8007b74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	3318      	adds	r3, #24
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fe ff70 	bl	8006a54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b78:	4b25      	ldr	r3, [pc, #148]	; (8007c10 <xTaskIncrementTick+0x160>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d903      	bls.n	8007b88 <xTaskIncrementTick+0xd8>
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b84:	4a22      	ldr	r2, [pc, #136]	; (8007c10 <xTaskIncrementTick+0x160>)
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4a1f      	ldr	r2, [pc, #124]	; (8007c14 <xTaskIncrementTick+0x164>)
 8007b96:	441a      	add	r2, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f7fe fefb 	bl	800699a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba8:	4b1b      	ldr	r3, [pc, #108]	; (8007c18 <xTaskIncrementTick+0x168>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d3b8      	bcc.n	8007b24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bb6:	e7b5      	b.n	8007b24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bb8:	4b17      	ldr	r3, [pc, #92]	; (8007c18 <xTaskIncrementTick+0x168>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbe:	4915      	ldr	r1, [pc, #84]	; (8007c14 <xTaskIncrementTick+0x164>)
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	440b      	add	r3, r1
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d901      	bls.n	8007bd4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007bd4:	4b11      	ldr	r3, [pc, #68]	; (8007c1c <xTaskIncrementTick+0x16c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	617b      	str	r3, [r7, #20]
 8007be0:	e004      	b.n	8007bec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007be2:	4b0f      	ldr	r3, [pc, #60]	; (8007c20 <xTaskIncrementTick+0x170>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3301      	adds	r3, #1
 8007be8:	4a0d      	ldr	r2, [pc, #52]	; (8007c20 <xTaskIncrementTick+0x170>)
 8007bea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007bec:	697b      	ldr	r3, [r7, #20]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20000e88 	.word	0x20000e88
 8007bfc:	20000e64 	.word	0x20000e64
 8007c00:	20000e18 	.word	0x20000e18
 8007c04:	20000e1c 	.word	0x20000e1c
 8007c08:	20000e78 	.word	0x20000e78
 8007c0c:	20000e80 	.word	0x20000e80
 8007c10:	20000e68 	.word	0x20000e68
 8007c14:	20000990 	.word	0x20000990
 8007c18:	2000098c 	.word	0x2000098c
 8007c1c:	20000e74 	.word	0x20000e74
 8007c20:	20000e70 	.word	0x20000e70

08007c24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c2a:	4b2a      	ldr	r3, [pc, #168]	; (8007cd4 <vTaskSwitchContext+0xb0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c32:	4b29      	ldr	r3, [pc, #164]	; (8007cd8 <vTaskSwitchContext+0xb4>)
 8007c34:	2201      	movs	r2, #1
 8007c36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c38:	e046      	b.n	8007cc8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007c3a:	4b27      	ldr	r3, [pc, #156]	; (8007cd8 <vTaskSwitchContext+0xb4>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c40:	4b26      	ldr	r3, [pc, #152]	; (8007cdc <vTaskSwitchContext+0xb8>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	e010      	b.n	8007c6a <vTaskSwitchContext+0x46>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <vTaskSwitchContext+0x40>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	607b      	str	r3, [r7, #4]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <vTaskSwitchContext+0x3e>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	60fb      	str	r3, [r7, #12]
 8007c6a:	491d      	ldr	r1, [pc, #116]	; (8007ce0 <vTaskSwitchContext+0xbc>)
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	440b      	add	r3, r1
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0e4      	beq.n	8007c48 <vTaskSwitchContext+0x24>
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	4613      	mov	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4a15      	ldr	r2, [pc, #84]	; (8007ce0 <vTaskSwitchContext+0xbc>)
 8007c8a:	4413      	add	r3, r2
 8007c8c:	60bb      	str	r3, [r7, #8]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	605a      	str	r2, [r3, #4]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d104      	bne.n	8007cae <vTaskSwitchContext+0x8a>
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	605a      	str	r2, [r3, #4]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	4a0b      	ldr	r2, [pc, #44]	; (8007ce4 <vTaskSwitchContext+0xc0>)
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	4a08      	ldr	r2, [pc, #32]	; (8007cdc <vTaskSwitchContext+0xb8>)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007cbe:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <vTaskSwitchContext+0xc0>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3354      	adds	r3, #84	; 0x54
 8007cc4:	4a08      	ldr	r2, [pc, #32]	; (8007ce8 <vTaskSwitchContext+0xc4>)
 8007cc6:	6013      	str	r3, [r2, #0]
}
 8007cc8:	bf00      	nop
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	20000e88 	.word	0x20000e88
 8007cd8:	20000e74 	.word	0x20000e74
 8007cdc:	20000e68 	.word	0x20000e68
 8007ce0:	20000990 	.word	0x20000990
 8007ce4:	2000098c 	.word	0x2000098c
 8007ce8:	20000018 	.word	0x20000018

08007cec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10a      	bne.n	8007d12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	60fb      	str	r3, [r7, #12]
}
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d12:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <vTaskPlaceOnEventList+0x44>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3318      	adds	r3, #24
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7fe fe61 	bl	80069e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d20:	2101      	movs	r1, #1
 8007d22:	6838      	ldr	r0, [r7, #0]
 8007d24:	f000 fa80 	bl	8008228 <prvAddCurrentTaskToDelayedList>
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	2000098c 	.word	0x2000098c

08007d34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10a      	bne.n	8007d5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	617b      	str	r3, [r7, #20]
}
 8007d58:	bf00      	nop
 8007d5a:	e7fe      	b.n	8007d5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3318      	adds	r3, #24
 8007d62:	4619      	mov	r1, r3
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7fe fe18 	bl	800699a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d70:	f04f 33ff 	mov.w	r3, #4294967295
 8007d74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	68b8      	ldr	r0, [r7, #8]
 8007d7a:	f000 fa55 	bl	8008228 <prvAddCurrentTaskToDelayedList>
	}
 8007d7e:	bf00      	nop
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	2000098c 	.word	0x2000098c

08007d8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10a      	bne.n	8007db8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	60fb      	str	r3, [r7, #12]
}
 8007db4:	bf00      	nop
 8007db6:	e7fe      	b.n	8007db6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	3318      	adds	r3, #24
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fe fe49 	bl	8006a54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dc2:	4b1e      	ldr	r3, [pc, #120]	; (8007e3c <xTaskRemoveFromEventList+0xb0>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d11d      	bne.n	8007e06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fe40 	bl	8006a54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd8:	4b19      	ldr	r3, [pc, #100]	; (8007e40 <xTaskRemoveFromEventList+0xb4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d903      	bls.n	8007de8 <xTaskRemoveFromEventList+0x5c>
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de4:	4a16      	ldr	r2, [pc, #88]	; (8007e40 <xTaskRemoveFromEventList+0xb4>)
 8007de6:	6013      	str	r3, [r2, #0]
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dec:	4613      	mov	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4413      	add	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4a13      	ldr	r2, [pc, #76]	; (8007e44 <xTaskRemoveFromEventList+0xb8>)
 8007df6:	441a      	add	r2, r3
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	4610      	mov	r0, r2
 8007e00:	f7fe fdcb 	bl	800699a <vListInsertEnd>
 8007e04:	e005      	b.n	8007e12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	3318      	adds	r3, #24
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	480e      	ldr	r0, [pc, #56]	; (8007e48 <xTaskRemoveFromEventList+0xbc>)
 8007e0e:	f7fe fdc4 	bl	800699a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e16:	4b0d      	ldr	r3, [pc, #52]	; (8007e4c <xTaskRemoveFromEventList+0xc0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d905      	bls.n	8007e2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e20:	2301      	movs	r3, #1
 8007e22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e24:	4b0a      	ldr	r3, [pc, #40]	; (8007e50 <xTaskRemoveFromEventList+0xc4>)
 8007e26:	2201      	movs	r2, #1
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	e001      	b.n	8007e30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e30:	697b      	ldr	r3, [r7, #20]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3718      	adds	r7, #24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20000e88 	.word	0x20000e88
 8007e40:	20000e68 	.word	0x20000e68
 8007e44:	20000990 	.word	0x20000990
 8007e48:	20000e20 	.word	0x20000e20
 8007e4c:	2000098c 	.word	0x2000098c
 8007e50:	20000e74 	.word	0x20000e74

08007e54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e5c:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <vTaskInternalSetTimeOutState+0x24>)
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e64:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <vTaskInternalSetTimeOutState+0x28>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	605a      	str	r2, [r3, #4]
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	20000e78 	.word	0x20000e78
 8007e7c:	20000e64 	.word	0x20000e64

08007e80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b088      	sub	sp, #32
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10a      	bne.n	8007ea6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	613b      	str	r3, [r7, #16]
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10a      	bne.n	8007ec2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	60fb      	str	r3, [r7, #12]
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007ec2:	f000 fe7f 	bl	8008bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ec6:	4b1d      	ldr	r3, [pc, #116]	; (8007f3c <xTaskCheckForTimeOut+0xbc>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d102      	bne.n	8007ee6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61fb      	str	r3, [r7, #28]
 8007ee4:	e023      	b.n	8007f2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	4b15      	ldr	r3, [pc, #84]	; (8007f40 <xTaskCheckForTimeOut+0xc0>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d007      	beq.n	8007f02 <xTaskCheckForTimeOut+0x82>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d302      	bcc.n	8007f02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007efc:	2301      	movs	r3, #1
 8007efe:	61fb      	str	r3, [r7, #28]
 8007f00:	e015      	b.n	8007f2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d20b      	bcs.n	8007f24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	1ad2      	subs	r2, r2, r3
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff ff9b 	bl	8007e54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	61fb      	str	r3, [r7, #28]
 8007f22:	e004      	b.n	8007f2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f2e:	f000 fe79 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 8007f32:	69fb      	ldr	r3, [r7, #28]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3720      	adds	r7, #32
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	20000e64 	.word	0x20000e64
 8007f40:	20000e78 	.word	0x20000e78

08007f44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f44:	b480      	push	{r7}
 8007f46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f48:	4b03      	ldr	r3, [pc, #12]	; (8007f58 <vTaskMissedYield+0x14>)
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	601a      	str	r2, [r3, #0]
}
 8007f4e:	bf00      	nop
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	20000e74 	.word	0x20000e74

08007f5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f64:	f000 f852 	bl	800800c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f68:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <prvIdleTask+0x28>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d9f9      	bls.n	8007f64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f70:	4b05      	ldr	r3, [pc, #20]	; (8007f88 <prvIdleTask+0x2c>)
 8007f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f80:	e7f0      	b.n	8007f64 <prvIdleTask+0x8>
 8007f82:	bf00      	nop
 8007f84:	20000990 	.word	0x20000990
 8007f88:	e000ed04 	.word	0xe000ed04

08007f8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f92:	2300      	movs	r3, #0
 8007f94:	607b      	str	r3, [r7, #4]
 8007f96:	e00c      	b.n	8007fb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4a12      	ldr	r2, [pc, #72]	; (8007fec <prvInitialiseTaskLists+0x60>)
 8007fa4:	4413      	add	r3, r2
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fcca 	bl	8006940 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	607b      	str	r3, [r7, #4]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b37      	cmp	r3, #55	; 0x37
 8007fb6:	d9ef      	bls.n	8007f98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fb8:	480d      	ldr	r0, [pc, #52]	; (8007ff0 <prvInitialiseTaskLists+0x64>)
 8007fba:	f7fe fcc1 	bl	8006940 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fbe:	480d      	ldr	r0, [pc, #52]	; (8007ff4 <prvInitialiseTaskLists+0x68>)
 8007fc0:	f7fe fcbe 	bl	8006940 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fc4:	480c      	ldr	r0, [pc, #48]	; (8007ff8 <prvInitialiseTaskLists+0x6c>)
 8007fc6:	f7fe fcbb 	bl	8006940 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fca:	480c      	ldr	r0, [pc, #48]	; (8007ffc <prvInitialiseTaskLists+0x70>)
 8007fcc:	f7fe fcb8 	bl	8006940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fd0:	480b      	ldr	r0, [pc, #44]	; (8008000 <prvInitialiseTaskLists+0x74>)
 8007fd2:	f7fe fcb5 	bl	8006940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fd6:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <prvInitialiseTaskLists+0x78>)
 8007fd8:	4a05      	ldr	r2, [pc, #20]	; (8007ff0 <prvInitialiseTaskLists+0x64>)
 8007fda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fdc:	4b0a      	ldr	r3, [pc, #40]	; (8008008 <prvInitialiseTaskLists+0x7c>)
 8007fde:	4a05      	ldr	r2, [pc, #20]	; (8007ff4 <prvInitialiseTaskLists+0x68>)
 8007fe0:	601a      	str	r2, [r3, #0]
}
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20000990 	.word	0x20000990
 8007ff0:	20000df0 	.word	0x20000df0
 8007ff4:	20000e04 	.word	0x20000e04
 8007ff8:	20000e20 	.word	0x20000e20
 8007ffc:	20000e34 	.word	0x20000e34
 8008000:	20000e4c 	.word	0x20000e4c
 8008004:	20000e18 	.word	0x20000e18
 8008008:	20000e1c 	.word	0x20000e1c

0800800c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008012:	e019      	b.n	8008048 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008014:	f000 fdd6 	bl	8008bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008018:	4b10      	ldr	r3, [pc, #64]	; (800805c <prvCheckTasksWaitingTermination+0x50>)
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	3304      	adds	r3, #4
 8008024:	4618      	mov	r0, r3
 8008026:	f7fe fd15 	bl	8006a54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800802a:	4b0d      	ldr	r3, [pc, #52]	; (8008060 <prvCheckTasksWaitingTermination+0x54>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3b01      	subs	r3, #1
 8008030:	4a0b      	ldr	r2, [pc, #44]	; (8008060 <prvCheckTasksWaitingTermination+0x54>)
 8008032:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008034:	4b0b      	ldr	r3, [pc, #44]	; (8008064 <prvCheckTasksWaitingTermination+0x58>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3b01      	subs	r3, #1
 800803a:	4a0a      	ldr	r2, [pc, #40]	; (8008064 <prvCheckTasksWaitingTermination+0x58>)
 800803c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800803e:	f000 fdf1 	bl	8008c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f810 	bl	8008068 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008048:	4b06      	ldr	r3, [pc, #24]	; (8008064 <prvCheckTasksWaitingTermination+0x58>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e1      	bne.n	8008014 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008050:	bf00      	nop
 8008052:	bf00      	nop
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20000e34 	.word	0x20000e34
 8008060:	20000e60 	.word	0x20000e60
 8008064:	20000e48 	.word	0x20000e48

08008068 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3354      	adds	r3, #84	; 0x54
 8008074:	4618      	mov	r0, r3
 8008076:	f001 fed5 	bl	8009e24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008080:	2b00      	cmp	r3, #0
 8008082:	d108      	bne.n	8008096 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008088:	4618      	mov	r0, r3
 800808a:	f000 ff89 	bl	8008fa0 <vPortFree>
				vPortFree( pxTCB );
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 ff86 	bl	8008fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008094:	e018      	b.n	80080c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800809c:	2b01      	cmp	r3, #1
 800809e:	d103      	bne.n	80080a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 ff7d 	bl	8008fa0 <vPortFree>
	}
 80080a6:	e00f      	b.n	80080c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d00a      	beq.n	80080c8 <prvDeleteTCB+0x60>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	60fb      	str	r3, [r7, #12]
}
 80080c4:	bf00      	nop
 80080c6:	e7fe      	b.n	80080c6 <prvDeleteTCB+0x5e>
	}
 80080c8:	bf00      	nop
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080d6:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <prvResetNextTaskUnblockTime+0x38>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d104      	bne.n	80080ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080e0:	4b0a      	ldr	r3, [pc, #40]	; (800810c <prvResetNextTaskUnblockTime+0x3c>)
 80080e2:	f04f 32ff 	mov.w	r2, #4294967295
 80080e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080e8:	e008      	b.n	80080fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ea:	4b07      	ldr	r3, [pc, #28]	; (8008108 <prvResetNextTaskUnblockTime+0x38>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	4a04      	ldr	r2, [pc, #16]	; (800810c <prvResetNextTaskUnblockTime+0x3c>)
 80080fa:	6013      	str	r3, [r2, #0]
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	20000e18 	.word	0x20000e18
 800810c:	20000e80 	.word	0x20000e80

08008110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008116:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <xTaskGetSchedulerState+0x34>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d102      	bne.n	8008124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800811e:	2301      	movs	r3, #1
 8008120:	607b      	str	r3, [r7, #4]
 8008122:	e008      	b.n	8008136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008124:	4b08      	ldr	r3, [pc, #32]	; (8008148 <xTaskGetSchedulerState+0x38>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d102      	bne.n	8008132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800812c:	2302      	movs	r3, #2
 800812e:	607b      	str	r3, [r7, #4]
 8008130:	e001      	b.n	8008136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008132:	2300      	movs	r3, #0
 8008134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008136:	687b      	ldr	r3, [r7, #4]
	}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	20000e6c 	.word	0x20000e6c
 8008148:	20000e88 	.word	0x20000e88

0800814c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d056      	beq.n	8008210 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008162:	4b2e      	ldr	r3, [pc, #184]	; (800821c <xTaskPriorityDisinherit+0xd0>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	429a      	cmp	r2, r3
 800816a:	d00a      	beq.n	8008182 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	60fb      	str	r3, [r7, #12]
}
 800817e:	bf00      	nop
 8008180:	e7fe      	b.n	8008180 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10a      	bne.n	80081a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	60bb      	str	r3, [r7, #8]
}
 800819c:	bf00      	nop
 800819e:	e7fe      	b.n	800819e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a4:	1e5a      	subs	r2, r3, #1
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d02c      	beq.n	8008210 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d128      	bne.n	8008210 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	3304      	adds	r3, #4
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe fc46 	bl	8006a54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e0:	4b0f      	ldr	r3, [pc, #60]	; (8008220 <xTaskPriorityDisinherit+0xd4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d903      	bls.n	80081f0 <xTaskPriorityDisinherit+0xa4>
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	4a0c      	ldr	r2, [pc, #48]	; (8008220 <xTaskPriorityDisinherit+0xd4>)
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4a09      	ldr	r2, [pc, #36]	; (8008224 <xTaskPriorityDisinherit+0xd8>)
 80081fe:	441a      	add	r2, r3
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	3304      	adds	r3, #4
 8008204:	4619      	mov	r1, r3
 8008206:	4610      	mov	r0, r2
 8008208:	f7fe fbc7 	bl	800699a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800820c:	2301      	movs	r3, #1
 800820e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008210:	697b      	ldr	r3, [r7, #20]
	}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	2000098c 	.word	0x2000098c
 8008220:	20000e68 	.word	0x20000e68
 8008224:	20000990 	.word	0x20000990

08008228 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008232:	4b21      	ldr	r3, [pc, #132]	; (80082b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008238:	4b20      	ldr	r3, [pc, #128]	; (80082bc <prvAddCurrentTaskToDelayedList+0x94>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3304      	adds	r3, #4
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe fc08 	bl	8006a54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824a:	d10a      	bne.n	8008262 <prvAddCurrentTaskToDelayedList+0x3a>
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d007      	beq.n	8008262 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008252:	4b1a      	ldr	r3, [pc, #104]	; (80082bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3304      	adds	r3, #4
 8008258:	4619      	mov	r1, r3
 800825a:	4819      	ldr	r0, [pc, #100]	; (80082c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800825c:	f7fe fb9d 	bl	800699a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008260:	e026      	b.n	80082b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4413      	add	r3, r2
 8008268:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800826a:	4b14      	ldr	r3, [pc, #80]	; (80082bc <prvAddCurrentTaskToDelayedList+0x94>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	429a      	cmp	r2, r3
 8008278:	d209      	bcs.n	800828e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800827a:	4b12      	ldr	r3, [pc, #72]	; (80082c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3304      	adds	r3, #4
 8008284:	4619      	mov	r1, r3
 8008286:	4610      	mov	r0, r2
 8008288:	f7fe fbab 	bl	80069e2 <vListInsert>
}
 800828c:	e010      	b.n	80082b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800828e:	4b0e      	ldr	r3, [pc, #56]	; (80082c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4b0a      	ldr	r3, [pc, #40]	; (80082bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3304      	adds	r3, #4
 8008298:	4619      	mov	r1, r3
 800829a:	4610      	mov	r0, r2
 800829c:	f7fe fba1 	bl	80069e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082a0:	4b0a      	ldr	r3, [pc, #40]	; (80082cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d202      	bcs.n	80082b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082aa:	4a08      	ldr	r2, [pc, #32]	; (80082cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	6013      	str	r3, [r2, #0]
}
 80082b0:	bf00      	nop
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	20000e64 	.word	0x20000e64
 80082bc:	2000098c 	.word	0x2000098c
 80082c0:	20000e4c 	.word	0x20000e4c
 80082c4:	20000e1c 	.word	0x20000e1c
 80082c8:	20000e18 	.word	0x20000e18
 80082cc:	20000e80 	.word	0x20000e80

080082d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08a      	sub	sp, #40	; 0x28
 80082d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082d6:	2300      	movs	r3, #0
 80082d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082da:	f000 fb07 	bl	80088ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082de:	4b1c      	ldr	r3, [pc, #112]	; (8008350 <xTimerCreateTimerTask+0x80>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d021      	beq.n	800832a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082ee:	1d3a      	adds	r2, r7, #4
 80082f0:	f107 0108 	add.w	r1, r7, #8
 80082f4:	f107 030c 	add.w	r3, r7, #12
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fe fb07 	bl	800690c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082fe:	6879      	ldr	r1, [r7, #4]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	9202      	str	r2, [sp, #8]
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	2302      	movs	r3, #2
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	2300      	movs	r3, #0
 800830e:	460a      	mov	r2, r1
 8008310:	4910      	ldr	r1, [pc, #64]	; (8008354 <xTimerCreateTimerTask+0x84>)
 8008312:	4811      	ldr	r0, [pc, #68]	; (8008358 <xTimerCreateTimerTask+0x88>)
 8008314:	f7ff f8b4 	bl	8007480 <xTaskCreateStatic>
 8008318:	4603      	mov	r3, r0
 800831a:	4a10      	ldr	r2, [pc, #64]	; (800835c <xTimerCreateTimerTask+0x8c>)
 800831c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800831e:	4b0f      	ldr	r3, [pc, #60]	; (800835c <xTimerCreateTimerTask+0x8c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008326:	2301      	movs	r3, #1
 8008328:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	613b      	str	r3, [r7, #16]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008346:	697b      	ldr	r3, [r7, #20]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	20000ebc 	.word	0x20000ebc
 8008354:	0800c104 	.word	0x0800c104
 8008358:	08008495 	.word	0x08008495
 800835c:	20000ec0 	.word	0x20000ec0

08008360 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b08a      	sub	sp, #40	; 0x28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800836e:	2300      	movs	r3, #0
 8008370:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	623b      	str	r3, [r7, #32]
}
 800838a:	bf00      	nop
 800838c:	e7fe      	b.n	800838c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800838e:	4b1a      	ldr	r3, [pc, #104]	; (80083f8 <xTimerGenericCommand+0x98>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d02a      	beq.n	80083ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2b05      	cmp	r3, #5
 80083a6:	dc18      	bgt.n	80083da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083a8:	f7ff feb2 	bl	8008110 <xTaskGetSchedulerState>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d109      	bne.n	80083c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083b2:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <xTimerGenericCommand+0x98>)
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	f107 0110 	add.w	r1, r7, #16
 80083ba:	2300      	movs	r3, #0
 80083bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083be:	f7fe fc77 	bl	8006cb0 <xQueueGenericSend>
 80083c2:	6278      	str	r0, [r7, #36]	; 0x24
 80083c4:	e012      	b.n	80083ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083c6:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <xTimerGenericCommand+0x98>)
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	f107 0110 	add.w	r1, r7, #16
 80083ce:	2300      	movs	r3, #0
 80083d0:	2200      	movs	r2, #0
 80083d2:	f7fe fc6d 	bl	8006cb0 <xQueueGenericSend>
 80083d6:	6278      	str	r0, [r7, #36]	; 0x24
 80083d8:	e008      	b.n	80083ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083da:	4b07      	ldr	r3, [pc, #28]	; (80083f8 <xTimerGenericCommand+0x98>)
 80083dc:	6818      	ldr	r0, [r3, #0]
 80083de:	f107 0110 	add.w	r1, r7, #16
 80083e2:	2300      	movs	r3, #0
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	f7fe fd61 	bl	8006eac <xQueueGenericSendFromISR>
 80083ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3728      	adds	r7, #40	; 0x28
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000ebc 	.word	0x20000ebc

080083fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b088      	sub	sp, #32
 8008400:	af02      	add	r7, sp, #8
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008406:	4b22      	ldr	r3, [pc, #136]	; (8008490 <prvProcessExpiredTimer+0x94>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	3304      	adds	r3, #4
 8008414:	4618      	mov	r0, r3
 8008416:	f7fe fb1d 	bl	8006a54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	2b00      	cmp	r3, #0
 8008426:	d022      	beq.n	800846e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	699a      	ldr	r2, [r3, #24]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	18d1      	adds	r1, r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	6978      	ldr	r0, [r7, #20]
 8008436:	f000 f8d1 	bl	80085dc <prvInsertTimerInActiveList>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01f      	beq.n	8008480 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008440:	2300      	movs	r3, #0
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	2300      	movs	r3, #0
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	2100      	movs	r1, #0
 800844a:	6978      	ldr	r0, [r7, #20]
 800844c:	f7ff ff88 	bl	8008360 <xTimerGenericCommand>
 8008450:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d113      	bne.n	8008480 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	60fb      	str	r3, [r7, #12]
}
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	b2da      	uxtb	r2, r3
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	6978      	ldr	r0, [r7, #20]
 8008486:	4798      	blx	r3
}
 8008488:	bf00      	nop
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	20000eb4 	.word	0x20000eb4

08008494 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800849c:	f107 0308 	add.w	r3, r7, #8
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 f857 	bl	8008554 <prvGetNextExpireTime>
 80084a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	4619      	mov	r1, r3
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f000 f803 	bl	80084b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084b2:	f000 f8d5 	bl	8008660 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084b6:	e7f1      	b.n	800849c <prvTimerTask+0x8>

080084b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084c2:	f7ff fa39 	bl	8007938 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084c6:	f107 0308 	add.w	r3, r7, #8
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 f866 	bl	800859c <prvSampleTimeNow>
 80084d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d130      	bne.n	800853a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10a      	bne.n	80084f4 <prvProcessTimerOrBlockTask+0x3c>
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d806      	bhi.n	80084f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084e6:	f7ff fa35 	bl	8007954 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084ea:	68f9      	ldr	r1, [r7, #12]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f7ff ff85 	bl	80083fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084f2:	e024      	b.n	800853e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d008      	beq.n	800850c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084fa:	4b13      	ldr	r3, [pc, #76]	; (8008548 <prvProcessTimerOrBlockTask+0x90>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <prvProcessTimerOrBlockTask+0x50>
 8008504:	2301      	movs	r3, #1
 8008506:	e000      	b.n	800850a <prvProcessTimerOrBlockTask+0x52>
 8008508:	2300      	movs	r3, #0
 800850a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800850c:	4b0f      	ldr	r3, [pc, #60]	; (800854c <prvProcessTimerOrBlockTask+0x94>)
 800850e:	6818      	ldr	r0, [r3, #0]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	4619      	mov	r1, r3
 800851a:	f7fe ff7d 	bl	8007418 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800851e:	f7ff fa19 	bl	8007954 <xTaskResumeAll>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d10a      	bne.n	800853e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008528:	4b09      	ldr	r3, [pc, #36]	; (8008550 <prvProcessTimerOrBlockTask+0x98>)
 800852a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	f3bf 8f6f 	isb	sy
}
 8008538:	e001      	b.n	800853e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800853a:	f7ff fa0b 	bl	8007954 <xTaskResumeAll>
}
 800853e:	bf00      	nop
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20000eb8 	.word	0x20000eb8
 800854c:	20000ebc 	.word	0x20000ebc
 8008550:	e000ed04 	.word	0xe000ed04

08008554 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800855c:	4b0e      	ldr	r3, [pc, #56]	; (8008598 <prvGetNextExpireTime+0x44>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <prvGetNextExpireTime+0x16>
 8008566:	2201      	movs	r2, #1
 8008568:	e000      	b.n	800856c <prvGetNextExpireTime+0x18>
 800856a:	2200      	movs	r2, #0
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d105      	bne.n	8008584 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008578:	4b07      	ldr	r3, [pc, #28]	; (8008598 <prvGetNextExpireTime+0x44>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	e001      	b.n	8008588 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008584:	2300      	movs	r3, #0
 8008586:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008588:	68fb      	ldr	r3, [r7, #12]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	20000eb4 	.word	0x20000eb4

0800859c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085a4:	f7ff fa74 	bl	8007a90 <xTaskGetTickCount>
 80085a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085aa:	4b0b      	ldr	r3, [pc, #44]	; (80085d8 <prvSampleTimeNow+0x3c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d205      	bcs.n	80085c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085b4:	f000 f936 	bl	8008824 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	e002      	b.n	80085c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085c6:	4a04      	ldr	r2, [pc, #16]	; (80085d8 <prvSampleTimeNow+0x3c>)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085cc:	68fb      	ldr	r3, [r7, #12]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	20000ec4 	.word	0x20000ec4

080085dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085ea:	2300      	movs	r3, #0
 80085ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d812      	bhi.n	8008628 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	1ad2      	subs	r2, r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	429a      	cmp	r2, r3
 800860e:	d302      	bcc.n	8008616 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008610:	2301      	movs	r3, #1
 8008612:	617b      	str	r3, [r7, #20]
 8008614:	e01b      	b.n	800864e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008616:	4b10      	ldr	r3, [pc, #64]	; (8008658 <prvInsertTimerInActiveList+0x7c>)
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3304      	adds	r3, #4
 800861e:	4619      	mov	r1, r3
 8008620:	4610      	mov	r0, r2
 8008622:	f7fe f9de 	bl	80069e2 <vListInsert>
 8008626:	e012      	b.n	800864e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	429a      	cmp	r2, r3
 800862e:	d206      	bcs.n	800863e <prvInsertTimerInActiveList+0x62>
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	429a      	cmp	r2, r3
 8008636:	d302      	bcc.n	800863e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008638:	2301      	movs	r3, #1
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	e007      	b.n	800864e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800863e:	4b07      	ldr	r3, [pc, #28]	; (800865c <prvInsertTimerInActiveList+0x80>)
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3304      	adds	r3, #4
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f7fe f9ca 	bl	80069e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800864e:	697b      	ldr	r3, [r7, #20]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	20000eb8 	.word	0x20000eb8
 800865c:	20000eb4 	.word	0x20000eb4

08008660 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08e      	sub	sp, #56	; 0x38
 8008664:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008666:	e0ca      	b.n	80087fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	da18      	bge.n	80086a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800866e:	1d3b      	adds	r3, r7, #4
 8008670:	3304      	adds	r3, #4
 8008672:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10a      	bne.n	8008690 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	61fb      	str	r3, [r7, #28]
}
 800868c:	bf00      	nop
 800868e:	e7fe      	b.n	800868e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008696:	6850      	ldr	r0, [r2, #4]
 8008698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800869a:	6892      	ldr	r2, [r2, #8]
 800869c:	4611      	mov	r1, r2
 800869e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f2c0 80aa 	blt.w	80087fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d004      	beq.n	80086be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	3304      	adds	r3, #4
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fe f9cb 	bl	8006a54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086be:	463b      	mov	r3, r7
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7ff ff6b 	bl	800859c <prvSampleTimeNow>
 80086c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b09      	cmp	r3, #9
 80086cc:	f200 8097 	bhi.w	80087fe <prvProcessReceivedCommands+0x19e>
 80086d0:	a201      	add	r2, pc, #4	; (adr r2, 80086d8 <prvProcessReceivedCommands+0x78>)
 80086d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d6:	bf00      	nop
 80086d8:	08008701 	.word	0x08008701
 80086dc:	08008701 	.word	0x08008701
 80086e0:	08008701 	.word	0x08008701
 80086e4:	08008775 	.word	0x08008775
 80086e8:	08008789 	.word	0x08008789
 80086ec:	080087d3 	.word	0x080087d3
 80086f0:	08008701 	.word	0x08008701
 80086f4:	08008701 	.word	0x08008701
 80086f8:	08008775 	.word	0x08008775
 80086fc:	08008789 	.word	0x08008789
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008706:	f043 0301 	orr.w	r3, r3, #1
 800870a:	b2da      	uxtb	r2, r3
 800870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	18d1      	adds	r1, r2, r3
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800871e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008720:	f7ff ff5c 	bl	80085dc <prvInsertTimerInActiveList>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d069      	beq.n	80087fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008730:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008738:	f003 0304 	and.w	r3, r3, #4
 800873c:	2b00      	cmp	r3, #0
 800873e:	d05e      	beq.n	80087fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	441a      	add	r2, r3
 8008748:	2300      	movs	r3, #0
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	2300      	movs	r3, #0
 800874e:	2100      	movs	r1, #0
 8008750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008752:	f7ff fe05 	bl	8008360 <xTimerGenericCommand>
 8008756:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d14f      	bne.n	80087fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	61bb      	str	r3, [r7, #24]
}
 8008770:	bf00      	nop
 8008772:	e7fe      	b.n	8008772 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800877a:	f023 0301 	bic.w	r3, r3, #1
 800877e:	b2da      	uxtb	r2, r3
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008786:	e03a      	b.n	80087fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800878e:	f043 0301 	orr.w	r3, r3, #1
 8008792:	b2da      	uxtb	r2, r3
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10a      	bne.n	80087be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	617b      	str	r3, [r7, #20]
}
 80087ba:	bf00      	nop
 80087bc:	e7fe      	b.n	80087bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	699a      	ldr	r2, [r3, #24]
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c4:	18d1      	adds	r1, r2, r3
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087cc:	f7ff ff06 	bl	80085dc <prvInsertTimerInActiveList>
					break;
 80087d0:	e015      	b.n	80087fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087d8:	f003 0302 	and.w	r3, r3, #2
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d103      	bne.n	80087e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80087e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087e2:	f000 fbdd 	bl	8008fa0 <vPortFree>
 80087e6:	e00a      	b.n	80087fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087ee:	f023 0301 	bic.w	r3, r3, #1
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087fa:	e000      	b.n	80087fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80087fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087fe:	4b08      	ldr	r3, [pc, #32]	; (8008820 <prvProcessReceivedCommands+0x1c0>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	1d39      	adds	r1, r7, #4
 8008804:	2200      	movs	r2, #0
 8008806:	4618      	mov	r0, r3
 8008808:	f7fe fbec 	bl	8006fe4 <xQueueReceive>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	f47f af2a 	bne.w	8008668 <prvProcessReceivedCommands+0x8>
	}
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop
 8008818:	3730      	adds	r7, #48	; 0x30
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20000ebc 	.word	0x20000ebc

08008824 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b088      	sub	sp, #32
 8008828:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800882a:	e048      	b.n	80088be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800882c:	4b2d      	ldr	r3, [pc, #180]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008836:	4b2b      	ldr	r3, [pc, #172]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3304      	adds	r3, #4
 8008844:	4618      	mov	r0, r3
 8008846:	f7fe f905 	bl	8006a54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6a1b      	ldr	r3, [r3, #32]
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b00      	cmp	r3, #0
 800885e:	d02e      	beq.n	80088be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	4413      	add	r3, r2
 8008868:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	429a      	cmp	r2, r3
 8008870:	d90e      	bls.n	8008890 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800887e:	4b19      	ldr	r3, [pc, #100]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	3304      	adds	r3, #4
 8008886:	4619      	mov	r1, r3
 8008888:	4610      	mov	r0, r2
 800888a:	f7fe f8aa 	bl	80069e2 <vListInsert>
 800888e:	e016      	b.n	80088be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008890:	2300      	movs	r3, #0
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	2300      	movs	r3, #0
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	2100      	movs	r1, #0
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f7ff fd60 	bl	8008360 <xTimerGenericCommand>
 80088a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10a      	bne.n	80088be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	603b      	str	r3, [r7, #0]
}
 80088ba:	bf00      	nop
 80088bc:	e7fe      	b.n	80088bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088be:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1b1      	bne.n	800882c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088c8:	4b06      	ldr	r3, [pc, #24]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088ce:	4b06      	ldr	r3, [pc, #24]	; (80088e8 <prvSwitchTimerLists+0xc4>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a04      	ldr	r2, [pc, #16]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 80088d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088d6:	4a04      	ldr	r2, [pc, #16]	; (80088e8 <prvSwitchTimerLists+0xc4>)
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	6013      	str	r3, [r2, #0]
}
 80088dc:	bf00      	nop
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	20000eb4 	.word	0x20000eb4
 80088e8:	20000eb8 	.word	0x20000eb8

080088ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088f2:	f000 f967 	bl	8008bc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088f6:	4b15      	ldr	r3, [pc, #84]	; (800894c <prvCheckForValidListAndQueue+0x60>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d120      	bne.n	8008940 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088fe:	4814      	ldr	r0, [pc, #80]	; (8008950 <prvCheckForValidListAndQueue+0x64>)
 8008900:	f7fe f81e 	bl	8006940 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008904:	4813      	ldr	r0, [pc, #76]	; (8008954 <prvCheckForValidListAndQueue+0x68>)
 8008906:	f7fe f81b 	bl	8006940 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800890a:	4b13      	ldr	r3, [pc, #76]	; (8008958 <prvCheckForValidListAndQueue+0x6c>)
 800890c:	4a10      	ldr	r2, [pc, #64]	; (8008950 <prvCheckForValidListAndQueue+0x64>)
 800890e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008910:	4b12      	ldr	r3, [pc, #72]	; (800895c <prvCheckForValidListAndQueue+0x70>)
 8008912:	4a10      	ldr	r2, [pc, #64]	; (8008954 <prvCheckForValidListAndQueue+0x68>)
 8008914:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008916:	2300      	movs	r3, #0
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	4b11      	ldr	r3, [pc, #68]	; (8008960 <prvCheckForValidListAndQueue+0x74>)
 800891c:	4a11      	ldr	r2, [pc, #68]	; (8008964 <prvCheckForValidListAndQueue+0x78>)
 800891e:	2110      	movs	r1, #16
 8008920:	200a      	movs	r0, #10
 8008922:	f7fe f929 	bl	8006b78 <xQueueGenericCreateStatic>
 8008926:	4603      	mov	r3, r0
 8008928:	4a08      	ldr	r2, [pc, #32]	; (800894c <prvCheckForValidListAndQueue+0x60>)
 800892a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800892c:	4b07      	ldr	r3, [pc, #28]	; (800894c <prvCheckForValidListAndQueue+0x60>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008934:	4b05      	ldr	r3, [pc, #20]	; (800894c <prvCheckForValidListAndQueue+0x60>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	490b      	ldr	r1, [pc, #44]	; (8008968 <prvCheckForValidListAndQueue+0x7c>)
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fd42 	bl	80073c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008940:	f000 f970 	bl	8008c24 <vPortExitCritical>
}
 8008944:	bf00      	nop
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	20000ebc 	.word	0x20000ebc
 8008950:	20000e8c 	.word	0x20000e8c
 8008954:	20000ea0 	.word	0x20000ea0
 8008958:	20000eb4 	.word	0x20000eb4
 800895c:	20000eb8 	.word	0x20000eb8
 8008960:	20000f68 	.word	0x20000f68
 8008964:	20000ec8 	.word	0x20000ec8
 8008968:	0800c10c 	.word	0x0800c10c

0800896c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3b04      	subs	r3, #4
 800897c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3b04      	subs	r3, #4
 800898a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f023 0201 	bic.w	r2, r3, #1
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3b04      	subs	r3, #4
 800899a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800899c:	4a0c      	ldr	r2, [pc, #48]	; (80089d0 <pxPortInitialiseStack+0x64>)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3b14      	subs	r3, #20
 80089a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3b04      	subs	r3, #4
 80089b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f06f 0202 	mvn.w	r2, #2
 80089ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	3b20      	subs	r3, #32
 80089c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089c2:	68fb      	ldr	r3, [r7, #12]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	080089d5 	.word	0x080089d5

080089d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089de:	4b12      	ldr	r3, [pc, #72]	; (8008a28 <prvTaskExitError+0x54>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e6:	d00a      	beq.n	80089fe <prvTaskExitError+0x2a>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	60fb      	str	r3, [r7, #12]
}
 80089fa:	bf00      	nop
 80089fc:	e7fe      	b.n	80089fc <prvTaskExitError+0x28>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	60bb      	str	r3, [r7, #8]
}
 8008a10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a12:	bf00      	nop
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0fc      	beq.n	8008a14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	20000014 	.word	0x20000014
 8008a2c:	00000000 	.word	0x00000000

08008a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a30:	4b07      	ldr	r3, [pc, #28]	; (8008a50 <pxCurrentTCBConst2>)
 8008a32:	6819      	ldr	r1, [r3, #0]
 8008a34:	6808      	ldr	r0, [r1, #0]
 8008a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3a:	f380 8809 	msr	PSP, r0
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8811 	msr	BASEPRI, r0
 8008a4a:	4770      	bx	lr
 8008a4c:	f3af 8000 	nop.w

08008a50 <pxCurrentTCBConst2>:
 8008a50:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop

08008a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a58:	4808      	ldr	r0, [pc, #32]	; (8008a7c <prvPortStartFirstTask+0x24>)
 8008a5a:	6800      	ldr	r0, [r0, #0]
 8008a5c:	6800      	ldr	r0, [r0, #0]
 8008a5e:	f380 8808 	msr	MSP, r0
 8008a62:	f04f 0000 	mov.w	r0, #0
 8008a66:	f380 8814 	msr	CONTROL, r0
 8008a6a:	b662      	cpsie	i
 8008a6c:	b661      	cpsie	f
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	df00      	svc	0
 8008a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a7a:	bf00      	nop
 8008a7c:	e000ed08 	.word	0xe000ed08

08008a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a86:	4b46      	ldr	r3, [pc, #280]	; (8008ba0 <xPortStartScheduler+0x120>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a46      	ldr	r2, [pc, #280]	; (8008ba4 <xPortStartScheduler+0x124>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d10a      	bne.n	8008aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	613b      	str	r3, [r7, #16]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008aa6:	4b3e      	ldr	r3, [pc, #248]	; (8008ba0 <xPortStartScheduler+0x120>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a3f      	ldr	r2, [pc, #252]	; (8008ba8 <xPortStartScheduler+0x128>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d10a      	bne.n	8008ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	60fb      	str	r3, [r7, #12]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ac6:	4b39      	ldr	r3, [pc, #228]	; (8008bac <xPortStartScheduler+0x12c>)
 8008ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	22ff      	movs	r2, #255	; 0xff
 8008ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	4b31      	ldr	r3, [pc, #196]	; (8008bb0 <xPortStartScheduler+0x130>)
 8008aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008aee:	4b31      	ldr	r3, [pc, #196]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008af0:	2207      	movs	r2, #7
 8008af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008af4:	e009      	b.n	8008b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008af6:	4b2f      	ldr	r3, [pc, #188]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	4a2d      	ldr	r2, [pc, #180]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b0a:	78fb      	ldrb	r3, [r7, #3]
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b12:	2b80      	cmp	r3, #128	; 0x80
 8008b14:	d0ef      	beq.n	8008af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b16:	4b27      	ldr	r3, [pc, #156]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f1c3 0307 	rsb	r3, r3, #7
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d00a      	beq.n	8008b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	60bb      	str	r3, [r7, #8]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b38:	4b1e      	ldr	r3, [pc, #120]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	021b      	lsls	r3, r3, #8
 8008b3e:	4a1d      	ldr	r2, [pc, #116]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b42:	4b1c      	ldr	r3, [pc, #112]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b4a:	4a1a      	ldr	r2, [pc, #104]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b56:	4b18      	ldr	r3, [pc, #96]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a17      	ldr	r2, [pc, #92]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b62:	4b15      	ldr	r3, [pc, #84]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a14      	ldr	r2, [pc, #80]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b6e:	f000 f8dd 	bl	8008d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b72:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <xPortStartScheduler+0x13c>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b78:	f000 f8fc 	bl	8008d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b7c:	4b10      	ldr	r3, [pc, #64]	; (8008bc0 <xPortStartScheduler+0x140>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a0f      	ldr	r2, [pc, #60]	; (8008bc0 <xPortStartScheduler+0x140>)
 8008b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b88:	f7ff ff66 	bl	8008a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b8c:	f7ff f84a 	bl	8007c24 <vTaskSwitchContext>
	prvTaskExitError();
 8008b90:	f7ff ff20 	bl	80089d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	e000ed00 	.word	0xe000ed00
 8008ba4:	410fc271 	.word	0x410fc271
 8008ba8:	410fc270 	.word	0x410fc270
 8008bac:	e000e400 	.word	0xe000e400
 8008bb0:	20000fb8 	.word	0x20000fb8
 8008bb4:	20000fbc 	.word	0x20000fbc
 8008bb8:	e000ed20 	.word	0xe000ed20
 8008bbc:	20000014 	.word	0x20000014
 8008bc0:	e000ef34 	.word	0xe000ef34

08008bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	607b      	str	r3, [r7, #4]
}
 8008bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bde:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <vPortEnterCritical+0x58>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3301      	adds	r3, #1
 8008be4:	4a0d      	ldr	r2, [pc, #52]	; (8008c1c <vPortEnterCritical+0x58>)
 8008be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008be8:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <vPortEnterCritical+0x58>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d10f      	bne.n	8008c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bf0:	4b0b      	ldr	r3, [pc, #44]	; (8008c20 <vPortEnterCritical+0x5c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	603b      	str	r3, [r7, #0]
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <vPortEnterCritical+0x4a>
	}
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	20000014 	.word	0x20000014
 8008c20:	e000ed04 	.word	0xe000ed04

08008c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c2a:	4b12      	ldr	r3, [pc, #72]	; (8008c74 <vPortExitCritical+0x50>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10a      	bne.n	8008c48 <vPortExitCritical+0x24>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	607b      	str	r3, [r7, #4]
}
 8008c44:	bf00      	nop
 8008c46:	e7fe      	b.n	8008c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c48:	4b0a      	ldr	r3, [pc, #40]	; (8008c74 <vPortExitCritical+0x50>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	4a09      	ldr	r2, [pc, #36]	; (8008c74 <vPortExitCritical+0x50>)
 8008c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c52:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <vPortExitCritical+0x50>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d105      	bne.n	8008c66 <vPortExitCritical+0x42>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	f383 8811 	msr	BASEPRI, r3
}
 8008c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	20000014 	.word	0x20000014
	...

08008c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c80:	f3ef 8009 	mrs	r0, PSP
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	4b15      	ldr	r3, [pc, #84]	; (8008ce0 <pxCurrentTCBConst>)
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	f01e 0f10 	tst.w	lr, #16
 8008c90:	bf08      	it	eq
 8008c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9a:	6010      	str	r0, [r2, #0]
 8008c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ca4:	f380 8811 	msr	BASEPRI, r0
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f7fe ffb8 	bl	8007c24 <vTaskSwitchContext>
 8008cb4:	f04f 0000 	mov.w	r0, #0
 8008cb8:	f380 8811 	msr	BASEPRI, r0
 8008cbc:	bc09      	pop	{r0, r3}
 8008cbe:	6819      	ldr	r1, [r3, #0]
 8008cc0:	6808      	ldr	r0, [r1, #0]
 8008cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc6:	f01e 0f10 	tst.w	lr, #16
 8008cca:	bf08      	it	eq
 8008ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cd0:	f380 8809 	msr	PSP, r0
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w

08008ce0 <pxCurrentTCBConst>:
 8008ce0:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop

08008ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	607b      	str	r3, [r7, #4]
}
 8008d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d02:	f7fe fed5 	bl	8007ab0 <xTaskIncrementTick>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d003      	beq.n	8008d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <xPortSysTickHandler+0x40>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	2300      	movs	r3, #0
 8008d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f383 8811 	msr	BASEPRI, r3
}
 8008d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	e000ed04 	.word	0xe000ed04

08008d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d30:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <vPortSetupTimerInterrupt+0x34>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d36:	4b0b      	ldr	r3, [pc, #44]	; (8008d64 <vPortSetupTimerInterrupt+0x38>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d3c:	4b0a      	ldr	r3, [pc, #40]	; (8008d68 <vPortSetupTimerInterrupt+0x3c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a0a      	ldr	r2, [pc, #40]	; (8008d6c <vPortSetupTimerInterrupt+0x40>)
 8008d42:	fba2 2303 	umull	r2, r3, r2, r3
 8008d46:	099b      	lsrs	r3, r3, #6
 8008d48:	4a09      	ldr	r2, [pc, #36]	; (8008d70 <vPortSetupTimerInterrupt+0x44>)
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d4e:	4b04      	ldr	r3, [pc, #16]	; (8008d60 <vPortSetupTimerInterrupt+0x34>)
 8008d50:	2207      	movs	r2, #7
 8008d52:	601a      	str	r2, [r3, #0]
}
 8008d54:	bf00      	nop
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	e000e010 	.word	0xe000e010
 8008d64:	e000e018 	.word	0xe000e018
 8008d68:	20000008 	.word	0x20000008
 8008d6c:	10624dd3 	.word	0x10624dd3
 8008d70:	e000e014 	.word	0xe000e014

08008d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d84 <vPortEnableVFP+0x10>
 8008d78:	6801      	ldr	r1, [r0, #0]
 8008d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d7e:	6001      	str	r1, [r0, #0]
 8008d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d82:	bf00      	nop
 8008d84:	e000ed88 	.word	0xe000ed88

08008d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d8e:	f3ef 8305 	mrs	r3, IPSR
 8008d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b0f      	cmp	r3, #15
 8008d98:	d914      	bls.n	8008dc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d9a:	4a17      	ldr	r2, [pc, #92]	; (8008df8 <vPortValidateInterruptPriority+0x70>)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4413      	add	r3, r2
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008da4:	4b15      	ldr	r3, [pc, #84]	; (8008dfc <vPortValidateInterruptPriority+0x74>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	7afa      	ldrb	r2, [r7, #11]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d20a      	bcs.n	8008dc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	607b      	str	r3, [r7, #4]
}
 8008dc0:	bf00      	nop
 8008dc2:	e7fe      	b.n	8008dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008dc4:	4b0e      	ldr	r3, [pc, #56]	; (8008e00 <vPortValidateInterruptPriority+0x78>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008dcc:	4b0d      	ldr	r3, [pc, #52]	; (8008e04 <vPortValidateInterruptPriority+0x7c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d90a      	bls.n	8008dea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	603b      	str	r3, [r7, #0]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <vPortValidateInterruptPriority+0x60>
	}
 8008dea:	bf00      	nop
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	e000e3f0 	.word	0xe000e3f0
 8008dfc:	20000fb8 	.word	0x20000fb8
 8008e00:	e000ed0c 	.word	0xe000ed0c
 8008e04:	20000fbc 	.word	0x20000fbc

08008e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08a      	sub	sp, #40	; 0x28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e14:	f7fe fd90 	bl	8007938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e18:	4b5b      	ldr	r3, [pc, #364]	; (8008f88 <pvPortMalloc+0x180>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d101      	bne.n	8008e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e20:	f000 f920 	bl	8009064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e24:	4b59      	ldr	r3, [pc, #356]	; (8008f8c <pvPortMalloc+0x184>)
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f040 8093 	bne.w	8008f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d01d      	beq.n	8008e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e38:	2208      	movs	r2, #8
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d014      	beq.n	8008e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f023 0307 	bic.w	r3, r3, #7
 8008e50:	3308      	adds	r3, #8
 8008e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f003 0307 	and.w	r3, r3, #7
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <pvPortMalloc+0x6c>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	617b      	str	r3, [r7, #20]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d06e      	beq.n	8008f58 <pvPortMalloc+0x150>
 8008e7a:	4b45      	ldr	r3, [pc, #276]	; (8008f90 <pvPortMalloc+0x188>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d869      	bhi.n	8008f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e84:	4b43      	ldr	r3, [pc, #268]	; (8008f94 <pvPortMalloc+0x18c>)
 8008e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e88:	4b42      	ldr	r3, [pc, #264]	; (8008f94 <pvPortMalloc+0x18c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e8e:	e004      	b.n	8008e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d903      	bls.n	8008eac <pvPortMalloc+0xa4>
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1f1      	bne.n	8008e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008eac:	4b36      	ldr	r3, [pc, #216]	; (8008f88 <pvPortMalloc+0x180>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d050      	beq.n	8008f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2208      	movs	r2, #8
 8008ebc:	4413      	add	r3, r2
 8008ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	1ad2      	subs	r2, r2, r3
 8008ed0:	2308      	movs	r3, #8
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d91f      	bls.n	8008f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4413      	add	r3, r2
 8008ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	f003 0307 	and.w	r3, r3, #7
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00a      	beq.n	8008f00 <pvPortMalloc+0xf8>
	__asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	613b      	str	r3, [r7, #16]
}
 8008efc:	bf00      	nop
 8008efe:	e7fe      	b.n	8008efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	1ad2      	subs	r2, r2, r3
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f12:	69b8      	ldr	r0, [r7, #24]
 8008f14:	f000 f908 	bl	8009128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f18:	4b1d      	ldr	r3, [pc, #116]	; (8008f90 <pvPortMalloc+0x188>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	4a1b      	ldr	r2, [pc, #108]	; (8008f90 <pvPortMalloc+0x188>)
 8008f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f26:	4b1a      	ldr	r3, [pc, #104]	; (8008f90 <pvPortMalloc+0x188>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4b1b      	ldr	r3, [pc, #108]	; (8008f98 <pvPortMalloc+0x190>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d203      	bcs.n	8008f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f32:	4b17      	ldr	r3, [pc, #92]	; (8008f90 <pvPortMalloc+0x188>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a18      	ldr	r2, [pc, #96]	; (8008f98 <pvPortMalloc+0x190>)
 8008f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	4b13      	ldr	r3, [pc, #76]	; (8008f8c <pvPortMalloc+0x184>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f4e:	4b13      	ldr	r3, [pc, #76]	; (8008f9c <pvPortMalloc+0x194>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3301      	adds	r3, #1
 8008f54:	4a11      	ldr	r2, [pc, #68]	; (8008f9c <pvPortMalloc+0x194>)
 8008f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f58:	f7fe fcfc 	bl	8007954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00a      	beq.n	8008f7c <pvPortMalloc+0x174>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	60fb      	str	r3, [r7, #12]
}
 8008f78:	bf00      	nop
 8008f7a:	e7fe      	b.n	8008f7a <pvPortMalloc+0x172>
	return pvReturn;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3728      	adds	r7, #40	; 0x28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20004bc8 	.word	0x20004bc8
 8008f8c:	20004bdc 	.word	0x20004bdc
 8008f90:	20004bcc 	.word	0x20004bcc
 8008f94:	20004bc0 	.word	0x20004bc0
 8008f98:	20004bd0 	.word	0x20004bd0
 8008f9c:	20004bd4 	.word	0x20004bd4

08008fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d04d      	beq.n	800904e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fb2:	2308      	movs	r3, #8
 8008fb4:	425b      	negs	r3, r3
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	4413      	add	r3, r2
 8008fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	4b24      	ldr	r3, [pc, #144]	; (8009058 <vPortFree+0xb8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4013      	ands	r3, r2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <vPortFree+0x44>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	60fb      	str	r3, [r7, #12]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <vPortFree+0x62>
	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	60bb      	str	r3, [r7, #8]
}
 8008ffe:	bf00      	nop
 8009000:	e7fe      	b.n	8009000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	4b14      	ldr	r3, [pc, #80]	; (8009058 <vPortFree+0xb8>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d01e      	beq.n	800904e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d11a      	bne.n	800904e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	4b0e      	ldr	r3, [pc, #56]	; (8009058 <vPortFree+0xb8>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	43db      	mvns	r3, r3
 8009022:	401a      	ands	r2, r3
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009028:	f7fe fc86 	bl	8007938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	4b0a      	ldr	r3, [pc, #40]	; (800905c <vPortFree+0xbc>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4413      	add	r3, r2
 8009036:	4a09      	ldr	r2, [pc, #36]	; (800905c <vPortFree+0xbc>)
 8009038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800903a:	6938      	ldr	r0, [r7, #16]
 800903c:	f000 f874 	bl	8009128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009040:	4b07      	ldr	r3, [pc, #28]	; (8009060 <vPortFree+0xc0>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3301      	adds	r3, #1
 8009046:	4a06      	ldr	r2, [pc, #24]	; (8009060 <vPortFree+0xc0>)
 8009048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800904a:	f7fe fc83 	bl	8007954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800904e:	bf00      	nop
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	20004bdc 	.word	0x20004bdc
 800905c:	20004bcc 	.word	0x20004bcc
 8009060:	20004bd8 	.word	0x20004bd8

08009064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800906a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800906e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009070:	4b27      	ldr	r3, [pc, #156]	; (8009110 <prvHeapInit+0xac>)
 8009072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00c      	beq.n	8009098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3307      	adds	r3, #7
 8009082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f023 0307 	bic.w	r3, r3, #7
 800908a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	4a1f      	ldr	r2, [pc, #124]	; (8009110 <prvHeapInit+0xac>)
 8009094:	4413      	add	r3, r2
 8009096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800909c:	4a1d      	ldr	r2, [pc, #116]	; (8009114 <prvHeapInit+0xb0>)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090a2:	4b1c      	ldr	r3, [pc, #112]	; (8009114 <prvHeapInit+0xb0>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	4413      	add	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090b0:	2208      	movs	r2, #8
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	1a9b      	subs	r3, r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f023 0307 	bic.w	r3, r3, #7
 80090be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4a15      	ldr	r2, [pc, #84]	; (8009118 <prvHeapInit+0xb4>)
 80090c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090c6:	4b14      	ldr	r3, [pc, #80]	; (8009118 <prvHeapInit+0xb4>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2200      	movs	r2, #0
 80090cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ce:	4b12      	ldr	r3, [pc, #72]	; (8009118 <prvHeapInit+0xb4>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	1ad2      	subs	r2, r2, r3
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090e4:	4b0c      	ldr	r3, [pc, #48]	; (8009118 <prvHeapInit+0xb4>)
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	4a0a      	ldr	r2, [pc, #40]	; (800911c <prvHeapInit+0xb8>)
 80090f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	4a09      	ldr	r2, [pc, #36]	; (8009120 <prvHeapInit+0xbc>)
 80090fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090fc:	4b09      	ldr	r3, [pc, #36]	; (8009124 <prvHeapInit+0xc0>)
 80090fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009102:	601a      	str	r2, [r3, #0]
}
 8009104:	bf00      	nop
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	20000fc0 	.word	0x20000fc0
 8009114:	20004bc0 	.word	0x20004bc0
 8009118:	20004bc8 	.word	0x20004bc8
 800911c:	20004bd0 	.word	0x20004bd0
 8009120:	20004bcc 	.word	0x20004bcc
 8009124:	20004bdc 	.word	0x20004bdc

08009128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009130:	4b28      	ldr	r3, [pc, #160]	; (80091d4 <prvInsertBlockIntoFreeList+0xac>)
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	e002      	b.n	800913c <prvInsertBlockIntoFreeList+0x14>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	429a      	cmp	r2, r3
 8009144:	d8f7      	bhi.n	8009136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	4413      	add	r3, r2
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	429a      	cmp	r2, r3
 8009156:	d108      	bne.n	800916a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	441a      	add	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	441a      	add	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d118      	bne.n	80091b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	4b15      	ldr	r3, [pc, #84]	; (80091d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	429a      	cmp	r2, r3
 8009188:	d00d      	beq.n	80091a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	441a      	add	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	e008      	b.n	80091b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091a6:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <prvInsertBlockIntoFreeList+0xb0>)
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	e003      	b.n	80091b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d002      	beq.n	80091c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091c6:	bf00      	nop
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	20004bc0 	.word	0x20004bc0
 80091d8:	20004bc8 	.word	0x20004bc8

080091dc <__errno>:
 80091dc:	4b01      	ldr	r3, [pc, #4]	; (80091e4 <__errno+0x8>)
 80091de:	6818      	ldr	r0, [r3, #0]
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	20000018 	.word	0x20000018

080091e8 <std>:
 80091e8:	2300      	movs	r3, #0
 80091ea:	b510      	push	{r4, lr}
 80091ec:	4604      	mov	r4, r0
 80091ee:	e9c0 3300 	strd	r3, r3, [r0]
 80091f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091f6:	6083      	str	r3, [r0, #8]
 80091f8:	8181      	strh	r1, [r0, #12]
 80091fa:	6643      	str	r3, [r0, #100]	; 0x64
 80091fc:	81c2      	strh	r2, [r0, #14]
 80091fe:	6183      	str	r3, [r0, #24]
 8009200:	4619      	mov	r1, r3
 8009202:	2208      	movs	r2, #8
 8009204:	305c      	adds	r0, #92	; 0x5c
 8009206:	f000 f91a 	bl	800943e <memset>
 800920a:	4b05      	ldr	r3, [pc, #20]	; (8009220 <std+0x38>)
 800920c:	6263      	str	r3, [r4, #36]	; 0x24
 800920e:	4b05      	ldr	r3, [pc, #20]	; (8009224 <std+0x3c>)
 8009210:	62a3      	str	r3, [r4, #40]	; 0x28
 8009212:	4b05      	ldr	r3, [pc, #20]	; (8009228 <std+0x40>)
 8009214:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009216:	4b05      	ldr	r3, [pc, #20]	; (800922c <std+0x44>)
 8009218:	6224      	str	r4, [r4, #32]
 800921a:	6323      	str	r3, [r4, #48]	; 0x30
 800921c:	bd10      	pop	{r4, pc}
 800921e:	bf00      	nop
 8009220:	08009f3d 	.word	0x08009f3d
 8009224:	08009f5f 	.word	0x08009f5f
 8009228:	08009f97 	.word	0x08009f97
 800922c:	08009fbb 	.word	0x08009fbb

08009230 <_cleanup_r>:
 8009230:	4901      	ldr	r1, [pc, #4]	; (8009238 <_cleanup_r+0x8>)
 8009232:	f000 b8af 	b.w	8009394 <_fwalk_reent>
 8009236:	bf00      	nop
 8009238:	0800af85 	.word	0x0800af85

0800923c <__sfmoreglue>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	1e4a      	subs	r2, r1, #1
 8009240:	2568      	movs	r5, #104	; 0x68
 8009242:	4355      	muls	r5, r2
 8009244:	460e      	mov	r6, r1
 8009246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800924a:	f000 f901 	bl	8009450 <_malloc_r>
 800924e:	4604      	mov	r4, r0
 8009250:	b140      	cbz	r0, 8009264 <__sfmoreglue+0x28>
 8009252:	2100      	movs	r1, #0
 8009254:	e9c0 1600 	strd	r1, r6, [r0]
 8009258:	300c      	adds	r0, #12
 800925a:	60a0      	str	r0, [r4, #8]
 800925c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009260:	f000 f8ed 	bl	800943e <memset>
 8009264:	4620      	mov	r0, r4
 8009266:	bd70      	pop	{r4, r5, r6, pc}

08009268 <__sfp_lock_acquire>:
 8009268:	4801      	ldr	r0, [pc, #4]	; (8009270 <__sfp_lock_acquire+0x8>)
 800926a:	f000 b8d8 	b.w	800941e <__retarget_lock_acquire_recursive>
 800926e:	bf00      	nop
 8009270:	20005288 	.word	0x20005288

08009274 <__sfp_lock_release>:
 8009274:	4801      	ldr	r0, [pc, #4]	; (800927c <__sfp_lock_release+0x8>)
 8009276:	f000 b8d3 	b.w	8009420 <__retarget_lock_release_recursive>
 800927a:	bf00      	nop
 800927c:	20005288 	.word	0x20005288

08009280 <__sinit_lock_acquire>:
 8009280:	4801      	ldr	r0, [pc, #4]	; (8009288 <__sinit_lock_acquire+0x8>)
 8009282:	f000 b8cc 	b.w	800941e <__retarget_lock_acquire_recursive>
 8009286:	bf00      	nop
 8009288:	20005283 	.word	0x20005283

0800928c <__sinit_lock_release>:
 800928c:	4801      	ldr	r0, [pc, #4]	; (8009294 <__sinit_lock_release+0x8>)
 800928e:	f000 b8c7 	b.w	8009420 <__retarget_lock_release_recursive>
 8009292:	bf00      	nop
 8009294:	20005283 	.word	0x20005283

08009298 <__sinit>:
 8009298:	b510      	push	{r4, lr}
 800929a:	4604      	mov	r4, r0
 800929c:	f7ff fff0 	bl	8009280 <__sinit_lock_acquire>
 80092a0:	69a3      	ldr	r3, [r4, #24]
 80092a2:	b11b      	cbz	r3, 80092ac <__sinit+0x14>
 80092a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092a8:	f7ff bff0 	b.w	800928c <__sinit_lock_release>
 80092ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80092b0:	6523      	str	r3, [r4, #80]	; 0x50
 80092b2:	4b13      	ldr	r3, [pc, #76]	; (8009300 <__sinit+0x68>)
 80092b4:	4a13      	ldr	r2, [pc, #76]	; (8009304 <__sinit+0x6c>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80092ba:	42a3      	cmp	r3, r4
 80092bc:	bf04      	itt	eq
 80092be:	2301      	moveq	r3, #1
 80092c0:	61a3      	streq	r3, [r4, #24]
 80092c2:	4620      	mov	r0, r4
 80092c4:	f000 f820 	bl	8009308 <__sfp>
 80092c8:	6060      	str	r0, [r4, #4]
 80092ca:	4620      	mov	r0, r4
 80092cc:	f000 f81c 	bl	8009308 <__sfp>
 80092d0:	60a0      	str	r0, [r4, #8]
 80092d2:	4620      	mov	r0, r4
 80092d4:	f000 f818 	bl	8009308 <__sfp>
 80092d8:	2200      	movs	r2, #0
 80092da:	60e0      	str	r0, [r4, #12]
 80092dc:	2104      	movs	r1, #4
 80092de:	6860      	ldr	r0, [r4, #4]
 80092e0:	f7ff ff82 	bl	80091e8 <std>
 80092e4:	68a0      	ldr	r0, [r4, #8]
 80092e6:	2201      	movs	r2, #1
 80092e8:	2109      	movs	r1, #9
 80092ea:	f7ff ff7d 	bl	80091e8 <std>
 80092ee:	68e0      	ldr	r0, [r4, #12]
 80092f0:	2202      	movs	r2, #2
 80092f2:	2112      	movs	r1, #18
 80092f4:	f7ff ff78 	bl	80091e8 <std>
 80092f8:	2301      	movs	r3, #1
 80092fa:	61a3      	str	r3, [r4, #24]
 80092fc:	e7d2      	b.n	80092a4 <__sinit+0xc>
 80092fe:	bf00      	nop
 8009300:	0800c1f8 	.word	0x0800c1f8
 8009304:	08009231 	.word	0x08009231

08009308 <__sfp>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	4607      	mov	r7, r0
 800930c:	f7ff ffac 	bl	8009268 <__sfp_lock_acquire>
 8009310:	4b1e      	ldr	r3, [pc, #120]	; (800938c <__sfp+0x84>)
 8009312:	681e      	ldr	r6, [r3, #0]
 8009314:	69b3      	ldr	r3, [r6, #24]
 8009316:	b913      	cbnz	r3, 800931e <__sfp+0x16>
 8009318:	4630      	mov	r0, r6
 800931a:	f7ff ffbd 	bl	8009298 <__sinit>
 800931e:	3648      	adds	r6, #72	; 0x48
 8009320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009324:	3b01      	subs	r3, #1
 8009326:	d503      	bpl.n	8009330 <__sfp+0x28>
 8009328:	6833      	ldr	r3, [r6, #0]
 800932a:	b30b      	cbz	r3, 8009370 <__sfp+0x68>
 800932c:	6836      	ldr	r6, [r6, #0]
 800932e:	e7f7      	b.n	8009320 <__sfp+0x18>
 8009330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009334:	b9d5      	cbnz	r5, 800936c <__sfp+0x64>
 8009336:	4b16      	ldr	r3, [pc, #88]	; (8009390 <__sfp+0x88>)
 8009338:	60e3      	str	r3, [r4, #12]
 800933a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800933e:	6665      	str	r5, [r4, #100]	; 0x64
 8009340:	f000 f86c 	bl	800941c <__retarget_lock_init_recursive>
 8009344:	f7ff ff96 	bl	8009274 <__sfp_lock_release>
 8009348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800934c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009350:	6025      	str	r5, [r4, #0]
 8009352:	61a5      	str	r5, [r4, #24]
 8009354:	2208      	movs	r2, #8
 8009356:	4629      	mov	r1, r5
 8009358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800935c:	f000 f86f 	bl	800943e <memset>
 8009360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009368:	4620      	mov	r0, r4
 800936a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800936c:	3468      	adds	r4, #104	; 0x68
 800936e:	e7d9      	b.n	8009324 <__sfp+0x1c>
 8009370:	2104      	movs	r1, #4
 8009372:	4638      	mov	r0, r7
 8009374:	f7ff ff62 	bl	800923c <__sfmoreglue>
 8009378:	4604      	mov	r4, r0
 800937a:	6030      	str	r0, [r6, #0]
 800937c:	2800      	cmp	r0, #0
 800937e:	d1d5      	bne.n	800932c <__sfp+0x24>
 8009380:	f7ff ff78 	bl	8009274 <__sfp_lock_release>
 8009384:	230c      	movs	r3, #12
 8009386:	603b      	str	r3, [r7, #0]
 8009388:	e7ee      	b.n	8009368 <__sfp+0x60>
 800938a:	bf00      	nop
 800938c:	0800c1f8 	.word	0x0800c1f8
 8009390:	ffff0001 	.word	0xffff0001

08009394 <_fwalk_reent>:
 8009394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009398:	4606      	mov	r6, r0
 800939a:	4688      	mov	r8, r1
 800939c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093a0:	2700      	movs	r7, #0
 80093a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093a6:	f1b9 0901 	subs.w	r9, r9, #1
 80093aa:	d505      	bpl.n	80093b8 <_fwalk_reent+0x24>
 80093ac:	6824      	ldr	r4, [r4, #0]
 80093ae:	2c00      	cmp	r4, #0
 80093b0:	d1f7      	bne.n	80093a2 <_fwalk_reent+0xe>
 80093b2:	4638      	mov	r0, r7
 80093b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093b8:	89ab      	ldrh	r3, [r5, #12]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d907      	bls.n	80093ce <_fwalk_reent+0x3a>
 80093be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093c2:	3301      	adds	r3, #1
 80093c4:	d003      	beq.n	80093ce <_fwalk_reent+0x3a>
 80093c6:	4629      	mov	r1, r5
 80093c8:	4630      	mov	r0, r6
 80093ca:	47c0      	blx	r8
 80093cc:	4307      	orrs	r7, r0
 80093ce:	3568      	adds	r5, #104	; 0x68
 80093d0:	e7e9      	b.n	80093a6 <_fwalk_reent+0x12>
	...

080093d4 <__libc_init_array>:
 80093d4:	b570      	push	{r4, r5, r6, lr}
 80093d6:	4d0d      	ldr	r5, [pc, #52]	; (800940c <__libc_init_array+0x38>)
 80093d8:	4c0d      	ldr	r4, [pc, #52]	; (8009410 <__libc_init_array+0x3c>)
 80093da:	1b64      	subs	r4, r4, r5
 80093dc:	10a4      	asrs	r4, r4, #2
 80093de:	2600      	movs	r6, #0
 80093e0:	42a6      	cmp	r6, r4
 80093e2:	d109      	bne.n	80093f8 <__libc_init_array+0x24>
 80093e4:	4d0b      	ldr	r5, [pc, #44]	; (8009414 <__libc_init_array+0x40>)
 80093e6:	4c0c      	ldr	r4, [pc, #48]	; (8009418 <__libc_init_array+0x44>)
 80093e8:	f002 fe40 	bl	800c06c <_init>
 80093ec:	1b64      	subs	r4, r4, r5
 80093ee:	10a4      	asrs	r4, r4, #2
 80093f0:	2600      	movs	r6, #0
 80093f2:	42a6      	cmp	r6, r4
 80093f4:	d105      	bne.n	8009402 <__libc_init_array+0x2e>
 80093f6:	bd70      	pop	{r4, r5, r6, pc}
 80093f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80093fc:	4798      	blx	r3
 80093fe:	3601      	adds	r6, #1
 8009400:	e7ee      	b.n	80093e0 <__libc_init_array+0xc>
 8009402:	f855 3b04 	ldr.w	r3, [r5], #4
 8009406:	4798      	blx	r3
 8009408:	3601      	adds	r6, #1
 800940a:	e7f2      	b.n	80093f2 <__libc_init_array+0x1e>
 800940c:	0800c584 	.word	0x0800c584
 8009410:	0800c584 	.word	0x0800c584
 8009414:	0800c584 	.word	0x0800c584
 8009418:	0800c588 	.word	0x0800c588

0800941c <__retarget_lock_init_recursive>:
 800941c:	4770      	bx	lr

0800941e <__retarget_lock_acquire_recursive>:
 800941e:	4770      	bx	lr

08009420 <__retarget_lock_release_recursive>:
 8009420:	4770      	bx	lr

08009422 <memcpy>:
 8009422:	440a      	add	r2, r1
 8009424:	4291      	cmp	r1, r2
 8009426:	f100 33ff 	add.w	r3, r0, #4294967295
 800942a:	d100      	bne.n	800942e <memcpy+0xc>
 800942c:	4770      	bx	lr
 800942e:	b510      	push	{r4, lr}
 8009430:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009434:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009438:	4291      	cmp	r1, r2
 800943a:	d1f9      	bne.n	8009430 <memcpy+0xe>
 800943c:	bd10      	pop	{r4, pc}

0800943e <memset>:
 800943e:	4402      	add	r2, r0
 8009440:	4603      	mov	r3, r0
 8009442:	4293      	cmp	r3, r2
 8009444:	d100      	bne.n	8009448 <memset+0xa>
 8009446:	4770      	bx	lr
 8009448:	f803 1b01 	strb.w	r1, [r3], #1
 800944c:	e7f9      	b.n	8009442 <memset+0x4>
	...

08009450 <_malloc_r>:
 8009450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009452:	1ccd      	adds	r5, r1, #3
 8009454:	f025 0503 	bic.w	r5, r5, #3
 8009458:	3508      	adds	r5, #8
 800945a:	2d0c      	cmp	r5, #12
 800945c:	bf38      	it	cc
 800945e:	250c      	movcc	r5, #12
 8009460:	2d00      	cmp	r5, #0
 8009462:	4606      	mov	r6, r0
 8009464:	db01      	blt.n	800946a <_malloc_r+0x1a>
 8009466:	42a9      	cmp	r1, r5
 8009468:	d903      	bls.n	8009472 <_malloc_r+0x22>
 800946a:	230c      	movs	r3, #12
 800946c:	6033      	str	r3, [r6, #0]
 800946e:	2000      	movs	r0, #0
 8009470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009472:	f001 fe45 	bl	800b100 <__malloc_lock>
 8009476:	4921      	ldr	r1, [pc, #132]	; (80094fc <_malloc_r+0xac>)
 8009478:	680a      	ldr	r2, [r1, #0]
 800947a:	4614      	mov	r4, r2
 800947c:	b99c      	cbnz	r4, 80094a6 <_malloc_r+0x56>
 800947e:	4f20      	ldr	r7, [pc, #128]	; (8009500 <_malloc_r+0xb0>)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	b923      	cbnz	r3, 800948e <_malloc_r+0x3e>
 8009484:	4621      	mov	r1, r4
 8009486:	4630      	mov	r0, r6
 8009488:	f000 fd28 	bl	8009edc <_sbrk_r>
 800948c:	6038      	str	r0, [r7, #0]
 800948e:	4629      	mov	r1, r5
 8009490:	4630      	mov	r0, r6
 8009492:	f000 fd23 	bl	8009edc <_sbrk_r>
 8009496:	1c43      	adds	r3, r0, #1
 8009498:	d123      	bne.n	80094e2 <_malloc_r+0x92>
 800949a:	230c      	movs	r3, #12
 800949c:	6033      	str	r3, [r6, #0]
 800949e:	4630      	mov	r0, r6
 80094a0:	f001 fe34 	bl	800b10c <__malloc_unlock>
 80094a4:	e7e3      	b.n	800946e <_malloc_r+0x1e>
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	1b5b      	subs	r3, r3, r5
 80094aa:	d417      	bmi.n	80094dc <_malloc_r+0x8c>
 80094ac:	2b0b      	cmp	r3, #11
 80094ae:	d903      	bls.n	80094b8 <_malloc_r+0x68>
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	441c      	add	r4, r3
 80094b4:	6025      	str	r5, [r4, #0]
 80094b6:	e004      	b.n	80094c2 <_malloc_r+0x72>
 80094b8:	6863      	ldr	r3, [r4, #4]
 80094ba:	42a2      	cmp	r2, r4
 80094bc:	bf0c      	ite	eq
 80094be:	600b      	streq	r3, [r1, #0]
 80094c0:	6053      	strne	r3, [r2, #4]
 80094c2:	4630      	mov	r0, r6
 80094c4:	f001 fe22 	bl	800b10c <__malloc_unlock>
 80094c8:	f104 000b 	add.w	r0, r4, #11
 80094cc:	1d23      	adds	r3, r4, #4
 80094ce:	f020 0007 	bic.w	r0, r0, #7
 80094d2:	1ac2      	subs	r2, r0, r3
 80094d4:	d0cc      	beq.n	8009470 <_malloc_r+0x20>
 80094d6:	1a1b      	subs	r3, r3, r0
 80094d8:	50a3      	str	r3, [r4, r2]
 80094da:	e7c9      	b.n	8009470 <_malloc_r+0x20>
 80094dc:	4622      	mov	r2, r4
 80094de:	6864      	ldr	r4, [r4, #4]
 80094e0:	e7cc      	b.n	800947c <_malloc_r+0x2c>
 80094e2:	1cc4      	adds	r4, r0, #3
 80094e4:	f024 0403 	bic.w	r4, r4, #3
 80094e8:	42a0      	cmp	r0, r4
 80094ea:	d0e3      	beq.n	80094b4 <_malloc_r+0x64>
 80094ec:	1a21      	subs	r1, r4, r0
 80094ee:	4630      	mov	r0, r6
 80094f0:	f000 fcf4 	bl	8009edc <_sbrk_r>
 80094f4:	3001      	adds	r0, #1
 80094f6:	d1dd      	bne.n	80094b4 <_malloc_r+0x64>
 80094f8:	e7cf      	b.n	800949a <_malloc_r+0x4a>
 80094fa:	bf00      	nop
 80094fc:	20004be0 	.word	0x20004be0
 8009500:	20004be4 	.word	0x20004be4

08009504 <__cvt>:
 8009504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009508:	ec55 4b10 	vmov	r4, r5, d0
 800950c:	2d00      	cmp	r5, #0
 800950e:	460e      	mov	r6, r1
 8009510:	4619      	mov	r1, r3
 8009512:	462b      	mov	r3, r5
 8009514:	bfbb      	ittet	lt
 8009516:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800951a:	461d      	movlt	r5, r3
 800951c:	2300      	movge	r3, #0
 800951e:	232d      	movlt	r3, #45	; 0x2d
 8009520:	700b      	strb	r3, [r1, #0]
 8009522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009524:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009528:	4691      	mov	r9, r2
 800952a:	f023 0820 	bic.w	r8, r3, #32
 800952e:	bfbc      	itt	lt
 8009530:	4622      	movlt	r2, r4
 8009532:	4614      	movlt	r4, r2
 8009534:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009538:	d005      	beq.n	8009546 <__cvt+0x42>
 800953a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800953e:	d100      	bne.n	8009542 <__cvt+0x3e>
 8009540:	3601      	adds	r6, #1
 8009542:	2102      	movs	r1, #2
 8009544:	e000      	b.n	8009548 <__cvt+0x44>
 8009546:	2103      	movs	r1, #3
 8009548:	ab03      	add	r3, sp, #12
 800954a:	9301      	str	r3, [sp, #4]
 800954c:	ab02      	add	r3, sp, #8
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	ec45 4b10 	vmov	d0, r4, r5
 8009554:	4653      	mov	r3, sl
 8009556:	4632      	mov	r2, r6
 8009558:	f000 fea2 	bl	800a2a0 <_dtoa_r>
 800955c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009560:	4607      	mov	r7, r0
 8009562:	d102      	bne.n	800956a <__cvt+0x66>
 8009564:	f019 0f01 	tst.w	r9, #1
 8009568:	d022      	beq.n	80095b0 <__cvt+0xac>
 800956a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800956e:	eb07 0906 	add.w	r9, r7, r6
 8009572:	d110      	bne.n	8009596 <__cvt+0x92>
 8009574:	783b      	ldrb	r3, [r7, #0]
 8009576:	2b30      	cmp	r3, #48	; 0x30
 8009578:	d10a      	bne.n	8009590 <__cvt+0x8c>
 800957a:	2200      	movs	r2, #0
 800957c:	2300      	movs	r3, #0
 800957e:	4620      	mov	r0, r4
 8009580:	4629      	mov	r1, r5
 8009582:	f7f7 faa9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009586:	b918      	cbnz	r0, 8009590 <__cvt+0x8c>
 8009588:	f1c6 0601 	rsb	r6, r6, #1
 800958c:	f8ca 6000 	str.w	r6, [sl]
 8009590:	f8da 3000 	ldr.w	r3, [sl]
 8009594:	4499      	add	r9, r3
 8009596:	2200      	movs	r2, #0
 8009598:	2300      	movs	r3, #0
 800959a:	4620      	mov	r0, r4
 800959c:	4629      	mov	r1, r5
 800959e:	f7f7 fa9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80095a2:	b108      	cbz	r0, 80095a8 <__cvt+0xa4>
 80095a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80095a8:	2230      	movs	r2, #48	; 0x30
 80095aa:	9b03      	ldr	r3, [sp, #12]
 80095ac:	454b      	cmp	r3, r9
 80095ae:	d307      	bcc.n	80095c0 <__cvt+0xbc>
 80095b0:	9b03      	ldr	r3, [sp, #12]
 80095b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095b4:	1bdb      	subs	r3, r3, r7
 80095b6:	4638      	mov	r0, r7
 80095b8:	6013      	str	r3, [r2, #0]
 80095ba:	b004      	add	sp, #16
 80095bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c0:	1c59      	adds	r1, r3, #1
 80095c2:	9103      	str	r1, [sp, #12]
 80095c4:	701a      	strb	r2, [r3, #0]
 80095c6:	e7f0      	b.n	80095aa <__cvt+0xa6>

080095c8 <__exponent>:
 80095c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095ca:	4603      	mov	r3, r0
 80095cc:	2900      	cmp	r1, #0
 80095ce:	bfb8      	it	lt
 80095d0:	4249      	neglt	r1, r1
 80095d2:	f803 2b02 	strb.w	r2, [r3], #2
 80095d6:	bfb4      	ite	lt
 80095d8:	222d      	movlt	r2, #45	; 0x2d
 80095da:	222b      	movge	r2, #43	; 0x2b
 80095dc:	2909      	cmp	r1, #9
 80095de:	7042      	strb	r2, [r0, #1]
 80095e0:	dd2a      	ble.n	8009638 <__exponent+0x70>
 80095e2:	f10d 0407 	add.w	r4, sp, #7
 80095e6:	46a4      	mov	ip, r4
 80095e8:	270a      	movs	r7, #10
 80095ea:	46a6      	mov	lr, r4
 80095ec:	460a      	mov	r2, r1
 80095ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80095f2:	fb07 1516 	mls	r5, r7, r6, r1
 80095f6:	3530      	adds	r5, #48	; 0x30
 80095f8:	2a63      	cmp	r2, #99	; 0x63
 80095fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80095fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009602:	4631      	mov	r1, r6
 8009604:	dcf1      	bgt.n	80095ea <__exponent+0x22>
 8009606:	3130      	adds	r1, #48	; 0x30
 8009608:	f1ae 0502 	sub.w	r5, lr, #2
 800960c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009610:	1c44      	adds	r4, r0, #1
 8009612:	4629      	mov	r1, r5
 8009614:	4561      	cmp	r1, ip
 8009616:	d30a      	bcc.n	800962e <__exponent+0x66>
 8009618:	f10d 0209 	add.w	r2, sp, #9
 800961c:	eba2 020e 	sub.w	r2, r2, lr
 8009620:	4565      	cmp	r5, ip
 8009622:	bf88      	it	hi
 8009624:	2200      	movhi	r2, #0
 8009626:	4413      	add	r3, r2
 8009628:	1a18      	subs	r0, r3, r0
 800962a:	b003      	add	sp, #12
 800962c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800962e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009632:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009636:	e7ed      	b.n	8009614 <__exponent+0x4c>
 8009638:	2330      	movs	r3, #48	; 0x30
 800963a:	3130      	adds	r1, #48	; 0x30
 800963c:	7083      	strb	r3, [r0, #2]
 800963e:	70c1      	strb	r1, [r0, #3]
 8009640:	1d03      	adds	r3, r0, #4
 8009642:	e7f1      	b.n	8009628 <__exponent+0x60>

08009644 <_printf_float>:
 8009644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009648:	ed2d 8b02 	vpush	{d8}
 800964c:	b08d      	sub	sp, #52	; 0x34
 800964e:	460c      	mov	r4, r1
 8009650:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009654:	4616      	mov	r6, r2
 8009656:	461f      	mov	r7, r3
 8009658:	4605      	mov	r5, r0
 800965a:	f001 fccf 	bl	800affc <_localeconv_r>
 800965e:	f8d0 a000 	ldr.w	sl, [r0]
 8009662:	4650      	mov	r0, sl
 8009664:	f7f6 fdbc 	bl	80001e0 <strlen>
 8009668:	2300      	movs	r3, #0
 800966a:	930a      	str	r3, [sp, #40]	; 0x28
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	9305      	str	r3, [sp, #20]
 8009670:	f8d8 3000 	ldr.w	r3, [r8]
 8009674:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009678:	3307      	adds	r3, #7
 800967a:	f023 0307 	bic.w	r3, r3, #7
 800967e:	f103 0208 	add.w	r2, r3, #8
 8009682:	f8c8 2000 	str.w	r2, [r8]
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800968e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009692:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009696:	9307      	str	r3, [sp, #28]
 8009698:	f8cd 8018 	str.w	r8, [sp, #24]
 800969c:	ee08 0a10 	vmov	s16, r0
 80096a0:	4b9f      	ldr	r3, [pc, #636]	; (8009920 <_printf_float+0x2dc>)
 80096a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096a6:	f04f 32ff 	mov.w	r2, #4294967295
 80096aa:	f7f7 fa47 	bl	8000b3c <__aeabi_dcmpun>
 80096ae:	bb88      	cbnz	r0, 8009714 <_printf_float+0xd0>
 80096b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096b4:	4b9a      	ldr	r3, [pc, #616]	; (8009920 <_printf_float+0x2dc>)
 80096b6:	f04f 32ff 	mov.w	r2, #4294967295
 80096ba:	f7f7 fa21 	bl	8000b00 <__aeabi_dcmple>
 80096be:	bb48      	cbnz	r0, 8009714 <_printf_float+0xd0>
 80096c0:	2200      	movs	r2, #0
 80096c2:	2300      	movs	r3, #0
 80096c4:	4640      	mov	r0, r8
 80096c6:	4649      	mov	r1, r9
 80096c8:	f7f7 fa10 	bl	8000aec <__aeabi_dcmplt>
 80096cc:	b110      	cbz	r0, 80096d4 <_printf_float+0x90>
 80096ce:	232d      	movs	r3, #45	; 0x2d
 80096d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096d4:	4b93      	ldr	r3, [pc, #588]	; (8009924 <_printf_float+0x2e0>)
 80096d6:	4894      	ldr	r0, [pc, #592]	; (8009928 <_printf_float+0x2e4>)
 80096d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80096dc:	bf94      	ite	ls
 80096de:	4698      	movls	r8, r3
 80096e0:	4680      	movhi	r8, r0
 80096e2:	2303      	movs	r3, #3
 80096e4:	6123      	str	r3, [r4, #16]
 80096e6:	9b05      	ldr	r3, [sp, #20]
 80096e8:	f023 0204 	bic.w	r2, r3, #4
 80096ec:	6022      	str	r2, [r4, #0]
 80096ee:	f04f 0900 	mov.w	r9, #0
 80096f2:	9700      	str	r7, [sp, #0]
 80096f4:	4633      	mov	r3, r6
 80096f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80096f8:	4621      	mov	r1, r4
 80096fa:	4628      	mov	r0, r5
 80096fc:	f000 f9d8 	bl	8009ab0 <_printf_common>
 8009700:	3001      	adds	r0, #1
 8009702:	f040 8090 	bne.w	8009826 <_printf_float+0x1e2>
 8009706:	f04f 30ff 	mov.w	r0, #4294967295
 800970a:	b00d      	add	sp, #52	; 0x34
 800970c:	ecbd 8b02 	vpop	{d8}
 8009710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009714:	4642      	mov	r2, r8
 8009716:	464b      	mov	r3, r9
 8009718:	4640      	mov	r0, r8
 800971a:	4649      	mov	r1, r9
 800971c:	f7f7 fa0e 	bl	8000b3c <__aeabi_dcmpun>
 8009720:	b140      	cbz	r0, 8009734 <_printf_float+0xf0>
 8009722:	464b      	mov	r3, r9
 8009724:	2b00      	cmp	r3, #0
 8009726:	bfbc      	itt	lt
 8009728:	232d      	movlt	r3, #45	; 0x2d
 800972a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800972e:	487f      	ldr	r0, [pc, #508]	; (800992c <_printf_float+0x2e8>)
 8009730:	4b7f      	ldr	r3, [pc, #508]	; (8009930 <_printf_float+0x2ec>)
 8009732:	e7d1      	b.n	80096d8 <_printf_float+0x94>
 8009734:	6863      	ldr	r3, [r4, #4]
 8009736:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800973a:	9206      	str	r2, [sp, #24]
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	d13f      	bne.n	80097c0 <_printf_float+0x17c>
 8009740:	2306      	movs	r3, #6
 8009742:	6063      	str	r3, [r4, #4]
 8009744:	9b05      	ldr	r3, [sp, #20]
 8009746:	6861      	ldr	r1, [r4, #4]
 8009748:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800974c:	2300      	movs	r3, #0
 800974e:	9303      	str	r3, [sp, #12]
 8009750:	ab0a      	add	r3, sp, #40	; 0x28
 8009752:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009756:	ab09      	add	r3, sp, #36	; 0x24
 8009758:	ec49 8b10 	vmov	d0, r8, r9
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	6022      	str	r2, [r4, #0]
 8009760:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009764:	4628      	mov	r0, r5
 8009766:	f7ff fecd 	bl	8009504 <__cvt>
 800976a:	9b06      	ldr	r3, [sp, #24]
 800976c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800976e:	2b47      	cmp	r3, #71	; 0x47
 8009770:	4680      	mov	r8, r0
 8009772:	d108      	bne.n	8009786 <_printf_float+0x142>
 8009774:	1cc8      	adds	r0, r1, #3
 8009776:	db02      	blt.n	800977e <_printf_float+0x13a>
 8009778:	6863      	ldr	r3, [r4, #4]
 800977a:	4299      	cmp	r1, r3
 800977c:	dd41      	ble.n	8009802 <_printf_float+0x1be>
 800977e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009782:	fa5f fb8b 	uxtb.w	fp, fp
 8009786:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800978a:	d820      	bhi.n	80097ce <_printf_float+0x18a>
 800978c:	3901      	subs	r1, #1
 800978e:	465a      	mov	r2, fp
 8009790:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009794:	9109      	str	r1, [sp, #36]	; 0x24
 8009796:	f7ff ff17 	bl	80095c8 <__exponent>
 800979a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800979c:	1813      	adds	r3, r2, r0
 800979e:	2a01      	cmp	r2, #1
 80097a0:	4681      	mov	r9, r0
 80097a2:	6123      	str	r3, [r4, #16]
 80097a4:	dc02      	bgt.n	80097ac <_printf_float+0x168>
 80097a6:	6822      	ldr	r2, [r4, #0]
 80097a8:	07d2      	lsls	r2, r2, #31
 80097aa:	d501      	bpl.n	80097b0 <_printf_float+0x16c>
 80097ac:	3301      	adds	r3, #1
 80097ae:	6123      	str	r3, [r4, #16]
 80097b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d09c      	beq.n	80096f2 <_printf_float+0xae>
 80097b8:	232d      	movs	r3, #45	; 0x2d
 80097ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097be:	e798      	b.n	80096f2 <_printf_float+0xae>
 80097c0:	9a06      	ldr	r2, [sp, #24]
 80097c2:	2a47      	cmp	r2, #71	; 0x47
 80097c4:	d1be      	bne.n	8009744 <_printf_float+0x100>
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1bc      	bne.n	8009744 <_printf_float+0x100>
 80097ca:	2301      	movs	r3, #1
 80097cc:	e7b9      	b.n	8009742 <_printf_float+0xfe>
 80097ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80097d2:	d118      	bne.n	8009806 <_printf_float+0x1c2>
 80097d4:	2900      	cmp	r1, #0
 80097d6:	6863      	ldr	r3, [r4, #4]
 80097d8:	dd0b      	ble.n	80097f2 <_printf_float+0x1ae>
 80097da:	6121      	str	r1, [r4, #16]
 80097dc:	b913      	cbnz	r3, 80097e4 <_printf_float+0x1a0>
 80097de:	6822      	ldr	r2, [r4, #0]
 80097e0:	07d0      	lsls	r0, r2, #31
 80097e2:	d502      	bpl.n	80097ea <_printf_float+0x1a6>
 80097e4:	3301      	adds	r3, #1
 80097e6:	440b      	add	r3, r1
 80097e8:	6123      	str	r3, [r4, #16]
 80097ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80097ec:	f04f 0900 	mov.w	r9, #0
 80097f0:	e7de      	b.n	80097b0 <_printf_float+0x16c>
 80097f2:	b913      	cbnz	r3, 80097fa <_printf_float+0x1b6>
 80097f4:	6822      	ldr	r2, [r4, #0]
 80097f6:	07d2      	lsls	r2, r2, #31
 80097f8:	d501      	bpl.n	80097fe <_printf_float+0x1ba>
 80097fa:	3302      	adds	r3, #2
 80097fc:	e7f4      	b.n	80097e8 <_printf_float+0x1a4>
 80097fe:	2301      	movs	r3, #1
 8009800:	e7f2      	b.n	80097e8 <_printf_float+0x1a4>
 8009802:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009808:	4299      	cmp	r1, r3
 800980a:	db05      	blt.n	8009818 <_printf_float+0x1d4>
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	6121      	str	r1, [r4, #16]
 8009810:	07d8      	lsls	r0, r3, #31
 8009812:	d5ea      	bpl.n	80097ea <_printf_float+0x1a6>
 8009814:	1c4b      	adds	r3, r1, #1
 8009816:	e7e7      	b.n	80097e8 <_printf_float+0x1a4>
 8009818:	2900      	cmp	r1, #0
 800981a:	bfd4      	ite	le
 800981c:	f1c1 0202 	rsble	r2, r1, #2
 8009820:	2201      	movgt	r2, #1
 8009822:	4413      	add	r3, r2
 8009824:	e7e0      	b.n	80097e8 <_printf_float+0x1a4>
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	055a      	lsls	r2, r3, #21
 800982a:	d407      	bmi.n	800983c <_printf_float+0x1f8>
 800982c:	6923      	ldr	r3, [r4, #16]
 800982e:	4642      	mov	r2, r8
 8009830:	4631      	mov	r1, r6
 8009832:	4628      	mov	r0, r5
 8009834:	47b8      	blx	r7
 8009836:	3001      	adds	r0, #1
 8009838:	d12c      	bne.n	8009894 <_printf_float+0x250>
 800983a:	e764      	b.n	8009706 <_printf_float+0xc2>
 800983c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009840:	f240 80e0 	bls.w	8009a04 <_printf_float+0x3c0>
 8009844:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009848:	2200      	movs	r2, #0
 800984a:	2300      	movs	r3, #0
 800984c:	f7f7 f944 	bl	8000ad8 <__aeabi_dcmpeq>
 8009850:	2800      	cmp	r0, #0
 8009852:	d034      	beq.n	80098be <_printf_float+0x27a>
 8009854:	4a37      	ldr	r2, [pc, #220]	; (8009934 <_printf_float+0x2f0>)
 8009856:	2301      	movs	r3, #1
 8009858:	4631      	mov	r1, r6
 800985a:	4628      	mov	r0, r5
 800985c:	47b8      	blx	r7
 800985e:	3001      	adds	r0, #1
 8009860:	f43f af51 	beq.w	8009706 <_printf_float+0xc2>
 8009864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009868:	429a      	cmp	r2, r3
 800986a:	db02      	blt.n	8009872 <_printf_float+0x22e>
 800986c:	6823      	ldr	r3, [r4, #0]
 800986e:	07d8      	lsls	r0, r3, #31
 8009870:	d510      	bpl.n	8009894 <_printf_float+0x250>
 8009872:	ee18 3a10 	vmov	r3, s16
 8009876:	4652      	mov	r2, sl
 8009878:	4631      	mov	r1, r6
 800987a:	4628      	mov	r0, r5
 800987c:	47b8      	blx	r7
 800987e:	3001      	adds	r0, #1
 8009880:	f43f af41 	beq.w	8009706 <_printf_float+0xc2>
 8009884:	f04f 0800 	mov.w	r8, #0
 8009888:	f104 091a 	add.w	r9, r4, #26
 800988c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800988e:	3b01      	subs	r3, #1
 8009890:	4543      	cmp	r3, r8
 8009892:	dc09      	bgt.n	80098a8 <_printf_float+0x264>
 8009894:	6823      	ldr	r3, [r4, #0]
 8009896:	079b      	lsls	r3, r3, #30
 8009898:	f100 8105 	bmi.w	8009aa6 <_printf_float+0x462>
 800989c:	68e0      	ldr	r0, [r4, #12]
 800989e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098a0:	4298      	cmp	r0, r3
 80098a2:	bfb8      	it	lt
 80098a4:	4618      	movlt	r0, r3
 80098a6:	e730      	b.n	800970a <_printf_float+0xc6>
 80098a8:	2301      	movs	r3, #1
 80098aa:	464a      	mov	r2, r9
 80098ac:	4631      	mov	r1, r6
 80098ae:	4628      	mov	r0, r5
 80098b0:	47b8      	blx	r7
 80098b2:	3001      	adds	r0, #1
 80098b4:	f43f af27 	beq.w	8009706 <_printf_float+0xc2>
 80098b8:	f108 0801 	add.w	r8, r8, #1
 80098bc:	e7e6      	b.n	800988c <_printf_float+0x248>
 80098be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	dc39      	bgt.n	8009938 <_printf_float+0x2f4>
 80098c4:	4a1b      	ldr	r2, [pc, #108]	; (8009934 <_printf_float+0x2f0>)
 80098c6:	2301      	movs	r3, #1
 80098c8:	4631      	mov	r1, r6
 80098ca:	4628      	mov	r0, r5
 80098cc:	47b8      	blx	r7
 80098ce:	3001      	adds	r0, #1
 80098d0:	f43f af19 	beq.w	8009706 <_printf_float+0xc2>
 80098d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098d8:	4313      	orrs	r3, r2
 80098da:	d102      	bne.n	80098e2 <_printf_float+0x29e>
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	07d9      	lsls	r1, r3, #31
 80098e0:	d5d8      	bpl.n	8009894 <_printf_float+0x250>
 80098e2:	ee18 3a10 	vmov	r3, s16
 80098e6:	4652      	mov	r2, sl
 80098e8:	4631      	mov	r1, r6
 80098ea:	4628      	mov	r0, r5
 80098ec:	47b8      	blx	r7
 80098ee:	3001      	adds	r0, #1
 80098f0:	f43f af09 	beq.w	8009706 <_printf_float+0xc2>
 80098f4:	f04f 0900 	mov.w	r9, #0
 80098f8:	f104 0a1a 	add.w	sl, r4, #26
 80098fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098fe:	425b      	negs	r3, r3
 8009900:	454b      	cmp	r3, r9
 8009902:	dc01      	bgt.n	8009908 <_printf_float+0x2c4>
 8009904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009906:	e792      	b.n	800982e <_printf_float+0x1ea>
 8009908:	2301      	movs	r3, #1
 800990a:	4652      	mov	r2, sl
 800990c:	4631      	mov	r1, r6
 800990e:	4628      	mov	r0, r5
 8009910:	47b8      	blx	r7
 8009912:	3001      	adds	r0, #1
 8009914:	f43f aef7 	beq.w	8009706 <_printf_float+0xc2>
 8009918:	f109 0901 	add.w	r9, r9, #1
 800991c:	e7ee      	b.n	80098fc <_printf_float+0x2b8>
 800991e:	bf00      	nop
 8009920:	7fefffff 	.word	0x7fefffff
 8009924:	0800c1fc 	.word	0x0800c1fc
 8009928:	0800c200 	.word	0x0800c200
 800992c:	0800c208 	.word	0x0800c208
 8009930:	0800c204 	.word	0x0800c204
 8009934:	0800c20c 	.word	0x0800c20c
 8009938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800993a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800993c:	429a      	cmp	r2, r3
 800993e:	bfa8      	it	ge
 8009940:	461a      	movge	r2, r3
 8009942:	2a00      	cmp	r2, #0
 8009944:	4691      	mov	r9, r2
 8009946:	dc37      	bgt.n	80099b8 <_printf_float+0x374>
 8009948:	f04f 0b00 	mov.w	fp, #0
 800994c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009950:	f104 021a 	add.w	r2, r4, #26
 8009954:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009956:	9305      	str	r3, [sp, #20]
 8009958:	eba3 0309 	sub.w	r3, r3, r9
 800995c:	455b      	cmp	r3, fp
 800995e:	dc33      	bgt.n	80099c8 <_printf_float+0x384>
 8009960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009964:	429a      	cmp	r2, r3
 8009966:	db3b      	blt.n	80099e0 <_printf_float+0x39c>
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	07da      	lsls	r2, r3, #31
 800996c:	d438      	bmi.n	80099e0 <_printf_float+0x39c>
 800996e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009970:	9b05      	ldr	r3, [sp, #20]
 8009972:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	eba2 0901 	sub.w	r9, r2, r1
 800997a:	4599      	cmp	r9, r3
 800997c:	bfa8      	it	ge
 800997e:	4699      	movge	r9, r3
 8009980:	f1b9 0f00 	cmp.w	r9, #0
 8009984:	dc35      	bgt.n	80099f2 <_printf_float+0x3ae>
 8009986:	f04f 0800 	mov.w	r8, #0
 800998a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800998e:	f104 0a1a 	add.w	sl, r4, #26
 8009992:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009996:	1a9b      	subs	r3, r3, r2
 8009998:	eba3 0309 	sub.w	r3, r3, r9
 800999c:	4543      	cmp	r3, r8
 800999e:	f77f af79 	ble.w	8009894 <_printf_float+0x250>
 80099a2:	2301      	movs	r3, #1
 80099a4:	4652      	mov	r2, sl
 80099a6:	4631      	mov	r1, r6
 80099a8:	4628      	mov	r0, r5
 80099aa:	47b8      	blx	r7
 80099ac:	3001      	adds	r0, #1
 80099ae:	f43f aeaa 	beq.w	8009706 <_printf_float+0xc2>
 80099b2:	f108 0801 	add.w	r8, r8, #1
 80099b6:	e7ec      	b.n	8009992 <_printf_float+0x34e>
 80099b8:	4613      	mov	r3, r2
 80099ba:	4631      	mov	r1, r6
 80099bc:	4642      	mov	r2, r8
 80099be:	4628      	mov	r0, r5
 80099c0:	47b8      	blx	r7
 80099c2:	3001      	adds	r0, #1
 80099c4:	d1c0      	bne.n	8009948 <_printf_float+0x304>
 80099c6:	e69e      	b.n	8009706 <_printf_float+0xc2>
 80099c8:	2301      	movs	r3, #1
 80099ca:	4631      	mov	r1, r6
 80099cc:	4628      	mov	r0, r5
 80099ce:	9205      	str	r2, [sp, #20]
 80099d0:	47b8      	blx	r7
 80099d2:	3001      	adds	r0, #1
 80099d4:	f43f ae97 	beq.w	8009706 <_printf_float+0xc2>
 80099d8:	9a05      	ldr	r2, [sp, #20]
 80099da:	f10b 0b01 	add.w	fp, fp, #1
 80099de:	e7b9      	b.n	8009954 <_printf_float+0x310>
 80099e0:	ee18 3a10 	vmov	r3, s16
 80099e4:	4652      	mov	r2, sl
 80099e6:	4631      	mov	r1, r6
 80099e8:	4628      	mov	r0, r5
 80099ea:	47b8      	blx	r7
 80099ec:	3001      	adds	r0, #1
 80099ee:	d1be      	bne.n	800996e <_printf_float+0x32a>
 80099f0:	e689      	b.n	8009706 <_printf_float+0xc2>
 80099f2:	9a05      	ldr	r2, [sp, #20]
 80099f4:	464b      	mov	r3, r9
 80099f6:	4442      	add	r2, r8
 80099f8:	4631      	mov	r1, r6
 80099fa:	4628      	mov	r0, r5
 80099fc:	47b8      	blx	r7
 80099fe:	3001      	adds	r0, #1
 8009a00:	d1c1      	bne.n	8009986 <_printf_float+0x342>
 8009a02:	e680      	b.n	8009706 <_printf_float+0xc2>
 8009a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a06:	2a01      	cmp	r2, #1
 8009a08:	dc01      	bgt.n	8009a0e <_printf_float+0x3ca>
 8009a0a:	07db      	lsls	r3, r3, #31
 8009a0c:	d538      	bpl.n	8009a80 <_printf_float+0x43c>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	4642      	mov	r2, r8
 8009a12:	4631      	mov	r1, r6
 8009a14:	4628      	mov	r0, r5
 8009a16:	47b8      	blx	r7
 8009a18:	3001      	adds	r0, #1
 8009a1a:	f43f ae74 	beq.w	8009706 <_printf_float+0xc2>
 8009a1e:	ee18 3a10 	vmov	r3, s16
 8009a22:	4652      	mov	r2, sl
 8009a24:	4631      	mov	r1, r6
 8009a26:	4628      	mov	r0, r5
 8009a28:	47b8      	blx	r7
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	f43f ae6b 	beq.w	8009706 <_printf_float+0xc2>
 8009a30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a34:	2200      	movs	r2, #0
 8009a36:	2300      	movs	r3, #0
 8009a38:	f7f7 f84e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a3c:	b9d8      	cbnz	r0, 8009a76 <_printf_float+0x432>
 8009a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a40:	f108 0201 	add.w	r2, r8, #1
 8009a44:	3b01      	subs	r3, #1
 8009a46:	4631      	mov	r1, r6
 8009a48:	4628      	mov	r0, r5
 8009a4a:	47b8      	blx	r7
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	d10e      	bne.n	8009a6e <_printf_float+0x42a>
 8009a50:	e659      	b.n	8009706 <_printf_float+0xc2>
 8009a52:	2301      	movs	r3, #1
 8009a54:	4652      	mov	r2, sl
 8009a56:	4631      	mov	r1, r6
 8009a58:	4628      	mov	r0, r5
 8009a5a:	47b8      	blx	r7
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	f43f ae52 	beq.w	8009706 <_printf_float+0xc2>
 8009a62:	f108 0801 	add.w	r8, r8, #1
 8009a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	4543      	cmp	r3, r8
 8009a6c:	dcf1      	bgt.n	8009a52 <_printf_float+0x40e>
 8009a6e:	464b      	mov	r3, r9
 8009a70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a74:	e6dc      	b.n	8009830 <_printf_float+0x1ec>
 8009a76:	f04f 0800 	mov.w	r8, #0
 8009a7a:	f104 0a1a 	add.w	sl, r4, #26
 8009a7e:	e7f2      	b.n	8009a66 <_printf_float+0x422>
 8009a80:	2301      	movs	r3, #1
 8009a82:	4642      	mov	r2, r8
 8009a84:	e7df      	b.n	8009a46 <_printf_float+0x402>
 8009a86:	2301      	movs	r3, #1
 8009a88:	464a      	mov	r2, r9
 8009a8a:	4631      	mov	r1, r6
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	47b8      	blx	r7
 8009a90:	3001      	adds	r0, #1
 8009a92:	f43f ae38 	beq.w	8009706 <_printf_float+0xc2>
 8009a96:	f108 0801 	add.w	r8, r8, #1
 8009a9a:	68e3      	ldr	r3, [r4, #12]
 8009a9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a9e:	1a5b      	subs	r3, r3, r1
 8009aa0:	4543      	cmp	r3, r8
 8009aa2:	dcf0      	bgt.n	8009a86 <_printf_float+0x442>
 8009aa4:	e6fa      	b.n	800989c <_printf_float+0x258>
 8009aa6:	f04f 0800 	mov.w	r8, #0
 8009aaa:	f104 0919 	add.w	r9, r4, #25
 8009aae:	e7f4      	b.n	8009a9a <_printf_float+0x456>

08009ab0 <_printf_common>:
 8009ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab4:	4616      	mov	r6, r2
 8009ab6:	4699      	mov	r9, r3
 8009ab8:	688a      	ldr	r2, [r1, #8]
 8009aba:	690b      	ldr	r3, [r1, #16]
 8009abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	bfb8      	it	lt
 8009ac4:	4613      	movlt	r3, r2
 8009ac6:	6033      	str	r3, [r6, #0]
 8009ac8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009acc:	4607      	mov	r7, r0
 8009ace:	460c      	mov	r4, r1
 8009ad0:	b10a      	cbz	r2, 8009ad6 <_printf_common+0x26>
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	6033      	str	r3, [r6, #0]
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	0699      	lsls	r1, r3, #26
 8009ada:	bf42      	ittt	mi
 8009adc:	6833      	ldrmi	r3, [r6, #0]
 8009ade:	3302      	addmi	r3, #2
 8009ae0:	6033      	strmi	r3, [r6, #0]
 8009ae2:	6825      	ldr	r5, [r4, #0]
 8009ae4:	f015 0506 	ands.w	r5, r5, #6
 8009ae8:	d106      	bne.n	8009af8 <_printf_common+0x48>
 8009aea:	f104 0a19 	add.w	sl, r4, #25
 8009aee:	68e3      	ldr	r3, [r4, #12]
 8009af0:	6832      	ldr	r2, [r6, #0]
 8009af2:	1a9b      	subs	r3, r3, r2
 8009af4:	42ab      	cmp	r3, r5
 8009af6:	dc26      	bgt.n	8009b46 <_printf_common+0x96>
 8009af8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009afc:	1e13      	subs	r3, r2, #0
 8009afe:	6822      	ldr	r2, [r4, #0]
 8009b00:	bf18      	it	ne
 8009b02:	2301      	movne	r3, #1
 8009b04:	0692      	lsls	r2, r2, #26
 8009b06:	d42b      	bmi.n	8009b60 <_printf_common+0xb0>
 8009b08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b0c:	4649      	mov	r1, r9
 8009b0e:	4638      	mov	r0, r7
 8009b10:	47c0      	blx	r8
 8009b12:	3001      	adds	r0, #1
 8009b14:	d01e      	beq.n	8009b54 <_printf_common+0xa4>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	68e5      	ldr	r5, [r4, #12]
 8009b1a:	6832      	ldr	r2, [r6, #0]
 8009b1c:	f003 0306 	and.w	r3, r3, #6
 8009b20:	2b04      	cmp	r3, #4
 8009b22:	bf08      	it	eq
 8009b24:	1aad      	subeq	r5, r5, r2
 8009b26:	68a3      	ldr	r3, [r4, #8]
 8009b28:	6922      	ldr	r2, [r4, #16]
 8009b2a:	bf0c      	ite	eq
 8009b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b30:	2500      	movne	r5, #0
 8009b32:	4293      	cmp	r3, r2
 8009b34:	bfc4      	itt	gt
 8009b36:	1a9b      	subgt	r3, r3, r2
 8009b38:	18ed      	addgt	r5, r5, r3
 8009b3a:	2600      	movs	r6, #0
 8009b3c:	341a      	adds	r4, #26
 8009b3e:	42b5      	cmp	r5, r6
 8009b40:	d11a      	bne.n	8009b78 <_printf_common+0xc8>
 8009b42:	2000      	movs	r0, #0
 8009b44:	e008      	b.n	8009b58 <_printf_common+0xa8>
 8009b46:	2301      	movs	r3, #1
 8009b48:	4652      	mov	r2, sl
 8009b4a:	4649      	mov	r1, r9
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	47c0      	blx	r8
 8009b50:	3001      	adds	r0, #1
 8009b52:	d103      	bne.n	8009b5c <_printf_common+0xac>
 8009b54:	f04f 30ff 	mov.w	r0, #4294967295
 8009b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b5c:	3501      	adds	r5, #1
 8009b5e:	e7c6      	b.n	8009aee <_printf_common+0x3e>
 8009b60:	18e1      	adds	r1, r4, r3
 8009b62:	1c5a      	adds	r2, r3, #1
 8009b64:	2030      	movs	r0, #48	; 0x30
 8009b66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b6a:	4422      	add	r2, r4
 8009b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b74:	3302      	adds	r3, #2
 8009b76:	e7c7      	b.n	8009b08 <_printf_common+0x58>
 8009b78:	2301      	movs	r3, #1
 8009b7a:	4622      	mov	r2, r4
 8009b7c:	4649      	mov	r1, r9
 8009b7e:	4638      	mov	r0, r7
 8009b80:	47c0      	blx	r8
 8009b82:	3001      	adds	r0, #1
 8009b84:	d0e6      	beq.n	8009b54 <_printf_common+0xa4>
 8009b86:	3601      	adds	r6, #1
 8009b88:	e7d9      	b.n	8009b3e <_printf_common+0x8e>
	...

08009b8c <_printf_i>:
 8009b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b90:	460c      	mov	r4, r1
 8009b92:	4691      	mov	r9, r2
 8009b94:	7e27      	ldrb	r7, [r4, #24]
 8009b96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b98:	2f78      	cmp	r7, #120	; 0x78
 8009b9a:	4680      	mov	r8, r0
 8009b9c:	469a      	mov	sl, r3
 8009b9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ba2:	d807      	bhi.n	8009bb4 <_printf_i+0x28>
 8009ba4:	2f62      	cmp	r7, #98	; 0x62
 8009ba6:	d80a      	bhi.n	8009bbe <_printf_i+0x32>
 8009ba8:	2f00      	cmp	r7, #0
 8009baa:	f000 80d8 	beq.w	8009d5e <_printf_i+0x1d2>
 8009bae:	2f58      	cmp	r7, #88	; 0x58
 8009bb0:	f000 80a3 	beq.w	8009cfa <_printf_i+0x16e>
 8009bb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009bb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bbc:	e03a      	b.n	8009c34 <_printf_i+0xa8>
 8009bbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bc2:	2b15      	cmp	r3, #21
 8009bc4:	d8f6      	bhi.n	8009bb4 <_printf_i+0x28>
 8009bc6:	a001      	add	r0, pc, #4	; (adr r0, 8009bcc <_printf_i+0x40>)
 8009bc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009bcc:	08009c25 	.word	0x08009c25
 8009bd0:	08009c39 	.word	0x08009c39
 8009bd4:	08009bb5 	.word	0x08009bb5
 8009bd8:	08009bb5 	.word	0x08009bb5
 8009bdc:	08009bb5 	.word	0x08009bb5
 8009be0:	08009bb5 	.word	0x08009bb5
 8009be4:	08009c39 	.word	0x08009c39
 8009be8:	08009bb5 	.word	0x08009bb5
 8009bec:	08009bb5 	.word	0x08009bb5
 8009bf0:	08009bb5 	.word	0x08009bb5
 8009bf4:	08009bb5 	.word	0x08009bb5
 8009bf8:	08009d45 	.word	0x08009d45
 8009bfc:	08009c69 	.word	0x08009c69
 8009c00:	08009d27 	.word	0x08009d27
 8009c04:	08009bb5 	.word	0x08009bb5
 8009c08:	08009bb5 	.word	0x08009bb5
 8009c0c:	08009d67 	.word	0x08009d67
 8009c10:	08009bb5 	.word	0x08009bb5
 8009c14:	08009c69 	.word	0x08009c69
 8009c18:	08009bb5 	.word	0x08009bb5
 8009c1c:	08009bb5 	.word	0x08009bb5
 8009c20:	08009d2f 	.word	0x08009d2f
 8009c24:	680b      	ldr	r3, [r1, #0]
 8009c26:	1d1a      	adds	r2, r3, #4
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	600a      	str	r2, [r1, #0]
 8009c2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c34:	2301      	movs	r3, #1
 8009c36:	e0a3      	b.n	8009d80 <_printf_i+0x1f4>
 8009c38:	6825      	ldr	r5, [r4, #0]
 8009c3a:	6808      	ldr	r0, [r1, #0]
 8009c3c:	062e      	lsls	r6, r5, #24
 8009c3e:	f100 0304 	add.w	r3, r0, #4
 8009c42:	d50a      	bpl.n	8009c5a <_printf_i+0xce>
 8009c44:	6805      	ldr	r5, [r0, #0]
 8009c46:	600b      	str	r3, [r1, #0]
 8009c48:	2d00      	cmp	r5, #0
 8009c4a:	da03      	bge.n	8009c54 <_printf_i+0xc8>
 8009c4c:	232d      	movs	r3, #45	; 0x2d
 8009c4e:	426d      	negs	r5, r5
 8009c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c54:	485e      	ldr	r0, [pc, #376]	; (8009dd0 <_printf_i+0x244>)
 8009c56:	230a      	movs	r3, #10
 8009c58:	e019      	b.n	8009c8e <_printf_i+0x102>
 8009c5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c5e:	6805      	ldr	r5, [r0, #0]
 8009c60:	600b      	str	r3, [r1, #0]
 8009c62:	bf18      	it	ne
 8009c64:	b22d      	sxthne	r5, r5
 8009c66:	e7ef      	b.n	8009c48 <_printf_i+0xbc>
 8009c68:	680b      	ldr	r3, [r1, #0]
 8009c6a:	6825      	ldr	r5, [r4, #0]
 8009c6c:	1d18      	adds	r0, r3, #4
 8009c6e:	6008      	str	r0, [r1, #0]
 8009c70:	0628      	lsls	r0, r5, #24
 8009c72:	d501      	bpl.n	8009c78 <_printf_i+0xec>
 8009c74:	681d      	ldr	r5, [r3, #0]
 8009c76:	e002      	b.n	8009c7e <_printf_i+0xf2>
 8009c78:	0669      	lsls	r1, r5, #25
 8009c7a:	d5fb      	bpl.n	8009c74 <_printf_i+0xe8>
 8009c7c:	881d      	ldrh	r5, [r3, #0]
 8009c7e:	4854      	ldr	r0, [pc, #336]	; (8009dd0 <_printf_i+0x244>)
 8009c80:	2f6f      	cmp	r7, #111	; 0x6f
 8009c82:	bf0c      	ite	eq
 8009c84:	2308      	moveq	r3, #8
 8009c86:	230a      	movne	r3, #10
 8009c88:	2100      	movs	r1, #0
 8009c8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c8e:	6866      	ldr	r6, [r4, #4]
 8009c90:	60a6      	str	r6, [r4, #8]
 8009c92:	2e00      	cmp	r6, #0
 8009c94:	bfa2      	ittt	ge
 8009c96:	6821      	ldrge	r1, [r4, #0]
 8009c98:	f021 0104 	bicge.w	r1, r1, #4
 8009c9c:	6021      	strge	r1, [r4, #0]
 8009c9e:	b90d      	cbnz	r5, 8009ca4 <_printf_i+0x118>
 8009ca0:	2e00      	cmp	r6, #0
 8009ca2:	d04d      	beq.n	8009d40 <_printf_i+0x1b4>
 8009ca4:	4616      	mov	r6, r2
 8009ca6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009caa:	fb03 5711 	mls	r7, r3, r1, r5
 8009cae:	5dc7      	ldrb	r7, [r0, r7]
 8009cb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cb4:	462f      	mov	r7, r5
 8009cb6:	42bb      	cmp	r3, r7
 8009cb8:	460d      	mov	r5, r1
 8009cba:	d9f4      	bls.n	8009ca6 <_printf_i+0x11a>
 8009cbc:	2b08      	cmp	r3, #8
 8009cbe:	d10b      	bne.n	8009cd8 <_printf_i+0x14c>
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	07df      	lsls	r7, r3, #31
 8009cc4:	d508      	bpl.n	8009cd8 <_printf_i+0x14c>
 8009cc6:	6923      	ldr	r3, [r4, #16]
 8009cc8:	6861      	ldr	r1, [r4, #4]
 8009cca:	4299      	cmp	r1, r3
 8009ccc:	bfde      	ittt	le
 8009cce:	2330      	movle	r3, #48	; 0x30
 8009cd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009cd8:	1b92      	subs	r2, r2, r6
 8009cda:	6122      	str	r2, [r4, #16]
 8009cdc:	f8cd a000 	str.w	sl, [sp]
 8009ce0:	464b      	mov	r3, r9
 8009ce2:	aa03      	add	r2, sp, #12
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	4640      	mov	r0, r8
 8009ce8:	f7ff fee2 	bl	8009ab0 <_printf_common>
 8009cec:	3001      	adds	r0, #1
 8009cee:	d14c      	bne.n	8009d8a <_printf_i+0x1fe>
 8009cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf4:	b004      	add	sp, #16
 8009cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cfa:	4835      	ldr	r0, [pc, #212]	; (8009dd0 <_printf_i+0x244>)
 8009cfc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	680e      	ldr	r6, [r1, #0]
 8009d04:	061f      	lsls	r7, r3, #24
 8009d06:	f856 5b04 	ldr.w	r5, [r6], #4
 8009d0a:	600e      	str	r6, [r1, #0]
 8009d0c:	d514      	bpl.n	8009d38 <_printf_i+0x1ac>
 8009d0e:	07d9      	lsls	r1, r3, #31
 8009d10:	bf44      	itt	mi
 8009d12:	f043 0320 	orrmi.w	r3, r3, #32
 8009d16:	6023      	strmi	r3, [r4, #0]
 8009d18:	b91d      	cbnz	r5, 8009d22 <_printf_i+0x196>
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	f023 0320 	bic.w	r3, r3, #32
 8009d20:	6023      	str	r3, [r4, #0]
 8009d22:	2310      	movs	r3, #16
 8009d24:	e7b0      	b.n	8009c88 <_printf_i+0xfc>
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	f043 0320 	orr.w	r3, r3, #32
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	2378      	movs	r3, #120	; 0x78
 8009d30:	4828      	ldr	r0, [pc, #160]	; (8009dd4 <_printf_i+0x248>)
 8009d32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d36:	e7e3      	b.n	8009d00 <_printf_i+0x174>
 8009d38:	065e      	lsls	r6, r3, #25
 8009d3a:	bf48      	it	mi
 8009d3c:	b2ad      	uxthmi	r5, r5
 8009d3e:	e7e6      	b.n	8009d0e <_printf_i+0x182>
 8009d40:	4616      	mov	r6, r2
 8009d42:	e7bb      	b.n	8009cbc <_printf_i+0x130>
 8009d44:	680b      	ldr	r3, [r1, #0]
 8009d46:	6826      	ldr	r6, [r4, #0]
 8009d48:	6960      	ldr	r0, [r4, #20]
 8009d4a:	1d1d      	adds	r5, r3, #4
 8009d4c:	600d      	str	r5, [r1, #0]
 8009d4e:	0635      	lsls	r5, r6, #24
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	d501      	bpl.n	8009d58 <_printf_i+0x1cc>
 8009d54:	6018      	str	r0, [r3, #0]
 8009d56:	e002      	b.n	8009d5e <_printf_i+0x1d2>
 8009d58:	0671      	lsls	r1, r6, #25
 8009d5a:	d5fb      	bpl.n	8009d54 <_printf_i+0x1c8>
 8009d5c:	8018      	strh	r0, [r3, #0]
 8009d5e:	2300      	movs	r3, #0
 8009d60:	6123      	str	r3, [r4, #16]
 8009d62:	4616      	mov	r6, r2
 8009d64:	e7ba      	b.n	8009cdc <_printf_i+0x150>
 8009d66:	680b      	ldr	r3, [r1, #0]
 8009d68:	1d1a      	adds	r2, r3, #4
 8009d6a:	600a      	str	r2, [r1, #0]
 8009d6c:	681e      	ldr	r6, [r3, #0]
 8009d6e:	6862      	ldr	r2, [r4, #4]
 8009d70:	2100      	movs	r1, #0
 8009d72:	4630      	mov	r0, r6
 8009d74:	f7f6 fa3c 	bl	80001f0 <memchr>
 8009d78:	b108      	cbz	r0, 8009d7e <_printf_i+0x1f2>
 8009d7a:	1b80      	subs	r0, r0, r6
 8009d7c:	6060      	str	r0, [r4, #4]
 8009d7e:	6863      	ldr	r3, [r4, #4]
 8009d80:	6123      	str	r3, [r4, #16]
 8009d82:	2300      	movs	r3, #0
 8009d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d88:	e7a8      	b.n	8009cdc <_printf_i+0x150>
 8009d8a:	6923      	ldr	r3, [r4, #16]
 8009d8c:	4632      	mov	r2, r6
 8009d8e:	4649      	mov	r1, r9
 8009d90:	4640      	mov	r0, r8
 8009d92:	47d0      	blx	sl
 8009d94:	3001      	adds	r0, #1
 8009d96:	d0ab      	beq.n	8009cf0 <_printf_i+0x164>
 8009d98:	6823      	ldr	r3, [r4, #0]
 8009d9a:	079b      	lsls	r3, r3, #30
 8009d9c:	d413      	bmi.n	8009dc6 <_printf_i+0x23a>
 8009d9e:	68e0      	ldr	r0, [r4, #12]
 8009da0:	9b03      	ldr	r3, [sp, #12]
 8009da2:	4298      	cmp	r0, r3
 8009da4:	bfb8      	it	lt
 8009da6:	4618      	movlt	r0, r3
 8009da8:	e7a4      	b.n	8009cf4 <_printf_i+0x168>
 8009daa:	2301      	movs	r3, #1
 8009dac:	4632      	mov	r2, r6
 8009dae:	4649      	mov	r1, r9
 8009db0:	4640      	mov	r0, r8
 8009db2:	47d0      	blx	sl
 8009db4:	3001      	adds	r0, #1
 8009db6:	d09b      	beq.n	8009cf0 <_printf_i+0x164>
 8009db8:	3501      	adds	r5, #1
 8009dba:	68e3      	ldr	r3, [r4, #12]
 8009dbc:	9903      	ldr	r1, [sp, #12]
 8009dbe:	1a5b      	subs	r3, r3, r1
 8009dc0:	42ab      	cmp	r3, r5
 8009dc2:	dcf2      	bgt.n	8009daa <_printf_i+0x21e>
 8009dc4:	e7eb      	b.n	8009d9e <_printf_i+0x212>
 8009dc6:	2500      	movs	r5, #0
 8009dc8:	f104 0619 	add.w	r6, r4, #25
 8009dcc:	e7f5      	b.n	8009dba <_printf_i+0x22e>
 8009dce:	bf00      	nop
 8009dd0:	0800c20e 	.word	0x0800c20e
 8009dd4:	0800c21f 	.word	0x0800c21f

08009dd8 <iprintf>:
 8009dd8:	b40f      	push	{r0, r1, r2, r3}
 8009dda:	4b0a      	ldr	r3, [pc, #40]	; (8009e04 <iprintf+0x2c>)
 8009ddc:	b513      	push	{r0, r1, r4, lr}
 8009dde:	681c      	ldr	r4, [r3, #0]
 8009de0:	b124      	cbz	r4, 8009dec <iprintf+0x14>
 8009de2:	69a3      	ldr	r3, [r4, #24]
 8009de4:	b913      	cbnz	r3, 8009dec <iprintf+0x14>
 8009de6:	4620      	mov	r0, r4
 8009de8:	f7ff fa56 	bl	8009298 <__sinit>
 8009dec:	ab05      	add	r3, sp, #20
 8009dee:	9a04      	ldr	r2, [sp, #16]
 8009df0:	68a1      	ldr	r1, [r4, #8]
 8009df2:	9301      	str	r3, [sp, #4]
 8009df4:	4620      	mov	r0, r4
 8009df6:	f001 fef3 	bl	800bbe0 <_vfiprintf_r>
 8009dfa:	b002      	add	sp, #8
 8009dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e00:	b004      	add	sp, #16
 8009e02:	4770      	bx	lr
 8009e04:	20000018 	.word	0x20000018

08009e08 <cleanup_glue>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	6809      	ldr	r1, [r1, #0]
 8009e0e:	4605      	mov	r5, r0
 8009e10:	b109      	cbz	r1, 8009e16 <cleanup_glue+0xe>
 8009e12:	f7ff fff9 	bl	8009e08 <cleanup_glue>
 8009e16:	4621      	mov	r1, r4
 8009e18:	4628      	mov	r0, r5
 8009e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e1e:	f001 bd09 	b.w	800b834 <_free_r>
	...

08009e24 <_reclaim_reent>:
 8009e24:	4b2c      	ldr	r3, [pc, #176]	; (8009ed8 <_reclaim_reent+0xb4>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4283      	cmp	r3, r0
 8009e2a:	b570      	push	{r4, r5, r6, lr}
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	d051      	beq.n	8009ed4 <_reclaim_reent+0xb0>
 8009e30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009e32:	b143      	cbz	r3, 8009e46 <_reclaim_reent+0x22>
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d14a      	bne.n	8009ed0 <_reclaim_reent+0xac>
 8009e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e3c:	6819      	ldr	r1, [r3, #0]
 8009e3e:	b111      	cbz	r1, 8009e46 <_reclaim_reent+0x22>
 8009e40:	4620      	mov	r0, r4
 8009e42:	f001 fcf7 	bl	800b834 <_free_r>
 8009e46:	6961      	ldr	r1, [r4, #20]
 8009e48:	b111      	cbz	r1, 8009e50 <_reclaim_reent+0x2c>
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f001 fcf2 	bl	800b834 <_free_r>
 8009e50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009e52:	b111      	cbz	r1, 8009e5a <_reclaim_reent+0x36>
 8009e54:	4620      	mov	r0, r4
 8009e56:	f001 fced 	bl	800b834 <_free_r>
 8009e5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009e5c:	b111      	cbz	r1, 8009e64 <_reclaim_reent+0x40>
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f001 fce8 	bl	800b834 <_free_r>
 8009e64:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009e66:	b111      	cbz	r1, 8009e6e <_reclaim_reent+0x4a>
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f001 fce3 	bl	800b834 <_free_r>
 8009e6e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009e70:	b111      	cbz	r1, 8009e78 <_reclaim_reent+0x54>
 8009e72:	4620      	mov	r0, r4
 8009e74:	f001 fcde 	bl	800b834 <_free_r>
 8009e78:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009e7a:	b111      	cbz	r1, 8009e82 <_reclaim_reent+0x5e>
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f001 fcd9 	bl	800b834 <_free_r>
 8009e82:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009e84:	b111      	cbz	r1, 8009e8c <_reclaim_reent+0x68>
 8009e86:	4620      	mov	r0, r4
 8009e88:	f001 fcd4 	bl	800b834 <_free_r>
 8009e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e8e:	b111      	cbz	r1, 8009e96 <_reclaim_reent+0x72>
 8009e90:	4620      	mov	r0, r4
 8009e92:	f001 fccf 	bl	800b834 <_free_r>
 8009e96:	69a3      	ldr	r3, [r4, #24]
 8009e98:	b1e3      	cbz	r3, 8009ed4 <_reclaim_reent+0xb0>
 8009e9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	4798      	blx	r3
 8009ea0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009ea2:	b1b9      	cbz	r1, 8009ed4 <_reclaim_reent+0xb0>
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009eaa:	f7ff bfad 	b.w	8009e08 <cleanup_glue>
 8009eae:	5949      	ldr	r1, [r1, r5]
 8009eb0:	b941      	cbnz	r1, 8009ec4 <_reclaim_reent+0xa0>
 8009eb2:	3504      	adds	r5, #4
 8009eb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eb6:	2d80      	cmp	r5, #128	; 0x80
 8009eb8:	68d9      	ldr	r1, [r3, #12]
 8009eba:	d1f8      	bne.n	8009eae <_reclaim_reent+0x8a>
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f001 fcb9 	bl	800b834 <_free_r>
 8009ec2:	e7ba      	b.n	8009e3a <_reclaim_reent+0x16>
 8009ec4:	680e      	ldr	r6, [r1, #0]
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f001 fcb4 	bl	800b834 <_free_r>
 8009ecc:	4631      	mov	r1, r6
 8009ece:	e7ef      	b.n	8009eb0 <_reclaim_reent+0x8c>
 8009ed0:	2500      	movs	r5, #0
 8009ed2:	e7ef      	b.n	8009eb4 <_reclaim_reent+0x90>
 8009ed4:	bd70      	pop	{r4, r5, r6, pc}
 8009ed6:	bf00      	nop
 8009ed8:	20000018 	.word	0x20000018

08009edc <_sbrk_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	4d06      	ldr	r5, [pc, #24]	; (8009ef8 <_sbrk_r+0x1c>)
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	4608      	mov	r0, r1
 8009ee6:	602b      	str	r3, [r5, #0]
 8009ee8:	f7f8 fbae 	bl	8002648 <_sbrk>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d102      	bne.n	8009ef6 <_sbrk_r+0x1a>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	b103      	cbz	r3, 8009ef6 <_sbrk_r+0x1a>
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
 8009ef8:	2000528c 	.word	0x2000528c

08009efc <siprintf>:
 8009efc:	b40e      	push	{r1, r2, r3}
 8009efe:	b500      	push	{lr}
 8009f00:	b09c      	sub	sp, #112	; 0x70
 8009f02:	ab1d      	add	r3, sp, #116	; 0x74
 8009f04:	9002      	str	r0, [sp, #8]
 8009f06:	9006      	str	r0, [sp, #24]
 8009f08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f0c:	4809      	ldr	r0, [pc, #36]	; (8009f34 <siprintf+0x38>)
 8009f0e:	9107      	str	r1, [sp, #28]
 8009f10:	9104      	str	r1, [sp, #16]
 8009f12:	4909      	ldr	r1, [pc, #36]	; (8009f38 <siprintf+0x3c>)
 8009f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f18:	9105      	str	r1, [sp, #20]
 8009f1a:	6800      	ldr	r0, [r0, #0]
 8009f1c:	9301      	str	r3, [sp, #4]
 8009f1e:	a902      	add	r1, sp, #8
 8009f20:	f001 fd34 	bl	800b98c <_svfiprintf_r>
 8009f24:	9b02      	ldr	r3, [sp, #8]
 8009f26:	2200      	movs	r2, #0
 8009f28:	701a      	strb	r2, [r3, #0]
 8009f2a:	b01c      	add	sp, #112	; 0x70
 8009f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f30:	b003      	add	sp, #12
 8009f32:	4770      	bx	lr
 8009f34:	20000018 	.word	0x20000018
 8009f38:	ffff0208 	.word	0xffff0208

08009f3c <__sread>:
 8009f3c:	b510      	push	{r4, lr}
 8009f3e:	460c      	mov	r4, r1
 8009f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f44:	f001 ff7c 	bl	800be40 <_read_r>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	bfab      	itete	ge
 8009f4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8009f50:	181b      	addge	r3, r3, r0
 8009f52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f56:	bfac      	ite	ge
 8009f58:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f5a:	81a3      	strhlt	r3, [r4, #12]
 8009f5c:	bd10      	pop	{r4, pc}

08009f5e <__swrite>:
 8009f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f62:	461f      	mov	r7, r3
 8009f64:	898b      	ldrh	r3, [r1, #12]
 8009f66:	05db      	lsls	r3, r3, #23
 8009f68:	4605      	mov	r5, r0
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	4616      	mov	r6, r2
 8009f6e:	d505      	bpl.n	8009f7c <__swrite+0x1e>
 8009f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f74:	2302      	movs	r3, #2
 8009f76:	2200      	movs	r2, #0
 8009f78:	f001 f844 	bl	800b004 <_lseek_r>
 8009f7c:	89a3      	ldrh	r3, [r4, #12]
 8009f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f86:	81a3      	strh	r3, [r4, #12]
 8009f88:	4632      	mov	r2, r6
 8009f8a:	463b      	mov	r3, r7
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f92:	f000 b869 	b.w	800a068 <_write_r>

08009f96 <__sseek>:
 8009f96:	b510      	push	{r4, lr}
 8009f98:	460c      	mov	r4, r1
 8009f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f9e:	f001 f831 	bl	800b004 <_lseek_r>
 8009fa2:	1c43      	adds	r3, r0, #1
 8009fa4:	89a3      	ldrh	r3, [r4, #12]
 8009fa6:	bf15      	itete	ne
 8009fa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009faa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009fae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009fb2:	81a3      	strheq	r3, [r4, #12]
 8009fb4:	bf18      	it	ne
 8009fb6:	81a3      	strhne	r3, [r4, #12]
 8009fb8:	bd10      	pop	{r4, pc}

08009fba <__sclose>:
 8009fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fbe:	f000 b8d3 	b.w	800a168 <_close_r>
	...

08009fc4 <__swbuf_r>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	460e      	mov	r6, r1
 8009fc8:	4614      	mov	r4, r2
 8009fca:	4605      	mov	r5, r0
 8009fcc:	b118      	cbz	r0, 8009fd6 <__swbuf_r+0x12>
 8009fce:	6983      	ldr	r3, [r0, #24]
 8009fd0:	b90b      	cbnz	r3, 8009fd6 <__swbuf_r+0x12>
 8009fd2:	f7ff f961 	bl	8009298 <__sinit>
 8009fd6:	4b21      	ldr	r3, [pc, #132]	; (800a05c <__swbuf_r+0x98>)
 8009fd8:	429c      	cmp	r4, r3
 8009fda:	d12b      	bne.n	800a034 <__swbuf_r+0x70>
 8009fdc:	686c      	ldr	r4, [r5, #4]
 8009fde:	69a3      	ldr	r3, [r4, #24]
 8009fe0:	60a3      	str	r3, [r4, #8]
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	071a      	lsls	r2, r3, #28
 8009fe6:	d52f      	bpl.n	800a048 <__swbuf_r+0x84>
 8009fe8:	6923      	ldr	r3, [r4, #16]
 8009fea:	b36b      	cbz	r3, 800a048 <__swbuf_r+0x84>
 8009fec:	6923      	ldr	r3, [r4, #16]
 8009fee:	6820      	ldr	r0, [r4, #0]
 8009ff0:	1ac0      	subs	r0, r0, r3
 8009ff2:	6963      	ldr	r3, [r4, #20]
 8009ff4:	b2f6      	uxtb	r6, r6
 8009ff6:	4283      	cmp	r3, r0
 8009ff8:	4637      	mov	r7, r6
 8009ffa:	dc04      	bgt.n	800a006 <__swbuf_r+0x42>
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	4628      	mov	r0, r5
 800a000:	f000 ffc0 	bl	800af84 <_fflush_r>
 800a004:	bb30      	cbnz	r0, 800a054 <__swbuf_r+0x90>
 800a006:	68a3      	ldr	r3, [r4, #8]
 800a008:	3b01      	subs	r3, #1
 800a00a:	60a3      	str	r3, [r4, #8]
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	1c5a      	adds	r2, r3, #1
 800a010:	6022      	str	r2, [r4, #0]
 800a012:	701e      	strb	r6, [r3, #0]
 800a014:	6963      	ldr	r3, [r4, #20]
 800a016:	3001      	adds	r0, #1
 800a018:	4283      	cmp	r3, r0
 800a01a:	d004      	beq.n	800a026 <__swbuf_r+0x62>
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	07db      	lsls	r3, r3, #31
 800a020:	d506      	bpl.n	800a030 <__swbuf_r+0x6c>
 800a022:	2e0a      	cmp	r6, #10
 800a024:	d104      	bne.n	800a030 <__swbuf_r+0x6c>
 800a026:	4621      	mov	r1, r4
 800a028:	4628      	mov	r0, r5
 800a02a:	f000 ffab 	bl	800af84 <_fflush_r>
 800a02e:	b988      	cbnz	r0, 800a054 <__swbuf_r+0x90>
 800a030:	4638      	mov	r0, r7
 800a032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a034:	4b0a      	ldr	r3, [pc, #40]	; (800a060 <__swbuf_r+0x9c>)
 800a036:	429c      	cmp	r4, r3
 800a038:	d101      	bne.n	800a03e <__swbuf_r+0x7a>
 800a03a:	68ac      	ldr	r4, [r5, #8]
 800a03c:	e7cf      	b.n	8009fde <__swbuf_r+0x1a>
 800a03e:	4b09      	ldr	r3, [pc, #36]	; (800a064 <__swbuf_r+0xa0>)
 800a040:	429c      	cmp	r4, r3
 800a042:	bf08      	it	eq
 800a044:	68ec      	ldreq	r4, [r5, #12]
 800a046:	e7ca      	b.n	8009fde <__swbuf_r+0x1a>
 800a048:	4621      	mov	r1, r4
 800a04a:	4628      	mov	r0, r5
 800a04c:	f000 f81e 	bl	800a08c <__swsetup_r>
 800a050:	2800      	cmp	r0, #0
 800a052:	d0cb      	beq.n	8009fec <__swbuf_r+0x28>
 800a054:	f04f 37ff 	mov.w	r7, #4294967295
 800a058:	e7ea      	b.n	800a030 <__swbuf_r+0x6c>
 800a05a:	bf00      	nop
 800a05c:	0800c1b8 	.word	0x0800c1b8
 800a060:	0800c1d8 	.word	0x0800c1d8
 800a064:	0800c198 	.word	0x0800c198

0800a068 <_write_r>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	4d07      	ldr	r5, [pc, #28]	; (800a088 <_write_r+0x20>)
 800a06c:	4604      	mov	r4, r0
 800a06e:	4608      	mov	r0, r1
 800a070:	4611      	mov	r1, r2
 800a072:	2200      	movs	r2, #0
 800a074:	602a      	str	r2, [r5, #0]
 800a076:	461a      	mov	r2, r3
 800a078:	f7f8 fa95 	bl	80025a6 <_write>
 800a07c:	1c43      	adds	r3, r0, #1
 800a07e:	d102      	bne.n	800a086 <_write_r+0x1e>
 800a080:	682b      	ldr	r3, [r5, #0]
 800a082:	b103      	cbz	r3, 800a086 <_write_r+0x1e>
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	bd38      	pop	{r3, r4, r5, pc}
 800a088:	2000528c 	.word	0x2000528c

0800a08c <__swsetup_r>:
 800a08c:	4b32      	ldr	r3, [pc, #200]	; (800a158 <__swsetup_r+0xcc>)
 800a08e:	b570      	push	{r4, r5, r6, lr}
 800a090:	681d      	ldr	r5, [r3, #0]
 800a092:	4606      	mov	r6, r0
 800a094:	460c      	mov	r4, r1
 800a096:	b125      	cbz	r5, 800a0a2 <__swsetup_r+0x16>
 800a098:	69ab      	ldr	r3, [r5, #24]
 800a09a:	b913      	cbnz	r3, 800a0a2 <__swsetup_r+0x16>
 800a09c:	4628      	mov	r0, r5
 800a09e:	f7ff f8fb 	bl	8009298 <__sinit>
 800a0a2:	4b2e      	ldr	r3, [pc, #184]	; (800a15c <__swsetup_r+0xd0>)
 800a0a4:	429c      	cmp	r4, r3
 800a0a6:	d10f      	bne.n	800a0c8 <__swsetup_r+0x3c>
 800a0a8:	686c      	ldr	r4, [r5, #4]
 800a0aa:	89a3      	ldrh	r3, [r4, #12]
 800a0ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0b0:	0719      	lsls	r1, r3, #28
 800a0b2:	d42c      	bmi.n	800a10e <__swsetup_r+0x82>
 800a0b4:	06dd      	lsls	r5, r3, #27
 800a0b6:	d411      	bmi.n	800a0dc <__swsetup_r+0x50>
 800a0b8:	2309      	movs	r3, #9
 800a0ba:	6033      	str	r3, [r6, #0]
 800a0bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0c0:	81a3      	strh	r3, [r4, #12]
 800a0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c6:	e03e      	b.n	800a146 <__swsetup_r+0xba>
 800a0c8:	4b25      	ldr	r3, [pc, #148]	; (800a160 <__swsetup_r+0xd4>)
 800a0ca:	429c      	cmp	r4, r3
 800a0cc:	d101      	bne.n	800a0d2 <__swsetup_r+0x46>
 800a0ce:	68ac      	ldr	r4, [r5, #8]
 800a0d0:	e7eb      	b.n	800a0aa <__swsetup_r+0x1e>
 800a0d2:	4b24      	ldr	r3, [pc, #144]	; (800a164 <__swsetup_r+0xd8>)
 800a0d4:	429c      	cmp	r4, r3
 800a0d6:	bf08      	it	eq
 800a0d8:	68ec      	ldreq	r4, [r5, #12]
 800a0da:	e7e6      	b.n	800a0aa <__swsetup_r+0x1e>
 800a0dc:	0758      	lsls	r0, r3, #29
 800a0de:	d512      	bpl.n	800a106 <__swsetup_r+0x7a>
 800a0e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0e2:	b141      	cbz	r1, 800a0f6 <__swsetup_r+0x6a>
 800a0e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0e8:	4299      	cmp	r1, r3
 800a0ea:	d002      	beq.n	800a0f2 <__swsetup_r+0x66>
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f001 fba1 	bl	800b834 <_free_r>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	6363      	str	r3, [r4, #52]	; 0x34
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0fc:	81a3      	strh	r3, [r4, #12]
 800a0fe:	2300      	movs	r3, #0
 800a100:	6063      	str	r3, [r4, #4]
 800a102:	6923      	ldr	r3, [r4, #16]
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	89a3      	ldrh	r3, [r4, #12]
 800a108:	f043 0308 	orr.w	r3, r3, #8
 800a10c:	81a3      	strh	r3, [r4, #12]
 800a10e:	6923      	ldr	r3, [r4, #16]
 800a110:	b94b      	cbnz	r3, 800a126 <__swsetup_r+0x9a>
 800a112:	89a3      	ldrh	r3, [r4, #12]
 800a114:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a11c:	d003      	beq.n	800a126 <__swsetup_r+0x9a>
 800a11e:	4621      	mov	r1, r4
 800a120:	4630      	mov	r0, r6
 800a122:	f000 ffa5 	bl	800b070 <__smakebuf_r>
 800a126:	89a0      	ldrh	r0, [r4, #12]
 800a128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a12c:	f010 0301 	ands.w	r3, r0, #1
 800a130:	d00a      	beq.n	800a148 <__swsetup_r+0xbc>
 800a132:	2300      	movs	r3, #0
 800a134:	60a3      	str	r3, [r4, #8]
 800a136:	6963      	ldr	r3, [r4, #20]
 800a138:	425b      	negs	r3, r3
 800a13a:	61a3      	str	r3, [r4, #24]
 800a13c:	6923      	ldr	r3, [r4, #16]
 800a13e:	b943      	cbnz	r3, 800a152 <__swsetup_r+0xc6>
 800a140:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a144:	d1ba      	bne.n	800a0bc <__swsetup_r+0x30>
 800a146:	bd70      	pop	{r4, r5, r6, pc}
 800a148:	0781      	lsls	r1, r0, #30
 800a14a:	bf58      	it	pl
 800a14c:	6963      	ldrpl	r3, [r4, #20]
 800a14e:	60a3      	str	r3, [r4, #8]
 800a150:	e7f4      	b.n	800a13c <__swsetup_r+0xb0>
 800a152:	2000      	movs	r0, #0
 800a154:	e7f7      	b.n	800a146 <__swsetup_r+0xba>
 800a156:	bf00      	nop
 800a158:	20000018 	.word	0x20000018
 800a15c:	0800c1b8 	.word	0x0800c1b8
 800a160:	0800c1d8 	.word	0x0800c1d8
 800a164:	0800c198 	.word	0x0800c198

0800a168 <_close_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	4d06      	ldr	r5, [pc, #24]	; (800a184 <_close_r+0x1c>)
 800a16c:	2300      	movs	r3, #0
 800a16e:	4604      	mov	r4, r0
 800a170:	4608      	mov	r0, r1
 800a172:	602b      	str	r3, [r5, #0]
 800a174:	f7f8 fa33 	bl	80025de <_close>
 800a178:	1c43      	adds	r3, r0, #1
 800a17a:	d102      	bne.n	800a182 <_close_r+0x1a>
 800a17c:	682b      	ldr	r3, [r5, #0]
 800a17e:	b103      	cbz	r3, 800a182 <_close_r+0x1a>
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	2000528c 	.word	0x2000528c

0800a188 <quorem>:
 800a188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	6903      	ldr	r3, [r0, #16]
 800a18e:	690c      	ldr	r4, [r1, #16]
 800a190:	42a3      	cmp	r3, r4
 800a192:	4607      	mov	r7, r0
 800a194:	f2c0 8081 	blt.w	800a29a <quorem+0x112>
 800a198:	3c01      	subs	r4, #1
 800a19a:	f101 0814 	add.w	r8, r1, #20
 800a19e:	f100 0514 	add.w	r5, r0, #20
 800a1a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1a6:	9301      	str	r3, [sp, #4]
 800a1a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1c0:	d331      	bcc.n	800a226 <quorem+0x9e>
 800a1c2:	f04f 0e00 	mov.w	lr, #0
 800a1c6:	4640      	mov	r0, r8
 800a1c8:	46ac      	mov	ip, r5
 800a1ca:	46f2      	mov	sl, lr
 800a1cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1d0:	b293      	uxth	r3, r2
 800a1d2:	fb06 e303 	mla	r3, r6, r3, lr
 800a1d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	ebaa 0303 	sub.w	r3, sl, r3
 800a1e0:	0c12      	lsrs	r2, r2, #16
 800a1e2:	f8dc a000 	ldr.w	sl, [ip]
 800a1e6:	fb06 e202 	mla	r2, r6, r2, lr
 800a1ea:	fa13 f38a 	uxtah	r3, r3, sl
 800a1ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1f2:	fa1f fa82 	uxth.w	sl, r2
 800a1f6:	f8dc 2000 	ldr.w	r2, [ip]
 800a1fa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a1fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a202:	b29b      	uxth	r3, r3
 800a204:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a208:	4581      	cmp	r9, r0
 800a20a:	f84c 3b04 	str.w	r3, [ip], #4
 800a20e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a212:	d2db      	bcs.n	800a1cc <quorem+0x44>
 800a214:	f855 300b 	ldr.w	r3, [r5, fp]
 800a218:	b92b      	cbnz	r3, 800a226 <quorem+0x9e>
 800a21a:	9b01      	ldr	r3, [sp, #4]
 800a21c:	3b04      	subs	r3, #4
 800a21e:	429d      	cmp	r5, r3
 800a220:	461a      	mov	r2, r3
 800a222:	d32e      	bcc.n	800a282 <quorem+0xfa>
 800a224:	613c      	str	r4, [r7, #16]
 800a226:	4638      	mov	r0, r7
 800a228:	f001 f9f4 	bl	800b614 <__mcmp>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	db24      	blt.n	800a27a <quorem+0xf2>
 800a230:	3601      	adds	r6, #1
 800a232:	4628      	mov	r0, r5
 800a234:	f04f 0c00 	mov.w	ip, #0
 800a238:	f858 2b04 	ldr.w	r2, [r8], #4
 800a23c:	f8d0 e000 	ldr.w	lr, [r0]
 800a240:	b293      	uxth	r3, r2
 800a242:	ebac 0303 	sub.w	r3, ip, r3
 800a246:	0c12      	lsrs	r2, r2, #16
 800a248:	fa13 f38e 	uxtah	r3, r3, lr
 800a24c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a250:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a254:	b29b      	uxth	r3, r3
 800a256:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a25a:	45c1      	cmp	r9, r8
 800a25c:	f840 3b04 	str.w	r3, [r0], #4
 800a260:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a264:	d2e8      	bcs.n	800a238 <quorem+0xb0>
 800a266:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a26a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a26e:	b922      	cbnz	r2, 800a27a <quorem+0xf2>
 800a270:	3b04      	subs	r3, #4
 800a272:	429d      	cmp	r5, r3
 800a274:	461a      	mov	r2, r3
 800a276:	d30a      	bcc.n	800a28e <quorem+0x106>
 800a278:	613c      	str	r4, [r7, #16]
 800a27a:	4630      	mov	r0, r6
 800a27c:	b003      	add	sp, #12
 800a27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a282:	6812      	ldr	r2, [r2, #0]
 800a284:	3b04      	subs	r3, #4
 800a286:	2a00      	cmp	r2, #0
 800a288:	d1cc      	bne.n	800a224 <quorem+0x9c>
 800a28a:	3c01      	subs	r4, #1
 800a28c:	e7c7      	b.n	800a21e <quorem+0x96>
 800a28e:	6812      	ldr	r2, [r2, #0]
 800a290:	3b04      	subs	r3, #4
 800a292:	2a00      	cmp	r2, #0
 800a294:	d1f0      	bne.n	800a278 <quorem+0xf0>
 800a296:	3c01      	subs	r4, #1
 800a298:	e7eb      	b.n	800a272 <quorem+0xea>
 800a29a:	2000      	movs	r0, #0
 800a29c:	e7ee      	b.n	800a27c <quorem+0xf4>
	...

0800a2a0 <_dtoa_r>:
 800a2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	ed2d 8b02 	vpush	{d8}
 800a2a8:	ec57 6b10 	vmov	r6, r7, d0
 800a2ac:	b095      	sub	sp, #84	; 0x54
 800a2ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a2b4:	9105      	str	r1, [sp, #20]
 800a2b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a2be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2c0:	b975      	cbnz	r5, 800a2e0 <_dtoa_r+0x40>
 800a2c2:	2010      	movs	r0, #16
 800a2c4:	f000 ff14 	bl	800b0f0 <malloc>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	6260      	str	r0, [r4, #36]	; 0x24
 800a2cc:	b920      	cbnz	r0, 800a2d8 <_dtoa_r+0x38>
 800a2ce:	4bb2      	ldr	r3, [pc, #712]	; (800a598 <_dtoa_r+0x2f8>)
 800a2d0:	21ea      	movs	r1, #234	; 0xea
 800a2d2:	48b2      	ldr	r0, [pc, #712]	; (800a59c <_dtoa_r+0x2fc>)
 800a2d4:	f001 fdc6 	bl	800be64 <__assert_func>
 800a2d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2dc:	6005      	str	r5, [r0, #0]
 800a2de:	60c5      	str	r5, [r0, #12]
 800a2e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2e2:	6819      	ldr	r1, [r3, #0]
 800a2e4:	b151      	cbz	r1, 800a2fc <_dtoa_r+0x5c>
 800a2e6:	685a      	ldr	r2, [r3, #4]
 800a2e8:	604a      	str	r2, [r1, #4]
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	4093      	lsls	r3, r2
 800a2ee:	608b      	str	r3, [r1, #8]
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f000 ff51 	bl	800b198 <_Bfree>
 800a2f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	1e3b      	subs	r3, r7, #0
 800a2fe:	bfb9      	ittee	lt
 800a300:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a304:	9303      	strlt	r3, [sp, #12]
 800a306:	2300      	movge	r3, #0
 800a308:	f8c8 3000 	strge.w	r3, [r8]
 800a30c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a310:	4ba3      	ldr	r3, [pc, #652]	; (800a5a0 <_dtoa_r+0x300>)
 800a312:	bfbc      	itt	lt
 800a314:	2201      	movlt	r2, #1
 800a316:	f8c8 2000 	strlt.w	r2, [r8]
 800a31a:	ea33 0309 	bics.w	r3, r3, r9
 800a31e:	d11b      	bne.n	800a358 <_dtoa_r+0xb8>
 800a320:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a322:	f242 730f 	movw	r3, #9999	; 0x270f
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a32c:	4333      	orrs	r3, r6
 800a32e:	f000 857a 	beq.w	800ae26 <_dtoa_r+0xb86>
 800a332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a334:	b963      	cbnz	r3, 800a350 <_dtoa_r+0xb0>
 800a336:	4b9b      	ldr	r3, [pc, #620]	; (800a5a4 <_dtoa_r+0x304>)
 800a338:	e024      	b.n	800a384 <_dtoa_r+0xe4>
 800a33a:	4b9b      	ldr	r3, [pc, #620]	; (800a5a8 <_dtoa_r+0x308>)
 800a33c:	9300      	str	r3, [sp, #0]
 800a33e:	3308      	adds	r3, #8
 800a340:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a342:	6013      	str	r3, [r2, #0]
 800a344:	9800      	ldr	r0, [sp, #0]
 800a346:	b015      	add	sp, #84	; 0x54
 800a348:	ecbd 8b02 	vpop	{d8}
 800a34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a350:	4b94      	ldr	r3, [pc, #592]	; (800a5a4 <_dtoa_r+0x304>)
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	3303      	adds	r3, #3
 800a356:	e7f3      	b.n	800a340 <_dtoa_r+0xa0>
 800a358:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a35c:	2200      	movs	r2, #0
 800a35e:	ec51 0b17 	vmov	r0, r1, d7
 800a362:	2300      	movs	r3, #0
 800a364:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a368:	f7f6 fbb6 	bl	8000ad8 <__aeabi_dcmpeq>
 800a36c:	4680      	mov	r8, r0
 800a36e:	b158      	cbz	r0, 800a388 <_dtoa_r+0xe8>
 800a370:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a372:	2301      	movs	r3, #1
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f000 8551 	beq.w	800ae20 <_dtoa_r+0xb80>
 800a37e:	488b      	ldr	r0, [pc, #556]	; (800a5ac <_dtoa_r+0x30c>)
 800a380:	6018      	str	r0, [r3, #0]
 800a382:	1e43      	subs	r3, r0, #1
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	e7dd      	b.n	800a344 <_dtoa_r+0xa4>
 800a388:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a38c:	aa12      	add	r2, sp, #72	; 0x48
 800a38e:	a913      	add	r1, sp, #76	; 0x4c
 800a390:	4620      	mov	r0, r4
 800a392:	f001 f9e3 	bl	800b75c <__d2b>
 800a396:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a39a:	4683      	mov	fp, r0
 800a39c:	2d00      	cmp	r5, #0
 800a39e:	d07c      	beq.n	800a49a <_dtoa_r+0x1fa>
 800a3a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a3a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a3ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a3b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a3b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a3ba:	4b7d      	ldr	r3, [pc, #500]	; (800a5b0 <_dtoa_r+0x310>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	4630      	mov	r0, r6
 800a3c0:	4639      	mov	r1, r7
 800a3c2:	f7f5 ff69 	bl	8000298 <__aeabi_dsub>
 800a3c6:	a36e      	add	r3, pc, #440	; (adr r3, 800a580 <_dtoa_r+0x2e0>)
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	f7f6 f91c 	bl	8000608 <__aeabi_dmul>
 800a3d0:	a36d      	add	r3, pc, #436	; (adr r3, 800a588 <_dtoa_r+0x2e8>)
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	f7f5 ff61 	bl	800029c <__adddf3>
 800a3da:	4606      	mov	r6, r0
 800a3dc:	4628      	mov	r0, r5
 800a3de:	460f      	mov	r7, r1
 800a3e0:	f7f6 f8a8 	bl	8000534 <__aeabi_i2d>
 800a3e4:	a36a      	add	r3, pc, #424	; (adr r3, 800a590 <_dtoa_r+0x2f0>)
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	f7f6 f90d 	bl	8000608 <__aeabi_dmul>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	4639      	mov	r1, r7
 800a3f6:	f7f5 ff51 	bl	800029c <__adddf3>
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	460f      	mov	r7, r1
 800a3fe:	f7f6 fbb3 	bl	8000b68 <__aeabi_d2iz>
 800a402:	2200      	movs	r2, #0
 800a404:	4682      	mov	sl, r0
 800a406:	2300      	movs	r3, #0
 800a408:	4630      	mov	r0, r6
 800a40a:	4639      	mov	r1, r7
 800a40c:	f7f6 fb6e 	bl	8000aec <__aeabi_dcmplt>
 800a410:	b148      	cbz	r0, 800a426 <_dtoa_r+0x186>
 800a412:	4650      	mov	r0, sl
 800a414:	f7f6 f88e 	bl	8000534 <__aeabi_i2d>
 800a418:	4632      	mov	r2, r6
 800a41a:	463b      	mov	r3, r7
 800a41c:	f7f6 fb5c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a420:	b908      	cbnz	r0, 800a426 <_dtoa_r+0x186>
 800a422:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a426:	f1ba 0f16 	cmp.w	sl, #22
 800a42a:	d854      	bhi.n	800a4d6 <_dtoa_r+0x236>
 800a42c:	4b61      	ldr	r3, [pc, #388]	; (800a5b4 <_dtoa_r+0x314>)
 800a42e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a436:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a43a:	f7f6 fb57 	bl	8000aec <__aeabi_dcmplt>
 800a43e:	2800      	cmp	r0, #0
 800a440:	d04b      	beq.n	800a4da <_dtoa_r+0x23a>
 800a442:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a446:	2300      	movs	r3, #0
 800a448:	930e      	str	r3, [sp, #56]	; 0x38
 800a44a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a44c:	1b5d      	subs	r5, r3, r5
 800a44e:	1e6b      	subs	r3, r5, #1
 800a450:	9304      	str	r3, [sp, #16]
 800a452:	bf43      	ittte	mi
 800a454:	2300      	movmi	r3, #0
 800a456:	f1c5 0801 	rsbmi	r8, r5, #1
 800a45a:	9304      	strmi	r3, [sp, #16]
 800a45c:	f04f 0800 	movpl.w	r8, #0
 800a460:	f1ba 0f00 	cmp.w	sl, #0
 800a464:	db3b      	blt.n	800a4de <_dtoa_r+0x23e>
 800a466:	9b04      	ldr	r3, [sp, #16]
 800a468:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a46c:	4453      	add	r3, sl
 800a46e:	9304      	str	r3, [sp, #16]
 800a470:	2300      	movs	r3, #0
 800a472:	9306      	str	r3, [sp, #24]
 800a474:	9b05      	ldr	r3, [sp, #20]
 800a476:	2b09      	cmp	r3, #9
 800a478:	d869      	bhi.n	800a54e <_dtoa_r+0x2ae>
 800a47a:	2b05      	cmp	r3, #5
 800a47c:	bfc4      	itt	gt
 800a47e:	3b04      	subgt	r3, #4
 800a480:	9305      	strgt	r3, [sp, #20]
 800a482:	9b05      	ldr	r3, [sp, #20]
 800a484:	f1a3 0302 	sub.w	r3, r3, #2
 800a488:	bfcc      	ite	gt
 800a48a:	2500      	movgt	r5, #0
 800a48c:	2501      	movle	r5, #1
 800a48e:	2b03      	cmp	r3, #3
 800a490:	d869      	bhi.n	800a566 <_dtoa_r+0x2c6>
 800a492:	e8df f003 	tbb	[pc, r3]
 800a496:	4e2c      	.short	0x4e2c
 800a498:	5a4c      	.short	0x5a4c
 800a49a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a49e:	441d      	add	r5, r3
 800a4a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a4a4:	2b20      	cmp	r3, #32
 800a4a6:	bfc1      	itttt	gt
 800a4a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a4ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a4b0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a4b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a4b8:	bfda      	itte	le
 800a4ba:	f1c3 0320 	rsble	r3, r3, #32
 800a4be:	fa06 f003 	lslle.w	r0, r6, r3
 800a4c2:	4318      	orrgt	r0, r3
 800a4c4:	f7f6 f826 	bl	8000514 <__aeabi_ui2d>
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a4d0:	3d01      	subs	r5, #1
 800a4d2:	9310      	str	r3, [sp, #64]	; 0x40
 800a4d4:	e771      	b.n	800a3ba <_dtoa_r+0x11a>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e7b6      	b.n	800a448 <_dtoa_r+0x1a8>
 800a4da:	900e      	str	r0, [sp, #56]	; 0x38
 800a4dc:	e7b5      	b.n	800a44a <_dtoa_r+0x1aa>
 800a4de:	f1ca 0300 	rsb	r3, sl, #0
 800a4e2:	9306      	str	r3, [sp, #24]
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	eba8 080a 	sub.w	r8, r8, sl
 800a4ea:	930d      	str	r3, [sp, #52]	; 0x34
 800a4ec:	e7c2      	b.n	800a474 <_dtoa_r+0x1d4>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	9308      	str	r3, [sp, #32]
 800a4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	dc39      	bgt.n	800a56c <_dtoa_r+0x2cc>
 800a4f8:	f04f 0901 	mov.w	r9, #1
 800a4fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a500:	464b      	mov	r3, r9
 800a502:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a506:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a508:	2200      	movs	r2, #0
 800a50a:	6042      	str	r2, [r0, #4]
 800a50c:	2204      	movs	r2, #4
 800a50e:	f102 0614 	add.w	r6, r2, #20
 800a512:	429e      	cmp	r6, r3
 800a514:	6841      	ldr	r1, [r0, #4]
 800a516:	d92f      	bls.n	800a578 <_dtoa_r+0x2d8>
 800a518:	4620      	mov	r0, r4
 800a51a:	f000 fdfd 	bl	800b118 <_Balloc>
 800a51e:	9000      	str	r0, [sp, #0]
 800a520:	2800      	cmp	r0, #0
 800a522:	d14b      	bne.n	800a5bc <_dtoa_r+0x31c>
 800a524:	4b24      	ldr	r3, [pc, #144]	; (800a5b8 <_dtoa_r+0x318>)
 800a526:	4602      	mov	r2, r0
 800a528:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a52c:	e6d1      	b.n	800a2d2 <_dtoa_r+0x32>
 800a52e:	2301      	movs	r3, #1
 800a530:	e7de      	b.n	800a4f0 <_dtoa_r+0x250>
 800a532:	2300      	movs	r3, #0
 800a534:	9308      	str	r3, [sp, #32]
 800a536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a538:	eb0a 0903 	add.w	r9, sl, r3
 800a53c:	f109 0301 	add.w	r3, r9, #1
 800a540:	2b01      	cmp	r3, #1
 800a542:	9301      	str	r3, [sp, #4]
 800a544:	bfb8      	it	lt
 800a546:	2301      	movlt	r3, #1
 800a548:	e7dd      	b.n	800a506 <_dtoa_r+0x266>
 800a54a:	2301      	movs	r3, #1
 800a54c:	e7f2      	b.n	800a534 <_dtoa_r+0x294>
 800a54e:	2501      	movs	r5, #1
 800a550:	2300      	movs	r3, #0
 800a552:	9305      	str	r3, [sp, #20]
 800a554:	9508      	str	r5, [sp, #32]
 800a556:	f04f 39ff 	mov.w	r9, #4294967295
 800a55a:	2200      	movs	r2, #0
 800a55c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a560:	2312      	movs	r3, #18
 800a562:	9209      	str	r2, [sp, #36]	; 0x24
 800a564:	e7cf      	b.n	800a506 <_dtoa_r+0x266>
 800a566:	2301      	movs	r3, #1
 800a568:	9308      	str	r3, [sp, #32]
 800a56a:	e7f4      	b.n	800a556 <_dtoa_r+0x2b6>
 800a56c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a570:	f8cd 9004 	str.w	r9, [sp, #4]
 800a574:	464b      	mov	r3, r9
 800a576:	e7c6      	b.n	800a506 <_dtoa_r+0x266>
 800a578:	3101      	adds	r1, #1
 800a57a:	6041      	str	r1, [r0, #4]
 800a57c:	0052      	lsls	r2, r2, #1
 800a57e:	e7c6      	b.n	800a50e <_dtoa_r+0x26e>
 800a580:	636f4361 	.word	0x636f4361
 800a584:	3fd287a7 	.word	0x3fd287a7
 800a588:	8b60c8b3 	.word	0x8b60c8b3
 800a58c:	3fc68a28 	.word	0x3fc68a28
 800a590:	509f79fb 	.word	0x509f79fb
 800a594:	3fd34413 	.word	0x3fd34413
 800a598:	0800c33e 	.word	0x0800c33e
 800a59c:	0800c355 	.word	0x0800c355
 800a5a0:	7ff00000 	.word	0x7ff00000
 800a5a4:	0800c33a 	.word	0x0800c33a
 800a5a8:	0800c331 	.word	0x0800c331
 800a5ac:	0800c20d 	.word	0x0800c20d
 800a5b0:	3ff80000 	.word	0x3ff80000
 800a5b4:	0800c450 	.word	0x0800c450
 800a5b8:	0800c3b4 	.word	0x0800c3b4
 800a5bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5be:	9a00      	ldr	r2, [sp, #0]
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	9b01      	ldr	r3, [sp, #4]
 800a5c4:	2b0e      	cmp	r3, #14
 800a5c6:	f200 80ad 	bhi.w	800a724 <_dtoa_r+0x484>
 800a5ca:	2d00      	cmp	r5, #0
 800a5cc:	f000 80aa 	beq.w	800a724 <_dtoa_r+0x484>
 800a5d0:	f1ba 0f00 	cmp.w	sl, #0
 800a5d4:	dd36      	ble.n	800a644 <_dtoa_r+0x3a4>
 800a5d6:	4ac3      	ldr	r2, [pc, #780]	; (800a8e4 <_dtoa_r+0x644>)
 800a5d8:	f00a 030f 	and.w	r3, sl, #15
 800a5dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5e0:	ed93 7b00 	vldr	d7, [r3]
 800a5e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a5e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a5ec:	eeb0 8a47 	vmov.f32	s16, s14
 800a5f0:	eef0 8a67 	vmov.f32	s17, s15
 800a5f4:	d016      	beq.n	800a624 <_dtoa_r+0x384>
 800a5f6:	4bbc      	ldr	r3, [pc, #752]	; (800a8e8 <_dtoa_r+0x648>)
 800a5f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a600:	f7f6 f92c 	bl	800085c <__aeabi_ddiv>
 800a604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a608:	f007 070f 	and.w	r7, r7, #15
 800a60c:	2503      	movs	r5, #3
 800a60e:	4eb6      	ldr	r6, [pc, #728]	; (800a8e8 <_dtoa_r+0x648>)
 800a610:	b957      	cbnz	r7, 800a628 <_dtoa_r+0x388>
 800a612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a616:	ec53 2b18 	vmov	r2, r3, d8
 800a61a:	f7f6 f91f 	bl	800085c <__aeabi_ddiv>
 800a61e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a622:	e029      	b.n	800a678 <_dtoa_r+0x3d8>
 800a624:	2502      	movs	r5, #2
 800a626:	e7f2      	b.n	800a60e <_dtoa_r+0x36e>
 800a628:	07f9      	lsls	r1, r7, #31
 800a62a:	d508      	bpl.n	800a63e <_dtoa_r+0x39e>
 800a62c:	ec51 0b18 	vmov	r0, r1, d8
 800a630:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a634:	f7f5 ffe8 	bl	8000608 <__aeabi_dmul>
 800a638:	ec41 0b18 	vmov	d8, r0, r1
 800a63c:	3501      	adds	r5, #1
 800a63e:	107f      	asrs	r7, r7, #1
 800a640:	3608      	adds	r6, #8
 800a642:	e7e5      	b.n	800a610 <_dtoa_r+0x370>
 800a644:	f000 80a6 	beq.w	800a794 <_dtoa_r+0x4f4>
 800a648:	f1ca 0600 	rsb	r6, sl, #0
 800a64c:	4ba5      	ldr	r3, [pc, #660]	; (800a8e4 <_dtoa_r+0x644>)
 800a64e:	4fa6      	ldr	r7, [pc, #664]	; (800a8e8 <_dtoa_r+0x648>)
 800a650:	f006 020f 	and.w	r2, r6, #15
 800a654:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a660:	f7f5 ffd2 	bl	8000608 <__aeabi_dmul>
 800a664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a668:	1136      	asrs	r6, r6, #4
 800a66a:	2300      	movs	r3, #0
 800a66c:	2502      	movs	r5, #2
 800a66e:	2e00      	cmp	r6, #0
 800a670:	f040 8085 	bne.w	800a77e <_dtoa_r+0x4de>
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1d2      	bne.n	800a61e <_dtoa_r+0x37e>
 800a678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f000 808c 	beq.w	800a798 <_dtoa_r+0x4f8>
 800a680:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a684:	4b99      	ldr	r3, [pc, #612]	; (800a8ec <_dtoa_r+0x64c>)
 800a686:	2200      	movs	r2, #0
 800a688:	4630      	mov	r0, r6
 800a68a:	4639      	mov	r1, r7
 800a68c:	f7f6 fa2e 	bl	8000aec <__aeabi_dcmplt>
 800a690:	2800      	cmp	r0, #0
 800a692:	f000 8081 	beq.w	800a798 <_dtoa_r+0x4f8>
 800a696:	9b01      	ldr	r3, [sp, #4]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d07d      	beq.n	800a798 <_dtoa_r+0x4f8>
 800a69c:	f1b9 0f00 	cmp.w	r9, #0
 800a6a0:	dd3c      	ble.n	800a71c <_dtoa_r+0x47c>
 800a6a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a6a6:	9307      	str	r3, [sp, #28]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	4b91      	ldr	r3, [pc, #580]	; (800a8f0 <_dtoa_r+0x650>)
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	f7f5 ffaa 	bl	8000608 <__aeabi_dmul>
 800a6b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6b8:	3501      	adds	r5, #1
 800a6ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a6be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f7f5 ff36 	bl	8000534 <__aeabi_i2d>
 800a6c8:	4632      	mov	r2, r6
 800a6ca:	463b      	mov	r3, r7
 800a6cc:	f7f5 ff9c 	bl	8000608 <__aeabi_dmul>
 800a6d0:	4b88      	ldr	r3, [pc, #544]	; (800a8f4 <_dtoa_r+0x654>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f7f5 fde2 	bl	800029c <__adddf3>
 800a6d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a6dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6e0:	9303      	str	r3, [sp, #12]
 800a6e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d15c      	bne.n	800a7a2 <_dtoa_r+0x502>
 800a6e8:	4b83      	ldr	r3, [pc, #524]	; (800a8f8 <_dtoa_r+0x658>)
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	4639      	mov	r1, r7
 800a6f0:	f7f5 fdd2 	bl	8000298 <__aeabi_dsub>
 800a6f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6f8:	4606      	mov	r6, r0
 800a6fa:	460f      	mov	r7, r1
 800a6fc:	f7f6 fa14 	bl	8000b28 <__aeabi_dcmpgt>
 800a700:	2800      	cmp	r0, #0
 800a702:	f040 8296 	bne.w	800ac32 <_dtoa_r+0x992>
 800a706:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a70a:	4630      	mov	r0, r6
 800a70c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a710:	4639      	mov	r1, r7
 800a712:	f7f6 f9eb 	bl	8000aec <__aeabi_dcmplt>
 800a716:	2800      	cmp	r0, #0
 800a718:	f040 8288 	bne.w	800ac2c <_dtoa_r+0x98c>
 800a71c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a720:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a724:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a726:	2b00      	cmp	r3, #0
 800a728:	f2c0 8158 	blt.w	800a9dc <_dtoa_r+0x73c>
 800a72c:	f1ba 0f0e 	cmp.w	sl, #14
 800a730:	f300 8154 	bgt.w	800a9dc <_dtoa_r+0x73c>
 800a734:	4b6b      	ldr	r3, [pc, #428]	; (800a8e4 <_dtoa_r+0x644>)
 800a736:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a73a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a740:	2b00      	cmp	r3, #0
 800a742:	f280 80e3 	bge.w	800a90c <_dtoa_r+0x66c>
 800a746:	9b01      	ldr	r3, [sp, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f300 80df 	bgt.w	800a90c <_dtoa_r+0x66c>
 800a74e:	f040 826d 	bne.w	800ac2c <_dtoa_r+0x98c>
 800a752:	4b69      	ldr	r3, [pc, #420]	; (800a8f8 <_dtoa_r+0x658>)
 800a754:	2200      	movs	r2, #0
 800a756:	4640      	mov	r0, r8
 800a758:	4649      	mov	r1, r9
 800a75a:	f7f5 ff55 	bl	8000608 <__aeabi_dmul>
 800a75e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a762:	f7f6 f9d7 	bl	8000b14 <__aeabi_dcmpge>
 800a766:	9e01      	ldr	r6, [sp, #4]
 800a768:	4637      	mov	r7, r6
 800a76a:	2800      	cmp	r0, #0
 800a76c:	f040 8243 	bne.w	800abf6 <_dtoa_r+0x956>
 800a770:	9d00      	ldr	r5, [sp, #0]
 800a772:	2331      	movs	r3, #49	; 0x31
 800a774:	f805 3b01 	strb.w	r3, [r5], #1
 800a778:	f10a 0a01 	add.w	sl, sl, #1
 800a77c:	e23f      	b.n	800abfe <_dtoa_r+0x95e>
 800a77e:	07f2      	lsls	r2, r6, #31
 800a780:	d505      	bpl.n	800a78e <_dtoa_r+0x4ee>
 800a782:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a786:	f7f5 ff3f 	bl	8000608 <__aeabi_dmul>
 800a78a:	3501      	adds	r5, #1
 800a78c:	2301      	movs	r3, #1
 800a78e:	1076      	asrs	r6, r6, #1
 800a790:	3708      	adds	r7, #8
 800a792:	e76c      	b.n	800a66e <_dtoa_r+0x3ce>
 800a794:	2502      	movs	r5, #2
 800a796:	e76f      	b.n	800a678 <_dtoa_r+0x3d8>
 800a798:	9b01      	ldr	r3, [sp, #4]
 800a79a:	f8cd a01c 	str.w	sl, [sp, #28]
 800a79e:	930c      	str	r3, [sp, #48]	; 0x30
 800a7a0:	e78d      	b.n	800a6be <_dtoa_r+0x41e>
 800a7a2:	9900      	ldr	r1, [sp, #0]
 800a7a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a7a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7a8:	4b4e      	ldr	r3, [pc, #312]	; (800a8e4 <_dtoa_r+0x644>)
 800a7aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7ae:	4401      	add	r1, r0
 800a7b0:	9102      	str	r1, [sp, #8]
 800a7b2:	9908      	ldr	r1, [sp, #32]
 800a7b4:	eeb0 8a47 	vmov.f32	s16, s14
 800a7b8:	eef0 8a67 	vmov.f32	s17, s15
 800a7bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7c4:	2900      	cmp	r1, #0
 800a7c6:	d045      	beq.n	800a854 <_dtoa_r+0x5b4>
 800a7c8:	494c      	ldr	r1, [pc, #304]	; (800a8fc <_dtoa_r+0x65c>)
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	f7f6 f846 	bl	800085c <__aeabi_ddiv>
 800a7d0:	ec53 2b18 	vmov	r2, r3, d8
 800a7d4:	f7f5 fd60 	bl	8000298 <__aeabi_dsub>
 800a7d8:	9d00      	ldr	r5, [sp, #0]
 800a7da:	ec41 0b18 	vmov	d8, r0, r1
 800a7de:	4639      	mov	r1, r7
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7f6 f9c1 	bl	8000b68 <__aeabi_d2iz>
 800a7e6:	900c      	str	r0, [sp, #48]	; 0x30
 800a7e8:	f7f5 fea4 	bl	8000534 <__aeabi_i2d>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	f7f5 fd50 	bl	8000298 <__aeabi_dsub>
 800a7f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7fa:	3330      	adds	r3, #48	; 0x30
 800a7fc:	f805 3b01 	strb.w	r3, [r5], #1
 800a800:	ec53 2b18 	vmov	r2, r3, d8
 800a804:	4606      	mov	r6, r0
 800a806:	460f      	mov	r7, r1
 800a808:	f7f6 f970 	bl	8000aec <__aeabi_dcmplt>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	d165      	bne.n	800a8dc <_dtoa_r+0x63c>
 800a810:	4632      	mov	r2, r6
 800a812:	463b      	mov	r3, r7
 800a814:	4935      	ldr	r1, [pc, #212]	; (800a8ec <_dtoa_r+0x64c>)
 800a816:	2000      	movs	r0, #0
 800a818:	f7f5 fd3e 	bl	8000298 <__aeabi_dsub>
 800a81c:	ec53 2b18 	vmov	r2, r3, d8
 800a820:	f7f6 f964 	bl	8000aec <__aeabi_dcmplt>
 800a824:	2800      	cmp	r0, #0
 800a826:	f040 80b9 	bne.w	800a99c <_dtoa_r+0x6fc>
 800a82a:	9b02      	ldr	r3, [sp, #8]
 800a82c:	429d      	cmp	r5, r3
 800a82e:	f43f af75 	beq.w	800a71c <_dtoa_r+0x47c>
 800a832:	4b2f      	ldr	r3, [pc, #188]	; (800a8f0 <_dtoa_r+0x650>)
 800a834:	ec51 0b18 	vmov	r0, r1, d8
 800a838:	2200      	movs	r2, #0
 800a83a:	f7f5 fee5 	bl	8000608 <__aeabi_dmul>
 800a83e:	4b2c      	ldr	r3, [pc, #176]	; (800a8f0 <_dtoa_r+0x650>)
 800a840:	ec41 0b18 	vmov	d8, r0, r1
 800a844:	2200      	movs	r2, #0
 800a846:	4630      	mov	r0, r6
 800a848:	4639      	mov	r1, r7
 800a84a:	f7f5 fedd 	bl	8000608 <__aeabi_dmul>
 800a84e:	4606      	mov	r6, r0
 800a850:	460f      	mov	r7, r1
 800a852:	e7c4      	b.n	800a7de <_dtoa_r+0x53e>
 800a854:	ec51 0b17 	vmov	r0, r1, d7
 800a858:	f7f5 fed6 	bl	8000608 <__aeabi_dmul>
 800a85c:	9b02      	ldr	r3, [sp, #8]
 800a85e:	9d00      	ldr	r5, [sp, #0]
 800a860:	930c      	str	r3, [sp, #48]	; 0x30
 800a862:	ec41 0b18 	vmov	d8, r0, r1
 800a866:	4639      	mov	r1, r7
 800a868:	4630      	mov	r0, r6
 800a86a:	f7f6 f97d 	bl	8000b68 <__aeabi_d2iz>
 800a86e:	9011      	str	r0, [sp, #68]	; 0x44
 800a870:	f7f5 fe60 	bl	8000534 <__aeabi_i2d>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	4630      	mov	r0, r6
 800a87a:	4639      	mov	r1, r7
 800a87c:	f7f5 fd0c 	bl	8000298 <__aeabi_dsub>
 800a880:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a882:	3330      	adds	r3, #48	; 0x30
 800a884:	f805 3b01 	strb.w	r3, [r5], #1
 800a888:	9b02      	ldr	r3, [sp, #8]
 800a88a:	429d      	cmp	r5, r3
 800a88c:	4606      	mov	r6, r0
 800a88e:	460f      	mov	r7, r1
 800a890:	f04f 0200 	mov.w	r2, #0
 800a894:	d134      	bne.n	800a900 <_dtoa_r+0x660>
 800a896:	4b19      	ldr	r3, [pc, #100]	; (800a8fc <_dtoa_r+0x65c>)
 800a898:	ec51 0b18 	vmov	r0, r1, d8
 800a89c:	f7f5 fcfe 	bl	800029c <__adddf3>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	4639      	mov	r1, r7
 800a8a8:	f7f6 f93e 	bl	8000b28 <__aeabi_dcmpgt>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	d175      	bne.n	800a99c <_dtoa_r+0x6fc>
 800a8b0:	ec53 2b18 	vmov	r2, r3, d8
 800a8b4:	4911      	ldr	r1, [pc, #68]	; (800a8fc <_dtoa_r+0x65c>)
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	f7f5 fcee 	bl	8000298 <__aeabi_dsub>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	4639      	mov	r1, r7
 800a8c4:	f7f6 f912 	bl	8000aec <__aeabi_dcmplt>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	f43f af27 	beq.w	800a71c <_dtoa_r+0x47c>
 800a8ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8d0:	1e6b      	subs	r3, r5, #1
 800a8d2:	930c      	str	r3, [sp, #48]	; 0x30
 800a8d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8d8:	2b30      	cmp	r3, #48	; 0x30
 800a8da:	d0f8      	beq.n	800a8ce <_dtoa_r+0x62e>
 800a8dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a8e0:	e04a      	b.n	800a978 <_dtoa_r+0x6d8>
 800a8e2:	bf00      	nop
 800a8e4:	0800c450 	.word	0x0800c450
 800a8e8:	0800c428 	.word	0x0800c428
 800a8ec:	3ff00000 	.word	0x3ff00000
 800a8f0:	40240000 	.word	0x40240000
 800a8f4:	401c0000 	.word	0x401c0000
 800a8f8:	40140000 	.word	0x40140000
 800a8fc:	3fe00000 	.word	0x3fe00000
 800a900:	4baf      	ldr	r3, [pc, #700]	; (800abc0 <_dtoa_r+0x920>)
 800a902:	f7f5 fe81 	bl	8000608 <__aeabi_dmul>
 800a906:	4606      	mov	r6, r0
 800a908:	460f      	mov	r7, r1
 800a90a:	e7ac      	b.n	800a866 <_dtoa_r+0x5c6>
 800a90c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a910:	9d00      	ldr	r5, [sp, #0]
 800a912:	4642      	mov	r2, r8
 800a914:	464b      	mov	r3, r9
 800a916:	4630      	mov	r0, r6
 800a918:	4639      	mov	r1, r7
 800a91a:	f7f5 ff9f 	bl	800085c <__aeabi_ddiv>
 800a91e:	f7f6 f923 	bl	8000b68 <__aeabi_d2iz>
 800a922:	9002      	str	r0, [sp, #8]
 800a924:	f7f5 fe06 	bl	8000534 <__aeabi_i2d>
 800a928:	4642      	mov	r2, r8
 800a92a:	464b      	mov	r3, r9
 800a92c:	f7f5 fe6c 	bl	8000608 <__aeabi_dmul>
 800a930:	4602      	mov	r2, r0
 800a932:	460b      	mov	r3, r1
 800a934:	4630      	mov	r0, r6
 800a936:	4639      	mov	r1, r7
 800a938:	f7f5 fcae 	bl	8000298 <__aeabi_dsub>
 800a93c:	9e02      	ldr	r6, [sp, #8]
 800a93e:	9f01      	ldr	r7, [sp, #4]
 800a940:	3630      	adds	r6, #48	; 0x30
 800a942:	f805 6b01 	strb.w	r6, [r5], #1
 800a946:	9e00      	ldr	r6, [sp, #0]
 800a948:	1bae      	subs	r6, r5, r6
 800a94a:	42b7      	cmp	r7, r6
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	d137      	bne.n	800a9c2 <_dtoa_r+0x722>
 800a952:	f7f5 fca3 	bl	800029c <__adddf3>
 800a956:	4642      	mov	r2, r8
 800a958:	464b      	mov	r3, r9
 800a95a:	4606      	mov	r6, r0
 800a95c:	460f      	mov	r7, r1
 800a95e:	f7f6 f8e3 	bl	8000b28 <__aeabi_dcmpgt>
 800a962:	b9c8      	cbnz	r0, 800a998 <_dtoa_r+0x6f8>
 800a964:	4642      	mov	r2, r8
 800a966:	464b      	mov	r3, r9
 800a968:	4630      	mov	r0, r6
 800a96a:	4639      	mov	r1, r7
 800a96c:	f7f6 f8b4 	bl	8000ad8 <__aeabi_dcmpeq>
 800a970:	b110      	cbz	r0, 800a978 <_dtoa_r+0x6d8>
 800a972:	9b02      	ldr	r3, [sp, #8]
 800a974:	07d9      	lsls	r1, r3, #31
 800a976:	d40f      	bmi.n	800a998 <_dtoa_r+0x6f8>
 800a978:	4620      	mov	r0, r4
 800a97a:	4659      	mov	r1, fp
 800a97c:	f000 fc0c 	bl	800b198 <_Bfree>
 800a980:	2300      	movs	r3, #0
 800a982:	702b      	strb	r3, [r5, #0]
 800a984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a986:	f10a 0001 	add.w	r0, sl, #1
 800a98a:	6018      	str	r0, [r3, #0]
 800a98c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f43f acd8 	beq.w	800a344 <_dtoa_r+0xa4>
 800a994:	601d      	str	r5, [r3, #0]
 800a996:	e4d5      	b.n	800a344 <_dtoa_r+0xa4>
 800a998:	f8cd a01c 	str.w	sl, [sp, #28]
 800a99c:	462b      	mov	r3, r5
 800a99e:	461d      	mov	r5, r3
 800a9a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9a4:	2a39      	cmp	r2, #57	; 0x39
 800a9a6:	d108      	bne.n	800a9ba <_dtoa_r+0x71a>
 800a9a8:	9a00      	ldr	r2, [sp, #0]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d1f7      	bne.n	800a99e <_dtoa_r+0x6fe>
 800a9ae:	9a07      	ldr	r2, [sp, #28]
 800a9b0:	9900      	ldr	r1, [sp, #0]
 800a9b2:	3201      	adds	r2, #1
 800a9b4:	9207      	str	r2, [sp, #28]
 800a9b6:	2230      	movs	r2, #48	; 0x30
 800a9b8:	700a      	strb	r2, [r1, #0]
 800a9ba:	781a      	ldrb	r2, [r3, #0]
 800a9bc:	3201      	adds	r2, #1
 800a9be:	701a      	strb	r2, [r3, #0]
 800a9c0:	e78c      	b.n	800a8dc <_dtoa_r+0x63c>
 800a9c2:	4b7f      	ldr	r3, [pc, #508]	; (800abc0 <_dtoa_r+0x920>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f7f5 fe1f 	bl	8000608 <__aeabi_dmul>
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	460f      	mov	r7, r1
 800a9d2:	f7f6 f881 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d09b      	beq.n	800a912 <_dtoa_r+0x672>
 800a9da:	e7cd      	b.n	800a978 <_dtoa_r+0x6d8>
 800a9dc:	9a08      	ldr	r2, [sp, #32]
 800a9de:	2a00      	cmp	r2, #0
 800a9e0:	f000 80c4 	beq.w	800ab6c <_dtoa_r+0x8cc>
 800a9e4:	9a05      	ldr	r2, [sp, #20]
 800a9e6:	2a01      	cmp	r2, #1
 800a9e8:	f300 80a8 	bgt.w	800ab3c <_dtoa_r+0x89c>
 800a9ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9ee:	2a00      	cmp	r2, #0
 800a9f0:	f000 80a0 	beq.w	800ab34 <_dtoa_r+0x894>
 800a9f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a9f8:	9e06      	ldr	r6, [sp, #24]
 800a9fa:	4645      	mov	r5, r8
 800a9fc:	9a04      	ldr	r2, [sp, #16]
 800a9fe:	2101      	movs	r1, #1
 800aa00:	441a      	add	r2, r3
 800aa02:	4620      	mov	r0, r4
 800aa04:	4498      	add	r8, r3
 800aa06:	9204      	str	r2, [sp, #16]
 800aa08:	f000 fc82 	bl	800b310 <__i2b>
 800aa0c:	4607      	mov	r7, r0
 800aa0e:	2d00      	cmp	r5, #0
 800aa10:	dd0b      	ble.n	800aa2a <_dtoa_r+0x78a>
 800aa12:	9b04      	ldr	r3, [sp, #16]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	dd08      	ble.n	800aa2a <_dtoa_r+0x78a>
 800aa18:	42ab      	cmp	r3, r5
 800aa1a:	9a04      	ldr	r2, [sp, #16]
 800aa1c:	bfa8      	it	ge
 800aa1e:	462b      	movge	r3, r5
 800aa20:	eba8 0803 	sub.w	r8, r8, r3
 800aa24:	1aed      	subs	r5, r5, r3
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	9304      	str	r3, [sp, #16]
 800aa2a:	9b06      	ldr	r3, [sp, #24]
 800aa2c:	b1fb      	cbz	r3, 800aa6e <_dtoa_r+0x7ce>
 800aa2e:	9b08      	ldr	r3, [sp, #32]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f000 809f 	beq.w	800ab74 <_dtoa_r+0x8d4>
 800aa36:	2e00      	cmp	r6, #0
 800aa38:	dd11      	ble.n	800aa5e <_dtoa_r+0x7be>
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	4632      	mov	r2, r6
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f000 fd22 	bl	800b488 <__pow5mult>
 800aa44:	465a      	mov	r2, fp
 800aa46:	4601      	mov	r1, r0
 800aa48:	4607      	mov	r7, r0
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f000 fc76 	bl	800b33c <__multiply>
 800aa50:	4659      	mov	r1, fp
 800aa52:	9007      	str	r0, [sp, #28]
 800aa54:	4620      	mov	r0, r4
 800aa56:	f000 fb9f 	bl	800b198 <_Bfree>
 800aa5a:	9b07      	ldr	r3, [sp, #28]
 800aa5c:	469b      	mov	fp, r3
 800aa5e:	9b06      	ldr	r3, [sp, #24]
 800aa60:	1b9a      	subs	r2, r3, r6
 800aa62:	d004      	beq.n	800aa6e <_dtoa_r+0x7ce>
 800aa64:	4659      	mov	r1, fp
 800aa66:	4620      	mov	r0, r4
 800aa68:	f000 fd0e 	bl	800b488 <__pow5mult>
 800aa6c:	4683      	mov	fp, r0
 800aa6e:	2101      	movs	r1, #1
 800aa70:	4620      	mov	r0, r4
 800aa72:	f000 fc4d 	bl	800b310 <__i2b>
 800aa76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	dd7c      	ble.n	800ab78 <_dtoa_r+0x8d8>
 800aa7e:	461a      	mov	r2, r3
 800aa80:	4601      	mov	r1, r0
 800aa82:	4620      	mov	r0, r4
 800aa84:	f000 fd00 	bl	800b488 <__pow5mult>
 800aa88:	9b05      	ldr	r3, [sp, #20]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	dd76      	ble.n	800ab7e <_dtoa_r+0x8de>
 800aa90:	2300      	movs	r3, #0
 800aa92:	9306      	str	r3, [sp, #24]
 800aa94:	6933      	ldr	r3, [r6, #16]
 800aa96:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa9a:	6918      	ldr	r0, [r3, #16]
 800aa9c:	f000 fbe8 	bl	800b270 <__hi0bits>
 800aaa0:	f1c0 0020 	rsb	r0, r0, #32
 800aaa4:	9b04      	ldr	r3, [sp, #16]
 800aaa6:	4418      	add	r0, r3
 800aaa8:	f010 001f 	ands.w	r0, r0, #31
 800aaac:	f000 8086 	beq.w	800abbc <_dtoa_r+0x91c>
 800aab0:	f1c0 0320 	rsb	r3, r0, #32
 800aab4:	2b04      	cmp	r3, #4
 800aab6:	dd7f      	ble.n	800abb8 <_dtoa_r+0x918>
 800aab8:	f1c0 001c 	rsb	r0, r0, #28
 800aabc:	9b04      	ldr	r3, [sp, #16]
 800aabe:	4403      	add	r3, r0
 800aac0:	4480      	add	r8, r0
 800aac2:	4405      	add	r5, r0
 800aac4:	9304      	str	r3, [sp, #16]
 800aac6:	f1b8 0f00 	cmp.w	r8, #0
 800aaca:	dd05      	ble.n	800aad8 <_dtoa_r+0x838>
 800aacc:	4659      	mov	r1, fp
 800aace:	4642      	mov	r2, r8
 800aad0:	4620      	mov	r0, r4
 800aad2:	f000 fd33 	bl	800b53c <__lshift>
 800aad6:	4683      	mov	fp, r0
 800aad8:	9b04      	ldr	r3, [sp, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	dd05      	ble.n	800aaea <_dtoa_r+0x84a>
 800aade:	4631      	mov	r1, r6
 800aae0:	461a      	mov	r2, r3
 800aae2:	4620      	mov	r0, r4
 800aae4:	f000 fd2a 	bl	800b53c <__lshift>
 800aae8:	4606      	mov	r6, r0
 800aaea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d069      	beq.n	800abc4 <_dtoa_r+0x924>
 800aaf0:	4631      	mov	r1, r6
 800aaf2:	4658      	mov	r0, fp
 800aaf4:	f000 fd8e 	bl	800b614 <__mcmp>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	da63      	bge.n	800abc4 <_dtoa_r+0x924>
 800aafc:	2300      	movs	r3, #0
 800aafe:	4659      	mov	r1, fp
 800ab00:	220a      	movs	r2, #10
 800ab02:	4620      	mov	r0, r4
 800ab04:	f000 fb6a 	bl	800b1dc <__multadd>
 800ab08:	9b08      	ldr	r3, [sp, #32]
 800ab0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab0e:	4683      	mov	fp, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f000 818f 	beq.w	800ae34 <_dtoa_r+0xb94>
 800ab16:	4639      	mov	r1, r7
 800ab18:	2300      	movs	r3, #0
 800ab1a:	220a      	movs	r2, #10
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f000 fb5d 	bl	800b1dc <__multadd>
 800ab22:	f1b9 0f00 	cmp.w	r9, #0
 800ab26:	4607      	mov	r7, r0
 800ab28:	f300 808e 	bgt.w	800ac48 <_dtoa_r+0x9a8>
 800ab2c:	9b05      	ldr	r3, [sp, #20]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	dc50      	bgt.n	800abd4 <_dtoa_r+0x934>
 800ab32:	e089      	b.n	800ac48 <_dtoa_r+0x9a8>
 800ab34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab3a:	e75d      	b.n	800a9f8 <_dtoa_r+0x758>
 800ab3c:	9b01      	ldr	r3, [sp, #4]
 800ab3e:	1e5e      	subs	r6, r3, #1
 800ab40:	9b06      	ldr	r3, [sp, #24]
 800ab42:	42b3      	cmp	r3, r6
 800ab44:	bfbf      	itttt	lt
 800ab46:	9b06      	ldrlt	r3, [sp, #24]
 800ab48:	9606      	strlt	r6, [sp, #24]
 800ab4a:	1af2      	sublt	r2, r6, r3
 800ab4c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ab4e:	bfb6      	itet	lt
 800ab50:	189b      	addlt	r3, r3, r2
 800ab52:	1b9e      	subge	r6, r3, r6
 800ab54:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ab56:	9b01      	ldr	r3, [sp, #4]
 800ab58:	bfb8      	it	lt
 800ab5a:	2600      	movlt	r6, #0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	bfb5      	itete	lt
 800ab60:	eba8 0503 	sublt.w	r5, r8, r3
 800ab64:	9b01      	ldrge	r3, [sp, #4]
 800ab66:	2300      	movlt	r3, #0
 800ab68:	4645      	movge	r5, r8
 800ab6a:	e747      	b.n	800a9fc <_dtoa_r+0x75c>
 800ab6c:	9e06      	ldr	r6, [sp, #24]
 800ab6e:	9f08      	ldr	r7, [sp, #32]
 800ab70:	4645      	mov	r5, r8
 800ab72:	e74c      	b.n	800aa0e <_dtoa_r+0x76e>
 800ab74:	9a06      	ldr	r2, [sp, #24]
 800ab76:	e775      	b.n	800aa64 <_dtoa_r+0x7c4>
 800ab78:	9b05      	ldr	r3, [sp, #20]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	dc18      	bgt.n	800abb0 <_dtoa_r+0x910>
 800ab7e:	9b02      	ldr	r3, [sp, #8]
 800ab80:	b9b3      	cbnz	r3, 800abb0 <_dtoa_r+0x910>
 800ab82:	9b03      	ldr	r3, [sp, #12]
 800ab84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab88:	b9a3      	cbnz	r3, 800abb4 <_dtoa_r+0x914>
 800ab8a:	9b03      	ldr	r3, [sp, #12]
 800ab8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab90:	0d1b      	lsrs	r3, r3, #20
 800ab92:	051b      	lsls	r3, r3, #20
 800ab94:	b12b      	cbz	r3, 800aba2 <_dtoa_r+0x902>
 800ab96:	9b04      	ldr	r3, [sp, #16]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	9304      	str	r3, [sp, #16]
 800ab9c:	f108 0801 	add.w	r8, r8, #1
 800aba0:	2301      	movs	r3, #1
 800aba2:	9306      	str	r3, [sp, #24]
 800aba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f47f af74 	bne.w	800aa94 <_dtoa_r+0x7f4>
 800abac:	2001      	movs	r0, #1
 800abae:	e779      	b.n	800aaa4 <_dtoa_r+0x804>
 800abb0:	2300      	movs	r3, #0
 800abb2:	e7f6      	b.n	800aba2 <_dtoa_r+0x902>
 800abb4:	9b02      	ldr	r3, [sp, #8]
 800abb6:	e7f4      	b.n	800aba2 <_dtoa_r+0x902>
 800abb8:	d085      	beq.n	800aac6 <_dtoa_r+0x826>
 800abba:	4618      	mov	r0, r3
 800abbc:	301c      	adds	r0, #28
 800abbe:	e77d      	b.n	800aabc <_dtoa_r+0x81c>
 800abc0:	40240000 	.word	0x40240000
 800abc4:	9b01      	ldr	r3, [sp, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	dc38      	bgt.n	800ac3c <_dtoa_r+0x99c>
 800abca:	9b05      	ldr	r3, [sp, #20]
 800abcc:	2b02      	cmp	r3, #2
 800abce:	dd35      	ble.n	800ac3c <_dtoa_r+0x99c>
 800abd0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800abd4:	f1b9 0f00 	cmp.w	r9, #0
 800abd8:	d10d      	bne.n	800abf6 <_dtoa_r+0x956>
 800abda:	4631      	mov	r1, r6
 800abdc:	464b      	mov	r3, r9
 800abde:	2205      	movs	r2, #5
 800abe0:	4620      	mov	r0, r4
 800abe2:	f000 fafb 	bl	800b1dc <__multadd>
 800abe6:	4601      	mov	r1, r0
 800abe8:	4606      	mov	r6, r0
 800abea:	4658      	mov	r0, fp
 800abec:	f000 fd12 	bl	800b614 <__mcmp>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	f73f adbd 	bgt.w	800a770 <_dtoa_r+0x4d0>
 800abf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf8:	9d00      	ldr	r5, [sp, #0]
 800abfa:	ea6f 0a03 	mvn.w	sl, r3
 800abfe:	f04f 0800 	mov.w	r8, #0
 800ac02:	4631      	mov	r1, r6
 800ac04:	4620      	mov	r0, r4
 800ac06:	f000 fac7 	bl	800b198 <_Bfree>
 800ac0a:	2f00      	cmp	r7, #0
 800ac0c:	f43f aeb4 	beq.w	800a978 <_dtoa_r+0x6d8>
 800ac10:	f1b8 0f00 	cmp.w	r8, #0
 800ac14:	d005      	beq.n	800ac22 <_dtoa_r+0x982>
 800ac16:	45b8      	cmp	r8, r7
 800ac18:	d003      	beq.n	800ac22 <_dtoa_r+0x982>
 800ac1a:	4641      	mov	r1, r8
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f000 fabb 	bl	800b198 <_Bfree>
 800ac22:	4639      	mov	r1, r7
 800ac24:	4620      	mov	r0, r4
 800ac26:	f000 fab7 	bl	800b198 <_Bfree>
 800ac2a:	e6a5      	b.n	800a978 <_dtoa_r+0x6d8>
 800ac2c:	2600      	movs	r6, #0
 800ac2e:	4637      	mov	r7, r6
 800ac30:	e7e1      	b.n	800abf6 <_dtoa_r+0x956>
 800ac32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ac34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ac38:	4637      	mov	r7, r6
 800ac3a:	e599      	b.n	800a770 <_dtoa_r+0x4d0>
 800ac3c:	9b08      	ldr	r3, [sp, #32]
 800ac3e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f000 80fd 	beq.w	800ae42 <_dtoa_r+0xba2>
 800ac48:	2d00      	cmp	r5, #0
 800ac4a:	dd05      	ble.n	800ac58 <_dtoa_r+0x9b8>
 800ac4c:	4639      	mov	r1, r7
 800ac4e:	462a      	mov	r2, r5
 800ac50:	4620      	mov	r0, r4
 800ac52:	f000 fc73 	bl	800b53c <__lshift>
 800ac56:	4607      	mov	r7, r0
 800ac58:	9b06      	ldr	r3, [sp, #24]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d05c      	beq.n	800ad18 <_dtoa_r+0xa78>
 800ac5e:	6879      	ldr	r1, [r7, #4]
 800ac60:	4620      	mov	r0, r4
 800ac62:	f000 fa59 	bl	800b118 <_Balloc>
 800ac66:	4605      	mov	r5, r0
 800ac68:	b928      	cbnz	r0, 800ac76 <_dtoa_r+0x9d6>
 800ac6a:	4b80      	ldr	r3, [pc, #512]	; (800ae6c <_dtoa_r+0xbcc>)
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac72:	f7ff bb2e 	b.w	800a2d2 <_dtoa_r+0x32>
 800ac76:	693a      	ldr	r2, [r7, #16]
 800ac78:	3202      	adds	r2, #2
 800ac7a:	0092      	lsls	r2, r2, #2
 800ac7c:	f107 010c 	add.w	r1, r7, #12
 800ac80:	300c      	adds	r0, #12
 800ac82:	f7fe fbce 	bl	8009422 <memcpy>
 800ac86:	2201      	movs	r2, #1
 800ac88:	4629      	mov	r1, r5
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f000 fc56 	bl	800b53c <__lshift>
 800ac90:	9b00      	ldr	r3, [sp, #0]
 800ac92:	3301      	adds	r3, #1
 800ac94:	9301      	str	r3, [sp, #4]
 800ac96:	9b00      	ldr	r3, [sp, #0]
 800ac98:	444b      	add	r3, r9
 800ac9a:	9307      	str	r3, [sp, #28]
 800ac9c:	9b02      	ldr	r3, [sp, #8]
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	46b8      	mov	r8, r7
 800aca4:	9306      	str	r3, [sp, #24]
 800aca6:	4607      	mov	r7, r0
 800aca8:	9b01      	ldr	r3, [sp, #4]
 800acaa:	4631      	mov	r1, r6
 800acac:	3b01      	subs	r3, #1
 800acae:	4658      	mov	r0, fp
 800acb0:	9302      	str	r3, [sp, #8]
 800acb2:	f7ff fa69 	bl	800a188 <quorem>
 800acb6:	4603      	mov	r3, r0
 800acb8:	3330      	adds	r3, #48	; 0x30
 800acba:	9004      	str	r0, [sp, #16]
 800acbc:	4641      	mov	r1, r8
 800acbe:	4658      	mov	r0, fp
 800acc0:	9308      	str	r3, [sp, #32]
 800acc2:	f000 fca7 	bl	800b614 <__mcmp>
 800acc6:	463a      	mov	r2, r7
 800acc8:	4681      	mov	r9, r0
 800acca:	4631      	mov	r1, r6
 800accc:	4620      	mov	r0, r4
 800acce:	f000 fcbd 	bl	800b64c <__mdiff>
 800acd2:	68c2      	ldr	r2, [r0, #12]
 800acd4:	9b08      	ldr	r3, [sp, #32]
 800acd6:	4605      	mov	r5, r0
 800acd8:	bb02      	cbnz	r2, 800ad1c <_dtoa_r+0xa7c>
 800acda:	4601      	mov	r1, r0
 800acdc:	4658      	mov	r0, fp
 800acde:	f000 fc99 	bl	800b614 <__mcmp>
 800ace2:	9b08      	ldr	r3, [sp, #32]
 800ace4:	4602      	mov	r2, r0
 800ace6:	4629      	mov	r1, r5
 800ace8:	4620      	mov	r0, r4
 800acea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800acee:	f000 fa53 	bl	800b198 <_Bfree>
 800acf2:	9b05      	ldr	r3, [sp, #20]
 800acf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acf6:	9d01      	ldr	r5, [sp, #4]
 800acf8:	ea43 0102 	orr.w	r1, r3, r2
 800acfc:	9b06      	ldr	r3, [sp, #24]
 800acfe:	430b      	orrs	r3, r1
 800ad00:	9b08      	ldr	r3, [sp, #32]
 800ad02:	d10d      	bne.n	800ad20 <_dtoa_r+0xa80>
 800ad04:	2b39      	cmp	r3, #57	; 0x39
 800ad06:	d029      	beq.n	800ad5c <_dtoa_r+0xabc>
 800ad08:	f1b9 0f00 	cmp.w	r9, #0
 800ad0c:	dd01      	ble.n	800ad12 <_dtoa_r+0xa72>
 800ad0e:	9b04      	ldr	r3, [sp, #16]
 800ad10:	3331      	adds	r3, #49	; 0x31
 800ad12:	9a02      	ldr	r2, [sp, #8]
 800ad14:	7013      	strb	r3, [r2, #0]
 800ad16:	e774      	b.n	800ac02 <_dtoa_r+0x962>
 800ad18:	4638      	mov	r0, r7
 800ad1a:	e7b9      	b.n	800ac90 <_dtoa_r+0x9f0>
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	e7e2      	b.n	800ace6 <_dtoa_r+0xa46>
 800ad20:	f1b9 0f00 	cmp.w	r9, #0
 800ad24:	db06      	blt.n	800ad34 <_dtoa_r+0xa94>
 800ad26:	9905      	ldr	r1, [sp, #20]
 800ad28:	ea41 0909 	orr.w	r9, r1, r9
 800ad2c:	9906      	ldr	r1, [sp, #24]
 800ad2e:	ea59 0101 	orrs.w	r1, r9, r1
 800ad32:	d120      	bne.n	800ad76 <_dtoa_r+0xad6>
 800ad34:	2a00      	cmp	r2, #0
 800ad36:	ddec      	ble.n	800ad12 <_dtoa_r+0xa72>
 800ad38:	4659      	mov	r1, fp
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	9301      	str	r3, [sp, #4]
 800ad40:	f000 fbfc 	bl	800b53c <__lshift>
 800ad44:	4631      	mov	r1, r6
 800ad46:	4683      	mov	fp, r0
 800ad48:	f000 fc64 	bl	800b614 <__mcmp>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	9b01      	ldr	r3, [sp, #4]
 800ad50:	dc02      	bgt.n	800ad58 <_dtoa_r+0xab8>
 800ad52:	d1de      	bne.n	800ad12 <_dtoa_r+0xa72>
 800ad54:	07da      	lsls	r2, r3, #31
 800ad56:	d5dc      	bpl.n	800ad12 <_dtoa_r+0xa72>
 800ad58:	2b39      	cmp	r3, #57	; 0x39
 800ad5a:	d1d8      	bne.n	800ad0e <_dtoa_r+0xa6e>
 800ad5c:	9a02      	ldr	r2, [sp, #8]
 800ad5e:	2339      	movs	r3, #57	; 0x39
 800ad60:	7013      	strb	r3, [r2, #0]
 800ad62:	462b      	mov	r3, r5
 800ad64:	461d      	mov	r5, r3
 800ad66:	3b01      	subs	r3, #1
 800ad68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad6c:	2a39      	cmp	r2, #57	; 0x39
 800ad6e:	d050      	beq.n	800ae12 <_dtoa_r+0xb72>
 800ad70:	3201      	adds	r2, #1
 800ad72:	701a      	strb	r2, [r3, #0]
 800ad74:	e745      	b.n	800ac02 <_dtoa_r+0x962>
 800ad76:	2a00      	cmp	r2, #0
 800ad78:	dd03      	ble.n	800ad82 <_dtoa_r+0xae2>
 800ad7a:	2b39      	cmp	r3, #57	; 0x39
 800ad7c:	d0ee      	beq.n	800ad5c <_dtoa_r+0xabc>
 800ad7e:	3301      	adds	r3, #1
 800ad80:	e7c7      	b.n	800ad12 <_dtoa_r+0xa72>
 800ad82:	9a01      	ldr	r2, [sp, #4]
 800ad84:	9907      	ldr	r1, [sp, #28]
 800ad86:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad8a:	428a      	cmp	r2, r1
 800ad8c:	d02a      	beq.n	800ade4 <_dtoa_r+0xb44>
 800ad8e:	4659      	mov	r1, fp
 800ad90:	2300      	movs	r3, #0
 800ad92:	220a      	movs	r2, #10
 800ad94:	4620      	mov	r0, r4
 800ad96:	f000 fa21 	bl	800b1dc <__multadd>
 800ad9a:	45b8      	cmp	r8, r7
 800ad9c:	4683      	mov	fp, r0
 800ad9e:	f04f 0300 	mov.w	r3, #0
 800ada2:	f04f 020a 	mov.w	r2, #10
 800ada6:	4641      	mov	r1, r8
 800ada8:	4620      	mov	r0, r4
 800adaa:	d107      	bne.n	800adbc <_dtoa_r+0xb1c>
 800adac:	f000 fa16 	bl	800b1dc <__multadd>
 800adb0:	4680      	mov	r8, r0
 800adb2:	4607      	mov	r7, r0
 800adb4:	9b01      	ldr	r3, [sp, #4]
 800adb6:	3301      	adds	r3, #1
 800adb8:	9301      	str	r3, [sp, #4]
 800adba:	e775      	b.n	800aca8 <_dtoa_r+0xa08>
 800adbc:	f000 fa0e 	bl	800b1dc <__multadd>
 800adc0:	4639      	mov	r1, r7
 800adc2:	4680      	mov	r8, r0
 800adc4:	2300      	movs	r3, #0
 800adc6:	220a      	movs	r2, #10
 800adc8:	4620      	mov	r0, r4
 800adca:	f000 fa07 	bl	800b1dc <__multadd>
 800adce:	4607      	mov	r7, r0
 800add0:	e7f0      	b.n	800adb4 <_dtoa_r+0xb14>
 800add2:	f1b9 0f00 	cmp.w	r9, #0
 800add6:	9a00      	ldr	r2, [sp, #0]
 800add8:	bfcc      	ite	gt
 800adda:	464d      	movgt	r5, r9
 800addc:	2501      	movle	r5, #1
 800adde:	4415      	add	r5, r2
 800ade0:	f04f 0800 	mov.w	r8, #0
 800ade4:	4659      	mov	r1, fp
 800ade6:	2201      	movs	r2, #1
 800ade8:	4620      	mov	r0, r4
 800adea:	9301      	str	r3, [sp, #4]
 800adec:	f000 fba6 	bl	800b53c <__lshift>
 800adf0:	4631      	mov	r1, r6
 800adf2:	4683      	mov	fp, r0
 800adf4:	f000 fc0e 	bl	800b614 <__mcmp>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	dcb2      	bgt.n	800ad62 <_dtoa_r+0xac2>
 800adfc:	d102      	bne.n	800ae04 <_dtoa_r+0xb64>
 800adfe:	9b01      	ldr	r3, [sp, #4]
 800ae00:	07db      	lsls	r3, r3, #31
 800ae02:	d4ae      	bmi.n	800ad62 <_dtoa_r+0xac2>
 800ae04:	462b      	mov	r3, r5
 800ae06:	461d      	mov	r5, r3
 800ae08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae0c:	2a30      	cmp	r2, #48	; 0x30
 800ae0e:	d0fa      	beq.n	800ae06 <_dtoa_r+0xb66>
 800ae10:	e6f7      	b.n	800ac02 <_dtoa_r+0x962>
 800ae12:	9a00      	ldr	r2, [sp, #0]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d1a5      	bne.n	800ad64 <_dtoa_r+0xac4>
 800ae18:	f10a 0a01 	add.w	sl, sl, #1
 800ae1c:	2331      	movs	r3, #49	; 0x31
 800ae1e:	e779      	b.n	800ad14 <_dtoa_r+0xa74>
 800ae20:	4b13      	ldr	r3, [pc, #76]	; (800ae70 <_dtoa_r+0xbd0>)
 800ae22:	f7ff baaf 	b.w	800a384 <_dtoa_r+0xe4>
 800ae26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f47f aa86 	bne.w	800a33a <_dtoa_r+0x9a>
 800ae2e:	4b11      	ldr	r3, [pc, #68]	; (800ae74 <_dtoa_r+0xbd4>)
 800ae30:	f7ff baa8 	b.w	800a384 <_dtoa_r+0xe4>
 800ae34:	f1b9 0f00 	cmp.w	r9, #0
 800ae38:	dc03      	bgt.n	800ae42 <_dtoa_r+0xba2>
 800ae3a:	9b05      	ldr	r3, [sp, #20]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	f73f aec9 	bgt.w	800abd4 <_dtoa_r+0x934>
 800ae42:	9d00      	ldr	r5, [sp, #0]
 800ae44:	4631      	mov	r1, r6
 800ae46:	4658      	mov	r0, fp
 800ae48:	f7ff f99e 	bl	800a188 <quorem>
 800ae4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ae50:	f805 3b01 	strb.w	r3, [r5], #1
 800ae54:	9a00      	ldr	r2, [sp, #0]
 800ae56:	1aaa      	subs	r2, r5, r2
 800ae58:	4591      	cmp	r9, r2
 800ae5a:	ddba      	ble.n	800add2 <_dtoa_r+0xb32>
 800ae5c:	4659      	mov	r1, fp
 800ae5e:	2300      	movs	r3, #0
 800ae60:	220a      	movs	r2, #10
 800ae62:	4620      	mov	r0, r4
 800ae64:	f000 f9ba 	bl	800b1dc <__multadd>
 800ae68:	4683      	mov	fp, r0
 800ae6a:	e7eb      	b.n	800ae44 <_dtoa_r+0xba4>
 800ae6c:	0800c3b4 	.word	0x0800c3b4
 800ae70:	0800c20c 	.word	0x0800c20c
 800ae74:	0800c331 	.word	0x0800c331

0800ae78 <__sflush_r>:
 800ae78:	898a      	ldrh	r2, [r1, #12]
 800ae7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7e:	4605      	mov	r5, r0
 800ae80:	0710      	lsls	r0, r2, #28
 800ae82:	460c      	mov	r4, r1
 800ae84:	d458      	bmi.n	800af38 <__sflush_r+0xc0>
 800ae86:	684b      	ldr	r3, [r1, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	dc05      	bgt.n	800ae98 <__sflush_r+0x20>
 800ae8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	dc02      	bgt.n	800ae98 <__sflush_r+0x20>
 800ae92:	2000      	movs	r0, #0
 800ae94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae9a:	2e00      	cmp	r6, #0
 800ae9c:	d0f9      	beq.n	800ae92 <__sflush_r+0x1a>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aea4:	682f      	ldr	r7, [r5, #0]
 800aea6:	602b      	str	r3, [r5, #0]
 800aea8:	d032      	beq.n	800af10 <__sflush_r+0x98>
 800aeaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aeac:	89a3      	ldrh	r3, [r4, #12]
 800aeae:	075a      	lsls	r2, r3, #29
 800aeb0:	d505      	bpl.n	800aebe <__sflush_r+0x46>
 800aeb2:	6863      	ldr	r3, [r4, #4]
 800aeb4:	1ac0      	subs	r0, r0, r3
 800aeb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aeb8:	b10b      	cbz	r3, 800aebe <__sflush_r+0x46>
 800aeba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aebc:	1ac0      	subs	r0, r0, r3
 800aebe:	2300      	movs	r3, #0
 800aec0:	4602      	mov	r2, r0
 800aec2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aec4:	6a21      	ldr	r1, [r4, #32]
 800aec6:	4628      	mov	r0, r5
 800aec8:	47b0      	blx	r6
 800aeca:	1c43      	adds	r3, r0, #1
 800aecc:	89a3      	ldrh	r3, [r4, #12]
 800aece:	d106      	bne.n	800aede <__sflush_r+0x66>
 800aed0:	6829      	ldr	r1, [r5, #0]
 800aed2:	291d      	cmp	r1, #29
 800aed4:	d82c      	bhi.n	800af30 <__sflush_r+0xb8>
 800aed6:	4a2a      	ldr	r2, [pc, #168]	; (800af80 <__sflush_r+0x108>)
 800aed8:	40ca      	lsrs	r2, r1
 800aeda:	07d6      	lsls	r6, r2, #31
 800aedc:	d528      	bpl.n	800af30 <__sflush_r+0xb8>
 800aede:	2200      	movs	r2, #0
 800aee0:	6062      	str	r2, [r4, #4]
 800aee2:	04d9      	lsls	r1, r3, #19
 800aee4:	6922      	ldr	r2, [r4, #16]
 800aee6:	6022      	str	r2, [r4, #0]
 800aee8:	d504      	bpl.n	800aef4 <__sflush_r+0x7c>
 800aeea:	1c42      	adds	r2, r0, #1
 800aeec:	d101      	bne.n	800aef2 <__sflush_r+0x7a>
 800aeee:	682b      	ldr	r3, [r5, #0]
 800aef0:	b903      	cbnz	r3, 800aef4 <__sflush_r+0x7c>
 800aef2:	6560      	str	r0, [r4, #84]	; 0x54
 800aef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aef6:	602f      	str	r7, [r5, #0]
 800aef8:	2900      	cmp	r1, #0
 800aefa:	d0ca      	beq.n	800ae92 <__sflush_r+0x1a>
 800aefc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af00:	4299      	cmp	r1, r3
 800af02:	d002      	beq.n	800af0a <__sflush_r+0x92>
 800af04:	4628      	mov	r0, r5
 800af06:	f000 fc95 	bl	800b834 <_free_r>
 800af0a:	2000      	movs	r0, #0
 800af0c:	6360      	str	r0, [r4, #52]	; 0x34
 800af0e:	e7c1      	b.n	800ae94 <__sflush_r+0x1c>
 800af10:	6a21      	ldr	r1, [r4, #32]
 800af12:	2301      	movs	r3, #1
 800af14:	4628      	mov	r0, r5
 800af16:	47b0      	blx	r6
 800af18:	1c41      	adds	r1, r0, #1
 800af1a:	d1c7      	bne.n	800aeac <__sflush_r+0x34>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d0c4      	beq.n	800aeac <__sflush_r+0x34>
 800af22:	2b1d      	cmp	r3, #29
 800af24:	d001      	beq.n	800af2a <__sflush_r+0xb2>
 800af26:	2b16      	cmp	r3, #22
 800af28:	d101      	bne.n	800af2e <__sflush_r+0xb6>
 800af2a:	602f      	str	r7, [r5, #0]
 800af2c:	e7b1      	b.n	800ae92 <__sflush_r+0x1a>
 800af2e:	89a3      	ldrh	r3, [r4, #12]
 800af30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af34:	81a3      	strh	r3, [r4, #12]
 800af36:	e7ad      	b.n	800ae94 <__sflush_r+0x1c>
 800af38:	690f      	ldr	r7, [r1, #16]
 800af3a:	2f00      	cmp	r7, #0
 800af3c:	d0a9      	beq.n	800ae92 <__sflush_r+0x1a>
 800af3e:	0793      	lsls	r3, r2, #30
 800af40:	680e      	ldr	r6, [r1, #0]
 800af42:	bf08      	it	eq
 800af44:	694b      	ldreq	r3, [r1, #20]
 800af46:	600f      	str	r7, [r1, #0]
 800af48:	bf18      	it	ne
 800af4a:	2300      	movne	r3, #0
 800af4c:	eba6 0807 	sub.w	r8, r6, r7
 800af50:	608b      	str	r3, [r1, #8]
 800af52:	f1b8 0f00 	cmp.w	r8, #0
 800af56:	dd9c      	ble.n	800ae92 <__sflush_r+0x1a>
 800af58:	6a21      	ldr	r1, [r4, #32]
 800af5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af5c:	4643      	mov	r3, r8
 800af5e:	463a      	mov	r2, r7
 800af60:	4628      	mov	r0, r5
 800af62:	47b0      	blx	r6
 800af64:	2800      	cmp	r0, #0
 800af66:	dc06      	bgt.n	800af76 <__sflush_r+0xfe>
 800af68:	89a3      	ldrh	r3, [r4, #12]
 800af6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af6e:	81a3      	strh	r3, [r4, #12]
 800af70:	f04f 30ff 	mov.w	r0, #4294967295
 800af74:	e78e      	b.n	800ae94 <__sflush_r+0x1c>
 800af76:	4407      	add	r7, r0
 800af78:	eba8 0800 	sub.w	r8, r8, r0
 800af7c:	e7e9      	b.n	800af52 <__sflush_r+0xda>
 800af7e:	bf00      	nop
 800af80:	20400001 	.word	0x20400001

0800af84 <_fflush_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	690b      	ldr	r3, [r1, #16]
 800af88:	4605      	mov	r5, r0
 800af8a:	460c      	mov	r4, r1
 800af8c:	b913      	cbnz	r3, 800af94 <_fflush_r+0x10>
 800af8e:	2500      	movs	r5, #0
 800af90:	4628      	mov	r0, r5
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	b118      	cbz	r0, 800af9e <_fflush_r+0x1a>
 800af96:	6983      	ldr	r3, [r0, #24]
 800af98:	b90b      	cbnz	r3, 800af9e <_fflush_r+0x1a>
 800af9a:	f7fe f97d 	bl	8009298 <__sinit>
 800af9e:	4b14      	ldr	r3, [pc, #80]	; (800aff0 <_fflush_r+0x6c>)
 800afa0:	429c      	cmp	r4, r3
 800afa2:	d11b      	bne.n	800afdc <_fflush_r+0x58>
 800afa4:	686c      	ldr	r4, [r5, #4]
 800afa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d0ef      	beq.n	800af8e <_fflush_r+0xa>
 800afae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afb0:	07d0      	lsls	r0, r2, #31
 800afb2:	d404      	bmi.n	800afbe <_fflush_r+0x3a>
 800afb4:	0599      	lsls	r1, r3, #22
 800afb6:	d402      	bmi.n	800afbe <_fflush_r+0x3a>
 800afb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afba:	f7fe fa30 	bl	800941e <__retarget_lock_acquire_recursive>
 800afbe:	4628      	mov	r0, r5
 800afc0:	4621      	mov	r1, r4
 800afc2:	f7ff ff59 	bl	800ae78 <__sflush_r>
 800afc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afc8:	07da      	lsls	r2, r3, #31
 800afca:	4605      	mov	r5, r0
 800afcc:	d4e0      	bmi.n	800af90 <_fflush_r+0xc>
 800afce:	89a3      	ldrh	r3, [r4, #12]
 800afd0:	059b      	lsls	r3, r3, #22
 800afd2:	d4dd      	bmi.n	800af90 <_fflush_r+0xc>
 800afd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afd6:	f7fe fa23 	bl	8009420 <__retarget_lock_release_recursive>
 800afda:	e7d9      	b.n	800af90 <_fflush_r+0xc>
 800afdc:	4b05      	ldr	r3, [pc, #20]	; (800aff4 <_fflush_r+0x70>)
 800afde:	429c      	cmp	r4, r3
 800afe0:	d101      	bne.n	800afe6 <_fflush_r+0x62>
 800afe2:	68ac      	ldr	r4, [r5, #8]
 800afe4:	e7df      	b.n	800afa6 <_fflush_r+0x22>
 800afe6:	4b04      	ldr	r3, [pc, #16]	; (800aff8 <_fflush_r+0x74>)
 800afe8:	429c      	cmp	r4, r3
 800afea:	bf08      	it	eq
 800afec:	68ec      	ldreq	r4, [r5, #12]
 800afee:	e7da      	b.n	800afa6 <_fflush_r+0x22>
 800aff0:	0800c1b8 	.word	0x0800c1b8
 800aff4:	0800c1d8 	.word	0x0800c1d8
 800aff8:	0800c198 	.word	0x0800c198

0800affc <_localeconv_r>:
 800affc:	4800      	ldr	r0, [pc, #0]	; (800b000 <_localeconv_r+0x4>)
 800affe:	4770      	bx	lr
 800b000:	2000016c 	.word	0x2000016c

0800b004 <_lseek_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	4d07      	ldr	r5, [pc, #28]	; (800b024 <_lseek_r+0x20>)
 800b008:	4604      	mov	r4, r0
 800b00a:	4608      	mov	r0, r1
 800b00c:	4611      	mov	r1, r2
 800b00e:	2200      	movs	r2, #0
 800b010:	602a      	str	r2, [r5, #0]
 800b012:	461a      	mov	r2, r3
 800b014:	f7f7 fb0a 	bl	800262c <_lseek>
 800b018:	1c43      	adds	r3, r0, #1
 800b01a:	d102      	bne.n	800b022 <_lseek_r+0x1e>
 800b01c:	682b      	ldr	r3, [r5, #0]
 800b01e:	b103      	cbz	r3, 800b022 <_lseek_r+0x1e>
 800b020:	6023      	str	r3, [r4, #0]
 800b022:	bd38      	pop	{r3, r4, r5, pc}
 800b024:	2000528c 	.word	0x2000528c

0800b028 <__swhatbuf_r>:
 800b028:	b570      	push	{r4, r5, r6, lr}
 800b02a:	460e      	mov	r6, r1
 800b02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b030:	2900      	cmp	r1, #0
 800b032:	b096      	sub	sp, #88	; 0x58
 800b034:	4614      	mov	r4, r2
 800b036:	461d      	mov	r5, r3
 800b038:	da07      	bge.n	800b04a <__swhatbuf_r+0x22>
 800b03a:	2300      	movs	r3, #0
 800b03c:	602b      	str	r3, [r5, #0]
 800b03e:	89b3      	ldrh	r3, [r6, #12]
 800b040:	061a      	lsls	r2, r3, #24
 800b042:	d410      	bmi.n	800b066 <__swhatbuf_r+0x3e>
 800b044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b048:	e00e      	b.n	800b068 <__swhatbuf_r+0x40>
 800b04a:	466a      	mov	r2, sp
 800b04c:	f000 ff3a 	bl	800bec4 <_fstat_r>
 800b050:	2800      	cmp	r0, #0
 800b052:	dbf2      	blt.n	800b03a <__swhatbuf_r+0x12>
 800b054:	9a01      	ldr	r2, [sp, #4]
 800b056:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b05a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b05e:	425a      	negs	r2, r3
 800b060:	415a      	adcs	r2, r3
 800b062:	602a      	str	r2, [r5, #0]
 800b064:	e7ee      	b.n	800b044 <__swhatbuf_r+0x1c>
 800b066:	2340      	movs	r3, #64	; 0x40
 800b068:	2000      	movs	r0, #0
 800b06a:	6023      	str	r3, [r4, #0]
 800b06c:	b016      	add	sp, #88	; 0x58
 800b06e:	bd70      	pop	{r4, r5, r6, pc}

0800b070 <__smakebuf_r>:
 800b070:	898b      	ldrh	r3, [r1, #12]
 800b072:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b074:	079d      	lsls	r5, r3, #30
 800b076:	4606      	mov	r6, r0
 800b078:	460c      	mov	r4, r1
 800b07a:	d507      	bpl.n	800b08c <__smakebuf_r+0x1c>
 800b07c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b080:	6023      	str	r3, [r4, #0]
 800b082:	6123      	str	r3, [r4, #16]
 800b084:	2301      	movs	r3, #1
 800b086:	6163      	str	r3, [r4, #20]
 800b088:	b002      	add	sp, #8
 800b08a:	bd70      	pop	{r4, r5, r6, pc}
 800b08c:	ab01      	add	r3, sp, #4
 800b08e:	466a      	mov	r2, sp
 800b090:	f7ff ffca 	bl	800b028 <__swhatbuf_r>
 800b094:	9900      	ldr	r1, [sp, #0]
 800b096:	4605      	mov	r5, r0
 800b098:	4630      	mov	r0, r6
 800b09a:	f7fe f9d9 	bl	8009450 <_malloc_r>
 800b09e:	b948      	cbnz	r0, 800b0b4 <__smakebuf_r+0x44>
 800b0a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0a4:	059a      	lsls	r2, r3, #22
 800b0a6:	d4ef      	bmi.n	800b088 <__smakebuf_r+0x18>
 800b0a8:	f023 0303 	bic.w	r3, r3, #3
 800b0ac:	f043 0302 	orr.w	r3, r3, #2
 800b0b0:	81a3      	strh	r3, [r4, #12]
 800b0b2:	e7e3      	b.n	800b07c <__smakebuf_r+0xc>
 800b0b4:	4b0d      	ldr	r3, [pc, #52]	; (800b0ec <__smakebuf_r+0x7c>)
 800b0b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b0b8:	89a3      	ldrh	r3, [r4, #12]
 800b0ba:	6020      	str	r0, [r4, #0]
 800b0bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0c0:	81a3      	strh	r3, [r4, #12]
 800b0c2:	9b00      	ldr	r3, [sp, #0]
 800b0c4:	6163      	str	r3, [r4, #20]
 800b0c6:	9b01      	ldr	r3, [sp, #4]
 800b0c8:	6120      	str	r0, [r4, #16]
 800b0ca:	b15b      	cbz	r3, 800b0e4 <__smakebuf_r+0x74>
 800b0cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f000 ff09 	bl	800bee8 <_isatty_r>
 800b0d6:	b128      	cbz	r0, 800b0e4 <__smakebuf_r+0x74>
 800b0d8:	89a3      	ldrh	r3, [r4, #12]
 800b0da:	f023 0303 	bic.w	r3, r3, #3
 800b0de:	f043 0301 	orr.w	r3, r3, #1
 800b0e2:	81a3      	strh	r3, [r4, #12]
 800b0e4:	89a0      	ldrh	r0, [r4, #12]
 800b0e6:	4305      	orrs	r5, r0
 800b0e8:	81a5      	strh	r5, [r4, #12]
 800b0ea:	e7cd      	b.n	800b088 <__smakebuf_r+0x18>
 800b0ec:	08009231 	.word	0x08009231

0800b0f0 <malloc>:
 800b0f0:	4b02      	ldr	r3, [pc, #8]	; (800b0fc <malloc+0xc>)
 800b0f2:	4601      	mov	r1, r0
 800b0f4:	6818      	ldr	r0, [r3, #0]
 800b0f6:	f7fe b9ab 	b.w	8009450 <_malloc_r>
 800b0fa:	bf00      	nop
 800b0fc:	20000018 	.word	0x20000018

0800b100 <__malloc_lock>:
 800b100:	4801      	ldr	r0, [pc, #4]	; (800b108 <__malloc_lock+0x8>)
 800b102:	f7fe b98c 	b.w	800941e <__retarget_lock_acquire_recursive>
 800b106:	bf00      	nop
 800b108:	20005284 	.word	0x20005284

0800b10c <__malloc_unlock>:
 800b10c:	4801      	ldr	r0, [pc, #4]	; (800b114 <__malloc_unlock+0x8>)
 800b10e:	f7fe b987 	b.w	8009420 <__retarget_lock_release_recursive>
 800b112:	bf00      	nop
 800b114:	20005284 	.word	0x20005284

0800b118 <_Balloc>:
 800b118:	b570      	push	{r4, r5, r6, lr}
 800b11a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b11c:	4604      	mov	r4, r0
 800b11e:	460d      	mov	r5, r1
 800b120:	b976      	cbnz	r6, 800b140 <_Balloc+0x28>
 800b122:	2010      	movs	r0, #16
 800b124:	f7ff ffe4 	bl	800b0f0 <malloc>
 800b128:	4602      	mov	r2, r0
 800b12a:	6260      	str	r0, [r4, #36]	; 0x24
 800b12c:	b920      	cbnz	r0, 800b138 <_Balloc+0x20>
 800b12e:	4b18      	ldr	r3, [pc, #96]	; (800b190 <_Balloc+0x78>)
 800b130:	4818      	ldr	r0, [pc, #96]	; (800b194 <_Balloc+0x7c>)
 800b132:	2166      	movs	r1, #102	; 0x66
 800b134:	f000 fe96 	bl	800be64 <__assert_func>
 800b138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b13c:	6006      	str	r6, [r0, #0]
 800b13e:	60c6      	str	r6, [r0, #12]
 800b140:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b142:	68f3      	ldr	r3, [r6, #12]
 800b144:	b183      	cbz	r3, 800b168 <_Balloc+0x50>
 800b146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b14e:	b9b8      	cbnz	r0, 800b180 <_Balloc+0x68>
 800b150:	2101      	movs	r1, #1
 800b152:	fa01 f605 	lsl.w	r6, r1, r5
 800b156:	1d72      	adds	r2, r6, #5
 800b158:	0092      	lsls	r2, r2, #2
 800b15a:	4620      	mov	r0, r4
 800b15c:	f000 fb5a 	bl	800b814 <_calloc_r>
 800b160:	b160      	cbz	r0, 800b17c <_Balloc+0x64>
 800b162:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b166:	e00e      	b.n	800b186 <_Balloc+0x6e>
 800b168:	2221      	movs	r2, #33	; 0x21
 800b16a:	2104      	movs	r1, #4
 800b16c:	4620      	mov	r0, r4
 800b16e:	f000 fb51 	bl	800b814 <_calloc_r>
 800b172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b174:	60f0      	str	r0, [r6, #12]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1e4      	bne.n	800b146 <_Balloc+0x2e>
 800b17c:	2000      	movs	r0, #0
 800b17e:	bd70      	pop	{r4, r5, r6, pc}
 800b180:	6802      	ldr	r2, [r0, #0]
 800b182:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b186:	2300      	movs	r3, #0
 800b188:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b18c:	e7f7      	b.n	800b17e <_Balloc+0x66>
 800b18e:	bf00      	nop
 800b190:	0800c33e 	.word	0x0800c33e
 800b194:	0800c3c5 	.word	0x0800c3c5

0800b198 <_Bfree>:
 800b198:	b570      	push	{r4, r5, r6, lr}
 800b19a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b19c:	4605      	mov	r5, r0
 800b19e:	460c      	mov	r4, r1
 800b1a0:	b976      	cbnz	r6, 800b1c0 <_Bfree+0x28>
 800b1a2:	2010      	movs	r0, #16
 800b1a4:	f7ff ffa4 	bl	800b0f0 <malloc>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	6268      	str	r0, [r5, #36]	; 0x24
 800b1ac:	b920      	cbnz	r0, 800b1b8 <_Bfree+0x20>
 800b1ae:	4b09      	ldr	r3, [pc, #36]	; (800b1d4 <_Bfree+0x3c>)
 800b1b0:	4809      	ldr	r0, [pc, #36]	; (800b1d8 <_Bfree+0x40>)
 800b1b2:	218a      	movs	r1, #138	; 0x8a
 800b1b4:	f000 fe56 	bl	800be64 <__assert_func>
 800b1b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1bc:	6006      	str	r6, [r0, #0]
 800b1be:	60c6      	str	r6, [r0, #12]
 800b1c0:	b13c      	cbz	r4, 800b1d2 <_Bfree+0x3a>
 800b1c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1c4:	6862      	ldr	r2, [r4, #4]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1cc:	6021      	str	r1, [r4, #0]
 800b1ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1d2:	bd70      	pop	{r4, r5, r6, pc}
 800b1d4:	0800c33e 	.word	0x0800c33e
 800b1d8:	0800c3c5 	.word	0x0800c3c5

0800b1dc <__multadd>:
 800b1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e0:	690e      	ldr	r6, [r1, #16]
 800b1e2:	4607      	mov	r7, r0
 800b1e4:	4698      	mov	r8, r3
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	f101 0014 	add.w	r0, r1, #20
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	6805      	ldr	r5, [r0, #0]
 800b1f0:	b2a9      	uxth	r1, r5
 800b1f2:	fb02 8101 	mla	r1, r2, r1, r8
 800b1f6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b1fa:	0c2d      	lsrs	r5, r5, #16
 800b1fc:	fb02 c505 	mla	r5, r2, r5, ip
 800b200:	b289      	uxth	r1, r1
 800b202:	3301      	adds	r3, #1
 800b204:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b208:	429e      	cmp	r6, r3
 800b20a:	f840 1b04 	str.w	r1, [r0], #4
 800b20e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b212:	dcec      	bgt.n	800b1ee <__multadd+0x12>
 800b214:	f1b8 0f00 	cmp.w	r8, #0
 800b218:	d022      	beq.n	800b260 <__multadd+0x84>
 800b21a:	68a3      	ldr	r3, [r4, #8]
 800b21c:	42b3      	cmp	r3, r6
 800b21e:	dc19      	bgt.n	800b254 <__multadd+0x78>
 800b220:	6861      	ldr	r1, [r4, #4]
 800b222:	4638      	mov	r0, r7
 800b224:	3101      	adds	r1, #1
 800b226:	f7ff ff77 	bl	800b118 <_Balloc>
 800b22a:	4605      	mov	r5, r0
 800b22c:	b928      	cbnz	r0, 800b23a <__multadd+0x5e>
 800b22e:	4602      	mov	r2, r0
 800b230:	4b0d      	ldr	r3, [pc, #52]	; (800b268 <__multadd+0x8c>)
 800b232:	480e      	ldr	r0, [pc, #56]	; (800b26c <__multadd+0x90>)
 800b234:	21b5      	movs	r1, #181	; 0xb5
 800b236:	f000 fe15 	bl	800be64 <__assert_func>
 800b23a:	6922      	ldr	r2, [r4, #16]
 800b23c:	3202      	adds	r2, #2
 800b23e:	f104 010c 	add.w	r1, r4, #12
 800b242:	0092      	lsls	r2, r2, #2
 800b244:	300c      	adds	r0, #12
 800b246:	f7fe f8ec 	bl	8009422 <memcpy>
 800b24a:	4621      	mov	r1, r4
 800b24c:	4638      	mov	r0, r7
 800b24e:	f7ff ffa3 	bl	800b198 <_Bfree>
 800b252:	462c      	mov	r4, r5
 800b254:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b258:	3601      	adds	r6, #1
 800b25a:	f8c3 8014 	str.w	r8, [r3, #20]
 800b25e:	6126      	str	r6, [r4, #16]
 800b260:	4620      	mov	r0, r4
 800b262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b266:	bf00      	nop
 800b268:	0800c3b4 	.word	0x0800c3b4
 800b26c:	0800c3c5 	.word	0x0800c3c5

0800b270 <__hi0bits>:
 800b270:	0c03      	lsrs	r3, r0, #16
 800b272:	041b      	lsls	r3, r3, #16
 800b274:	b9d3      	cbnz	r3, 800b2ac <__hi0bits+0x3c>
 800b276:	0400      	lsls	r0, r0, #16
 800b278:	2310      	movs	r3, #16
 800b27a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b27e:	bf04      	itt	eq
 800b280:	0200      	lsleq	r0, r0, #8
 800b282:	3308      	addeq	r3, #8
 800b284:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b288:	bf04      	itt	eq
 800b28a:	0100      	lsleq	r0, r0, #4
 800b28c:	3304      	addeq	r3, #4
 800b28e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b292:	bf04      	itt	eq
 800b294:	0080      	lsleq	r0, r0, #2
 800b296:	3302      	addeq	r3, #2
 800b298:	2800      	cmp	r0, #0
 800b29a:	db05      	blt.n	800b2a8 <__hi0bits+0x38>
 800b29c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b2a0:	f103 0301 	add.w	r3, r3, #1
 800b2a4:	bf08      	it	eq
 800b2a6:	2320      	moveq	r3, #32
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	4770      	bx	lr
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	e7e4      	b.n	800b27a <__hi0bits+0xa>

0800b2b0 <__lo0bits>:
 800b2b0:	6803      	ldr	r3, [r0, #0]
 800b2b2:	f013 0207 	ands.w	r2, r3, #7
 800b2b6:	4601      	mov	r1, r0
 800b2b8:	d00b      	beq.n	800b2d2 <__lo0bits+0x22>
 800b2ba:	07da      	lsls	r2, r3, #31
 800b2bc:	d424      	bmi.n	800b308 <__lo0bits+0x58>
 800b2be:	0798      	lsls	r0, r3, #30
 800b2c0:	bf49      	itett	mi
 800b2c2:	085b      	lsrmi	r3, r3, #1
 800b2c4:	089b      	lsrpl	r3, r3, #2
 800b2c6:	2001      	movmi	r0, #1
 800b2c8:	600b      	strmi	r3, [r1, #0]
 800b2ca:	bf5c      	itt	pl
 800b2cc:	600b      	strpl	r3, [r1, #0]
 800b2ce:	2002      	movpl	r0, #2
 800b2d0:	4770      	bx	lr
 800b2d2:	b298      	uxth	r0, r3
 800b2d4:	b9b0      	cbnz	r0, 800b304 <__lo0bits+0x54>
 800b2d6:	0c1b      	lsrs	r3, r3, #16
 800b2d8:	2010      	movs	r0, #16
 800b2da:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b2de:	bf04      	itt	eq
 800b2e0:	0a1b      	lsreq	r3, r3, #8
 800b2e2:	3008      	addeq	r0, #8
 800b2e4:	071a      	lsls	r2, r3, #28
 800b2e6:	bf04      	itt	eq
 800b2e8:	091b      	lsreq	r3, r3, #4
 800b2ea:	3004      	addeq	r0, #4
 800b2ec:	079a      	lsls	r2, r3, #30
 800b2ee:	bf04      	itt	eq
 800b2f0:	089b      	lsreq	r3, r3, #2
 800b2f2:	3002      	addeq	r0, #2
 800b2f4:	07da      	lsls	r2, r3, #31
 800b2f6:	d403      	bmi.n	800b300 <__lo0bits+0x50>
 800b2f8:	085b      	lsrs	r3, r3, #1
 800b2fa:	f100 0001 	add.w	r0, r0, #1
 800b2fe:	d005      	beq.n	800b30c <__lo0bits+0x5c>
 800b300:	600b      	str	r3, [r1, #0]
 800b302:	4770      	bx	lr
 800b304:	4610      	mov	r0, r2
 800b306:	e7e8      	b.n	800b2da <__lo0bits+0x2a>
 800b308:	2000      	movs	r0, #0
 800b30a:	4770      	bx	lr
 800b30c:	2020      	movs	r0, #32
 800b30e:	4770      	bx	lr

0800b310 <__i2b>:
 800b310:	b510      	push	{r4, lr}
 800b312:	460c      	mov	r4, r1
 800b314:	2101      	movs	r1, #1
 800b316:	f7ff feff 	bl	800b118 <_Balloc>
 800b31a:	4602      	mov	r2, r0
 800b31c:	b928      	cbnz	r0, 800b32a <__i2b+0x1a>
 800b31e:	4b05      	ldr	r3, [pc, #20]	; (800b334 <__i2b+0x24>)
 800b320:	4805      	ldr	r0, [pc, #20]	; (800b338 <__i2b+0x28>)
 800b322:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b326:	f000 fd9d 	bl	800be64 <__assert_func>
 800b32a:	2301      	movs	r3, #1
 800b32c:	6144      	str	r4, [r0, #20]
 800b32e:	6103      	str	r3, [r0, #16]
 800b330:	bd10      	pop	{r4, pc}
 800b332:	bf00      	nop
 800b334:	0800c3b4 	.word	0x0800c3b4
 800b338:	0800c3c5 	.word	0x0800c3c5

0800b33c <__multiply>:
 800b33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b340:	4614      	mov	r4, r2
 800b342:	690a      	ldr	r2, [r1, #16]
 800b344:	6923      	ldr	r3, [r4, #16]
 800b346:	429a      	cmp	r2, r3
 800b348:	bfb8      	it	lt
 800b34a:	460b      	movlt	r3, r1
 800b34c:	460d      	mov	r5, r1
 800b34e:	bfbc      	itt	lt
 800b350:	4625      	movlt	r5, r4
 800b352:	461c      	movlt	r4, r3
 800b354:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b358:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b35c:	68ab      	ldr	r3, [r5, #8]
 800b35e:	6869      	ldr	r1, [r5, #4]
 800b360:	eb0a 0709 	add.w	r7, sl, r9
 800b364:	42bb      	cmp	r3, r7
 800b366:	b085      	sub	sp, #20
 800b368:	bfb8      	it	lt
 800b36a:	3101      	addlt	r1, #1
 800b36c:	f7ff fed4 	bl	800b118 <_Balloc>
 800b370:	b930      	cbnz	r0, 800b380 <__multiply+0x44>
 800b372:	4602      	mov	r2, r0
 800b374:	4b42      	ldr	r3, [pc, #264]	; (800b480 <__multiply+0x144>)
 800b376:	4843      	ldr	r0, [pc, #268]	; (800b484 <__multiply+0x148>)
 800b378:	f240 115d 	movw	r1, #349	; 0x15d
 800b37c:	f000 fd72 	bl	800be64 <__assert_func>
 800b380:	f100 0614 	add.w	r6, r0, #20
 800b384:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b388:	4633      	mov	r3, r6
 800b38a:	2200      	movs	r2, #0
 800b38c:	4543      	cmp	r3, r8
 800b38e:	d31e      	bcc.n	800b3ce <__multiply+0x92>
 800b390:	f105 0c14 	add.w	ip, r5, #20
 800b394:	f104 0314 	add.w	r3, r4, #20
 800b398:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b39c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b3a0:	9202      	str	r2, [sp, #8]
 800b3a2:	ebac 0205 	sub.w	r2, ip, r5
 800b3a6:	3a15      	subs	r2, #21
 800b3a8:	f022 0203 	bic.w	r2, r2, #3
 800b3ac:	3204      	adds	r2, #4
 800b3ae:	f105 0115 	add.w	r1, r5, #21
 800b3b2:	458c      	cmp	ip, r1
 800b3b4:	bf38      	it	cc
 800b3b6:	2204      	movcc	r2, #4
 800b3b8:	9201      	str	r2, [sp, #4]
 800b3ba:	9a02      	ldr	r2, [sp, #8]
 800b3bc:	9303      	str	r3, [sp, #12]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d808      	bhi.n	800b3d4 <__multiply+0x98>
 800b3c2:	2f00      	cmp	r7, #0
 800b3c4:	dc55      	bgt.n	800b472 <__multiply+0x136>
 800b3c6:	6107      	str	r7, [r0, #16]
 800b3c8:	b005      	add	sp, #20
 800b3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ce:	f843 2b04 	str.w	r2, [r3], #4
 800b3d2:	e7db      	b.n	800b38c <__multiply+0x50>
 800b3d4:	f8b3 a000 	ldrh.w	sl, [r3]
 800b3d8:	f1ba 0f00 	cmp.w	sl, #0
 800b3dc:	d020      	beq.n	800b420 <__multiply+0xe4>
 800b3de:	f105 0e14 	add.w	lr, r5, #20
 800b3e2:	46b1      	mov	r9, r6
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b3ea:	f8d9 b000 	ldr.w	fp, [r9]
 800b3ee:	b2a1      	uxth	r1, r4
 800b3f0:	fa1f fb8b 	uxth.w	fp, fp
 800b3f4:	fb0a b101 	mla	r1, sl, r1, fp
 800b3f8:	4411      	add	r1, r2
 800b3fa:	f8d9 2000 	ldr.w	r2, [r9]
 800b3fe:	0c24      	lsrs	r4, r4, #16
 800b400:	0c12      	lsrs	r2, r2, #16
 800b402:	fb0a 2404 	mla	r4, sl, r4, r2
 800b406:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b40a:	b289      	uxth	r1, r1
 800b40c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b410:	45f4      	cmp	ip, lr
 800b412:	f849 1b04 	str.w	r1, [r9], #4
 800b416:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b41a:	d8e4      	bhi.n	800b3e6 <__multiply+0xaa>
 800b41c:	9901      	ldr	r1, [sp, #4]
 800b41e:	5072      	str	r2, [r6, r1]
 800b420:	9a03      	ldr	r2, [sp, #12]
 800b422:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b426:	3304      	adds	r3, #4
 800b428:	f1b9 0f00 	cmp.w	r9, #0
 800b42c:	d01f      	beq.n	800b46e <__multiply+0x132>
 800b42e:	6834      	ldr	r4, [r6, #0]
 800b430:	f105 0114 	add.w	r1, r5, #20
 800b434:	46b6      	mov	lr, r6
 800b436:	f04f 0a00 	mov.w	sl, #0
 800b43a:	880a      	ldrh	r2, [r1, #0]
 800b43c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b440:	fb09 b202 	mla	r2, r9, r2, fp
 800b444:	4492      	add	sl, r2
 800b446:	b2a4      	uxth	r4, r4
 800b448:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b44c:	f84e 4b04 	str.w	r4, [lr], #4
 800b450:	f851 4b04 	ldr.w	r4, [r1], #4
 800b454:	f8be 2000 	ldrh.w	r2, [lr]
 800b458:	0c24      	lsrs	r4, r4, #16
 800b45a:	fb09 2404 	mla	r4, r9, r4, r2
 800b45e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b462:	458c      	cmp	ip, r1
 800b464:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b468:	d8e7      	bhi.n	800b43a <__multiply+0xfe>
 800b46a:	9a01      	ldr	r2, [sp, #4]
 800b46c:	50b4      	str	r4, [r6, r2]
 800b46e:	3604      	adds	r6, #4
 800b470:	e7a3      	b.n	800b3ba <__multiply+0x7e>
 800b472:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1a5      	bne.n	800b3c6 <__multiply+0x8a>
 800b47a:	3f01      	subs	r7, #1
 800b47c:	e7a1      	b.n	800b3c2 <__multiply+0x86>
 800b47e:	bf00      	nop
 800b480:	0800c3b4 	.word	0x0800c3b4
 800b484:	0800c3c5 	.word	0x0800c3c5

0800b488 <__pow5mult>:
 800b488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b48c:	4615      	mov	r5, r2
 800b48e:	f012 0203 	ands.w	r2, r2, #3
 800b492:	4606      	mov	r6, r0
 800b494:	460f      	mov	r7, r1
 800b496:	d007      	beq.n	800b4a8 <__pow5mult+0x20>
 800b498:	4c25      	ldr	r4, [pc, #148]	; (800b530 <__pow5mult+0xa8>)
 800b49a:	3a01      	subs	r2, #1
 800b49c:	2300      	movs	r3, #0
 800b49e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4a2:	f7ff fe9b 	bl	800b1dc <__multadd>
 800b4a6:	4607      	mov	r7, r0
 800b4a8:	10ad      	asrs	r5, r5, #2
 800b4aa:	d03d      	beq.n	800b528 <__pow5mult+0xa0>
 800b4ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b4ae:	b97c      	cbnz	r4, 800b4d0 <__pow5mult+0x48>
 800b4b0:	2010      	movs	r0, #16
 800b4b2:	f7ff fe1d 	bl	800b0f0 <malloc>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	6270      	str	r0, [r6, #36]	; 0x24
 800b4ba:	b928      	cbnz	r0, 800b4c8 <__pow5mult+0x40>
 800b4bc:	4b1d      	ldr	r3, [pc, #116]	; (800b534 <__pow5mult+0xac>)
 800b4be:	481e      	ldr	r0, [pc, #120]	; (800b538 <__pow5mult+0xb0>)
 800b4c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b4c4:	f000 fcce 	bl	800be64 <__assert_func>
 800b4c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4cc:	6004      	str	r4, [r0, #0]
 800b4ce:	60c4      	str	r4, [r0, #12]
 800b4d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b4d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4d8:	b94c      	cbnz	r4, 800b4ee <__pow5mult+0x66>
 800b4da:	f240 2171 	movw	r1, #625	; 0x271
 800b4de:	4630      	mov	r0, r6
 800b4e0:	f7ff ff16 	bl	800b310 <__i2b>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	6003      	str	r3, [r0, #0]
 800b4ee:	f04f 0900 	mov.w	r9, #0
 800b4f2:	07eb      	lsls	r3, r5, #31
 800b4f4:	d50a      	bpl.n	800b50c <__pow5mult+0x84>
 800b4f6:	4639      	mov	r1, r7
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	f7ff ff1e 	bl	800b33c <__multiply>
 800b500:	4639      	mov	r1, r7
 800b502:	4680      	mov	r8, r0
 800b504:	4630      	mov	r0, r6
 800b506:	f7ff fe47 	bl	800b198 <_Bfree>
 800b50a:	4647      	mov	r7, r8
 800b50c:	106d      	asrs	r5, r5, #1
 800b50e:	d00b      	beq.n	800b528 <__pow5mult+0xa0>
 800b510:	6820      	ldr	r0, [r4, #0]
 800b512:	b938      	cbnz	r0, 800b524 <__pow5mult+0x9c>
 800b514:	4622      	mov	r2, r4
 800b516:	4621      	mov	r1, r4
 800b518:	4630      	mov	r0, r6
 800b51a:	f7ff ff0f 	bl	800b33c <__multiply>
 800b51e:	6020      	str	r0, [r4, #0]
 800b520:	f8c0 9000 	str.w	r9, [r0]
 800b524:	4604      	mov	r4, r0
 800b526:	e7e4      	b.n	800b4f2 <__pow5mult+0x6a>
 800b528:	4638      	mov	r0, r7
 800b52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b52e:	bf00      	nop
 800b530:	0800c518 	.word	0x0800c518
 800b534:	0800c33e 	.word	0x0800c33e
 800b538:	0800c3c5 	.word	0x0800c3c5

0800b53c <__lshift>:
 800b53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b540:	460c      	mov	r4, r1
 800b542:	6849      	ldr	r1, [r1, #4]
 800b544:	6923      	ldr	r3, [r4, #16]
 800b546:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b54a:	68a3      	ldr	r3, [r4, #8]
 800b54c:	4607      	mov	r7, r0
 800b54e:	4691      	mov	r9, r2
 800b550:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b554:	f108 0601 	add.w	r6, r8, #1
 800b558:	42b3      	cmp	r3, r6
 800b55a:	db0b      	blt.n	800b574 <__lshift+0x38>
 800b55c:	4638      	mov	r0, r7
 800b55e:	f7ff fddb 	bl	800b118 <_Balloc>
 800b562:	4605      	mov	r5, r0
 800b564:	b948      	cbnz	r0, 800b57a <__lshift+0x3e>
 800b566:	4602      	mov	r2, r0
 800b568:	4b28      	ldr	r3, [pc, #160]	; (800b60c <__lshift+0xd0>)
 800b56a:	4829      	ldr	r0, [pc, #164]	; (800b610 <__lshift+0xd4>)
 800b56c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b570:	f000 fc78 	bl	800be64 <__assert_func>
 800b574:	3101      	adds	r1, #1
 800b576:	005b      	lsls	r3, r3, #1
 800b578:	e7ee      	b.n	800b558 <__lshift+0x1c>
 800b57a:	2300      	movs	r3, #0
 800b57c:	f100 0114 	add.w	r1, r0, #20
 800b580:	f100 0210 	add.w	r2, r0, #16
 800b584:	4618      	mov	r0, r3
 800b586:	4553      	cmp	r3, sl
 800b588:	db33      	blt.n	800b5f2 <__lshift+0xb6>
 800b58a:	6920      	ldr	r0, [r4, #16]
 800b58c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b590:	f104 0314 	add.w	r3, r4, #20
 800b594:	f019 091f 	ands.w	r9, r9, #31
 800b598:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b59c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b5a0:	d02b      	beq.n	800b5fa <__lshift+0xbe>
 800b5a2:	f1c9 0e20 	rsb	lr, r9, #32
 800b5a6:	468a      	mov	sl, r1
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	6818      	ldr	r0, [r3, #0]
 800b5ac:	fa00 f009 	lsl.w	r0, r0, r9
 800b5b0:	4302      	orrs	r2, r0
 800b5b2:	f84a 2b04 	str.w	r2, [sl], #4
 800b5b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ba:	459c      	cmp	ip, r3
 800b5bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b5c0:	d8f3      	bhi.n	800b5aa <__lshift+0x6e>
 800b5c2:	ebac 0304 	sub.w	r3, ip, r4
 800b5c6:	3b15      	subs	r3, #21
 800b5c8:	f023 0303 	bic.w	r3, r3, #3
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	f104 0015 	add.w	r0, r4, #21
 800b5d2:	4584      	cmp	ip, r0
 800b5d4:	bf38      	it	cc
 800b5d6:	2304      	movcc	r3, #4
 800b5d8:	50ca      	str	r2, [r1, r3]
 800b5da:	b10a      	cbz	r2, 800b5e0 <__lshift+0xa4>
 800b5dc:	f108 0602 	add.w	r6, r8, #2
 800b5e0:	3e01      	subs	r6, #1
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	612e      	str	r6, [r5, #16]
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	f7ff fdd6 	bl	800b198 <_Bfree>
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	e7c5      	b.n	800b586 <__lshift+0x4a>
 800b5fa:	3904      	subs	r1, #4
 800b5fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b600:	f841 2f04 	str.w	r2, [r1, #4]!
 800b604:	459c      	cmp	ip, r3
 800b606:	d8f9      	bhi.n	800b5fc <__lshift+0xc0>
 800b608:	e7ea      	b.n	800b5e0 <__lshift+0xa4>
 800b60a:	bf00      	nop
 800b60c:	0800c3b4 	.word	0x0800c3b4
 800b610:	0800c3c5 	.word	0x0800c3c5

0800b614 <__mcmp>:
 800b614:	b530      	push	{r4, r5, lr}
 800b616:	6902      	ldr	r2, [r0, #16]
 800b618:	690c      	ldr	r4, [r1, #16]
 800b61a:	1b12      	subs	r2, r2, r4
 800b61c:	d10e      	bne.n	800b63c <__mcmp+0x28>
 800b61e:	f100 0314 	add.w	r3, r0, #20
 800b622:	3114      	adds	r1, #20
 800b624:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b628:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b62c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b630:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b634:	42a5      	cmp	r5, r4
 800b636:	d003      	beq.n	800b640 <__mcmp+0x2c>
 800b638:	d305      	bcc.n	800b646 <__mcmp+0x32>
 800b63a:	2201      	movs	r2, #1
 800b63c:	4610      	mov	r0, r2
 800b63e:	bd30      	pop	{r4, r5, pc}
 800b640:	4283      	cmp	r3, r0
 800b642:	d3f3      	bcc.n	800b62c <__mcmp+0x18>
 800b644:	e7fa      	b.n	800b63c <__mcmp+0x28>
 800b646:	f04f 32ff 	mov.w	r2, #4294967295
 800b64a:	e7f7      	b.n	800b63c <__mcmp+0x28>

0800b64c <__mdiff>:
 800b64c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b650:	460c      	mov	r4, r1
 800b652:	4606      	mov	r6, r0
 800b654:	4611      	mov	r1, r2
 800b656:	4620      	mov	r0, r4
 800b658:	4617      	mov	r7, r2
 800b65a:	f7ff ffdb 	bl	800b614 <__mcmp>
 800b65e:	1e05      	subs	r5, r0, #0
 800b660:	d110      	bne.n	800b684 <__mdiff+0x38>
 800b662:	4629      	mov	r1, r5
 800b664:	4630      	mov	r0, r6
 800b666:	f7ff fd57 	bl	800b118 <_Balloc>
 800b66a:	b930      	cbnz	r0, 800b67a <__mdiff+0x2e>
 800b66c:	4b39      	ldr	r3, [pc, #228]	; (800b754 <__mdiff+0x108>)
 800b66e:	4602      	mov	r2, r0
 800b670:	f240 2132 	movw	r1, #562	; 0x232
 800b674:	4838      	ldr	r0, [pc, #224]	; (800b758 <__mdiff+0x10c>)
 800b676:	f000 fbf5 	bl	800be64 <__assert_func>
 800b67a:	2301      	movs	r3, #1
 800b67c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b684:	bfa4      	itt	ge
 800b686:	463b      	movge	r3, r7
 800b688:	4627      	movge	r7, r4
 800b68a:	4630      	mov	r0, r6
 800b68c:	6879      	ldr	r1, [r7, #4]
 800b68e:	bfa6      	itte	ge
 800b690:	461c      	movge	r4, r3
 800b692:	2500      	movge	r5, #0
 800b694:	2501      	movlt	r5, #1
 800b696:	f7ff fd3f 	bl	800b118 <_Balloc>
 800b69a:	b920      	cbnz	r0, 800b6a6 <__mdiff+0x5a>
 800b69c:	4b2d      	ldr	r3, [pc, #180]	; (800b754 <__mdiff+0x108>)
 800b69e:	4602      	mov	r2, r0
 800b6a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b6a4:	e7e6      	b.n	800b674 <__mdiff+0x28>
 800b6a6:	693e      	ldr	r6, [r7, #16]
 800b6a8:	60c5      	str	r5, [r0, #12]
 800b6aa:	6925      	ldr	r5, [r4, #16]
 800b6ac:	f107 0114 	add.w	r1, r7, #20
 800b6b0:	f104 0914 	add.w	r9, r4, #20
 800b6b4:	f100 0e14 	add.w	lr, r0, #20
 800b6b8:	f107 0210 	add.w	r2, r7, #16
 800b6bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b6c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b6c4:	46f2      	mov	sl, lr
 800b6c6:	2700      	movs	r7, #0
 800b6c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b6d0:	fa1f f883 	uxth.w	r8, r3
 800b6d4:	fa17 f78b 	uxtah	r7, r7, fp
 800b6d8:	0c1b      	lsrs	r3, r3, #16
 800b6da:	eba7 0808 	sub.w	r8, r7, r8
 800b6de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b6e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b6e6:	fa1f f888 	uxth.w	r8, r8
 800b6ea:	141f      	asrs	r7, r3, #16
 800b6ec:	454d      	cmp	r5, r9
 800b6ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b6f2:	f84a 3b04 	str.w	r3, [sl], #4
 800b6f6:	d8e7      	bhi.n	800b6c8 <__mdiff+0x7c>
 800b6f8:	1b2b      	subs	r3, r5, r4
 800b6fa:	3b15      	subs	r3, #21
 800b6fc:	f023 0303 	bic.w	r3, r3, #3
 800b700:	3304      	adds	r3, #4
 800b702:	3415      	adds	r4, #21
 800b704:	42a5      	cmp	r5, r4
 800b706:	bf38      	it	cc
 800b708:	2304      	movcc	r3, #4
 800b70a:	4419      	add	r1, r3
 800b70c:	4473      	add	r3, lr
 800b70e:	469e      	mov	lr, r3
 800b710:	460d      	mov	r5, r1
 800b712:	4565      	cmp	r5, ip
 800b714:	d30e      	bcc.n	800b734 <__mdiff+0xe8>
 800b716:	f10c 0203 	add.w	r2, ip, #3
 800b71a:	1a52      	subs	r2, r2, r1
 800b71c:	f022 0203 	bic.w	r2, r2, #3
 800b720:	3903      	subs	r1, #3
 800b722:	458c      	cmp	ip, r1
 800b724:	bf38      	it	cc
 800b726:	2200      	movcc	r2, #0
 800b728:	441a      	add	r2, r3
 800b72a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b72e:	b17b      	cbz	r3, 800b750 <__mdiff+0x104>
 800b730:	6106      	str	r6, [r0, #16]
 800b732:	e7a5      	b.n	800b680 <__mdiff+0x34>
 800b734:	f855 8b04 	ldr.w	r8, [r5], #4
 800b738:	fa17 f488 	uxtah	r4, r7, r8
 800b73c:	1422      	asrs	r2, r4, #16
 800b73e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b742:	b2a4      	uxth	r4, r4
 800b744:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b748:	f84e 4b04 	str.w	r4, [lr], #4
 800b74c:	1417      	asrs	r7, r2, #16
 800b74e:	e7e0      	b.n	800b712 <__mdiff+0xc6>
 800b750:	3e01      	subs	r6, #1
 800b752:	e7ea      	b.n	800b72a <__mdiff+0xde>
 800b754:	0800c3b4 	.word	0x0800c3b4
 800b758:	0800c3c5 	.word	0x0800c3c5

0800b75c <__d2b>:
 800b75c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b760:	4689      	mov	r9, r1
 800b762:	2101      	movs	r1, #1
 800b764:	ec57 6b10 	vmov	r6, r7, d0
 800b768:	4690      	mov	r8, r2
 800b76a:	f7ff fcd5 	bl	800b118 <_Balloc>
 800b76e:	4604      	mov	r4, r0
 800b770:	b930      	cbnz	r0, 800b780 <__d2b+0x24>
 800b772:	4602      	mov	r2, r0
 800b774:	4b25      	ldr	r3, [pc, #148]	; (800b80c <__d2b+0xb0>)
 800b776:	4826      	ldr	r0, [pc, #152]	; (800b810 <__d2b+0xb4>)
 800b778:	f240 310a 	movw	r1, #778	; 0x30a
 800b77c:	f000 fb72 	bl	800be64 <__assert_func>
 800b780:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b784:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b788:	bb35      	cbnz	r5, 800b7d8 <__d2b+0x7c>
 800b78a:	2e00      	cmp	r6, #0
 800b78c:	9301      	str	r3, [sp, #4]
 800b78e:	d028      	beq.n	800b7e2 <__d2b+0x86>
 800b790:	4668      	mov	r0, sp
 800b792:	9600      	str	r6, [sp, #0]
 800b794:	f7ff fd8c 	bl	800b2b0 <__lo0bits>
 800b798:	9900      	ldr	r1, [sp, #0]
 800b79a:	b300      	cbz	r0, 800b7de <__d2b+0x82>
 800b79c:	9a01      	ldr	r2, [sp, #4]
 800b79e:	f1c0 0320 	rsb	r3, r0, #32
 800b7a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a6:	430b      	orrs	r3, r1
 800b7a8:	40c2      	lsrs	r2, r0
 800b7aa:	6163      	str	r3, [r4, #20]
 800b7ac:	9201      	str	r2, [sp, #4]
 800b7ae:	9b01      	ldr	r3, [sp, #4]
 800b7b0:	61a3      	str	r3, [r4, #24]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	bf14      	ite	ne
 800b7b6:	2202      	movne	r2, #2
 800b7b8:	2201      	moveq	r2, #1
 800b7ba:	6122      	str	r2, [r4, #16]
 800b7bc:	b1d5      	cbz	r5, 800b7f4 <__d2b+0x98>
 800b7be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7c2:	4405      	add	r5, r0
 800b7c4:	f8c9 5000 	str.w	r5, [r9]
 800b7c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7cc:	f8c8 0000 	str.w	r0, [r8]
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	b003      	add	sp, #12
 800b7d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7dc:	e7d5      	b.n	800b78a <__d2b+0x2e>
 800b7de:	6161      	str	r1, [r4, #20]
 800b7e0:	e7e5      	b.n	800b7ae <__d2b+0x52>
 800b7e2:	a801      	add	r0, sp, #4
 800b7e4:	f7ff fd64 	bl	800b2b0 <__lo0bits>
 800b7e8:	9b01      	ldr	r3, [sp, #4]
 800b7ea:	6163      	str	r3, [r4, #20]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	6122      	str	r2, [r4, #16]
 800b7f0:	3020      	adds	r0, #32
 800b7f2:	e7e3      	b.n	800b7bc <__d2b+0x60>
 800b7f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b7f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7fc:	f8c9 0000 	str.w	r0, [r9]
 800b800:	6918      	ldr	r0, [r3, #16]
 800b802:	f7ff fd35 	bl	800b270 <__hi0bits>
 800b806:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b80a:	e7df      	b.n	800b7cc <__d2b+0x70>
 800b80c:	0800c3b4 	.word	0x0800c3b4
 800b810:	0800c3c5 	.word	0x0800c3c5

0800b814 <_calloc_r>:
 800b814:	b513      	push	{r0, r1, r4, lr}
 800b816:	434a      	muls	r2, r1
 800b818:	4611      	mov	r1, r2
 800b81a:	9201      	str	r2, [sp, #4]
 800b81c:	f7fd fe18 	bl	8009450 <_malloc_r>
 800b820:	4604      	mov	r4, r0
 800b822:	b118      	cbz	r0, 800b82c <_calloc_r+0x18>
 800b824:	9a01      	ldr	r2, [sp, #4]
 800b826:	2100      	movs	r1, #0
 800b828:	f7fd fe09 	bl	800943e <memset>
 800b82c:	4620      	mov	r0, r4
 800b82e:	b002      	add	sp, #8
 800b830:	bd10      	pop	{r4, pc}
	...

0800b834 <_free_r>:
 800b834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b836:	2900      	cmp	r1, #0
 800b838:	d048      	beq.n	800b8cc <_free_r+0x98>
 800b83a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b83e:	9001      	str	r0, [sp, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	f1a1 0404 	sub.w	r4, r1, #4
 800b846:	bfb8      	it	lt
 800b848:	18e4      	addlt	r4, r4, r3
 800b84a:	f7ff fc59 	bl	800b100 <__malloc_lock>
 800b84e:	4a20      	ldr	r2, [pc, #128]	; (800b8d0 <_free_r+0x9c>)
 800b850:	9801      	ldr	r0, [sp, #4]
 800b852:	6813      	ldr	r3, [r2, #0]
 800b854:	4615      	mov	r5, r2
 800b856:	b933      	cbnz	r3, 800b866 <_free_r+0x32>
 800b858:	6063      	str	r3, [r4, #4]
 800b85a:	6014      	str	r4, [r2, #0]
 800b85c:	b003      	add	sp, #12
 800b85e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b862:	f7ff bc53 	b.w	800b10c <__malloc_unlock>
 800b866:	42a3      	cmp	r3, r4
 800b868:	d90b      	bls.n	800b882 <_free_r+0x4e>
 800b86a:	6821      	ldr	r1, [r4, #0]
 800b86c:	1862      	adds	r2, r4, r1
 800b86e:	4293      	cmp	r3, r2
 800b870:	bf04      	itt	eq
 800b872:	681a      	ldreq	r2, [r3, #0]
 800b874:	685b      	ldreq	r3, [r3, #4]
 800b876:	6063      	str	r3, [r4, #4]
 800b878:	bf04      	itt	eq
 800b87a:	1852      	addeq	r2, r2, r1
 800b87c:	6022      	streq	r2, [r4, #0]
 800b87e:	602c      	str	r4, [r5, #0]
 800b880:	e7ec      	b.n	800b85c <_free_r+0x28>
 800b882:	461a      	mov	r2, r3
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	b10b      	cbz	r3, 800b88c <_free_r+0x58>
 800b888:	42a3      	cmp	r3, r4
 800b88a:	d9fa      	bls.n	800b882 <_free_r+0x4e>
 800b88c:	6811      	ldr	r1, [r2, #0]
 800b88e:	1855      	adds	r5, r2, r1
 800b890:	42a5      	cmp	r5, r4
 800b892:	d10b      	bne.n	800b8ac <_free_r+0x78>
 800b894:	6824      	ldr	r4, [r4, #0]
 800b896:	4421      	add	r1, r4
 800b898:	1854      	adds	r4, r2, r1
 800b89a:	42a3      	cmp	r3, r4
 800b89c:	6011      	str	r1, [r2, #0]
 800b89e:	d1dd      	bne.n	800b85c <_free_r+0x28>
 800b8a0:	681c      	ldr	r4, [r3, #0]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	6053      	str	r3, [r2, #4]
 800b8a6:	4421      	add	r1, r4
 800b8a8:	6011      	str	r1, [r2, #0]
 800b8aa:	e7d7      	b.n	800b85c <_free_r+0x28>
 800b8ac:	d902      	bls.n	800b8b4 <_free_r+0x80>
 800b8ae:	230c      	movs	r3, #12
 800b8b0:	6003      	str	r3, [r0, #0]
 800b8b2:	e7d3      	b.n	800b85c <_free_r+0x28>
 800b8b4:	6825      	ldr	r5, [r4, #0]
 800b8b6:	1961      	adds	r1, r4, r5
 800b8b8:	428b      	cmp	r3, r1
 800b8ba:	bf04      	itt	eq
 800b8bc:	6819      	ldreq	r1, [r3, #0]
 800b8be:	685b      	ldreq	r3, [r3, #4]
 800b8c0:	6063      	str	r3, [r4, #4]
 800b8c2:	bf04      	itt	eq
 800b8c4:	1949      	addeq	r1, r1, r5
 800b8c6:	6021      	streq	r1, [r4, #0]
 800b8c8:	6054      	str	r4, [r2, #4]
 800b8ca:	e7c7      	b.n	800b85c <_free_r+0x28>
 800b8cc:	b003      	add	sp, #12
 800b8ce:	bd30      	pop	{r4, r5, pc}
 800b8d0:	20004be0 	.word	0x20004be0

0800b8d4 <__ssputs_r>:
 800b8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8d8:	688e      	ldr	r6, [r1, #8]
 800b8da:	429e      	cmp	r6, r3
 800b8dc:	4682      	mov	sl, r0
 800b8de:	460c      	mov	r4, r1
 800b8e0:	4690      	mov	r8, r2
 800b8e2:	461f      	mov	r7, r3
 800b8e4:	d838      	bhi.n	800b958 <__ssputs_r+0x84>
 800b8e6:	898a      	ldrh	r2, [r1, #12]
 800b8e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8ec:	d032      	beq.n	800b954 <__ssputs_r+0x80>
 800b8ee:	6825      	ldr	r5, [r4, #0]
 800b8f0:	6909      	ldr	r1, [r1, #16]
 800b8f2:	eba5 0901 	sub.w	r9, r5, r1
 800b8f6:	6965      	ldr	r5, [r4, #20]
 800b8f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b900:	3301      	adds	r3, #1
 800b902:	444b      	add	r3, r9
 800b904:	106d      	asrs	r5, r5, #1
 800b906:	429d      	cmp	r5, r3
 800b908:	bf38      	it	cc
 800b90a:	461d      	movcc	r5, r3
 800b90c:	0553      	lsls	r3, r2, #21
 800b90e:	d531      	bpl.n	800b974 <__ssputs_r+0xa0>
 800b910:	4629      	mov	r1, r5
 800b912:	f7fd fd9d 	bl	8009450 <_malloc_r>
 800b916:	4606      	mov	r6, r0
 800b918:	b950      	cbnz	r0, 800b930 <__ssputs_r+0x5c>
 800b91a:	230c      	movs	r3, #12
 800b91c:	f8ca 3000 	str.w	r3, [sl]
 800b920:	89a3      	ldrh	r3, [r4, #12]
 800b922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b926:	81a3      	strh	r3, [r4, #12]
 800b928:	f04f 30ff 	mov.w	r0, #4294967295
 800b92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b930:	6921      	ldr	r1, [r4, #16]
 800b932:	464a      	mov	r2, r9
 800b934:	f7fd fd75 	bl	8009422 <memcpy>
 800b938:	89a3      	ldrh	r3, [r4, #12]
 800b93a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b93e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b942:	81a3      	strh	r3, [r4, #12]
 800b944:	6126      	str	r6, [r4, #16]
 800b946:	6165      	str	r5, [r4, #20]
 800b948:	444e      	add	r6, r9
 800b94a:	eba5 0509 	sub.w	r5, r5, r9
 800b94e:	6026      	str	r6, [r4, #0]
 800b950:	60a5      	str	r5, [r4, #8]
 800b952:	463e      	mov	r6, r7
 800b954:	42be      	cmp	r6, r7
 800b956:	d900      	bls.n	800b95a <__ssputs_r+0x86>
 800b958:	463e      	mov	r6, r7
 800b95a:	4632      	mov	r2, r6
 800b95c:	6820      	ldr	r0, [r4, #0]
 800b95e:	4641      	mov	r1, r8
 800b960:	f000 fae4 	bl	800bf2c <memmove>
 800b964:	68a3      	ldr	r3, [r4, #8]
 800b966:	6822      	ldr	r2, [r4, #0]
 800b968:	1b9b      	subs	r3, r3, r6
 800b96a:	4432      	add	r2, r6
 800b96c:	60a3      	str	r3, [r4, #8]
 800b96e:	6022      	str	r2, [r4, #0]
 800b970:	2000      	movs	r0, #0
 800b972:	e7db      	b.n	800b92c <__ssputs_r+0x58>
 800b974:	462a      	mov	r2, r5
 800b976:	f000 faf3 	bl	800bf60 <_realloc_r>
 800b97a:	4606      	mov	r6, r0
 800b97c:	2800      	cmp	r0, #0
 800b97e:	d1e1      	bne.n	800b944 <__ssputs_r+0x70>
 800b980:	6921      	ldr	r1, [r4, #16]
 800b982:	4650      	mov	r0, sl
 800b984:	f7ff ff56 	bl	800b834 <_free_r>
 800b988:	e7c7      	b.n	800b91a <__ssputs_r+0x46>
	...

0800b98c <_svfiprintf_r>:
 800b98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b990:	4698      	mov	r8, r3
 800b992:	898b      	ldrh	r3, [r1, #12]
 800b994:	061b      	lsls	r3, r3, #24
 800b996:	b09d      	sub	sp, #116	; 0x74
 800b998:	4607      	mov	r7, r0
 800b99a:	460d      	mov	r5, r1
 800b99c:	4614      	mov	r4, r2
 800b99e:	d50e      	bpl.n	800b9be <_svfiprintf_r+0x32>
 800b9a0:	690b      	ldr	r3, [r1, #16]
 800b9a2:	b963      	cbnz	r3, 800b9be <_svfiprintf_r+0x32>
 800b9a4:	2140      	movs	r1, #64	; 0x40
 800b9a6:	f7fd fd53 	bl	8009450 <_malloc_r>
 800b9aa:	6028      	str	r0, [r5, #0]
 800b9ac:	6128      	str	r0, [r5, #16]
 800b9ae:	b920      	cbnz	r0, 800b9ba <_svfiprintf_r+0x2e>
 800b9b0:	230c      	movs	r3, #12
 800b9b2:	603b      	str	r3, [r7, #0]
 800b9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b8:	e0d1      	b.n	800bb5e <_svfiprintf_r+0x1d2>
 800b9ba:	2340      	movs	r3, #64	; 0x40
 800b9bc:	616b      	str	r3, [r5, #20]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	9309      	str	r3, [sp, #36]	; 0x24
 800b9c2:	2320      	movs	r3, #32
 800b9c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9cc:	2330      	movs	r3, #48	; 0x30
 800b9ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb78 <_svfiprintf_r+0x1ec>
 800b9d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9d6:	f04f 0901 	mov.w	r9, #1
 800b9da:	4623      	mov	r3, r4
 800b9dc:	469a      	mov	sl, r3
 800b9de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9e2:	b10a      	cbz	r2, 800b9e8 <_svfiprintf_r+0x5c>
 800b9e4:	2a25      	cmp	r2, #37	; 0x25
 800b9e6:	d1f9      	bne.n	800b9dc <_svfiprintf_r+0x50>
 800b9e8:	ebba 0b04 	subs.w	fp, sl, r4
 800b9ec:	d00b      	beq.n	800ba06 <_svfiprintf_r+0x7a>
 800b9ee:	465b      	mov	r3, fp
 800b9f0:	4622      	mov	r2, r4
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	4638      	mov	r0, r7
 800b9f6:	f7ff ff6d 	bl	800b8d4 <__ssputs_r>
 800b9fa:	3001      	adds	r0, #1
 800b9fc:	f000 80aa 	beq.w	800bb54 <_svfiprintf_r+0x1c8>
 800ba00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba02:	445a      	add	r2, fp
 800ba04:	9209      	str	r2, [sp, #36]	; 0x24
 800ba06:	f89a 3000 	ldrb.w	r3, [sl]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f000 80a2 	beq.w	800bb54 <_svfiprintf_r+0x1c8>
 800ba10:	2300      	movs	r3, #0
 800ba12:	f04f 32ff 	mov.w	r2, #4294967295
 800ba16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba1a:	f10a 0a01 	add.w	sl, sl, #1
 800ba1e:	9304      	str	r3, [sp, #16]
 800ba20:	9307      	str	r3, [sp, #28]
 800ba22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba26:	931a      	str	r3, [sp, #104]	; 0x68
 800ba28:	4654      	mov	r4, sl
 800ba2a:	2205      	movs	r2, #5
 800ba2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba30:	4851      	ldr	r0, [pc, #324]	; (800bb78 <_svfiprintf_r+0x1ec>)
 800ba32:	f7f4 fbdd 	bl	80001f0 <memchr>
 800ba36:	9a04      	ldr	r2, [sp, #16]
 800ba38:	b9d8      	cbnz	r0, 800ba72 <_svfiprintf_r+0xe6>
 800ba3a:	06d0      	lsls	r0, r2, #27
 800ba3c:	bf44      	itt	mi
 800ba3e:	2320      	movmi	r3, #32
 800ba40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba44:	0711      	lsls	r1, r2, #28
 800ba46:	bf44      	itt	mi
 800ba48:	232b      	movmi	r3, #43	; 0x2b
 800ba4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba52:	2b2a      	cmp	r3, #42	; 0x2a
 800ba54:	d015      	beq.n	800ba82 <_svfiprintf_r+0xf6>
 800ba56:	9a07      	ldr	r2, [sp, #28]
 800ba58:	4654      	mov	r4, sl
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	f04f 0c0a 	mov.w	ip, #10
 800ba60:	4621      	mov	r1, r4
 800ba62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba66:	3b30      	subs	r3, #48	; 0x30
 800ba68:	2b09      	cmp	r3, #9
 800ba6a:	d94e      	bls.n	800bb0a <_svfiprintf_r+0x17e>
 800ba6c:	b1b0      	cbz	r0, 800ba9c <_svfiprintf_r+0x110>
 800ba6e:	9207      	str	r2, [sp, #28]
 800ba70:	e014      	b.n	800ba9c <_svfiprintf_r+0x110>
 800ba72:	eba0 0308 	sub.w	r3, r0, r8
 800ba76:	fa09 f303 	lsl.w	r3, r9, r3
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	9304      	str	r3, [sp, #16]
 800ba7e:	46a2      	mov	sl, r4
 800ba80:	e7d2      	b.n	800ba28 <_svfiprintf_r+0x9c>
 800ba82:	9b03      	ldr	r3, [sp, #12]
 800ba84:	1d19      	adds	r1, r3, #4
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	9103      	str	r1, [sp, #12]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	bfbb      	ittet	lt
 800ba8e:	425b      	neglt	r3, r3
 800ba90:	f042 0202 	orrlt.w	r2, r2, #2
 800ba94:	9307      	strge	r3, [sp, #28]
 800ba96:	9307      	strlt	r3, [sp, #28]
 800ba98:	bfb8      	it	lt
 800ba9a:	9204      	strlt	r2, [sp, #16]
 800ba9c:	7823      	ldrb	r3, [r4, #0]
 800ba9e:	2b2e      	cmp	r3, #46	; 0x2e
 800baa0:	d10c      	bne.n	800babc <_svfiprintf_r+0x130>
 800baa2:	7863      	ldrb	r3, [r4, #1]
 800baa4:	2b2a      	cmp	r3, #42	; 0x2a
 800baa6:	d135      	bne.n	800bb14 <_svfiprintf_r+0x188>
 800baa8:	9b03      	ldr	r3, [sp, #12]
 800baaa:	1d1a      	adds	r2, r3, #4
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	9203      	str	r2, [sp, #12]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	bfb8      	it	lt
 800bab4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bab8:	3402      	adds	r4, #2
 800baba:	9305      	str	r3, [sp, #20]
 800babc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb88 <_svfiprintf_r+0x1fc>
 800bac0:	7821      	ldrb	r1, [r4, #0]
 800bac2:	2203      	movs	r2, #3
 800bac4:	4650      	mov	r0, sl
 800bac6:	f7f4 fb93 	bl	80001f0 <memchr>
 800baca:	b140      	cbz	r0, 800bade <_svfiprintf_r+0x152>
 800bacc:	2340      	movs	r3, #64	; 0x40
 800bace:	eba0 000a 	sub.w	r0, r0, sl
 800bad2:	fa03 f000 	lsl.w	r0, r3, r0
 800bad6:	9b04      	ldr	r3, [sp, #16]
 800bad8:	4303      	orrs	r3, r0
 800bada:	3401      	adds	r4, #1
 800badc:	9304      	str	r3, [sp, #16]
 800bade:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae2:	4826      	ldr	r0, [pc, #152]	; (800bb7c <_svfiprintf_r+0x1f0>)
 800bae4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bae8:	2206      	movs	r2, #6
 800baea:	f7f4 fb81 	bl	80001f0 <memchr>
 800baee:	2800      	cmp	r0, #0
 800baf0:	d038      	beq.n	800bb64 <_svfiprintf_r+0x1d8>
 800baf2:	4b23      	ldr	r3, [pc, #140]	; (800bb80 <_svfiprintf_r+0x1f4>)
 800baf4:	bb1b      	cbnz	r3, 800bb3e <_svfiprintf_r+0x1b2>
 800baf6:	9b03      	ldr	r3, [sp, #12]
 800baf8:	3307      	adds	r3, #7
 800bafa:	f023 0307 	bic.w	r3, r3, #7
 800bafe:	3308      	adds	r3, #8
 800bb00:	9303      	str	r3, [sp, #12]
 800bb02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb04:	4433      	add	r3, r6
 800bb06:	9309      	str	r3, [sp, #36]	; 0x24
 800bb08:	e767      	b.n	800b9da <_svfiprintf_r+0x4e>
 800bb0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb0e:	460c      	mov	r4, r1
 800bb10:	2001      	movs	r0, #1
 800bb12:	e7a5      	b.n	800ba60 <_svfiprintf_r+0xd4>
 800bb14:	2300      	movs	r3, #0
 800bb16:	3401      	adds	r4, #1
 800bb18:	9305      	str	r3, [sp, #20]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	f04f 0c0a 	mov.w	ip, #10
 800bb20:	4620      	mov	r0, r4
 800bb22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb26:	3a30      	subs	r2, #48	; 0x30
 800bb28:	2a09      	cmp	r2, #9
 800bb2a:	d903      	bls.n	800bb34 <_svfiprintf_r+0x1a8>
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d0c5      	beq.n	800babc <_svfiprintf_r+0x130>
 800bb30:	9105      	str	r1, [sp, #20]
 800bb32:	e7c3      	b.n	800babc <_svfiprintf_r+0x130>
 800bb34:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb38:	4604      	mov	r4, r0
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e7f0      	b.n	800bb20 <_svfiprintf_r+0x194>
 800bb3e:	ab03      	add	r3, sp, #12
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	462a      	mov	r2, r5
 800bb44:	4b0f      	ldr	r3, [pc, #60]	; (800bb84 <_svfiprintf_r+0x1f8>)
 800bb46:	a904      	add	r1, sp, #16
 800bb48:	4638      	mov	r0, r7
 800bb4a:	f7fd fd7b 	bl	8009644 <_printf_float>
 800bb4e:	1c42      	adds	r2, r0, #1
 800bb50:	4606      	mov	r6, r0
 800bb52:	d1d6      	bne.n	800bb02 <_svfiprintf_r+0x176>
 800bb54:	89ab      	ldrh	r3, [r5, #12]
 800bb56:	065b      	lsls	r3, r3, #25
 800bb58:	f53f af2c 	bmi.w	800b9b4 <_svfiprintf_r+0x28>
 800bb5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb5e:	b01d      	add	sp, #116	; 0x74
 800bb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb64:	ab03      	add	r3, sp, #12
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	462a      	mov	r2, r5
 800bb6a:	4b06      	ldr	r3, [pc, #24]	; (800bb84 <_svfiprintf_r+0x1f8>)
 800bb6c:	a904      	add	r1, sp, #16
 800bb6e:	4638      	mov	r0, r7
 800bb70:	f7fe f80c 	bl	8009b8c <_printf_i>
 800bb74:	e7eb      	b.n	800bb4e <_svfiprintf_r+0x1c2>
 800bb76:	bf00      	nop
 800bb78:	0800c524 	.word	0x0800c524
 800bb7c:	0800c52e 	.word	0x0800c52e
 800bb80:	08009645 	.word	0x08009645
 800bb84:	0800b8d5 	.word	0x0800b8d5
 800bb88:	0800c52a 	.word	0x0800c52a

0800bb8c <__sfputc_r>:
 800bb8c:	6893      	ldr	r3, [r2, #8]
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	b410      	push	{r4}
 800bb94:	6093      	str	r3, [r2, #8]
 800bb96:	da08      	bge.n	800bbaa <__sfputc_r+0x1e>
 800bb98:	6994      	ldr	r4, [r2, #24]
 800bb9a:	42a3      	cmp	r3, r4
 800bb9c:	db01      	blt.n	800bba2 <__sfputc_r+0x16>
 800bb9e:	290a      	cmp	r1, #10
 800bba0:	d103      	bne.n	800bbaa <__sfputc_r+0x1e>
 800bba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bba6:	f7fe ba0d 	b.w	8009fc4 <__swbuf_r>
 800bbaa:	6813      	ldr	r3, [r2, #0]
 800bbac:	1c58      	adds	r0, r3, #1
 800bbae:	6010      	str	r0, [r2, #0]
 800bbb0:	7019      	strb	r1, [r3, #0]
 800bbb2:	4608      	mov	r0, r1
 800bbb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <__sfputs_r>:
 800bbba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbbc:	4606      	mov	r6, r0
 800bbbe:	460f      	mov	r7, r1
 800bbc0:	4614      	mov	r4, r2
 800bbc2:	18d5      	adds	r5, r2, r3
 800bbc4:	42ac      	cmp	r4, r5
 800bbc6:	d101      	bne.n	800bbcc <__sfputs_r+0x12>
 800bbc8:	2000      	movs	r0, #0
 800bbca:	e007      	b.n	800bbdc <__sfputs_r+0x22>
 800bbcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd0:	463a      	mov	r2, r7
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	f7ff ffda 	bl	800bb8c <__sfputc_r>
 800bbd8:	1c43      	adds	r3, r0, #1
 800bbda:	d1f3      	bne.n	800bbc4 <__sfputs_r+0xa>
 800bbdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbe0 <_vfiprintf_r>:
 800bbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe4:	460d      	mov	r5, r1
 800bbe6:	b09d      	sub	sp, #116	; 0x74
 800bbe8:	4614      	mov	r4, r2
 800bbea:	4698      	mov	r8, r3
 800bbec:	4606      	mov	r6, r0
 800bbee:	b118      	cbz	r0, 800bbf8 <_vfiprintf_r+0x18>
 800bbf0:	6983      	ldr	r3, [r0, #24]
 800bbf2:	b90b      	cbnz	r3, 800bbf8 <_vfiprintf_r+0x18>
 800bbf4:	f7fd fb50 	bl	8009298 <__sinit>
 800bbf8:	4b89      	ldr	r3, [pc, #548]	; (800be20 <_vfiprintf_r+0x240>)
 800bbfa:	429d      	cmp	r5, r3
 800bbfc:	d11b      	bne.n	800bc36 <_vfiprintf_r+0x56>
 800bbfe:	6875      	ldr	r5, [r6, #4]
 800bc00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc02:	07d9      	lsls	r1, r3, #31
 800bc04:	d405      	bmi.n	800bc12 <_vfiprintf_r+0x32>
 800bc06:	89ab      	ldrh	r3, [r5, #12]
 800bc08:	059a      	lsls	r2, r3, #22
 800bc0a:	d402      	bmi.n	800bc12 <_vfiprintf_r+0x32>
 800bc0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc0e:	f7fd fc06 	bl	800941e <__retarget_lock_acquire_recursive>
 800bc12:	89ab      	ldrh	r3, [r5, #12]
 800bc14:	071b      	lsls	r3, r3, #28
 800bc16:	d501      	bpl.n	800bc1c <_vfiprintf_r+0x3c>
 800bc18:	692b      	ldr	r3, [r5, #16]
 800bc1a:	b9eb      	cbnz	r3, 800bc58 <_vfiprintf_r+0x78>
 800bc1c:	4629      	mov	r1, r5
 800bc1e:	4630      	mov	r0, r6
 800bc20:	f7fe fa34 	bl	800a08c <__swsetup_r>
 800bc24:	b1c0      	cbz	r0, 800bc58 <_vfiprintf_r+0x78>
 800bc26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc28:	07dc      	lsls	r4, r3, #31
 800bc2a:	d50e      	bpl.n	800bc4a <_vfiprintf_r+0x6a>
 800bc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc30:	b01d      	add	sp, #116	; 0x74
 800bc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc36:	4b7b      	ldr	r3, [pc, #492]	; (800be24 <_vfiprintf_r+0x244>)
 800bc38:	429d      	cmp	r5, r3
 800bc3a:	d101      	bne.n	800bc40 <_vfiprintf_r+0x60>
 800bc3c:	68b5      	ldr	r5, [r6, #8]
 800bc3e:	e7df      	b.n	800bc00 <_vfiprintf_r+0x20>
 800bc40:	4b79      	ldr	r3, [pc, #484]	; (800be28 <_vfiprintf_r+0x248>)
 800bc42:	429d      	cmp	r5, r3
 800bc44:	bf08      	it	eq
 800bc46:	68f5      	ldreq	r5, [r6, #12]
 800bc48:	e7da      	b.n	800bc00 <_vfiprintf_r+0x20>
 800bc4a:	89ab      	ldrh	r3, [r5, #12]
 800bc4c:	0598      	lsls	r0, r3, #22
 800bc4e:	d4ed      	bmi.n	800bc2c <_vfiprintf_r+0x4c>
 800bc50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc52:	f7fd fbe5 	bl	8009420 <__retarget_lock_release_recursive>
 800bc56:	e7e9      	b.n	800bc2c <_vfiprintf_r+0x4c>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc5c:	2320      	movs	r3, #32
 800bc5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc62:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc66:	2330      	movs	r3, #48	; 0x30
 800bc68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be2c <_vfiprintf_r+0x24c>
 800bc6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc70:	f04f 0901 	mov.w	r9, #1
 800bc74:	4623      	mov	r3, r4
 800bc76:	469a      	mov	sl, r3
 800bc78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc7c:	b10a      	cbz	r2, 800bc82 <_vfiprintf_r+0xa2>
 800bc7e:	2a25      	cmp	r2, #37	; 0x25
 800bc80:	d1f9      	bne.n	800bc76 <_vfiprintf_r+0x96>
 800bc82:	ebba 0b04 	subs.w	fp, sl, r4
 800bc86:	d00b      	beq.n	800bca0 <_vfiprintf_r+0xc0>
 800bc88:	465b      	mov	r3, fp
 800bc8a:	4622      	mov	r2, r4
 800bc8c:	4629      	mov	r1, r5
 800bc8e:	4630      	mov	r0, r6
 800bc90:	f7ff ff93 	bl	800bbba <__sfputs_r>
 800bc94:	3001      	adds	r0, #1
 800bc96:	f000 80aa 	beq.w	800bdee <_vfiprintf_r+0x20e>
 800bc9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc9c:	445a      	add	r2, fp
 800bc9e:	9209      	str	r2, [sp, #36]	; 0x24
 800bca0:	f89a 3000 	ldrb.w	r3, [sl]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f000 80a2 	beq.w	800bdee <_vfiprintf_r+0x20e>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcb4:	f10a 0a01 	add.w	sl, sl, #1
 800bcb8:	9304      	str	r3, [sp, #16]
 800bcba:	9307      	str	r3, [sp, #28]
 800bcbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcc0:	931a      	str	r3, [sp, #104]	; 0x68
 800bcc2:	4654      	mov	r4, sl
 800bcc4:	2205      	movs	r2, #5
 800bcc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcca:	4858      	ldr	r0, [pc, #352]	; (800be2c <_vfiprintf_r+0x24c>)
 800bccc:	f7f4 fa90 	bl	80001f0 <memchr>
 800bcd0:	9a04      	ldr	r2, [sp, #16]
 800bcd2:	b9d8      	cbnz	r0, 800bd0c <_vfiprintf_r+0x12c>
 800bcd4:	06d1      	lsls	r1, r2, #27
 800bcd6:	bf44      	itt	mi
 800bcd8:	2320      	movmi	r3, #32
 800bcda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcde:	0713      	lsls	r3, r2, #28
 800bce0:	bf44      	itt	mi
 800bce2:	232b      	movmi	r3, #43	; 0x2b
 800bce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bce8:	f89a 3000 	ldrb.w	r3, [sl]
 800bcec:	2b2a      	cmp	r3, #42	; 0x2a
 800bcee:	d015      	beq.n	800bd1c <_vfiprintf_r+0x13c>
 800bcf0:	9a07      	ldr	r2, [sp, #28]
 800bcf2:	4654      	mov	r4, sl
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	f04f 0c0a 	mov.w	ip, #10
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd00:	3b30      	subs	r3, #48	; 0x30
 800bd02:	2b09      	cmp	r3, #9
 800bd04:	d94e      	bls.n	800bda4 <_vfiprintf_r+0x1c4>
 800bd06:	b1b0      	cbz	r0, 800bd36 <_vfiprintf_r+0x156>
 800bd08:	9207      	str	r2, [sp, #28]
 800bd0a:	e014      	b.n	800bd36 <_vfiprintf_r+0x156>
 800bd0c:	eba0 0308 	sub.w	r3, r0, r8
 800bd10:	fa09 f303 	lsl.w	r3, r9, r3
 800bd14:	4313      	orrs	r3, r2
 800bd16:	9304      	str	r3, [sp, #16]
 800bd18:	46a2      	mov	sl, r4
 800bd1a:	e7d2      	b.n	800bcc2 <_vfiprintf_r+0xe2>
 800bd1c:	9b03      	ldr	r3, [sp, #12]
 800bd1e:	1d19      	adds	r1, r3, #4
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	9103      	str	r1, [sp, #12]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	bfbb      	ittet	lt
 800bd28:	425b      	neglt	r3, r3
 800bd2a:	f042 0202 	orrlt.w	r2, r2, #2
 800bd2e:	9307      	strge	r3, [sp, #28]
 800bd30:	9307      	strlt	r3, [sp, #28]
 800bd32:	bfb8      	it	lt
 800bd34:	9204      	strlt	r2, [sp, #16]
 800bd36:	7823      	ldrb	r3, [r4, #0]
 800bd38:	2b2e      	cmp	r3, #46	; 0x2e
 800bd3a:	d10c      	bne.n	800bd56 <_vfiprintf_r+0x176>
 800bd3c:	7863      	ldrb	r3, [r4, #1]
 800bd3e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd40:	d135      	bne.n	800bdae <_vfiprintf_r+0x1ce>
 800bd42:	9b03      	ldr	r3, [sp, #12]
 800bd44:	1d1a      	adds	r2, r3, #4
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	9203      	str	r2, [sp, #12]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	bfb8      	it	lt
 800bd4e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd52:	3402      	adds	r4, #2
 800bd54:	9305      	str	r3, [sp, #20]
 800bd56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be3c <_vfiprintf_r+0x25c>
 800bd5a:	7821      	ldrb	r1, [r4, #0]
 800bd5c:	2203      	movs	r2, #3
 800bd5e:	4650      	mov	r0, sl
 800bd60:	f7f4 fa46 	bl	80001f0 <memchr>
 800bd64:	b140      	cbz	r0, 800bd78 <_vfiprintf_r+0x198>
 800bd66:	2340      	movs	r3, #64	; 0x40
 800bd68:	eba0 000a 	sub.w	r0, r0, sl
 800bd6c:	fa03 f000 	lsl.w	r0, r3, r0
 800bd70:	9b04      	ldr	r3, [sp, #16]
 800bd72:	4303      	orrs	r3, r0
 800bd74:	3401      	adds	r4, #1
 800bd76:	9304      	str	r3, [sp, #16]
 800bd78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd7c:	482c      	ldr	r0, [pc, #176]	; (800be30 <_vfiprintf_r+0x250>)
 800bd7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd82:	2206      	movs	r2, #6
 800bd84:	f7f4 fa34 	bl	80001f0 <memchr>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d03f      	beq.n	800be0c <_vfiprintf_r+0x22c>
 800bd8c:	4b29      	ldr	r3, [pc, #164]	; (800be34 <_vfiprintf_r+0x254>)
 800bd8e:	bb1b      	cbnz	r3, 800bdd8 <_vfiprintf_r+0x1f8>
 800bd90:	9b03      	ldr	r3, [sp, #12]
 800bd92:	3307      	adds	r3, #7
 800bd94:	f023 0307 	bic.w	r3, r3, #7
 800bd98:	3308      	adds	r3, #8
 800bd9a:	9303      	str	r3, [sp, #12]
 800bd9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd9e:	443b      	add	r3, r7
 800bda0:	9309      	str	r3, [sp, #36]	; 0x24
 800bda2:	e767      	b.n	800bc74 <_vfiprintf_r+0x94>
 800bda4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bda8:	460c      	mov	r4, r1
 800bdaa:	2001      	movs	r0, #1
 800bdac:	e7a5      	b.n	800bcfa <_vfiprintf_r+0x11a>
 800bdae:	2300      	movs	r3, #0
 800bdb0:	3401      	adds	r4, #1
 800bdb2:	9305      	str	r3, [sp, #20]
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	f04f 0c0a 	mov.w	ip, #10
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdc0:	3a30      	subs	r2, #48	; 0x30
 800bdc2:	2a09      	cmp	r2, #9
 800bdc4:	d903      	bls.n	800bdce <_vfiprintf_r+0x1ee>
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d0c5      	beq.n	800bd56 <_vfiprintf_r+0x176>
 800bdca:	9105      	str	r1, [sp, #20]
 800bdcc:	e7c3      	b.n	800bd56 <_vfiprintf_r+0x176>
 800bdce:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	e7f0      	b.n	800bdba <_vfiprintf_r+0x1da>
 800bdd8:	ab03      	add	r3, sp, #12
 800bdda:	9300      	str	r3, [sp, #0]
 800bddc:	462a      	mov	r2, r5
 800bdde:	4b16      	ldr	r3, [pc, #88]	; (800be38 <_vfiprintf_r+0x258>)
 800bde0:	a904      	add	r1, sp, #16
 800bde2:	4630      	mov	r0, r6
 800bde4:	f7fd fc2e 	bl	8009644 <_printf_float>
 800bde8:	4607      	mov	r7, r0
 800bdea:	1c78      	adds	r0, r7, #1
 800bdec:	d1d6      	bne.n	800bd9c <_vfiprintf_r+0x1bc>
 800bdee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdf0:	07d9      	lsls	r1, r3, #31
 800bdf2:	d405      	bmi.n	800be00 <_vfiprintf_r+0x220>
 800bdf4:	89ab      	ldrh	r3, [r5, #12]
 800bdf6:	059a      	lsls	r2, r3, #22
 800bdf8:	d402      	bmi.n	800be00 <_vfiprintf_r+0x220>
 800bdfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdfc:	f7fd fb10 	bl	8009420 <__retarget_lock_release_recursive>
 800be00:	89ab      	ldrh	r3, [r5, #12]
 800be02:	065b      	lsls	r3, r3, #25
 800be04:	f53f af12 	bmi.w	800bc2c <_vfiprintf_r+0x4c>
 800be08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be0a:	e711      	b.n	800bc30 <_vfiprintf_r+0x50>
 800be0c:	ab03      	add	r3, sp, #12
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	462a      	mov	r2, r5
 800be12:	4b09      	ldr	r3, [pc, #36]	; (800be38 <_vfiprintf_r+0x258>)
 800be14:	a904      	add	r1, sp, #16
 800be16:	4630      	mov	r0, r6
 800be18:	f7fd feb8 	bl	8009b8c <_printf_i>
 800be1c:	e7e4      	b.n	800bde8 <_vfiprintf_r+0x208>
 800be1e:	bf00      	nop
 800be20:	0800c1b8 	.word	0x0800c1b8
 800be24:	0800c1d8 	.word	0x0800c1d8
 800be28:	0800c198 	.word	0x0800c198
 800be2c:	0800c524 	.word	0x0800c524
 800be30:	0800c52e 	.word	0x0800c52e
 800be34:	08009645 	.word	0x08009645
 800be38:	0800bbbb 	.word	0x0800bbbb
 800be3c:	0800c52a 	.word	0x0800c52a

0800be40 <_read_r>:
 800be40:	b538      	push	{r3, r4, r5, lr}
 800be42:	4d07      	ldr	r5, [pc, #28]	; (800be60 <_read_r+0x20>)
 800be44:	4604      	mov	r4, r0
 800be46:	4608      	mov	r0, r1
 800be48:	4611      	mov	r1, r2
 800be4a:	2200      	movs	r2, #0
 800be4c:	602a      	str	r2, [r5, #0]
 800be4e:	461a      	mov	r2, r3
 800be50:	f7f6 fb8c 	bl	800256c <_read>
 800be54:	1c43      	adds	r3, r0, #1
 800be56:	d102      	bne.n	800be5e <_read_r+0x1e>
 800be58:	682b      	ldr	r3, [r5, #0]
 800be5a:	b103      	cbz	r3, 800be5e <_read_r+0x1e>
 800be5c:	6023      	str	r3, [r4, #0]
 800be5e:	bd38      	pop	{r3, r4, r5, pc}
 800be60:	2000528c 	.word	0x2000528c

0800be64 <__assert_func>:
 800be64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be66:	4614      	mov	r4, r2
 800be68:	461a      	mov	r2, r3
 800be6a:	4b09      	ldr	r3, [pc, #36]	; (800be90 <__assert_func+0x2c>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4605      	mov	r5, r0
 800be70:	68d8      	ldr	r0, [r3, #12]
 800be72:	b14c      	cbz	r4, 800be88 <__assert_func+0x24>
 800be74:	4b07      	ldr	r3, [pc, #28]	; (800be94 <__assert_func+0x30>)
 800be76:	9100      	str	r1, [sp, #0]
 800be78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be7c:	4906      	ldr	r1, [pc, #24]	; (800be98 <__assert_func+0x34>)
 800be7e:	462b      	mov	r3, r5
 800be80:	f000 f80e 	bl	800bea0 <fiprintf>
 800be84:	f000 f89f 	bl	800bfc6 <abort>
 800be88:	4b04      	ldr	r3, [pc, #16]	; (800be9c <__assert_func+0x38>)
 800be8a:	461c      	mov	r4, r3
 800be8c:	e7f3      	b.n	800be76 <__assert_func+0x12>
 800be8e:	bf00      	nop
 800be90:	20000018 	.word	0x20000018
 800be94:	0800c535 	.word	0x0800c535
 800be98:	0800c542 	.word	0x0800c542
 800be9c:	0800c570 	.word	0x0800c570

0800bea0 <fiprintf>:
 800bea0:	b40e      	push	{r1, r2, r3}
 800bea2:	b503      	push	{r0, r1, lr}
 800bea4:	4601      	mov	r1, r0
 800bea6:	ab03      	add	r3, sp, #12
 800bea8:	4805      	ldr	r0, [pc, #20]	; (800bec0 <fiprintf+0x20>)
 800beaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800beae:	6800      	ldr	r0, [r0, #0]
 800beb0:	9301      	str	r3, [sp, #4]
 800beb2:	f7ff fe95 	bl	800bbe0 <_vfiprintf_r>
 800beb6:	b002      	add	sp, #8
 800beb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bebc:	b003      	add	sp, #12
 800bebe:	4770      	bx	lr
 800bec0:	20000018 	.word	0x20000018

0800bec4 <_fstat_r>:
 800bec4:	b538      	push	{r3, r4, r5, lr}
 800bec6:	4d07      	ldr	r5, [pc, #28]	; (800bee4 <_fstat_r+0x20>)
 800bec8:	2300      	movs	r3, #0
 800beca:	4604      	mov	r4, r0
 800becc:	4608      	mov	r0, r1
 800bece:	4611      	mov	r1, r2
 800bed0:	602b      	str	r3, [r5, #0]
 800bed2:	f7f6 fb90 	bl	80025f6 <_fstat>
 800bed6:	1c43      	adds	r3, r0, #1
 800bed8:	d102      	bne.n	800bee0 <_fstat_r+0x1c>
 800beda:	682b      	ldr	r3, [r5, #0]
 800bedc:	b103      	cbz	r3, 800bee0 <_fstat_r+0x1c>
 800bede:	6023      	str	r3, [r4, #0]
 800bee0:	bd38      	pop	{r3, r4, r5, pc}
 800bee2:	bf00      	nop
 800bee4:	2000528c 	.word	0x2000528c

0800bee8 <_isatty_r>:
 800bee8:	b538      	push	{r3, r4, r5, lr}
 800beea:	4d06      	ldr	r5, [pc, #24]	; (800bf04 <_isatty_r+0x1c>)
 800beec:	2300      	movs	r3, #0
 800beee:	4604      	mov	r4, r0
 800bef0:	4608      	mov	r0, r1
 800bef2:	602b      	str	r3, [r5, #0]
 800bef4:	f7f6 fb8f 	bl	8002616 <_isatty>
 800bef8:	1c43      	adds	r3, r0, #1
 800befa:	d102      	bne.n	800bf02 <_isatty_r+0x1a>
 800befc:	682b      	ldr	r3, [r5, #0]
 800befe:	b103      	cbz	r3, 800bf02 <_isatty_r+0x1a>
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	bd38      	pop	{r3, r4, r5, pc}
 800bf04:	2000528c 	.word	0x2000528c

0800bf08 <__ascii_mbtowc>:
 800bf08:	b082      	sub	sp, #8
 800bf0a:	b901      	cbnz	r1, 800bf0e <__ascii_mbtowc+0x6>
 800bf0c:	a901      	add	r1, sp, #4
 800bf0e:	b142      	cbz	r2, 800bf22 <__ascii_mbtowc+0x1a>
 800bf10:	b14b      	cbz	r3, 800bf26 <__ascii_mbtowc+0x1e>
 800bf12:	7813      	ldrb	r3, [r2, #0]
 800bf14:	600b      	str	r3, [r1, #0]
 800bf16:	7812      	ldrb	r2, [r2, #0]
 800bf18:	1e10      	subs	r0, r2, #0
 800bf1a:	bf18      	it	ne
 800bf1c:	2001      	movne	r0, #1
 800bf1e:	b002      	add	sp, #8
 800bf20:	4770      	bx	lr
 800bf22:	4610      	mov	r0, r2
 800bf24:	e7fb      	b.n	800bf1e <__ascii_mbtowc+0x16>
 800bf26:	f06f 0001 	mvn.w	r0, #1
 800bf2a:	e7f8      	b.n	800bf1e <__ascii_mbtowc+0x16>

0800bf2c <memmove>:
 800bf2c:	4288      	cmp	r0, r1
 800bf2e:	b510      	push	{r4, lr}
 800bf30:	eb01 0402 	add.w	r4, r1, r2
 800bf34:	d902      	bls.n	800bf3c <memmove+0x10>
 800bf36:	4284      	cmp	r4, r0
 800bf38:	4623      	mov	r3, r4
 800bf3a:	d807      	bhi.n	800bf4c <memmove+0x20>
 800bf3c:	1e43      	subs	r3, r0, #1
 800bf3e:	42a1      	cmp	r1, r4
 800bf40:	d008      	beq.n	800bf54 <memmove+0x28>
 800bf42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf4a:	e7f8      	b.n	800bf3e <memmove+0x12>
 800bf4c:	4402      	add	r2, r0
 800bf4e:	4601      	mov	r1, r0
 800bf50:	428a      	cmp	r2, r1
 800bf52:	d100      	bne.n	800bf56 <memmove+0x2a>
 800bf54:	bd10      	pop	{r4, pc}
 800bf56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf5e:	e7f7      	b.n	800bf50 <memmove+0x24>

0800bf60 <_realloc_r>:
 800bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf62:	4607      	mov	r7, r0
 800bf64:	4614      	mov	r4, r2
 800bf66:	460e      	mov	r6, r1
 800bf68:	b921      	cbnz	r1, 800bf74 <_realloc_r+0x14>
 800bf6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bf6e:	4611      	mov	r1, r2
 800bf70:	f7fd ba6e 	b.w	8009450 <_malloc_r>
 800bf74:	b922      	cbnz	r2, 800bf80 <_realloc_r+0x20>
 800bf76:	f7ff fc5d 	bl	800b834 <_free_r>
 800bf7a:	4625      	mov	r5, r4
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf80:	f000 f828 	bl	800bfd4 <_malloc_usable_size_r>
 800bf84:	42a0      	cmp	r0, r4
 800bf86:	d20f      	bcs.n	800bfa8 <_realloc_r+0x48>
 800bf88:	4621      	mov	r1, r4
 800bf8a:	4638      	mov	r0, r7
 800bf8c:	f7fd fa60 	bl	8009450 <_malloc_r>
 800bf90:	4605      	mov	r5, r0
 800bf92:	2800      	cmp	r0, #0
 800bf94:	d0f2      	beq.n	800bf7c <_realloc_r+0x1c>
 800bf96:	4631      	mov	r1, r6
 800bf98:	4622      	mov	r2, r4
 800bf9a:	f7fd fa42 	bl	8009422 <memcpy>
 800bf9e:	4631      	mov	r1, r6
 800bfa0:	4638      	mov	r0, r7
 800bfa2:	f7ff fc47 	bl	800b834 <_free_r>
 800bfa6:	e7e9      	b.n	800bf7c <_realloc_r+0x1c>
 800bfa8:	4635      	mov	r5, r6
 800bfaa:	e7e7      	b.n	800bf7c <_realloc_r+0x1c>

0800bfac <__ascii_wctomb>:
 800bfac:	b149      	cbz	r1, 800bfc2 <__ascii_wctomb+0x16>
 800bfae:	2aff      	cmp	r2, #255	; 0xff
 800bfb0:	bf85      	ittet	hi
 800bfb2:	238a      	movhi	r3, #138	; 0x8a
 800bfb4:	6003      	strhi	r3, [r0, #0]
 800bfb6:	700a      	strbls	r2, [r1, #0]
 800bfb8:	f04f 30ff 	movhi.w	r0, #4294967295
 800bfbc:	bf98      	it	ls
 800bfbe:	2001      	movls	r0, #1
 800bfc0:	4770      	bx	lr
 800bfc2:	4608      	mov	r0, r1
 800bfc4:	4770      	bx	lr

0800bfc6 <abort>:
 800bfc6:	b508      	push	{r3, lr}
 800bfc8:	2006      	movs	r0, #6
 800bfca:	f000 f833 	bl	800c034 <raise>
 800bfce:	2001      	movs	r0, #1
 800bfd0:	f7f6 fac2 	bl	8002558 <_exit>

0800bfd4 <_malloc_usable_size_r>:
 800bfd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfd8:	1f18      	subs	r0, r3, #4
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	bfbc      	itt	lt
 800bfde:	580b      	ldrlt	r3, [r1, r0]
 800bfe0:	18c0      	addlt	r0, r0, r3
 800bfe2:	4770      	bx	lr

0800bfe4 <_raise_r>:
 800bfe4:	291f      	cmp	r1, #31
 800bfe6:	b538      	push	{r3, r4, r5, lr}
 800bfe8:	4604      	mov	r4, r0
 800bfea:	460d      	mov	r5, r1
 800bfec:	d904      	bls.n	800bff8 <_raise_r+0x14>
 800bfee:	2316      	movs	r3, #22
 800bff0:	6003      	str	r3, [r0, #0]
 800bff2:	f04f 30ff 	mov.w	r0, #4294967295
 800bff6:	bd38      	pop	{r3, r4, r5, pc}
 800bff8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bffa:	b112      	cbz	r2, 800c002 <_raise_r+0x1e>
 800bffc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c000:	b94b      	cbnz	r3, 800c016 <_raise_r+0x32>
 800c002:	4620      	mov	r0, r4
 800c004:	f000 f830 	bl	800c068 <_getpid_r>
 800c008:	462a      	mov	r2, r5
 800c00a:	4601      	mov	r1, r0
 800c00c:	4620      	mov	r0, r4
 800c00e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c012:	f000 b817 	b.w	800c044 <_kill_r>
 800c016:	2b01      	cmp	r3, #1
 800c018:	d00a      	beq.n	800c030 <_raise_r+0x4c>
 800c01a:	1c59      	adds	r1, r3, #1
 800c01c:	d103      	bne.n	800c026 <_raise_r+0x42>
 800c01e:	2316      	movs	r3, #22
 800c020:	6003      	str	r3, [r0, #0]
 800c022:	2001      	movs	r0, #1
 800c024:	e7e7      	b.n	800bff6 <_raise_r+0x12>
 800c026:	2400      	movs	r4, #0
 800c028:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c02c:	4628      	mov	r0, r5
 800c02e:	4798      	blx	r3
 800c030:	2000      	movs	r0, #0
 800c032:	e7e0      	b.n	800bff6 <_raise_r+0x12>

0800c034 <raise>:
 800c034:	4b02      	ldr	r3, [pc, #8]	; (800c040 <raise+0xc>)
 800c036:	4601      	mov	r1, r0
 800c038:	6818      	ldr	r0, [r3, #0]
 800c03a:	f7ff bfd3 	b.w	800bfe4 <_raise_r>
 800c03e:	bf00      	nop
 800c040:	20000018 	.word	0x20000018

0800c044 <_kill_r>:
 800c044:	b538      	push	{r3, r4, r5, lr}
 800c046:	4d07      	ldr	r5, [pc, #28]	; (800c064 <_kill_r+0x20>)
 800c048:	2300      	movs	r3, #0
 800c04a:	4604      	mov	r4, r0
 800c04c:	4608      	mov	r0, r1
 800c04e:	4611      	mov	r1, r2
 800c050:	602b      	str	r3, [r5, #0]
 800c052:	f7f6 fa71 	bl	8002538 <_kill>
 800c056:	1c43      	adds	r3, r0, #1
 800c058:	d102      	bne.n	800c060 <_kill_r+0x1c>
 800c05a:	682b      	ldr	r3, [r5, #0]
 800c05c:	b103      	cbz	r3, 800c060 <_kill_r+0x1c>
 800c05e:	6023      	str	r3, [r4, #0]
 800c060:	bd38      	pop	{r3, r4, r5, pc}
 800c062:	bf00      	nop
 800c064:	2000528c 	.word	0x2000528c

0800c068 <_getpid_r>:
 800c068:	f7f6 ba5e 	b.w	8002528 <_getpid>

0800c06c <_init>:
 800c06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06e:	bf00      	nop
 800c070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c072:	bc08      	pop	{r3}
 800c074:	469e      	mov	lr, r3
 800c076:	4770      	bx	lr

0800c078 <_fini>:
 800c078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07a:	bf00      	nop
 800c07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c07e:	bc08      	pop	{r3}
 800c080:	469e      	mov	lr, r3
 800c082:	4770      	bx	lr
